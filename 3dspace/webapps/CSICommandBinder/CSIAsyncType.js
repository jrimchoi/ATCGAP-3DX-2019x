if(typeof define==="undefined"){define=function(e,d,f){CSIAsyncType=f(Parameters,ErrorReport);define=undefined}}define("DS/CSICommandBinder/CSIAsyncType",["DS/CSICommandBinder/CSIParameters","DS/CSICommandBinder/CSIErrorReport"],function(j,g){var l={};var a=undefined;var d={};var b={};var i={};var e=function(){for(var m in i){if(!i[m]){return true}}return false};var f=function(m){this.nodeId_=m;this.storedFunctionCallList_=[];this.complete_=false};f.prototype.execute=function(){this.complete_=true;this.storedFunctionCallList_.forEach(function(m){if(!m.execute()){return g.error("Error while retrieving active types from server - cannot call a function because some of its parameters are still incomplete")}});this.storedFunctionCallList_=[];return true};var c=function(n){var m=d[n];if(m!==undefined){return m}m=new f(n);d[n]=m;return m};function h(n){for(var m=0;m<n.length;++m){if(n[m] instanceof j&&n[m].isIncomplete()){return true}}return false}l.storeFunction=function(n){var m=c(n.nodeId);if(m.complete_||!h(n.parameters)){return false}m.storedFunctionCallList_.push(new k(n));return true};var k=function(m){this.nodeId_=m.nodeId;this.fct_=m.fct;this.parameters_=m.parameters;this.handler_=m.handler;this.iterative_=m.iterative;this.functionRequest_=m.functionRequest};k.prototype.execute=function(){for(var m=0;m<this.parameters_.length;++m){if(this.parameters_[m] instanceof j&&!this.parameters_[m].complete()){var o="NA";var n=0;if(this.fct_ instanceof a.Private.RemoteFunction){o=this.fct_.functionHeader.readString("name");n=this.fct_.functionHeader.readInt32("version")}else{if(this.fct_ instanceof a.Private.Node){o=this.parameters_.readString("name");n=this.parameters_.readInt32("version")}else{o=this.fct_.impl_.messageHeader_.readString("command");n=this.fct_.impl_.messageHeader_.readInt32("version")}}return g.error("Error: could call <"+o+"> version <"+n+"> because of parameters requiring serialization function for type(s): "+this.parameters_[m].getIncompleteRequiredTypes())}}if(this.fct_ instanceof a.Private.RemoteFunction){this.fct_.callWithHandler({destinationNodeId:this.nodeId_,parameters:this.parameters_[0]},this.handler_);return true}else{if(this.fct_ instanceof a.Private.Node){this.fct_.callInternal(this.functionRequest_,this.parameters_[0],this.handler_);return true}else{if(this.fct_ instanceof a.Private.Request){this.fct_.send(this.parameters_[0],this.parameters_[1],this.parameters_[2]);return true}else{if(this.fct_ instanceof a.Private.IterativeRequest){if(this.iterative===0){this.fct_.begin(this.parameters[0])}else{if(this.iterative===1){this.fct_.send(this.parameters[0])}else{if(this.iterative===2){this.fct_.end(this.parameters[0])}}}return true}}}}return false};l.getActiveTypes=function(m,n,p,q){if(a===undefined){a=m}if(i[q]!==undefined){return}i[q]=false;j.prototype.checkForIncomplete_=true;var o=function(x){var w=[];var v=x.readParametersArray("types","CSIDeclarativeTypeDefinition");if(v instanceof Array){var t=[];var u=undefined;for(var y=0;y<v.length;++y){var s=v[y];if(!(s instanceof j)||s.typeName_!=="CSIDeclarativeTypeDefinition"){return g.error("Error while retrieving active types from server - invalid parameters")}var z=s.toJSObject();if(z.implementation===undefined){u=undefined}else{u=z.implementation.jsModule}if(z.name===undefined){g.error("Error while retrieving active types from server - invalid type definition")}else{if(j.prototype.typeDefinitions_[z.name]===undefined){j.prototype.typeDefinitions_[z.name]=z;if(u!==undefined&&u.length>0){var r=b[u];if(r===undefined){t.push(u);w.push(z.name)}else{if(!r.declareType(m,z.name)){g.error("Error while retrieving active types from server - module.declareType(CSI, "+z.name+") did not return true : "+u)}}}}}}require(t,function(){if(w.length!==arguments.length){return g.error("Error while retrieving active types from server - require callback with invalid arguments")}for(var B=0;B<arguments.length;++B){var A=w[B];var C=arguments[B];var D=j.prototype.typeDefinitions_[A].implementation.jsModule;if(C.declareType instanceof Function){b[D]=C;if(j.prototype.serializeMap_[A]===undefined){if(!C.declareType(m,A)){g.warning("Warning while retrieving active types from server - module.declareType(CSI, "+A+") did not return true : "+D)}}}else{g.error("Error while retrieving active types from server - module without declareType() : "+D)}}i[q]=true;j.prototype.checkForIncomplete_=e();c(p).execute()})}else{return g.error("Error while retrieving active types from server - did not receive an array of active types")}};n.call({destinationNodeId:p,name:"csiGetActiveTypes",version:3,parameters:undefined,onSuccess:o,onProgress:undefined,onError:undefined})};return l});