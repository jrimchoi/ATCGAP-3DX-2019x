define("DS/SVGLoader/SVGLineMaterial",["DS/Visualization/ThreeJS_DS","DS/Shaders/AdvancedHighlightShader","DS/Shaders/AdvancedPreHighlightShader","DS/Shaders/AdvancedHighlightShaderSinglePass","DS/Shaders/DeferredShaders"],function(e,a,g,d,b){var f={scale:{type:"f",value:1},totalSize:{type:"f",value:0},halfWidth:{type:"f",value:0.5},miterLimit:{type:"f",value:4},pixelSize:{type:"v2",value:new e.Vector2(0.01,0.01)},dashPattern:{type:"fv1",value:new Float32Array(2)},patternOffset:{type:"f",value:0}};var c={lines2D_pars_vertex:["   uniform vec2 pixelSize;","   float computeWorldSizeToPixel() {","      return abs(projectionMatrix[0][0]/gl_Position.w)/pixelSize.x;","   }","   varying vec2 vPointCurr;","varying float fadeAway;","#ifdef USE_DASHEDLINE","   attribute vec2 lineDistance;","   varying vec2 vLineDistance;","   #ifdef USE_WIDELINE","       varying vec2 vPointNext;","       varying vec2 vPointPrec;","       varying float vLineDistanceAlt;","       varying float resetSecondDist;","       varying vec2 vConstantNext;","       varying vec2 vConstantPrec;","   #endif","#endif","#ifdef USE_WIDELINE","   uniform float halfWidth;","   uniform float miterLimit;","   attribute vec3 previousPos;","   attribute vec3 followingPos;","   attribute float sideExtrusion;","   varying vec2 vConstantCurr;","   bool isNull(float x) {","       return abs(x) < 1e-6;","   }","   vec2 cNormalize(in vec2 v) {","       float len = length(v);","       if (!isNull(len)) {","           return v/len;","       }","       return vec2(0.0);","   }","   vec3 cNormalize(in vec3 v) {","       float len = length(v);","       if (!isNull(len)) {","           return v/len;","       }","       return vec3(0.0);","   }","   vec4 cNormalize(in vec4 v) {","       float len = length(v);","       if (!isNull(len)) {","           return v/len;","       }","       return vec4(0.0);","   }","","#endif","#ifdef USE_ROUNDCAP","   varying vec2 infos;","   varying vec2 centerLeft;","   varying vec2 centerCap;","   varying vec2 centerRight;","#endif","#ifdef USE_ROUNDJOIN","   varying vec4 centerJoin;","   varying vec4 centerRightJoin;","   varying vec4 centerLeftJoin;","#endif",].join("\n"),lines2D_vertex:["#ifdef USE_DASHEDLINE","   float modelMatrixScaleX = length(modelViewMatrix[0]);","#ifdef FIXED_SIZE","modelMatrixScaleX *= simpleNodeData.fixedSizeScale;","#endif","   vLineDistance = modelMatrixScaleX* lineDistance;","#endif","   vPointCurr = position.xy;","#ifdef USE_WIDELINE","   vec2 eps = vec2(1e-6);","   bool bPrecCurr = !all(lessThan(abs(position.xy - previousPos.xy), eps));","   bool bCurrNext = !all(lessThan(abs(followingPos.xy - position.xy), eps));","   float offset = halfWidth;","   vec2 pos, posPrecCurr, posCurrNext;","   vec2 dirPrecCurr, dirCurrNext;","   float orientation = sign(sideExtrusion);","   bool parity = mod(sideExtrusion,2.0) < 0.5;","   vConstantCurr = position.xy;","   float worldSizeToPixel = computeWorldSizeToPixel();","   float pixelToWorld = 1.0/worldSizeToPixel;","   float distValue = (0.5*pixelToWorld - halfWidth)/(0.5*pixelToWorld);","   if (distValue > 0.0) {","       offset = 0.5*pixelToWorld;","   }","   fadeAway = 1.0-smoothstep(0.65,1.0,distValue);","   if (bPrecCurr){","       dirPrecCurr = position.xy - previousPos.xy;","       dirPrecCurr = cNormalize(dirPrecCurr);","       posPrecCurr = position.xy + offset * orientation * vec2(-dirPrecCurr.y, dirPrecCurr.x);","   } else if (bCurrNext) {","       dirPrecCurr = position.xy - followingPos.xy;","       dirPrecCurr = cNormalize(dirPrecCurr);","       posPrecCurr = position.xy + offset * dirPrecCurr.xy;","   }","","   if (bCurrNext){","       dirCurrNext = followingPos.xy - position.xy;","       dirCurrNext = cNormalize(dirCurrNext);","       posCurrNext = position.xy + offset * orientation * vec2(-dirCurrNext.y, dirCurrNext.x);","   } else if (bPrecCurr) {","       dirCurrNext = position.xy - previousPos.xy;","       dirCurrNext = cNormalize(dirCurrNext);","       posCurrNext = position.xy + offset * dirCurrNext.xy;","   }","","   vec2 dir = cNormalize(dirCurrNext - dirPrecCurr);","   vec2 nDir = vec2(-dir.y, dir.x);","   if ( bPrecCurr && bCurrNext){","       if (isNull(length(dir))){","           dir = vec2(-dirCurrNext.y, dirCurrNext.x);","           nDir = vec2(-dir.y, dir.x);","       }","       float sinAlpha = dir.y * dirPrecCurr.x - dir.x * dirPrecCurr.y;","       float alpha = asin(abs(sinAlpha));","       #ifdef USE_ROUNDJOIN","           bool angleTest = alpha < radians(45.0);","       #else","           bool angleTest = true;","       #endif","       if (sign(sinAlpha) == -orientation) {","           if (angleTest) {","               float axisCorrection = 1.0 / abs(cos(alpha));","           #if defined(USE_BEVELJOIN)","               if (parity){","                   pos = position.xy - sign(sinAlpha) * offset*axisCorrection * nDir;","               } else {","                   pos = position.xy + sign(sinAlpha) *offset*axisCorrection * nDir;","               }","           #elif defined(USE_MITERJOIN)","               float ratio = 1.0/abs(sinAlpha);","               if (miterLimit < 1.0 || ratio < miterLimit) {","                   pos = position.xy - offset * ratio * dir;","               } else {","                   if (parity){","                       pos = position.xy - sign(sinAlpha) * offset*axisCorrection * nDir;","                   } else {","                       pos = position.xy + sign(sinAlpha) *offset*axisCorrection * nDir;","                   }","               }","           #elif defined(USE_MITERCLIPJOIN)","               float ratio = 1.0/abs(sinAlpha);","               if (miterLimit < 1.0 || ratio < miterLimit) {","                   pos = position.xy - offset * ratio * dir;","               } else {","                   float dist = offset * miterLimit;","                   if (parity){","                      pos = position.xy - sign(sinAlpha) * offset*axisCorrection * nDir;","                      pos -= dist * dirCurrNext;","                   } else {","                      pos = position.xy + sign(sinAlpha) *offset*axisCorrection * nDir;","                      pos += dist * dirPrecCurr;","                   }","               }","           #elif defined(USE_ROUNDJOIN)","               if (parity){","                   pos = position.xy - sign(sinAlpha) * offset * vec2(-dirCurrNext.y,dirCurrNext.x);","                   pos -= offset * dirCurrNext;","               } else {","                   pos = position.xy - sign(sinAlpha) *offset * vec2(-dirPrecCurr.y,dirPrecCurr.x);","                   pos += offset * dirPrecCurr;","               }","           #endif","           } else {","               float dist = offset/ sinAlpha;","               pos = position.xy - dir * abs(dist) ;","           }","       } else {","           float distPoints = min(distance(position.xy, previousPos.xy), distance(position.xy, followingPos.xy)) + offset;","           float dist = offset/ sinAlpha;","           if (max(distPoints, offset) < abs(dist)){","               dist = max(distPoints - offset, offset)*sign(sinAlpha);","               if (alpha < radians(22.5)){","                   if (parity){","                       pos = posCurrNext + dist * dirCurrNext*orientation;","                   } else {","                       pos = posPrecCurr - dist * dirPrecCurr *orientation;","                   }","               } else {","                   pos = position.xy + dir * max(distPoints, offset);","               }","           } else {","               pos = position.xy + dir * abs(dist) ;","           }","       }","   } else if(bPrecCurr || bCurrNext) {","       #if defined(USE_BUTTCAP)","           pos = position.xy + offset * vec2(-dirCurrNext.y, dirCurrNext.x)*orientation;","       #elif defined(USE_ROUNDCAP)","           pos = (posCurrNext - position.xy)  + posPrecCurr;","       #elif defined(USE_SQUARECAP)","           pos = (posCurrNext - position.xy)  + posPrecCurr;","       #endif","   } else {","       pos = position.xy + offset;","   }","vPointCurr = pos.xy;","#ifdef USE_ROUNDCAP","   if (!bPrecCurr) {","       centerLeft = position.xy;","       centerCap = position.xy;","       centerRight = followingPos.xy;","       infos.x = -halfWidth;","       infos.y = 1.0;","   } else if (!bCurrNext) {","       centerLeft = previousPos.xy;","       centerCap = previousPos.xy;","       centerRight = position.xy;","       infos.x = length(position.xy-previousPos.xy) + halfWidth;","       infos.y = 1.0;","   } else {","       infos.y = 0.0;","       centerLeft = previousPos.xy;","       centerCap = position.xy;","       centerRight = followingPos.xy;","       if (parity) {","           infos.x = dot(pos.xy - position.xy, dirCurrNext);","       } else {","           infos.x = length(position.xy - previousPos.xy) + dot(pos.xy - position.xy, dirPrecCurr);","       }","   }","#endif","#ifdef USE_ROUNDJOIN","   centerLeftJoin = vec4(0.0);","   centerRightJoin = vec4(0.0);","   centerJoin = vec4(0.0);","   if (!bPrecCurr) {","       centerLeftJoin.xy = followingPos.xy;","       centerJoin.xy = position.xy;","       centerRightJoin.xy = followingPos.xy;","       centerRightJoin.zw = dirCurrNext;","   } else if (!bCurrNext) {","       centerLeftJoin.xy = previousPos.xy;","       centerJoin.xy = position.xy;","       centerRightJoin.xy = previousPos.xy;","       centerLeftJoin.zw = -dirPrecCurr;","   } else {","       if (parity) {","           centerLeftJoin.xy = position.xy;","           centerJoin.xy = position.xy;","           centerRightJoin.xy = followingPos.xy;","           centerLeftJoin.zw = -dirCurrNext;","           centerRightJoin.zw = dirCurrNext;","           centerJoin.zw = -dir;","       } else {","           centerLeftJoin.xy = previousPos.xy;","           centerJoin.xy = position.xy;","           centerRightJoin.xy = position.xy;","           centerLeftJoin.zw = -dirPrecCurr;","           centerRightJoin.zw = dirPrecCurr;","           centerJoin.zw = -dir;","       }","   }","#endif","   #ifdef USE_DASHEDLINE","       vLineDistanceAlt = vLineDistance.x;","       vConstantNext = followingPos.xy;","       vConstantPrec = previousPos.xy;","       resetSecondDist = 0.0;","       if (!parity){","          vLineDistanceAlt = vLineDistance.y;","          vPointPrec = previousPos.xy;","          vPointNext = position.xy;","          vLineDistance.x = lineDistance.x* modelMatrixScaleX;","          vLineDistance.y = lineDistance.y* modelMatrixScaleX;","       } else {","          vLineDistanceAlt = vLineDistance.x;","          vPointPrec = position.xy;","          vPointNext = followingPos.xy;","          vLineDistance.x = lineDistance.x* modelMatrixScaleX;","          vLineDistance.y = lineDistance.y* modelMatrixScaleX;","          if (abs(lineDistance.x - lineDistance.y) < 1e-6) {","               resetSecondDist = 1.0;","          }","       }","   #endif",e._DefaultShaderChunk.getModelViewTransformationChunk("vec4 _mvPos","vec4(pos.xy,position.z,1.0)"),"   gl_Position = projectionMatrix * _mvPos;","#endif"].join("\n"),lines2D_pars_fragment:["#ifdef PDSFX","   uniform vec3 _DSalbedo;","   vec3 diffuse;","#else","   uniform vec3 diffuse;","#endif","   varying vec2 vPointCurr;","uniform float opacity;","varying float fadeAway;","#ifdef USE_WIDELINE","   uniform float halfWidth;","   varying vec2 vConstantCurr;","#endif","#ifdef USE_DASHEDLINE","   uniform float dashSize;","   uniform float scale;","   uniform float totalSize;","   uniform float patternOffset;","   #ifdef PATTERN_LENGTH","       uniform float dashPattern[PATTERN_LENGTH];","   #endif","   varying vec2 vLineDistance;","   #ifdef USE_WIDELINE","       varying vec2 vPointNext;","       varying vec2 vPointPrec;","       varying float vLineDistanceAlt;","       varying float resetSecondDist;","       varying vec2 vConstantNext;","       varying vec2 vConstantPrec;","   #endif","   float getDistance(in vec2 cur, in vec2 next, in vec2 prev) {","       float res = 0.0;","       vec2 direction = next-prev;","       res = dot(cur - prev, normalize(direction));","       return res;","   }","   float getDistance(in vec2 cur, in vec2 next, in vec2 prev, in vec2 origin) {","       float res = 0.0;","       vec2 direction = next-prev;","       res = dot(cur - origin, normalize(direction));","       return res;","   }","   #ifdef PATTERN_LENGTH","       vec3 getPatternInfo(in float dist) {","           int index = 0;","           float prec = 0.0, cur = 0.0;","           for (int i = 0; i < PATTERN_LENGTH; i++) {","               cur = max(scale,1e-6)*dashPattern[i];","               if (cur > dist) {","                   break;","               }","               prec = cur;","               index++;","           }","           return vec3(float(index),prec,cur);","       }","       float getPatternAlpha(in float dist) {","           #if defined(USE_ROUNDCAP) || defined(USE_SQUARECAP)","               float mDist = mod( dist + halfWidth , max(scale,1e-6) *totalSize );","           #else","               float mDist = mod( dist, max(scale,1e-6) * totalSize );","           #endif","           vec3 patternInfo = getPatternInfo(mDist);","           if (abs(mod(patternInfo.x,2.0)) < 1e-2) {","               return 0.0;","           }","           return 1.0;","       }","   #endif","#endif","#ifdef USE_ROUNDCAP","   varying vec2 infos;","   varying vec2 centerLeft;","   varying vec2 centerCap;","   varying vec2 centerRight;","   bool doLeftCap(in bool leftSide) {","       bool leftCap = leftSide && infos.x < 0.0;","       if (!leftCap) {","           return false;","       }","       float distanceL = length(vPointCurr.xy - centerLeft) / halfWidth;","       if (distanceL > 1.0) {","           discard;","       }","       return true;","   }","   bool doRightCap(in bool rightSide) {","       bool rightCap = rightSide && infos.x > length(centerRight - centerCap);","       if (!rightCap) {","           return false;","       }","       float distanceR = length(vPointCurr.xy - centerRight) / halfWidth;","       if (distanceR > 1.0) {","           discard;","       }","       return true;","   }","   void doRoundCap() {","       bool centerSide = abs(length(fwidth(centerCap))) < 1e-6;","       bool capToCap = abs(fwidth(infos.y)) < 1e-6 && infos.y > 0.0;","       bool leftSide = abs(length(fwidth(centerLeft))) < 1e-6 ;","       bool rightSide = abs(length(fwidth(centerRight))) < 1e-6 ;","       bool toTreat = ! (leftSide && rightSide && centerSide) || capToCap;","       if (!toTreat) {","           return;","       }","       bool leftCap = doLeftCap(leftSide);","       bool rightCap = doRightCap(rightSide && centerSide);","   }","#endif","#ifdef USE_ROUNDJOIN","   varying vec4 centerJoin;","   varying vec4 centerRightJoin;","   varying vec4 centerLeftJoin;","   void doCentralJoin() {","       float distanceJoin = 0.0;","       float varJoinC = 0.0;","       if (dot(vPointCurr.xy - centerJoin.xy, centerJoin.zw) <= 0.0) {","           return;","       }","       distanceJoin = length(vPointCurr.xy - centerJoin.xy) / halfWidth;","       if (distanceJoin > 1.0) {","           discard;","       }","   }","   void doSideJoins() {","       bool rightJoin = abs(length(fwidth(centerRightJoin))) < 1e-6 && dot(vPointCurr.xy - centerRightJoin.xy, centerRightJoin.zw) > 0.0;","       bool leftJoin =  abs(length(fwidth(centerLeftJoin))) < 1e-6 && dot(vPointCurr.xy - centerLeftJoin.xy, centerLeftJoin.zw) > 0.0;","       float distanceRight = 0.0;","       float distanceLeft = 0.0;","       float varJoinR = 0.0;","       float varJoinL = 0.0;","       if (rightJoin) {","           distanceRight = length(vPointCurr.xy - centerRightJoin.xy) / halfWidth;","           if (distanceRight > 1.0) {","               discard;","           }","       }","       if (leftJoin) {","           distanceLeft = length(vPointCurr.xy - centerLeftJoin.xy) / halfWidth;","           if (distanceLeft > 1.0) {","               discard;","           }","       }","   }","   void doRoundJoins() {","       bool isOnJoin = abs(length(fwidth(centerJoin))) < 1e-6;","       if (isOnJoin) {","           doCentralJoin();","           return;","       }","       doSideJoins();","    }","#endif",].join("\n"),lines2D_fragment:["#ifdef USE_WIDELINE","       bool isConnection = length(fwidth(vConstantCurr)) < 1e-6;","#endif","#ifdef USE_DASHEDLINE","       float dist = vLineDistance.x;","       float dist2 = 0.0;","   #ifdef USE_WIDELINE","       bool resetDist2 = fwidth(resetSecondDist) > 1e-6;","       if (!isConnection){","           dist += getDistance(vPointCurr,vPointNext,vPointPrec);","       } else  {","           dist = vLineDistanceAlt + getDistance(vPointCurr,vConstantCurr,vConstantPrec, vConstantCurr);","           dist2 = getDistance(vPointCurr,vConstantNext,vConstantCurr, vConstantCurr);","           dist2 += resetDist2 ? 0.0 : vLineDistanceAlt;","       }","   #endif","   #ifdef PATTERN_LENGTH","       float patternAlpha = getPatternAlpha(dist+ patternOffset);","       if (abs(dist2) > 1e-6) {","           patternAlpha = min(patternAlpha, getPatternAlpha(dist2+ patternOffset));","       }","       if (patternAlpha > 0.5) {","           discard;","       }","   #endif","#endif","#ifdef USE_ROUNDCAP","   doRoundCap();","#endif","#ifdef USE_ROUNDJOIN","   doRoundJoins();","#endif","   gl_FragColor.a *= fadeAway;",].join("\n")};a.HighlightEdge2D={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,f,{colorHighlight:{type:"v4",value:new e.Vector4(0,0.6,1,1)}}]),vertexShaderPars:[].join("\n"),vertexShaderBody:[].join("\n"),fragmentShaderPars:["uniform vec4 colorHighlight;",].join("\n"),fragmentShaderBody:["  gl_FragColor = vec4( colorHighlight.xyz, 0.8 * colorHighlight.a * 2.0 );",].join("\n"),vertexShader:[e.ShaderChunk.clip_pars_vertex,c.lines2D_pars_vertex,"void main() {",e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.default_vertex,e.ShaderChunk.clip_vertex,c.lines2D_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,c.lines2D_pars_fragment,"uniform vec4 colorHighlight;","void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,"#endif",e.ShaderChunk.clip_fragment,c.lines2D_fragment,"    gl_FragColor = vec4( colorHighlight.xyz, 0.8 * colorHighlight.a * 2.0);","}"].join("\n")};d.HighlightEdge2D={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,f,{iScanEffectColor:{type:"v4",value:new e.Vector4(0,0.7,1,1)}}]),vertexShaderPars:[e.ShaderChunk.clip_pars_vertex,c.lines2D_pars_vertex,].join("\n"),vertexShaderBody:[e.ShaderChunk.clip_vertex,c.lines2D_vertex].join("\n"),fragmentShaderPars:[e.ShaderChunk.clip_pars_fragment,c.lines2D_pars_fragment,"uniform vec4 iScanEffectColor;",].join("\n"),fragmentShaderBody:[e.ShaderChunk.clip_fragment,c.lines2D_fragment,"	gl_FragColor = vec4( iScanEffectColor.xyz, 1.0 );",].join("\n"),vertexShader:[e.ShaderChunk.clip_pars_vertex,c.lines2D_pars_vertex,"void main() {",e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.default_vertex,e.ShaderChunk.clip_vertex,c.lines2D_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,c.lines2D_pars_fragment,"uniform vec4 iScanEffectColor;","void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,"#endif",e.ShaderChunk.clip_fragment,c.lines2D_fragment,"	gl_FragColor = vec4( iScanEffectColor.xyz, 1.0 );","}"].join("\n")};a.OutlineHighlightEdge2D={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,f,{colorHighlight:{type:"v4",value:new e.Vector4(0,1,1,1)}}]),vertexShaderPars:[].join("\n"),vertexShaderBody:[].join("\n"),fragmentShaderPars:["uniform vec4 colorHighlight;",].join("\n"),fragmentShaderBody:["    gl_FragColor = vec4( colorHighlight.xyz, 1.0);",].join("\n"),vertexShader:[e.ShaderChunk.clip_pars_vertex,c.lines2D_pars_vertex,"void main() {",e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.default_vertex,e.ShaderChunk.clip_vertex,c.lines2D_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,c.lines2D_pars_fragment,"uniform vec4 colorHighlight;","void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,"#endif",e.ShaderChunk.clip_fragment,c.lines2D_fragment,"    gl_FragColor = vec4( colorHighlight.xyz, 1.0);","}"].join("\n")};g.HighlightEdge2D={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,f]),vertexShaderPars:[].join("\n"),vertexShaderBody:[].join("\n"),fragmentShaderPars:[].join("\n"),fragmentShaderBody:["    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );",].join("\n"),vertexShader:[e.ShaderChunk.clip_pars_vertex,c.lines2D_pars_vertex,"void main() {",e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.default_vertex,e.ShaderChunk.clip_vertex,c.lines2D_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,c.lines2D_pars_fragment,"void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,"#endif",e.ShaderChunk.clip_fragment,c.lines2D_fragment,"    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );","}"].join("\n")};b.DepthEdge2D={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,f]),vertexShader:[e.ShaderChunk.clip_pars_vertex,e.ShaderChunk.lines2D_pars_vertex,"varying vec4 clipPos;","void main() {",e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.default_vertex,e.ShaderChunk.clip_vertex,e.ShaderChunk.lines2D_vertex,"   clipPos = gl_Position;",e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,e.ShaderChunk.lines2D_pars_fragment,b.Chunks.encode_float,"varying vec4 clipPos;","void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,"#endif",e.ShaderChunk.clip_fragment,e.ShaderChunk.lines2D_fragment,"	#ifdef PDSFX","	float tmp = 0.5 + 0.5 * _DSclipPosition.z / _DSclipPosition.w;","	#else","	float tmp = 0.5 + 0.5 * clipPos.z / clipPos.w;","	#endif","	vec4 encode = encode_float(tmp);","   gl_FragColor = encode;","}"].join("\n")};e.ShaderLib.line2D={uniforms:e.UniformsUtils.merge([e.UniformsLib.common,e.UniformsLib.fog,e.UniformsLib.clipPlanes,f,e.UniformsLib.skinning]),vertexShader:[e.ShaderChunk.clip_pars_vertex,e.ShaderChunk.map_pars_vertex,e.ShaderChunk.lightmap_pars_vertex,e.ShaderChunk.envmap_pars_vertex,e.ShaderChunk.color_pars_vertex,e.ShaderChunk.morphtarget_pars_vertex,e.ShaderChunk.skinning_pars_vertex,c.lines2D_pars_vertex,e.ShaderChunk.oit_pars_vertex,"void main() {",e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.map_vertex,e.ShaderChunk.lightmap_vertex,e.ShaderChunk.color_vertex,e.ShaderChunk.skinbase_vertex,"#ifdef USE_ENVMAP",e.ShaderChunk.morphnormal_vertex,e.ShaderChunk.skinnormal_vertex,e.ShaderChunk.defaultnormal_vertex,"#endif",e.ShaderChunk.morphtarget_vertex,e.ShaderChunk.skinning_vertex,e.ShaderChunk.default_vertex,"#if defined(PDSFX) && defined(USE_ENVMAP)","transformedNormal = _viewTangentSpace.Normal;","#endif",e.ShaderChunk.clip_vertex,e.ShaderChunk.worldpos_vertex,e.ShaderChunk.envmap_vertex,c.lines2D_vertex,e.ShaderChunk.oit_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:["#if defined( NEEDS_UVTOUSE ) || defined(PDSFX_USE_MAP)","vec2 uvToUse;","#endif",c.lines2D_pars_fragment,e.ShaderChunk.clip_pars_fragment,e.ShaderChunk.color_pars_fragment,e.ShaderChunk.map_pars_fragment,e.ShaderChunk.lightmap_pars_fragment,e.ShaderChunk.envmap_pars_fragment,e.ShaderChunk.fog_pars_fragment,e.ShaderChunk.specularmap_pars_fragment,e.ShaderChunk.oit_pars_fragment,"void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,e.ShaderChunk.PDSFX_albedo_fragment,"#endif","gl_FragColor = vec4( diffuse, opacity );",c.lines2D_fragment,"#if defined( NEEDS_UVTOUSE ) || defined(PDSFX_USE_MAP)","uvToUse=vUv;","#endif",e.ShaderChunk.clip_fragment,e.ShaderChunk.uvmapping_fragment,e.ShaderChunk.map_fragment,e.ShaderChunk.alphatest_fragment,e.ShaderChunk.specularmap_fragment,e.ShaderChunk.lightmap_fragment,e.ShaderChunk.color_fragment,e.ShaderChunk.envmap_fragment,e.ShaderChunk.linear_to_gamma_fragment,e.ShaderChunk.fog_fragment,e.ShaderChunk.oit_fragment,e.ShaderChunk.PDSFX_end_fragment,"}"].join("\n")};e.SVGLineMaterial=function(h){this.miterLimit=4;this.scale=1;this.linecap="butt";e.LineDSMaterial.call(this,h);this.transparent=true;if(this.miterLimit<1){this.miterLimit=1}this.shaderID=e.ShaderIDs.line2D;this.is2DLine=true};e.SVGLineMaterial.prototype=Object.create(e.LineDSMaterial.prototype);e.SVGLineMaterial.prototype.clone=function(){var h=new e.SVGLineMaterial();e.LineDSMaterial.prototype.clone.call(this,h);h.miterLimit=this.miterLimit>1?this.miterLimit:1;return h};e.SVGLineMaterial.prototype.setLineWidth=function(h){if(Math.abs(this.lineWidth-h)>0.000001){this.lineWidth=h;this.needsUpdate=true;this.updateDeferredMaterials()}};e.SVGLineMaterial.prototype.getDepthMaterial=function(){var n=this.getBaseId();n+="TDepthGTEdge2DS"+this.side+"CP"+this.enableClipPlanes+"TR"+(this.transparent||this.opacity<1)+"lW"+this.lineWidth;n+="LC"+this.linecap+"LJ"+this.linejoin+"ML"+this.miterLimit;n+="BM"+this.isBackMaterial;n="id"+n.hashCode();if(e.DefaultNormalDepthMaterials.has(n)){return e.DefaultNormalDepthMaterials.get(n).get(this)}var l="DepthEdge2D";var k=b[l];var h=e.UniformsUtils.clone(k.uniforms);var m={uniforms:h,fragmentShader:k.fragmentShader,vertexShader:k.vertexShader,side:e.DoubleSide,lineWidth:this.lineWidth,pixelSize:this.pixelSize,enableClipPlanes:this.enableClipPlanes,linejoin:this.linejoin,linecap:this.linecap,miterLimit:this.miterLimit,force:true};var j=new e.ShaderMaterial(m);var i=new e.DeferredMaterial(j);e.DefaultNormalDepthMaterials.set(n,i);return i.get(this)};e.SVGLineMaterial.prototype.getPickingMaterial=function(){var m=this.getBaseId();m+="GTEdge2DS"+this.side+"CP"+this.enableClipPlanes+"TR"+(this.transparent||this.opacity<1)+"lW"+this.lineWidth;m+="LC"+this.linecap+"LJ"+this.linejoin+"ML"+this.miterLimit;m+="BM"+this.isBackMaterial;m="id"+m.hashCode();if(e.DefaultPickingMaterials.has(m)){return e.DefaultPickingMaterials.get(m).get(this)}var i={color:new e.Color(),side:this.side,lineWidth:this.lineWidth,enableClipPlanes:this.enableClipPlanes,linejoin:this.linejoin,linecap:this.linecap,pixelSize:this.pixelSize,miterLimit:this.miterLimit,transparent:this.transparent||this.opacity<1};var l=new e.SVGLineMaterial(i);var h=null;if(this.isInstancingMaterial){h=l.clone();h._definePickingInstancing=true;h.isInstancingMaterial=true}var k={pickingMaterial:l,pickingMaterialInstancing:h};var j=new e.DeferredMaterial(k);e.DefaultPickingMaterials.set(m,j);return j.get(this)};e.SVGLineMaterial.prototype.getHighlightMaterial=function(p){var h=this.getBaseId();h+="T"+p+"GTEdge2DCP"+this.enableClipPlanes+"LW"+this.lineWidth;h+="LC"+this.linecap+"LJ"+this.linejoin+"ML"+this.miterLimit;if(this.isDashedLine){h+="SC"+this.scale;h+="PO"+(this.patternOffset%this.dashPattern[this.dashPattern.length-1]);for(var k=0;k<this.dashPattern.length;k++){var r=this.dashPattern[k];h+=k+"P"+r}}h+="BM"+this.isBackMaterial;h="id"+h.hashCode();if(e.DefaultHighlightMaterials.has(h)){return e.DefaultHighlightMaterials.get(h).get(this)}var q=this.getHighlightInfo(p);var o=q.shaderLib;var n=q.shaderName;n+="Edge2D";var l={uniforms:e.UniformsUtils.clone(o[n].uniforms),fragmentShader:o[n].fragmentShader,vertexShader:o[n].vertexShader,side:e.DoubleSide,lineWidth:this.lineWidth,pixelSize:this.pixelSize,enableClipPlanes:this.enableClipPlanes,linejoin:this.linejoin,linecap:this.linecap,patternOffset:this.patternOffset,scale:this.scale,miterLimit:this.miterLimit,force:true};if(this.isDashedLine){l.isDashedLine=true;l.dashPattern=new Float32Array(this.dashPattern)}var m=new e.ShaderMaterial(l);var j=new e.DeferredMaterial(m);e.DefaultHighlightMaterials.set(h,j);return j.get(this)}});define("DS/SVGLoader/SVGLoaderUtils",["DS/Visualization/ThreeJS_DS"],function(b){var d={parseCommands:function(l,g){var j=l.split(" ");var f=[];var h,m,e,k=[];for(h=0;h<j.length;h++){m=j[h];if(m){e=parseFloat(m);if(isNaN(e)){if(g.indexOf(m)<0){throw new Error("unknown command '"+m+"'")}else{if(k.length){f.push(k)}k=[m]}}else{if(!k.length){throw new Error("missing command")}k.push(e)}}}if(k.length){f.push(k)}return f},parseTransformation:function(k){if(k.indexOf("rotate")===0){var p=k.indexOf("(");var l=k.indexOf(")");var h=k.substring(p+1,l);h=a(h,","," ");h=c(h);var m=h.split(" ");var i=parseFloat(m[0]);d.lastAngle=i;var e=new b.Vector2();if(m.length>1){e.x=parseFloat(m[1]);e.y=parseFloat(m[2])}var g=new b.Matrix3();g.set(1,0,e.x,0,1,e.y,0,0,1);var f=new b.Matrix3();f.set(1,0,-e.x,0,1,-e.y,0,0,1);var j=new b.Matrix3();var n=Math.PI*i/180;j.set(Math.cos(n),-Math.sin(n),0,Math.sin(n),Math.cos(n),0,0,0,1);var o=f;o.multiplyMatrices(j,f);o.multiplyMatrices(g,o);return{matrix:o,angle:n}}else{throw new Error("Unknown transformation")}},parseColor:function(g){var f=a(g," ","");var e=new b.Color(f);return e},parseDashArray:function(k){var j=a(k,","," ");var f=c(j);var h=f.split(" ");var e={key:f,value:[]};var g;for(g=0;g<h.length;g++){e.value.push(parseFloat(h[g]))}return e}};function c(e){return e.replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function a(h,e,f){var g=h;return g.replace(new RegExp(e,"g"),f)}return d});define("DS/SVGLoader/SVGNode_abstract",["UWA/Class"],function(a){var b=a.extend({init:function(c){this.node=c;this.children=[]},fillRenderableBank:function(h,g){var c=[];var d;var f=g.buildChildGas(this.node);var e=this.children.length;for(d=0;d<e;d++){this.children[d].fillRenderableBank(h,f)}return c}});return b});define("DS/SVGLoader/SVGRenderable",["UWA/Class"],function(a){var b=a.extend({init:function(d,c){this.isAsync=d?true:false;this.context=c},createNode3D:function(c){}});return b});define("DS/SVGLoader/MultiIndexTable",["DS/Visualization/ThreeJS_DS"],function(a){var b=function(e,d){this.data={};this.attributesNames=e;this.mainAttributesNames=d;this.secondaryAttributesNames=[];var c;for(c=0;c<this.attributesNames.length;c++){if(this.mainAttributesNames.indexOf(this.attributesNames[c])<0){this.secondaryAttributesNames.push(this.attributesNames[c])}}};b.prototype.getElement=function(f,g){var n=this.data;var h,c,e,m;for(h=0;h<this.mainAttributesNames.length;h++){c=this.mainAttributesNames[h];m=f[c];if(m instanceof a.Color){m=m.getHexString()}e=n[m];if(!e){if(h===this.mainAttributesNames.length-1){e=[]}else{e={}}n[m]=e}n=e}var d,l,j,k=null;for(h=0;h<n.length&&!k;h++){l=n[h].attributes;j=true;for(d=0;d<this.secondaryAttributesNames.length&&j;d++){c=this.secondaryAttributesNames[d];if(l[c]&&l[c].equals){if(!f[c]||!l[c].equals(f[c])){j=false}}else{if(l[c]!==f[c]){j=false}}}if(j){k=n[h].element}}if(!k){k=g();n.push({attributes:f,element:k})}return k};b.prototype.exportToArray=function(){function d(g,e){var f;if(g instanceof Array){for(f=0;f<g.length;f++){e.push(g[f].element)}}else{for(f in g){d(g[f],e)}}}var c=[];d(this.data,c);return c};return b});define("DS/SVGLoader/InstancedArcsUtils",["DS/Visualization/ThreeJS_R57","DS/Mesh/MeshUtils",],function(a,c){var b={computeArcBBox:function(I,H,i,A,l,h,u){var m=0.5*u;var t=A+l;var n=Math.cos(A);var r=Math.sin(A);var f=Math.cos(t);var D=Math.sin(t);var o=Math.sqrt(n*n/(H*H)+r*r/(i*i));var G=Math.sqrt(f*f/(H*H)+D*D/(i*i));var q=new a.Vector2(m*n/(H*o),m*r/(i*o));var j=new a.Vector2(m*f/(H*G),m*D/(i*G));var p=0.5*Math.PI;var J=p+Math.PI;var s=2*Math.PI;var w=new a.Vector3(Infinity,Infinity,-1);var B=new a.Vector3(-Infinity,-Infinity,1);var y=new a.Vector2(H*n-q.x,i*r-q.y);var v=new a.Vector2(H*f-j.x,i*D-j.y);var F=new a.Vector2(H*n+q.x,i*r+q.y);var C=new a.Vector2(H*f+j.x,i*D+j.y);var E=[y.x,v.x,F.x,C.x];var g=[y.y,v.y,F.y,C.y];var e=[Math.floor(A/p),Math.floor(t/p)];if(0.5>=e[0]&&0.5<=e[1]){g.push(i+m)}if(1.5>=e[0]&&1.5<=e[1]){E.push(-H-m)}if(2.5>=e[0]&&2.5<=e[1]){g.push(-i-m)}if(3.5>=e[0]&&3.5<=e[1]){E.push(H+m)}if(4.5>=e[0]&&4.5<=e[1]){g.push(i+m)}if(5.5>=e[0]&&5.5<=e[1]){E.push(-H-m)}if(6.5>=e[0]&&6.5<=e[1]){g.push(-i-m)}for(var x=0;x<E.length;x++){w.x=Math.min(w.x,E[x]);B.x=Math.max(B.x,E[x])}for(var x=0;x<g.length;x++){w.y=Math.min(w.y,g[x]);B.y=Math.max(B.y,g[x])}var z=new a.Matrix4();z.rotateZ(h);z.setPosition(new a.Vector3(I.x,I.y,I.z));var d=new a.Box3(w,B).applyMatrix4(z);return d},computeArcFillBBox:function(B,A,j,u,l,i){var q=u+l;var m=Math.cos(u);var o=Math.sin(u);var g=Math.cos(q);var x=Math.sin(q);var n=0.5*Math.PI;var C=n+Math.PI;var p=2*Math.PI;var r=new a.Vector3(Infinity,Infinity,-1);var v=new a.Vector3(-Infinity,-Infinity,1);var f=new a.Vector2(0,0);var z=new a.Vector2(A*m,j*o);var w=new a.Vector2(A*g,j*x);var y=[f.x,z.x,w.x];var h=[f.y,z.y,w.y];var e=[Math.floor(u/n),Math.floor(q/n)];if(0.5>=e[0]&&0.5<=e[1]){h.push(j)}if(1.5>=e[0]&&1.5<=e[1]){y.push(-A)}if(2.5>=e[0]&&2.5<=e[1]){h.push(-j)}if(3.5>=e[0]&&3.5<=e[1]){y.push(A)}if(4.5>=e[0]&&4.5<=e[1]){h.push(j)}if(5.5>=e[0]&&5.5<=e[1]){y.push(-A)}if(6.5>=e[0]&&6.5<=e[1]){h.push(-j)}for(var s=0;s<y.length;s++){r.x=Math.min(r.x,y[s]);v.x=Math.max(v.x,y[s])}for(var s=0;s<h.length;s++){r.y=Math.min(r.y,h[s]);v.y=Math.max(v.y,h[s])}var t=new a.Matrix4();t.rotateZ(i);t.setPosition(new a.Vector3(B.x,B.y,B.z));var d=new a.Box3(r,v).applyMatrix4(t);return d},createArcLoopMesh:function(o){var s=6;var p=[];var r=new a.BufferGeometryDS();r.drawingGroups=[];var q=new c.DrawingGroup(o,o,4,0,s*2*3);q.geometry=r;r.drawingGroups.push(q);var t=2*(s+1);var l=new Float32Array(t*3);var g=0;var f=0;var e,d;for(var h=0;h<s+1;h++){d=h/s;l[g++]=-1;l[g++]=d;l[g++]=1;l[g++]=1;l[g++]=d;l[g++]=0}r.vertexPositionArray=l;var n=(s*2*3);var m=new Uint16Array(n);f=0;for(var h=0;h<s;h++){m[f++]=2*h;m[f++]=2*h+1;m[f++]=2*h+3;m[f++]=2*h;m[f++]=2*h+3;m[f++]=2*h+2}r.vertexIndexArray=m;p.push(r);var u=new a.Mesh(p,o);u.matrixAutoUpdate=false;return u},createArcFillMesh:function(o){var s=6;var p=[];var r=new a.BufferGeometryDS();r.drawingGroups=[];var q=new c.DrawingGroup(o,o,4,0,s*3);q.geometry=r;r.drawingGroups.push(q);var t=s+2;var l=new Float32Array(t*3);var g=0;var f=0;var e,d;l[g++]=-1;l[g++]=0;l[g++]=0;for(var h=0;h<s+1;h++){d=h/s;l[g++]=1;l[g++]=d;l[g++]=0}r.vertexPositionArray=l;var n=(s*3);var m=new Uint16Array(n);f=0;for(var h=0;h<s;h++){m[f++]=0;m[f++]=h+1;m[f++]=h+2}r.vertexIndexArray=m;p.push(r);var u=new a.Mesh(p,o);u.matrixAutoUpdate=false;return u},createMaterial:function(g,e,f){var d=new a.ShaderMaterialDS(g);if(e){d.defines={CONSIDER_ARC:true}}if(f){d.defines={PATTERN_SIZE:f.length,ARC_PATTERN:true};d.uniforms.patternArray.value=f}d.refreshUniforms=function(j,h,i){d.uniforms.cst.value=0.5*a.glStates.currentHeight*window.devicePixelRatio};d.transparent=true;return d},};return b});define("SVGLoader/InstancedArcsUtils",["DS/SVGLoader/InstancedArcsUtils","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("SVGLoader/InstancedArcsUtils");return b});define("DS/SVGLoader/SVGMeshMaterial",["DS/Visualization/ThreeJS_DS"],function(b){var a=function(c){var e=null&&c.viewBox;var d=e?new b.Vector4(e.x,e.x+e.width,e.y,e.y+e.height):new b.Vector4(-Infinity,Infinity,-Infinity,Infinity);var f={side:b.FrontSide,uniforms:b.UniformsUtils.merge([b.UniformsLib.common,{viewBox:{type:"v4",value:d},}]),vertexShaderPars:[b.ShaderChunk.map_pars_vertex,"varying vec2 pos2d;"].join("\n"),vertexShaderBody:[b.ShaderChunk.map_vertex,b._DefaultShaderChunk.model_view_transformation_vertex,"gl_Position = projectionMatrix * mvPosition;","vec4 worldPosition = modelMatrix * vec4( position, 1.0 );","pos2d = worldPosition.xy;",b._DefaultShaderChunk.model_view_normal_vertex,].join("\n"),fragmentShaderPars:["uniform vec4 viewBox;","varying vec2 pos2d;","uniform float opacity;","uniform vec3 diffuse;",b.ShaderChunk.map_pars_fragment,].join("\n"),fragmentShaderBody:[b.ShaderChunk.clip_fragment,"if(pos2d.x < viewBox.x || pos2d.x > viewBox.y || pos2d.y < viewBox.z || pos2d.y > viewBox.w) discard;","gl_FragColor = vec4( diffuse, opacity );",b.ShaderChunk.map_fragment,].join("\n")};this.color=null;this.map=null;b.ShaderMaterialDS.call(this,f);this.opacity=1;this.setValues(c);this.refreshUniforms=function(i,g,h){if(this.color){this.uniforms.diffuse.value=this.color.clone()}this.uniforms.opacity.value=this.opacity;if(this.map){this.uniforms.map.value=this.map}}};a.prototype=Object.create(b.ShaderMaterialDS.prototype);a.prototype.clone=function(){var c=new a();b.ShaderMaterialDS.prototype.clone.call(this,c);c.color=this.color;c.map=this.map;return c};return a});define("DS/SVGLoader/SVGRenderableContext",["UWA/Class"],function(a){var b=a.extend({init:function(){this._lastUsedGas=null;this._currentZIndex=0},computeZIndex:function(c){if(!this._lastUsedGas||!c||!c.isZCompatibleWithGas(this._lastUsedGas)){this._currentZIndex++;this._lastUsedGas=c}return this._currentZIndex},forceNewZ:function(){this._lastUsedGas=null},getZFromZIndex:function(c){return -this._currentZIndex+c-1},getBgZ:function(c){return -this._currentZIndex-2}});return b});define("DS/SVGLoader/InstancedArcsShaders",["DS/Visualization/ThreeJS_R57"],function(f){var d=["float tolerance = max(0.1*nbPixels, 1.0)/ratio;"].join("\n");var a=["float computeClampedAngle(in float _cos, in float _sin) {","float currAngle;","float _asin = asin(_sin);","if (_sin >= 0.0) currAngle = acos(_cos);","else {","if (_cos >=0.0) currAngle = _asin + PI2;","else currAngle = -_asin + PI;","}","currAngle = clamp(currAngle, 0.0, PI2);","return currAngle;","}"].join("\n");var h={compute_ellipse_vertices:["void _computeVertices(inout vec2 firstPoint, inout vec2 secondPoint, in vec2 firstNormal, in vec2 secondNormal) {","vec2 A = firstPoint;","vec2 B = secondPoint;","vec2 nA = firstNormal;","vec2 nB = secondNormal;","float a = instanceRadiiAndWidth.x;","float b = instanceRadiiAndWidth.y;","float a2 = a*a;","float b2 = b*b;","vec2 M0_1, M0_2;","vec2 AB = B-A;","float alpha = AB.y;","float beta = AB.x;","float alpha2 = alpha*alpha;","float beta2 = beta*beta;","float a2alpha2 = a2*alpha2;","float b2beta2 = b2*beta2;","float L_alpha_beta = sqrt(alpha2 + beta2);","float gamma = 0.5*(alpha*(A.x + B.x) - beta*(A.y + B.y));","vec2 nAB = vec2(-alpha, beta)/L_alpha_beta;","if (alpha == 0.0) {","M0_1.x = 0.0;","M0_1.y = -abs(b);","M0_2.x = 0.0;","M0_2.y = -M0_1.y;","} else if (beta == 0.0) {","M0_1.y = 0.0;","M0_1.x = -abs(a);","M0_2.y = 0.0;","M0_2.x = -M0_1.x;","} else {","float denom = a2alpha2 + b2beta2;","M0_1.x = -sqrt((a2*a2alpha2)/denom);","M0_1.y = -b2*beta*M0_1.x/(a2*alpha);","M0_2.x = -M0_1.x;","M0_2.y = -M0_1.y;","}","float d1 =  abs(-alpha*M0_1.x + beta*M0_1.y + gamma)/L_alpha_beta;","float d2 =  abs(-alpha*M0_2.x + beta*M0_2.y + gamma)/L_alpha_beta;","float distM0_AB = min(d1,d2);","float intEllipse = b2beta2 - gamma*gamma + a2alpha2 >= 0.0 ? 1.0 : -1.0;","float totalDist = intEllipse*distM0_AB + halfWidth;","float dotA = abs(dot(nA, nAB));","float newExtA = totalDist/dotA;","firstPoint = A + newExtA*nA;","float dotB = abs(dot(nB, nAB));","float newExtB = totalDist/dotB;","secondPoint = B + newExtB*nB;","}","void computeImpostorVertices(in vec2 precExtruded, inout vec2 currExtruded, in vec2 nextExtruded, in vec2 precNormal, in vec2 currNormal, in vec2 nextNormal) {","vec2 currSolution0 = currExtruded;","vec2 prec0 = precExtruded;","_computeVertices(prec0, currSolution0, precNormal, currNormal);","vec2 currSolution1 = currExtruded;","vec2 next1 = nextExtruded;","_computeVertices(currSolution1, next1, currNormal, nextNormal);","currExtruded = length(currSolution0 - currExtruded) > length(currSolution1 - currExtruded) ? currSolution0 : currSolution1;","}",].join("\n"),distance_to_arc_ellipse:["vec3 debug;","#define PI 3.1415926535897932384","#define PI2 6.283185307179586","#define PI_2 1.5707963267948966",a,"vec2 ClosestPointOnEllipse(vec2 p, vec2 ab)","{","float c = ab.x > ab.y ? sqrt(ab.x*ab.x - ab.y*ab.y) : sqrt(ab.y*ab.y - ab.x*ab.x);","float t = 0.;","if (ab.y < ab.x && abs(p.x) < c)","{","	t = p.y > 0. ? 0. * PI : -PI_2;","}","else if (ab.x < ab.y && abs(p.y) < c)","{","	t = p.x > 0. ? 0. : -PI;","}","else","{","	t = atan(ab.x*p.y,ab.y*p.x);","}","float aa_bb = ab.x * ab.x - ab.y * ab.y;","vec2 pab = p*ab;","for (int i=0; i<4; i++)","{","	float sint = sin(t);","	float cost = cos(t);","	float ft = aa_bb * cost * sint - pab.x * sint + pab.y * cost;","	float dft = aa_bb * (cost * cost - sint * sint) - pab.x * cost - pab.y * sint;","	t = t - ft/dft;","}","return vec2(cos(t),sin(t))*ab;","}","vec3 distanceToEllipse(in float iStartAngle, in float iEndAngle, in float iA, in float iB, in vec2 p, in float h)","{","vec2 ab = abs(vec2(iA,iB));","vec2 origp = p;","p = -abs(p);","vec2 closest = ClosestPointOnEllipse(p, ab);","float dist = length(closest-p);","closest = abs(closest)*sign(origp);","return vec3(abs(dist), closest);","}","#ifdef CONSIDER_ARC","float angularDistanceToArc(in float startAngle, in float endAngle, in float iCos, in float iSin) {","float currAngle = computeClampedAngle(iCos, iSin);","float dist = 1e5;","float startDist = mod(abs(startAngle - currAngle), PI2);","if (endAngle < PI2) {","float endDist = mod(abs(currAngle-endAngle),PI2);","if (currAngle < startAngle || currAngle > endAngle) {dist = min(dist, min(startDist, endDist));}","else dist = 0.0;","} else if (endAngle >= PI2){","endAngle -= PI2;","float endDist = mod(abs(currAngle-endAngle),PI2);","if (currAngle > endAngle && currAngle < startAngle) {dist = min(dist, min(startDist, endDist));}","else dist = 0.0;","}","return dist;","}","vec3 distanceToArc(in float iStartAngle, in float iEndAngle, in float iA, in float iB, in vec2 point, in float h) {","float a = iA;","float b = iB;","if (b > a) {point = vec2(-point.y, point.x); a=iB; b=iA;}","float h2 = h*h;","float a2 = a*a;","float b2 = b*b;","float b2_a2 = (b+a)*(b-a);","float x = point.x;","float y = point.y;","float startAngle = iStartAngle;","float endAngle = iEndAngle;","float cosSolutions[4];","float m = x*a/b2_a2;","float n = y*b/b2_a2;","float m2 = m*m;","float n2 = n*n;","float m2n2 = m2*n2;","float p = -0.5*m2 + n2 - 1.0;","float q = -m*(1.0 + n2);","float B = p;","float B_3 = B/3.0;","float var = m2+n2-1.0;","float var2 = var*var;","float var3 = var2*var;","float P = -var2/12.0;","float Q = -0.5*(m2n2 + var3*0.5/27.0);","float P_3 = P/3.0;","float Q_2 = 0.5*Q;","float v;","float delta = (1.0/432.0)*m2n2*(var3 + 27.0*m2n2);","float dTerm0 = abs(m*n)/12.0;","float dTerm1 = var3/3.0 + 9.0*m2n2;","float _sqDelta = dTerm0*sqrt(-dTerm1);","float sqDelta = dTerm0*sqrt(dTerm1);","if (delta < 0.0) {","vec2 complZ = vec2(-Q_2, _sqDelta);","float module = length(complZ);","float theta = acos(clamp(-Q_2/module, -1.0, 1.0));","v = 2.0*pow(module, 1.0/3.0)*cos(theta/3.0);","} else {","float alpha = pow(-Q_2 + sqDelta, 1.0/3.0);","float beta = -P_3/alpha;","v = alpha + beta;","}","float z0 = v - B_3;","float z02 = max(2.0*z0, 0.0);","float sqz02 = sqrt(z02);","float term0 = 2.0*(p + z02);","float term1 = 2.0*q/sqz02;","float largeTerm0 = sqrt(z02 - (term0 + term1));","float largeTerm1 = sqrt(z02 - (term0 - term1));","float lambda1 = 0.5*(-m + (+sqz02 - largeTerm0));","float lambda2 = 0.5*(-m + (+sqz02 + largeTerm0));","float lambda3 = 0.5*(-m + (-sqz02 - largeTerm1));","float lambda4 = 0.5*(-m + (-sqz02 + largeTerm1));","cosSolutions[0] = lambda1;","cosSolutions[1] = lambda2;","cosSolutions[2] = lambda3;","cosSolutions[3] = lambda4;","float ax = a*x;","float by = b*y;","float sinSolution;","vec2 pointSolution;","float minDistArc = 1e5;","float minDistEllipse = 1e5;","float minAngularDist = 0.1*abs(endAngle - startAngle);","vec2 closestOnEllipse;","vec2 closestOnArc;","bool foundOnArc = false;","float _cos2;","float currLength;","float tangentLength;","float epsilon;","float currAngularDist;","for (int i = 0; i < 4; i++) {","cosSolutions[i] = clamp(cosSolutions[i], -1.0, 1.0);","_cos2 = cosSolutions[i]*cosSolutions[i];","sinSolution = clamp(sqrt(1.0 - _cos2), 0.0, 1.0);","pointSolution = vec2(a*cosSolutions[i], b*sinSolution);","currLength = length(point - pointSolution);","tangentLength = length(vec2(-a*sinSolution, b*cosSolutions[i]));","epsilon = 0.8*(currLength*tangentLength);","if (currLength < minDistEllipse) {","minDistEllipse = currLength;","closestOnEllipse = pointSolution;","}","currAngularDist = angularDistanceToArc(startAngle, endAngle, cosSolutions[i], sinSolution);","if (currLength < minDistArc && currAngularDist <= minAngularDist) {","minAngularDist = currAngularDist;","minDistArc = currLength;","foundOnArc = true;","closestOnArc = pointSolution;","} ","sinSolution = -sinSolution;","pointSolution.y *= -1.0;","currLength = length(point - pointSolution);","tangentLength = length(vec2(-a*sinSolution, b*cosSolutions[i]));","epsilon = 100.0*(currLength*tangentLength);","if (currLength < minDistEllipse) {","minDistEllipse = currLength;","closestOnEllipse = pointSolution;","}","currAngularDist = angularDistanceToArc(startAngle, endAngle, cosSolutions[i], sinSolution);","if (currLength < minDistArc && currAngularDist <= minAngularDist) {","minAngularDist = currAngularDist;","minDistArc = currLength;","foundOnArc = true;","closestOnArc = pointSolution;","} ","}","vec3 results = vec3(minDistArc, closestOnArc);","if (x*x/a2 + y*y/b2 > 1.0 || !foundOnArc) {results.x = minDistEllipse; results.yz = closestOnEllipse;}","if (iB > iA) results.yz = vec2(results.z, -results.y);","return results;","}","#endif",].join("\n"),conservative_rasterization:["void clampToOnePixelSize(inout float iHalfWidth) {","if ((2.0*iHalfWidth* ratio) < 1.0) {","float newHalfLineWidth = 0.5/ratio;","float linesRatio = (newHalfLineWidth - iHalfWidth)/newHalfLineWidth;","fartheringAlpha = 1.0 - smoothstep(0.65, 1.0, linesRatio);","iHalfWidth = newHalfLineWidth;","}","}",].join("\n"),antialiasing_alpha:["void computeAntialiasingAlpha(inout float iAlpha, in float iValue) {","#ifdef NO_DISCARD","float value = iValue;","float delta = fwidth(value);","iAlpha = 1.0 - smoothstep(1.0 - delta , 1.0 + delta , value);","#else","if (iValue > 1.0) discard;","#endif","}",].join("\n"),antialiasing_pattern:["       vec3 getPatternInfo(in float dist) {","           int index = 0;","           float prec = 0.0, cur = 0.0;","           for (int i = 0; i < PATTERN_SIZE; i++) {","               cur = patternArray[i];","               if (cur > dist) {","                   break;","               }","               prec = cur;","               index++;","           }","           return vec3(float(index),prec,cur);","       }","       float getPatternAlpha(in float dist, in float fTotalSize) {","           #if defined(USE_ROUNDCAP) || defined(USE_SQUARECAP)","               float mDist = mod( dist + halfWidth/scale, fTotalSize );","           #else","               float mDist = mod( dist, fTotalSize );","           #endif","           vec3 patternInfo = getPatternInfo(mDist);","           if (abs(mod(patternInfo.x,2.0)) < 1e-2) {","               return 0.0;","           }","           #ifdef NO_DISCARD","               int iIndex = int(patternInfo.x);","               float diffBeg = (mDist - patternInfo.y);","               float deltaBeg = fwidth(diffBeg);","               float diffEnd = (patternInfo.z - mDist);","               float deltaEnd = fwidth(diffEnd);","               float step =  min(smoothstep(0.25*deltaEnd,2.0*deltaEnd,diffEnd),smoothstep(0.25*deltaBeg,2.0*deltaBeg,diffBeg));","               return step;","           #else","               return 1.0;","           #endif","       }"].join("\n"),compute_position_circle:["vec2 _localPosition;","float totalAngle = instanceRadiiAndAngles.z;","float startAngle = instanceRadiiAndAngles.w;","vec3 infos = position;","float inOrOut = infos.x;","float frac = infos.y;","float currAngle = frac*totalAngle + startAngle;","float cosCurr = cos(currAngle);","float sinCurr = sin(currAngle);","float r = instanceRadiiAndAngles.x;","float coeff = cos(totalAngle/12.0);","float nbPixels = halfWidth*ratio;",d,"if (inOrOut < 0.0)","_localPosition = (r-halfWidth-tolerance)*vec2(cosCurr, sinCurr);","else","_localPosition = (r+halfWidth+tolerance)*vec2(cosCurr, sinCurr)/coeff;","vec3 mvPosition = viewTr + vec3( _localPosition+instancePosition.xy, instancePosition.z);","vec2 myViewPos = mvPosition.xy;","vec3 mvNormal = vec3(0.0, 0.0, 0.0);","gl_Position = projectionMatrix*vec4(mvPosition,1.0);",].join("\n"),compute_position_circleFill:["vec2 _localPosition;","float totalAngle = instanceRadiiAndAngles.y;","float startAngle = instanceRadiiAndAngles.z;","vec3 infos = position;","float notCenter = infos.x;","float frac = infos.y;","float currAngle = frac*totalAngle + startAngle;","float cosCurr = cos(currAngle);","float sinCurr = sin(currAngle);","float coeff = cos(totalAngle/12.0);","float nbPixels = radius*ratio;",d,"if (notCenter > 0.0)","_localPosition = (radius+tolerance)*vec2(cosCurr, sinCurr)/coeff;","else","_localPosition = vec2(0.0, 0.0);","vec3 mvPosition = viewTr + vec3( _localPosition+instancePosition.xy, instancePosition.z);","vec2 myViewPos = mvPosition.xy;","vec3 mvNormal = vec3(0.0, 0.0, 0.0);","gl_Position = projectionMatrix*vec4(mvPosition,1.0);",].join("\n"),compute_position_ellipse:["vec2 _localPosition;","vec3 infos = position;","float inOrOut = infos.x;","float frac = infos.y;","float currAngle = frac*totalAngle + startAngle;","float cosCurr = cos(currAngle);","float sinCurr = sin(currAngle);","float nbPixels = halfWidth*ratio;",d,"float a = instanceRadiiAndWidth.x;","float b = instanceRadiiAndWidth.y;","float a2 = a*a;","float b2 = b*b;","vStartAngle = startAngle;","vEndAngle = startAngle+totalAngle;","vec2 localPt = vec2(a*cosCurr, b*sinCurr);","vec2 localNormal = normalize(vec2(localPt.x/(a2), localPt.y/(b2)));","if (inOrOut < 0.0) {","_localPosition = localPt - (halfWidth+tolerance)*localNormal;","} else {","float totalAngle_6 = totalAngle/6.0;","vec2 currPt = localPt + halfWidth*localNormal;","vec2 nextPt = vec2(a*cos(currAngle + totalAngle_6), b*sin(currAngle + totalAngle_6));","vec2 nextNormal = normalize(vec2(nextPt.x/(a2), nextPt.y/(b2)));","nextPt += halfWidth*nextNormal;","vec2 precPt = vec2(a*cos(currAngle - totalAngle_6), b*sin(currAngle - totalAngle_6));","vec2 precNormal = normalize(vec2(precPt.x/(a2), precPt.y/(b2)));","precPt += halfWidth*precNormal;","if (frac == 0.0) {","vec2 next_ = nextPt;","_computeVertices(currPt, next_, localNormal, nextNormal);","} else if (frac == 1.0) {","vec2 prec_ = precPt;","_computeVertices(prec_, currPt, precNormal, localNormal);","} else {","computeImpostorVertices(precPt, currPt, nextPt, precNormal, localNormal, nextNormal);","}","_localPosition = currPt;","_localPosition += tolerance*localNormal;","}","float cosO = instanceOffsetAndAngles.x;","float sinO = instanceOffsetAndAngles.y;","mat2 rotMatrix = mat2(cosO, sinO, -sinO, cosO);","vec3 mvPosition = viewTr + vec3( rotMatrix*_localPosition + instancePosition.xy, instancePosition.z);","vec2 myViewPos = viewTr.xy + _localPosition + instancePosition.xy;","vec3 mvNormal = vec3(0.0);","gl_Position = projectionMatrix*vec4(mvPosition,1.0);",].join("\n"),patterns_fragment:["alpha *= (1.0-getPatternAlpha(curvAbs, vPatternSize));",].join("\n")};var i={uniforms:{cst:{type:"f",value:0.5*f.glStates.currentHeight*window.devicePixelRatio}},vertexShaderPars:["attribute vec3 instancePosition;","attribute vec3 instanceRadiiAndWidth;","attribute vec4 instanceColor;","attribute vec4 instanceOffsetAndAngles;","uniform float cst;","varying vec3 vRadiiAndHWidth;","varying float transX;","varying float transY;","varying vec4 vInstanceColor;","varying float vStartAngle;","varying float vEndAngle;","float fartheringAlpha;","vec3 viewTr;","float halfWidth;","float ratio;",h.compute_ellipse_vertices,h.conservative_rasterization,].join("\n"),vertexShaderBody:["fartheringAlpha = 1.0;","float cameraTop = 1.0/projectionMatrix[1][1];","ratio = cst/cameraTop;","halfWidth = instanceRadiiAndWidth.z;","clampToOnePixelSize(halfWidth);","mat4 viewM = viewMatrix;","viewTr = vec3(viewM[3][0], viewM[3][1], viewM[3][2]);","float totalAngle = instanceOffsetAndAngles.z;","float startAngle = instanceOffsetAndAngles.w;",h.compute_position_ellipse,"vec2 viewCenterPos = viewTr.xy + instancePosition.xy;","vRadiiAndHWidth = vec3(instanceRadiiAndWidth.xy, halfWidth);","transX = myViewPos.x - viewCenterPos.x;","transY = myViewPos.y - viewCenterPos.y;","vInstanceColor = instanceColor;","vInstanceColor.w *= fartheringAlpha;",].join("\n"),fragmentShaderPars:["varying vec3 vRadiiAndHWidth;","varying float transX;","varying float transY;","varying vec4 vInstanceColor;","varying float vStartAngle;","varying float vEndAngle;",h.distance_to_arc_ellipse,h.antialiasing_alpha,].join("\n"),fragmentShaderBody:["float alpha = 1.0;","float a = vRadiiAndHWidth.x;","float b = vRadiiAndHWidth.y;","float halfWidth = vRadiiAndHWidth.z;","float startAngle = vStartAngle;","float endAngle = vEndAngle;","if (b > a) {","float totalAngle = endAngle - startAngle;","startAngle += PI_2;","if (startAngle >= PI2) startAngle -= PI2;","endAngle = startAngle + totalAngle;","}","float dist;","bool inEllipse = transX*transX/(a*a) + transY*transY/(b*b) < 1.0;","#ifdef CONSIDER_ARC","if (inEllipse) dist = (distanceToArc(startAngle, endAngle, a, b, vec2(transX, transY), halfWidth)).x;","else dist = (distanceToEllipse(startAngle, endAngle, a, b, vec2(transX, transY), halfWidth)).x;","#else","dist = (distanceToEllipse(startAngle, endAngle, a, b, vec2(transX, transY), halfWidth)).x;","#endif","float value = dist/halfWidth;","computeAntialiasingAlpha(alpha, value);","gl_FragColor.xyz = vInstanceColor.xyz;","gl_FragColor.w = alpha*vInstanceColor.w;",].join("\n")};var e={uniforms:{cst:{type:"f",value:0.5*f.glStates.currentHeight*window.devicePixelRatio},patternArray:{type:"fv1",value:[]}},vertexShaderPars:["attribute vec3 instancePosition;","attribute vec3 instanceRadiiAndWidth;","attribute vec4 instanceColor;","attribute vec4 instanceOffsetAndAngles;","attribute vec4 integralFirstTerms;","attribute float instancePatternOffset;","uniform float cst;","varying float patternOffset;","varying vec3 vRadiiAndHWidth;","varying float transX;","varying float transY;","varying vec4 vInstanceColor;","varying vec4 vIntegralFirstTerm;","varying float vStartAngle;","varying float vEndAngle;","varying float gapRatio;","float fartheringAlpha;","vec3 viewTr;","float halfWidth;","float ratio;",h.compute_ellipse_vertices,h.conservative_rasterization,].join("\n"),vertexShaderBody:["fartheringAlpha = 1.0;","float cameraTop = 1.0/projectionMatrix[1][1];","ratio = cst/cameraTop;","halfWidth = instanceRadiiAndWidth.z;","clampToOnePixelSize(halfWidth);","mat4 viewM = viewMatrix;","viewTr = vec3(viewM[3][0], viewM[3][1], viewM[3][2]);","float totalAngle = instanceOffsetAndAngles.z;","float startAngle = instanceOffsetAndAngles.w;","vStartAngle = startAngle;","vEndAngle = startAngle+totalAngle;",h.compute_position_ellipse,"vec2 viewCenterPos = viewTr.xy + instancePosition.xy;","vRadiiAndHWidth = vec3(instanceRadiiAndWidth.xy, halfWidth);","transX = myViewPos.x - viewCenterPos.x;","transY = myViewPos.y - viewCenterPos.y;","vInstanceColor = instanceColor;","vInstanceColor.w *= fartheringAlpha;","vIntegralFirstTerm = integralFirstTerms;","patternOffset = instancePatternOffset;",].join("\n"),fragmentShaderPars:["uniform float patternArray[PATTERN_SIZE];","varying float patternOffset;","varying vec3 vRadiiAndHWidth;","varying float transX;","varying float transY;","varying vec4 vInstanceColor;","varying vec4 vIntegralFirstTerm;","varying float vStartAngle;","varying float vEndAngle;","varying float gapRatio;",h.distance_to_arc_ellipse,h.antialiasing_alpha,h.antialiasing_pattern].join("\n"),fragmentShaderBody:["float alpha = 1.0;","float a = vRadiiAndHWidth.x;","float b = vRadiiAndHWidth.y;","float a2 = a*a;","float b2 = b*b;","float halfWidth = vRadiiAndHWidth.z;","float startAngle = vStartAngle;","float endAngle = vEndAngle;","if (b > a) {","float totalAngle = endAngle - startAngle;","startAngle += PI_2;","if (startAngle >= PI2) startAngle -= PI2;","endAngle = startAngle + totalAngle;","}","vec3 results;","bool inEllipse = transX*transX/(a*a) + transY*transY/(b*b) < 1.0;","#ifdef CONSIDER_ARC","if (inEllipse) results = distanceToArc(startAngle, endAngle, a, b, vec2(transX, transY), halfWidth);","else results = distanceToEllipse(startAngle, endAngle, a, b, vec2(transX, transY), halfWidth);","#else","results = distanceToEllipse(startAngle, endAngle, a, b, vec2(transX, transY), halfWidth);","#endif","float dist = results.x;","float value = dist/halfWidth;","computeAntialiasingAlpha(alpha, value);","float e2 = a > b ? (1.0 - b2/a2) : (1.0 - a2/b2);","float e4 = e2*e2;","float e6 = e4*e2;","float e8 = e4*e4;","vec4 excentricities = vec4(e2, e4, e6, e8);","vec4 taylorCoeffsTimesOtherCoeffs = vec4(-0.25, -0.00390625, -0.0003255208333333333, -0.000012715657552083334);","vec2 ptOnEllipse = results.yz;","float _cos = ptOnEllipse.x/a;","float _sin = ptOnEllipse.y/b;","if (b > a) {","_cos = -ptOnEllipse.y/b;","_sin = ptOnEllipse.x/a;","}","float currAngle = computeClampedAngle(_cos, _sin);","float angle2 = 2.0*currAngle;","float sin_angle2 = sin(angle2);","float angle4 = 4.0*currAngle;","float sin_angle4 = sin(angle4);","float angle6 = 6.0*currAngle;","float sin_angle6 = sin(angle6);","float angle8 = 8.0*currAngle;","float sin_angle8 = sin(angle8);","vec4 integralSecondTerm = vec4(","  currAngle + _sin*_cos,","  12.0*currAngle + 8.0*sin_angle2 + sin_angle4,","  60.0*currAngle + 45.0*sin_angle2 + 9.0*sin_angle4 + sin_angle6,","  840.0*currAngle + 672.0*sin_angle2 + 168.0*sin_angle4 + 32.0*sin_angle6 + 3.0*sin_angle8",");","float curvAbs = currAngle - startAngle ","				+  excentricities.x*taylorCoeffsTimesOtherCoeffs.x*(vIntegralFirstTerm.x + integralSecondTerm.x) ","				+  excentricities.y*taylorCoeffsTimesOtherCoeffs.y*(vIntegralFirstTerm.y + integralSecondTerm.y) ","				+  excentricities.z*taylorCoeffsTimesOtherCoeffs.z*(vIntegralFirstTerm.z + integralSecondTerm.z) ","				+  excentricities.w*taylorCoeffsTimesOtherCoeffs.w*(vIntegralFirstTerm.w + integralSecondTerm.w); ","curvAbs *= max(a,b);","curvAbs += patternOffset;","float vPatternSize = patternArray[PATTERN_SIZE-1];",h.patterns_fragment,"gl_FragColor.xyz = vInstanceColor.xyz;","gl_FragColor.w = alpha*vInstanceColor.w;",].join("\n")};var g={uniforms:{cst:{type:"f",value:0.5*f.glStates.currentHeight*window.devicePixelRatio},patternArray:{type:"fv1",value:[]}},vertexShaderPars:["attribute vec3 instancePosition;","attribute vec4 instanceRadiiAndAngles;","attribute vec4 instanceColor;","attribute float instancePatternOffset;","uniform float cst;","varying float vRadius;","varying float vHalfWidth;","varying float transX;","varying float transY;","varying vec4 vInstanceColor;","varying float vPatternOffset;","varying float vStartAngle;","varying float gapRatio;","float fartheringAlpha;","vec3 viewTr;","float halfWidth;","float ratio;",h.conservative_rasterization,].join("\n"),vertexShaderBody:["fartheringAlpha = 1.0;","float cameraTop = 1.0/projectionMatrix[1][1];","ratio = cst/cameraTop;","halfWidth = instanceRadiiAndAngles.y;","clampToOnePixelSize(halfWidth);","mat4 viewM = viewMatrix;","viewTr = vec3(viewM[3][0], viewM[3][1], viewM[3][2]);",h.compute_position_circle,"vec2 viewCenterPos = viewTr.xy + instancePosition.xy;","transX = myViewPos.x - viewCenterPos.x;","transY = myViewPos.y - viewCenterPos.y;","vRadius = instanceRadiiAndAngles.x;","vHalfWidth = halfWidth;","vInstanceColor = instanceColor;","vInstanceColor.w *= fartheringAlpha;","vStartAngle = startAngle;","vPatternOffset = instancePatternOffset;",].join("\n"),fragmentShaderPars:["uniform float patternArray[PATTERN_SIZE];","varying float vRadius;","varying float vHalfWidth;","varying float transX;","varying float transY;","varying vec4 vInstanceColor;","varying float vPatternOffset;","varying float vStartAngle;","varying float gapRatio;","#define PI 3.1415926535897932384","#define PI2 6.283185307179586","#define PI_2 1.5707963267948966",a,h.antialiasing_alpha,h.antialiasing_pattern].join("\n"),fragmentShaderBody:["float alpha = 1.0;","float transX_2 = transX*transX;","float transY_2 = transY*transY;","float halfWidth = vHalfWidth;","float dist = abs(vRadius - length(vec2(transX, transY)));","float value = dist/halfWidth;","computeAntialiasingAlpha(alpha, value);","vec2 normal = normalize(vec2(transX, transY));","float _cos = normal.x;","float _sin = normal.y;","float currAngle = computeClampedAngle(_cos, _sin);","float vPatternSize = patternArray[PATTERN_SIZE-1];","float patternOffset = vPatternOffset;","float curvAbs = patternOffset + (currAngle - vStartAngle)*vRadius;",h.patterns_fragment,"gl_FragColor.xyz = vInstanceColor.xyz;","gl_FragColor.w = alpha*vInstanceColor.w;",].join("\n")};var b={uniforms:{cst:{type:"f",value:0.5*f.glStates.currentHeight*window.devicePixelRatio}},vertexShaderPars:["attribute vec3 instancePosition;","attribute vec4 instanceRadiiAndAngles;","attribute vec4 instanceColor;","uniform float cst;","varying float vRadius;","varying float vHalfWidth;","varying float transX;","varying float transY;","varying vec4 vInstanceColor;","float fartheringAlpha;","vec3 viewTr;","float halfWidth;","float ratio;",h.conservative_rasterization,].join("\n"),vertexShaderBody:["fartheringAlpha = 1.0;","float cameraTop = 1.0/projectionMatrix[1][1];","ratio = cst/cameraTop;","halfWidth = instanceRadiiAndAngles.y;","clampToOnePixelSize(halfWidth);","mat4 viewM = viewMatrix;","viewTr = vec3(viewM[3][0], viewM[3][1], viewM[3][2]);",h.compute_position_circle,"vec2 viewCenterPos = viewTr.xy + instancePosition.xy;","transX = myViewPos.x - viewCenterPos.x;","transY = myViewPos.y - viewCenterPos.y;","vRadius = instanceRadiiAndAngles.x;","vHalfWidth = halfWidth;","vInstanceColor = instanceColor;","vInstanceColor.w *= fartheringAlpha;",].join("\n"),fragmentShaderPars:["varying float vRadius;","varying float vHalfWidth;","varying float transX;","varying float transY;","varying vec4 vInstanceColor;",h.antialiasing_alpha].join("\n"),fragmentShaderBody:["float alpha = 1.0;","float transX_2 = transX*transX;","float transY_2 = transY*transY;","float halfWidth = vHalfWidth;","float dist = abs(vRadius - length(vec2(transX, transY)));","float value = dist/halfWidth;","computeAntialiasingAlpha(alpha, value);","gl_FragColor.xyz = vInstanceColor.xyz;","gl_FragColor.w = alpha*vInstanceColor.w;",].join("\n")};var c={uniforms:{cst:{type:"f",value:0.5*f.glStates.currentHeight*window.devicePixelRatio}},vertexShaderPars:["attribute vec3 instancePosition;","attribute vec3 instanceRadiiAndAngles;","attribute vec4 instanceColor;","uniform float cst;","varying float vRadius;","varying float transX;","varying float transY;","varying vec4 vInstanceColor;","float fartheringAlpha;","vec3 viewTr;","float radius;","float ratio;",h.conservative_rasterization,].join("\n"),vertexShaderBody:["fartheringAlpha = 1.0;","float cameraTop = 1.0/projectionMatrix[1][1];","ratio = cst/cameraTop;","radius = instanceRadiiAndAngles.x;","clampToOnePixelSize(radius);","mat4 viewM = viewMatrix;","viewTr = vec3(viewM[3][0], viewM[3][1], viewM[3][2]);",h.compute_position_circleFill,"vec2 viewCenterPos = viewTr.xy + instancePosition.xy;","transX = myViewPos.x - viewCenterPos.x;","transY = myViewPos.y - viewCenterPos.y;","vRadius = radius;","vInstanceColor = instanceColor;","vInstanceColor.w *= fartheringAlpha;",].join("\n"),fragmentShaderPars:["varying float vRadius;","varying float transX;","varying float transY;","varying vec4 vInstanceColor;",h.antialiasing_alpha].join("\n"),fragmentShaderBody:["float alpha = 1.0;","float transX_2 = transX*transX;","float transY_2 = transY*transY;","float normPoint = length(vec2(transX, transY));","float value = normPoint/vRadius;","computeAntialiasingAlpha(alpha, value);","gl_FragColor.xyz = vInstanceColor.xyz;","gl_FragColor.w = alpha*vInstanceColor.w;",].join("\n")};return{ArcEllipse:i,ArcEllipsePattern:e,ArcCircle:b,ArcCircleFill:c,ArcCirclePattern:g}});define("SVGLoader/InstancedArcsShaders",["DS/SVGLoader/InstancedArcsShaders","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("SVGLoader/InstancedArcsShaders");return b});define("DS/SVGLoader/PolygonRenderer",["DS/Visualization/PolygonTessellator"],function(a){return a});define("DS/SVGLoader/SVGRenderableStrokePolygonSet",["DS/Visualization/ThreeJS_DS","DS/SVGLoader/SVGRenderable","DS/Visualization/SceneGraphFactory","DS/Visualization/Node3D","DS/Mesh/MeshUtils","DS/SVGLoader/SVGMeshMaterial","DS/SVGLoader/SVGLineMaterial","DS/SVGLoader/PolygonRenderer"],function(i,b,g,f,e,d,a,c){var h=b.extend({init:function(k,j){this._parent(false,j);this.gas=k;this.zIndex=this.context.computeZIndex(this.gas);this.polygonRenderer=new c()},startNewPolygon:function(){this.polygonRenderer._startNewPolygon()},addPointToCurrentPolygon:function(j,l,k){this.polygonRenderer.addPointToCurrentPolygonLoop(j,l,{dashOffset:k})},closePolygon:function(){this.polygonRenderer.closeCurrentPolygonLoop()},endPolygonGroup:function(){this.polygonRenderer.endCurrentPolygon()},createNode3D:function(m){var k=new f();var n;if(this.gas.attributes.strokeColor){n=this.createStrokeNode3D(m);if(n){k.addChild(n)}}if(this.gas.attributes.fillColor){var j=new d({color:this.gas.attributes.fillColor,force:true,viewBox:m});var l=this.context.getZFromZIndex(this.zIndex);n=this.polygonRenderer.createNode3D(j,l);if(n){k.addChild(n)}}return k},createStrokeNode3D:function(r){var E=this.polygonRenderer;if(!E.polygons.length){return null}var m=this.gas.attributes.dashValue,w,C,l={color:this.gas.attributes.strokeColor,lineWidth:this.gas.attributes.strokeWidth,force:true};if(this.gas.attributes.lineCap){l.linecap=this.gas.attributes.lineCap}if(this.gas.attributes.lineJoin){l.linejoin=this.gas.attributes.lineJoin}if(this.gas.attributes.miterLimit){l.miterLimit=this.gas.attributes.miterLimit}if(m){w=new Float32Array(m.length);for(C=0;C<m.length;C++){w[C]=m[C]}l.dashPattern=w}var s=new i.SVGLineMaterial(l);var B=[];var t,o,q,p;p=this.context.getZFromZIndex(this.zIndex);for(o=0;o<E.polygons.length;o++){q=E.polygons[o].points;for(t=0;t<q.length;t+=2){B.push(new i.Vector3(q[t],-q[t+1],p))}}var v=[],A=0,x,j,u,D=[];for(o=0;o<E.polygons.length;o++){q=E.polygons[o].points;j=A;x=q.length/2;for(u=0;u<x-1;u++){v.push(A);v.push(A+1);if(u===0){D.push(E.polygons[o].userData.dashOffset)}else{D.push(0)}D.push(0);A++}if(E.polygons[o].closed){v.push(A);v.push(j);D.push(0);D.push(0)}A++}var y=g.createLineNode({points:B,idx:v,patternOffsets:D,material:s,drawMode:e.ConnectivityTypeEnum.LINES});y.setSSAO(false);y.setFrustumCulled(false);return y}});return h});define("DS/SVGLoader/Instanced2DArcEllipsePattern",["DS/Visualization/ThreeJS_DS","DS/Visualization/Node3D","DS/Visualization/Mesh3D","DS/Mesh/MeshUtils","DS/SVGLoader/InstancedArcsShaders","DS/SVGLoader/InstancedArcsUtils"],function(d,g,b,f,a,e){var c=g.extend({init:function(z){this._parent(z.name);this._name=z.name;var m=z.nbInstances||1;var j=function(p,A){var h={0:-A,1:0.5*(-A-Math.sin(A)*Math.cos(A)),2:0.03125*(-12*A-8*Math.sin(2*A)-Math.sin(4*A)),3:(1/192)*(-60*A-45*Math.sin(2*A)-9*Math.sin(4*A)-Math.sin(6*A)),4:(-840*A-672*Math.sin(2*A)-168*Math.sin(4*A)-32*Math.sin(6*A)-3*Math.sin(8*A))/3072};return h[p]};var s={};var r;for(var i=0;i<m;i++){var x=z.xRadii[i];var w=z.yRadii[i];var n=0.5*z.lineWidths[i];var u=[];r=0;for(var l=0;l<z.patterns[i].length;l++){r+=z.patterns[i][l];u[l]=r}var v;var y=n>w*w/x||n>x*x/w?1:0;if(s[u]&&s[u][y]){v=s[u][y]}else{v={considerArc:y,nbInstances:0,pattern:u,bbox:null,positions:[],colors:[],radiiHalfWidth:[],patternOffsets:[],integralFirstTerms:[],offsets_and_angles:[],createMesh3D:function(){var E={data:this.positions,type:"v3",isFlattened:true,attribName:"instancePosition"};var C={data:this.colors,type:"v4",isFlattened:true,attribName:"instanceColor"};var k={data:this.radiiHalfWidth,type:"v3",isFlattened:true,attribName:"instanceRadiiAndWidth"};var D={data:this.patternOffsets,type:"f",isFlattened:true,attribName:"instancePatternOffset"};var p={data:this.integralFirstTerms,type:"v4",isFlattened:true,attribName:"integralFirstTerms"};var h={data:this.offsets_and_angles,type:"v4",isFlattened:true,attribName:"instanceOffsetAndAngles"};var B=e.createMaterial(a.ArcEllipsePattern,this.considerArc,this.pattern);var F=e.createArcLoopMesh(B);var A=new b(F,null);A.setMaterial(B);A.setInstancingParameters(this.nbInstances,[E,C,k,D,p,h],"instance");A.forceBoundingBox(this.bbox);A.setShadow(false);A.setFrustumCulled(false);A.setSSAO(false);return A}};if(!s[u]){s[u]=[null,null]}s[u][y]=v}v.nbInstances++;var t=e.computeArcBBox(new d.Vector3(z.positions[3*i],z.positions[3*i+1],z.positions[3*i+2]),x,w,z.startAngles[i],z.totalAngles[i],z.offsets[i],z.lineWidths[i]);if(v.bbox){v.bbox.mergeWithBox(t)}else{v.bbox=t}v.positions.push(z.positions[3*i]);v.positions.push(z.positions[3*i+1]);v.positions.push(z.positions[3*i+2]);v.colors.push(z.colors[4*i]);v.colors.push(z.colors[4*i+1]);v.colors.push(z.colors[4*i+2]);v.colors.push(z.colors[4*i+3]);v.radiiHalfWidth.push(x);v.radiiHalfWidth.push(w);v.radiiHalfWidth.push(n);v.patternOffsets.push(z.patternOffsets[i]);var q=x>w?z.startAngles[i]:(z.startAngles[i]+0.5*Math.PI);v.integralFirstTerms.push(j(1,q));v.integralFirstTerms.push(j(2,q));v.integralFirstTerms.push(j(3,q));v.integralFirstTerms.push(j(4,q));v.offsets_and_angles.push(Math.cos(z.offsets[i]));v.offsets_and_angles.push(Math.sin(z.offsets[i]));v.offsets_and_angles.push(z.totalAngles[i]);v.offsets_and_angles.push(z.startAngles[i])}for(var o in s){if(s[o][0]){this.addChild(s[o][0].createMesh3D())}if(s[o][1]){this.addChild(s[o][1].createMesh3D())}}return this},setName:function(h){this._name=h},getNodeType:function(){return"Node3D"}});return UWA.namespace("THREEDS/Nodes/Instanced2DArcEllipsePattern",c)});define("SVGLoader/Instanced2DArcEllipsePattern",["DS/SVGLoader/Instanced2DArcEllipsePattern","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("SVGLoader/Instanced2DArcEllipsePattern");return b});define("DS/SVGLoader/Instanced2DArcCirclePattern",["DS/Visualization/ThreeJS_DS","DS/Visualization/Node3D","DS/Visualization/Mesh3D","DS/Mesh/MeshUtils","DS/SVGLoader/InstancedArcsShaders","DS/SVGLoader/InstancedArcsUtils"],function(d,g,b,f,a,e){var c=g.extend({init:function(s){this._parent(s.name);this._name=s.name;var j=s.nbInstances||1;var n={};var m;for(var h=0;h<j;h++){var q=[];m=0;for(var i=0;i<s.patterns[h].length;i++){m+=s.patterns[h][i];q[i]=m}var r;if(n[q]){r=n[q]}else{r={nbInstances:0,pattern:q,bbox:null,positions:[],colors:[],radiiHalfWidthAngles:[],patternOffsets:[],createMesh3D:function(){var x={data:this.positions,type:"v3",isFlattened:true,attribName:"instancePosition"};var p={data:this.colors,type:"v4",isFlattened:true,attribName:"instanceColor"};var w={data:this.radiiHalfWidthAngles,type:"v4",isFlattened:true,attribName:"instanceRadiiAndAngles"};var k={data:this.patternOffsets,type:"f",isFlattened:true,attribName:"instancePatternOffset"};var v=e.createMaterial(a.ArcCirclePattern,null,this.pattern);var u=e.createArcLoopMesh(v);var t=new b(u,null);t.setMaterial(v);t.setInstancingParameters(this.nbInstances,[x,p,w,k],"instance");t.forceBoundingBox(this.bbox);t.setShadow(false);t.setFrustumCulled(false);t.setSSAO(false);return t}};n[q]=r}r.nbInstances++;var o=e.computeArcBBox(new d.Vector3(s.positions[3*h],s.positions[3*h+1],s.positions[3*h+2]),s.radii[h],s.radii[h],s.startAngles[h],s.totalAngles[h],0,s.lineWidths[h]);if(r.bbox){r.bbox.mergeWithBox(o)}else{r.bbox=o}r.positions.push(s.positions[3*h]);r.positions.push(s.positions[3*h+1]);r.positions.push(s.positions[3*h+2]);r.colors.push(s.colors[4*h]);r.colors.push(s.colors[4*h+1]);r.colors.push(s.colors[4*h+2]);r.colors.push(s.colors[4*h+3]);r.radiiHalfWidthAngles.push(s.radii[h]);r.radiiHalfWidthAngles.push(0.5*s.lineWidths[h]);r.radiiHalfWidthAngles.push(s.totalAngles[h]);r.radiiHalfWidthAngles.push(s.startAngles[h]);r.patternOffsets.push(s.patternOffsets[h])}for(var l in n){this.addChild(n[l].createMesh3D())}return this},setName:function(h){this._name=h},getNodeType:function(){return"Node3D"}});return UWA.namespace("THREEDS/Nodes/Instanced2DArcCirclePattern",c)});define("SVGLoader/Instanced2DArcCirclePattern",["DS/SVGLoader/Instanced2DArcCirclePattern","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("SVGLoader/Instanced2DArcCirclePattern");return b});define("DS/SVGLoader/Instanced2DArcCircle",["DS/Visualization/ThreeJS_DS","DS/Visualization/Node3D","DS/Visualization/Mesh3D","DS/Mesh/MeshUtils","DS/SVGLoader/InstancedArcsShaders","DS/SVGLoader/InstancedArcsUtils"],function(d,g,b,f,a,e){var c=b.extend({init:function(y){this._name=y.name;var u=e.createMaterial(a.ArcCircle,false,null);var m=y.nbInstances||1;var j=e.createArcLoopMesh(u);this._parent(j,y.name);this.setShadow(false);this.setFrustumCulled(false);var t=y.positions;var w={data:t,type:"v3",isFlattened:true,attribName:"instancePosition"};var x=new d.Box3();var r;for(var h=0;h<m;h++){r=e.computeArcBBox(new d.Vector3(t[3*h],t[3*h+1],t[3*h+2]),y.radii[h],y.radii[h],y.startAngles[h],y.totalAngles[h],0,y.lineWidths[h]);x.mergeWithBox(r)}var v=y.colors;var o={data:v,type:"v4",isFlattened:true,attribName:"instanceColor"};var k=[];for(var l=0;l<m;l++){var q=0.5*y.lineWidths[l];var s=y.radii[l];k.push(s);k.push(q);k.push(y.totalAngles[l]);k.push(y.startAngles[l])}var n={data:k,type:"v4",isFlattened:true,attribName:"instanceRadiiAndAngles"};this.setMaterial(u);this.setInstancingParameters(m,[w,n,o],"instance");this.forceBoundingBox(x);this.setSSAO(false);return this},setName:function(h){this._name=h},getNodeType:function(){return"Mesh3D"},setRatio:function(h){console.warn("setRatio is not supported for Instanced2DArcCircle")},setFixedSizeCenter:function(h,i){console.warn("setFixedSizeCenter is not supported for Instanced2DArcCircle")},});return UWA.namespace("THREEDS/Nodes/Instanced2DArcCircle",c)});define("SVGLoader/Instanced2DArcCircle",["DS/SVGLoader/Instanced2DArcCircle","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("SVGLoader/Instanced2DArcCircle");return b});define("DS/SVGLoader/Instanced2DArcCircleFill",["DS/Visualization/ThreeJS_DS","DS/Visualization/Node3D","DS/Visualization/Mesh3D","DS/Mesh/MeshUtils","DS/SVGLoader/InstancedArcsShaders","DS/SVGLoader/InstancedArcsUtils"],function(d,g,b,f,a,e){var c=b.extend({init:function(x){this._name=x.name;var t=e.createMaterial(a.ArcCircleFill,false,null);var m=x.nbInstances||1;var j=e.createArcFillMesh(t);this._parent(j,x.name);this.setShadow(false);this.setFrustumCulled(false);var s=x.positions;var v={data:s,type:"v3",isFlattened:true,attribName:"instancePosition"};var w=new d.Box3();var q;for(var h=0;h<m;h++){q=e.computeArcFillBBox(new d.Vector3(s[3*h],s[3*h+1],s[3*h+2]),x.radii[h],x.radii[h],x.startAngles[h],x.totalAngles[h],0);w.mergeWithBox(q)}var u=x.colors;var o={data:u,type:"v4",isFlattened:true,attribName:"instanceColor"};var k=[];for(var l=0;l<m;l++){var r=x.radii[l];k.push(r);k.push(x.totalAngles[l]);k.push(x.startAngles[l])}var n={data:k,type:"v3",isFlattened:true,attribName:"instanceRadiiAndAngles"};this.setMaterial(t);this.setInstancingParameters(m,[v,n,o],"mesh");this.forceBoundingBox(w);this.setSSAO(false);return this},setName:function(h){this._name=h},getNodeType:function(){return"Mesh3D"},setRatio:function(h){console.warn("setRatio is not supported for Instanced2DArcCircleFill")},setFixedSizeCenter:function(h,i){console.warn("setFixedSizeCenter is not supported for Instanced2DArcCircleFill")},});return UWA.namespace("THREEDS/Nodes/Instanced2DArcCircleFill",c)});define("SVGLoader/Instanced2DArcCircleFill",["DS/SVGLoader/Instanced2DArcCircleFill","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("SVGLoader/Instanced2DArcCircleFill");return b});define("DS/SVGLoader/Instanced2DArcEllipse",["DS/Visualization/ThreeJS_DS","DS/Visualization/Node3D","DS/Visualization/Mesh3D","DS/Mesh/MeshUtils","DS/SVGLoader/InstancedArcsShaders","DS/SVGLoader/InstancedArcsUtils"],function(c,f,b,e,a,d){var g=f.extend({init:function(k){this._parent(k.name);this._name=k.name;var q=k.nbInstances||1;var n={};for(var r=0;r<q;r++){var z=k.xRadii[r];var y=k.yRadii[r];var w=0.5*k.lineWidths[r];var B=z*z;var l=w*w;var j=y*y;var m=Math.cos(k.startAngles[r]);var i=Math.cos(k.startAngles[r]+k.totalAngles[r]);var s=Math.sin(k.startAngles[r]);var v=Math.sin(k.startAngles[r]+k.totalAngles[r]);var o=z>y?(z/y)*Math.sqrt((l-j)/(j-B)):(y/z)*Math.sqrt((l-B)/(B-j));var A;var u=(w>y*y/z||w>z*z/y)?1:0;if(n[u]){A=n[u]}else{A={considerArc:u,nbInstances:0,bbox:null,positions:[],colors:[],radiiHalfWidth:[],offsets_and_angles:[],createMesh3D:function(){var G={data:this.positions,type:"v3",isFlattened:true,attribName:"instancePosition"};var h={data:this.colors,type:"v4",isFlattened:true,attribName:"instanceColor"};var E={data:this.radiiHalfWidth,type:"v3",isFlattened:true,attribName:"instanceRadiiAndWidth"};var F={data:this.offsets_and_angles,type:"v4",isFlattened:true,attribName:"instanceOffsetAndAngles"};var D=d.createMaterial(a.ArcEllipse,this.considerArc,null);var C=d.createArcLoopMesh(D);var p=new b(C,null);p.setMaterial(D);p.setInstancingParameters(this.nbInstances,[G,h,E,F],"instance");p.forceBoundingBox(this.bbox);p.setShadow(false);p.setFrustumCulled(false);p.setSSAO(false);return p}};n[u]=A}A.nbInstances++;var t=d.computeArcBBox(new c.Vector3(k.positions[3*r],k.positions[3*r+1],k.positions[3*r+2]),z,y,k.startAngles[r],k.totalAngles[r],k.offsets[r],k.lineWidths[r]);if(A.bbox){A.bbox.mergeWithBox(t)}else{A.bbox=t}A.positions.push(k.positions[3*r]);A.positions.push(k.positions[3*r+1]);A.positions.push(k.positions[3*r+2]);A.colors.push(k.colors[4*r]);A.colors.push(k.colors[4*r+1]);A.colors.push(k.colors[4*r+2]);A.colors.push(k.colors[4*r+3]);A.radiiHalfWidth.push(z);A.radiiHalfWidth.push(y);A.radiiHalfWidth.push(w);A.offsets_and_angles.push(Math.cos(k.offsets[r]));A.offsets_and_angles.push(Math.sin(k.offsets[r]));A.offsets_and_angles.push(k.totalAngles[r]);A.offsets_and_angles.push(k.startAngles[r])}for(var x in n){if(n[x]){this.addChild(n[x].createMesh3D())}}return this},setName:function(h){this._name=h},getNodeType:function(){return"Node3D"}});return UWA.namespace("THREEDS/Nodes/Instanced2DArcEllipse",g)});define("SVGLoader/Instanced2DArcEllipse",["DS/SVGLoader/Instanced2DArcEllipse","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("SVGLoader/Instanced2DArcEllipse");return b});define("DS/SVGLoader/SVGRenderableStrokeArcSet",["DS/SVGLoader/SVGRenderable","DS/Visualization/ThreeJS_DS","DS/SVGLoader/Instanced2DArcEllipse","DS/SVGLoader/Instanced2DArcCircle","DS/Visualization/Node3D","DS/Visualization/SceneGraphFactory","DS/SVGLoader/Instanced2DArcEllipsePattern","DS/SVGLoader/Instanced2DArcCirclePattern"],function(b,h,e,i,f,g,a,d){var c=b.extend({init:function(j,k){this._parent(false,k);this.arcDataArray=[];this.activatePatterns=j},isEmpty:function(){return !this.arcDataArray.length},addArcData:function(j){if(j&&j.gas&&j.gas.getStrokeColor()){j.zIndex=this.context.computeZIndex(j.gas);this.arcDataArray.push(j)}},createNode3D:function(v){if(!this.arcDataArray.length){return null}var o,j,u={totalAngles:[],startAngles:[],positions:[],xRadii:[],yRadii:[],offsets:[],lineWidths:[],colors:[],patterns:this.activatePatterns?[]:null,patternOffsets:this.activatePatterns?[]:null,nbInstances:0},p={totalAngles:[],startAngles:[],positions:[],radii:[],offsets:[],lineWidths:[],colors:[],patterns:this.activatePatterns?[]:null,patternOffsets:this.activatePatterns?[]:null,nbInstances:0};var k=[],t,s,n,r;for(o=0;o<this.arcDataArray.length;o++){s=this.arcDataArray[o];if(s){if(s.xRadius===s.yRadius){p.radii.push(s.xRadius);t=p}else{u.xRadii.push(s.xRadius);u.yRadii.push(s.yRadius);t=u}t.totalAngles.push(s.totalAngle);t.startAngles.push(s.startAngle);t.positions.push(s.position.x);t.positions.push(s.position.y);t.positions.push(this.context.getZFromZIndex(s.zIndex));t.offsets.push(s.offset);t.lineWidths.push(s.gas.getStrokeLineWidth());n=s.gas.getStrokeColor();t.colors.push(n.r);t.colors.push(n.g);t.colors.push(n.b);if(this.activatePatterns){r=this.computeDashData(s);t.patterns.push(r.dashArray);t.patternOffsets.push(r.dashOffset)}t.colors.push(1);t.nbInstances++}}var q,m,l;if(u.nbInstances||p.nbInstances){l=new f()}if(u.nbInstances){if(this.activatePatterns){q=new a(u)}else{q=new e(u)}l.addChild(q)}if(p.nbInstances){if(this.activatePatterns){m=new d(p)}else{m=new i(p)}l.addChild(m)}return l},computeDashData:function(j){var m;if(!j.invert){m={dashArray:j.gas.getDashArray(),dashOffset:j.dashOffset}}else{var k,p=j.gas.getDashArray();var l=[];for(k=0;k<p.length;k++){l.push(p[p.length-k-1])}l.splice(0,0,l[l.length-1]);l.pop();var o=0;for(k=0;k<l.length;k++){o+=l[k]}var q=(j.length+j.dashOffset-l[0])%o;var n=o-q;m={dashArray:l,dashOffset:n}}return m}});return c});define("DS/SVGLoader/SVGNode_unknown",["DS/SVGLoader/SVGNode_abstract"],function(b){var a=b.extend({init:function(c){this._parent(c);this.unknown=true;console.log("SVGLoader: unknown node '"+this.node.nodeName+"'")}});return a});define("DS/SVGLoader/SVGRenderableFilledCircleSet",["DS/SVGLoader/SVGRenderable","DS/Visualization/ThreeJS_DS","DS/SVGLoader/Instanced2DArcCircleFill"],function(c,b,a){var d=c.extend({init:function(e){this._parent(false,e);this.circleDataArray=[]},isEmpty:function(){return !this.circleDataArray},addFilledCircle:function(e,i,f,g){var h=this.context.computeZIndex(g);this.circleDataArray.push({cx:e,cy:i,r:f,gas:g,zIndex:h})},createNode3D:function(k){if(!this.circleDataArray.length){return null}var f={totalAngles:[],startAngles:[],positions:[],radii:[],colors:[],nbInstances:0};var g,j,e;for(g=0;g<this.circleDataArray.length;g++){j=this.circleDataArray[g];f.totalAngles.push(Math.PI*2);f.startAngles.push(0);f.positions.push(j.cx);f.positions.push(-j.cy);f.positions.push(this.context.getZFromZIndex(j.zIndex));f.radii.push(j.r);e=j.gas.getFillColor();f.colors.push(e.r);f.colors.push(e.g);f.colors.push(e.b);f.colors.push(1);f.nbInstances++}var h;if(f.nbInstances>0){h=new a(f)}return h}});return d});define("DS/SVGLoader/SVGNode_image",["DS/SVGLoader/SVGNode_abstract","DS/SVGLoader/SVGLoaderUtils","DS/Visualization/ThreeJS_DS"],function(c,d,b){var a=c.extend({init:function(e){this._parent(e)},fillRenderableBank:function(l,k){var g=this.node.getAttributeNS("http://www.w3.org/1999/xlink","href");var i,f,j,h,e;if(g&&g.startsWith("data:")){f=parseFloat(this.node.getAttribute("x"));j=parseFloat(this.node.getAttribute("y"));h=parseFloat(this.node.getAttribute("width"));e=parseFloat(this.node.getAttribute("height"));l.getImageRenderable(f,j,h,e,g)}}});return a});define("DS/SVGLoader/SVGRenderableImage",["DS/SVGLoader/SVGRenderable","DS/Visualization/ThreeJS_DS","DS/Visualization/Node3D","DS/Visualization/SceneGraphFactory","DS/SVGLoader/SVGMeshMaterial"],function(e,d,f,b,c){var a=e.extend({init:function(h,n,l,g,i,k,j){this._parent(true,j);this.isImageReady=false;this.x=h;this.y=n;this.width=l;this.height=g;this.zIndex=this.context.computeZIndex(null);var m=this;this.texture=d.ImageUtils.loadTexture(i,undefined,function(){m.isImageReady=true;k(m)},function(){m.isImageReady=true;m.texture=null;k(m)},undefined,true)},createNode3D:function(k){if(!this.isImageReady||!this.texture){return null}var i=new c({map:this.texture,force:true,transparent:true,viewBox:k});var j=b.createRectangleNode({width:this.width,height:this.height,fill:true,noEdge:true,fillColor:null,material:i});var h=new d.Matrix4();var g=new d.Vector3(this.x,-this.y-this.height,this.context.getZFromZIndex(this.zIndex));h.setPosition(g);j.setMatrix(h);j.setSSAO(false);return j}});return a});define("DS/SVGLoader/SVGNode_ellipse",["DS/SVGLoader/SVGNode_abstract","DS/Visualization/ThreeJS_DS","DS/SVGLoader/SVGLoaderUtils","DS/SVGLoader/SVGRenderableStrokeArcSet"],function(b,a,e,d){var c=b.extend({init:function(f){this._parent(f)},fillRenderableBank:function(r,n){var o=n.buildChildGas(this.node);var m=r.getStrokeArcSetRenderable(o);var l=parseFloat(this.node.getAttributeNS(null,"cx"));var k=parseFloat(this.node.getAttributeNS(null,"cy"));var h=parseFloat(this.node.getAttributeNS(null,"rx"));var g=parseFloat(this.node.getAttributeNS(null,"ry"));var p=this.node.getAttributeNS(null,"transform");var i=p?e.parseTransformation(p):{matrix:new a.Matrix3(),angle:0};var q=i.matrix;var j=i.angle;var f=new a.Vector3(l,k,1);f.applyMatrix3(q);if(o.getStrokeColor()){m.addArcData({xRadius:h,yRadius:g,totalAngle:2*Math.PI,startAngle:0,position:new a.Vector2(f.x,-f.y),offset:-j,gas:o})}}});return c});define("DS/SVGLoader/SVGGas",["UWA/Class","DS/SVGLoader/SVGLoaderUtils"],function(a,c){window.linecaps=[];window.linejoins=[];window.miterLimits=[];var b=a.extend({init:function(e){this.attributes={strokeWidth:1};if(e){var d;for(d in e.attributes){this.attributes[d]=e.attributes[d]}}},setFromSVGNode:function(f){var e=f.getAttributeNS(null,"stroke");if(e){if(e!=="none"){this.attributes.strokeColor=c.parseColor(e)}else{delete this.attributes.strokeColor}}var i=f.getAttributeNS(null,"fill");if(i&&i!=="none"){this.attributes.fillColor=c.parseColor(i)}var j=f.getAttributeNS(null,"stroke-width");if(j){this.attributes.strokeWidth=parseFloat(j)}var m=f.getAttributeNS(null,"stroke-dasharray"),g,k;if(m){g=c.parseDashArray(m);this.attributes.dash=g.key;k=g.value;if(k.length%2!==0){k=k.concat(k)}this.attributes.dashValue=k}var d=f.getAttributeNS(null,"stroke-linejoin");if(d){this.attributes.lineJoin=d}var l=f.getAttributeNS(null,"stroke-linecap");if(l){this.attributes.lineCap=l}var h=f.getAttributeNS(null,"stroke-miterlimit");if(h){this.attributes.miterLimit=parseFloat(h)}},getStrokeLineWidth:function(){return this.attributes.strokeWidth},getStrokeColor:function(){return this.attributes.strokeColor},getFillColor:function(){return this.attributes.fillColor},getDashArray:function(){return this.attributes.dashValue},getLineCap:function(){return this.attributes.lineCap},getLineJoin:function(){return this.attributes.lineJoin},getMiterLimit:function(){return this.attributes.miterLimit},buildChildGas:function(e){var d=new b(this);d.setFromSVGNode(e);return d},isValid:function(){if(isNaN(this.attributes.strokeWidth)){return false}if(!this.attributes.fillColor&&!this.attributes.strokeColor){return false}return true},isZCompatibleWithGas:function(d){return this.hasSameColorAs(d,"strokeColor")&&this.hasSameColorAs(d,"fillColor")},hasSameColorAs:function(d,e){var f=this.attributes[e],g=d.attributes[e];if(!f&&!g){return true}else{if(f&&g){return f.equals(g)}}return false}});return b});define("DS/SVGLoader/SVGRenderableBank",["UWA/Class","DS/SVGLoader/SVGRenderableStrokePolygonSet","DS/SVGLoader/SVGRenderableStrokeArcSet","DS/SVGLoader/MultiIndexTable","DS/SVGLoader/SVGRenderableImage","DS/SVGLoader/SVGRenderableContext","DS/SVGLoader/SVGRenderableFilledCircleSet"],function(b,c,h,f,a,g,e){var d=b.extend({init:function(i){this.polygonSetRenderableTable=new f(["strokeWidth","strokeColor","fillColor","dash","lineCap","lineJoin","miterLimit"],["strokeWidth","strokeColor"]);this.arcSetRenderable=null;this.arcSetWithPatternRenderable=null;this.filledCircleSetRenderable=null;this.imageRenderables=[];this.nbImagesToLoad=0;this.destinationNode=null;this.onEnded=i;this.context=new g()},getStrokePolygonSetRenderable:function(l){var j=l.attributes.strokeWidth||1;var i=this.context;var k=this.polygonSetRenderableTable.getElement(l.attributes,function(){return new c(l,i)});return k},getStrokeArcSetRenderable:function(i){if(i.attributes.dash){if(!this.arcSetWithPatternRenderable){this.arcSetWithPatternRenderable=new h(true,this.context)}return this.arcSetWithPatternRenderable}else{if(!this.arcSetRenderable){this.arcSetRenderable=new h(false,this.context)}return this.arcSetRenderable}},getFilledCircleSetRenderable:function(i){if(!this.filledCircleSetRenderable){this.filledCircleSetRenderable=new e(this.context)}return this.filledCircleSetRenderable},getImageRenderable:function(j,n,l,i,k){this.nbImagesToLoad++;var m=new a(j,n,l,i,k,this.onImageLoaded.bind(this),this.context);this.imageRenderables.push(m);return m},onImageLoaded:function(j,i){var k=j.createNode3D(this.viewBox);if(k){this.destinationNode.addChild(k)}this.nbImagesToLoad--;if(!this.nbImagesToLoad&&this.onEnded){this.onEnded()}},buildNodes:function(j,o,p){this.viewBox=o;var n=this.polygonSetRenderableTable.exportToArray();if(this.arcSetRenderable){n.push(this.arcSetRenderable)}if(this.arcSetWithPatternRenderable){n.push(this.arcSetWithPatternRenderable)}if(this.filledCircleSetRenderable){n.push(this.filledCircleSetRenderable)}var k,m,l;for(k=0;k<n.length;k++){m=n[k];l=m.createNode3D(o);if(l){if(p){l.exludeFromBounding(true)}j.addChild(l)}}this.destinationNode=j}});return d});define("DS/SVGLoader/SVGNode_g",["DS/SVGLoader/SVGNode_abstract"],function(b){var a=b.extend({init:function(c){this._parent(c)}});return a});define("DS/SVGLoader/SVGNode_svg",["DS/SVGLoader/SVGNode_abstract","DS/Visualization/Node3D","DS/SVGLoader/SVGRenderableBank","DS/SVGLoader/SVGGas","DS/Visualization/ThreeJS_DS","DS/Visualization/SceneGraphFactory","DS/Mesh/Mesh","DS/SVGLoader/SVGLoaderUtils"],function(e,f,c,b,i,g,d,j){var a=e.extend({init:function(k){this._parent(k)},buildNode3D:function(o){var v=this.getViewBox();var n=new f(),l,q;var p,m,u,k;for(p=0;p<this.children.length;p++){m=this.children[p];if(m.buildNode3D){l=m.buildNode3D(o+1);if(p>0){l.setVisibility(false)}n.addChild(l)}else{if(!u){k=new b();u=new c()}m.fillRenderableBank(u,k)}}var r=n;if(u){if(o===0){r=new f();n.addChild(r)}var s=null;if(v){var t=n.getBoundingSphere();s=this.buildBgNode(v,u.context.getBgZ())}u.buildNodes(r,v,!!s);if(s){r.addChild(s)}}return n},buildBgNode:function(r,q){var o=new i.Color(16777215);var n=this.node.style&&this.node.style.background;if(n){n=h(n);o=j.parseColor(n)}var m=new i.MeshBasicMaterial({color:o,force:true});var p=g.createRectangleNode({width:r.width,height:r.height,fill:true,material:m});var l=new i.Matrix4();var k=new i.Vector3(r.x,r.y,q);l.setPosition(k);p.setMatrix(l);p.setSSAO(false);return p},buildMaskNode:function(l,k){},getViewBox:function(){var m=this.node.getAttributeNS(null,"viewBox");if(!m){return null}var l=m.split(" ");var k={x:parseFloat(l[0]),y:parseFloat(l[1]),width:parseFloat(l[2]),height:parseFloat(l[3])};return{x:k.x,y:-k.y-k.height,width:k.width,height:k.height}}});function h(n){var m=n.indexOf("rgb");if(m===-1){return n}var k=n.substring(m);var l=k.indexOf(")");if(l===-1){return n}k=k.substring(0,l+1);return k}return a});define("DS/SVGLoader/SVGNode_path",["DS/SVGLoader/SVGNode_abstract","DS/SVGLoader/SVGLoaderUtils","DS/SVGLoader/SVGRenderableStrokePolygonSet","DS/SVGLoader/SVGRenderableStrokeArcSet","DS/Visualization/ThreeJS_DS"],function(e,l,i,d,h){var b=["M","m","A","a","L","l","Z","z"];var j=e.extend({init:function(m){this._parent(m)},fillRenderableBank:function(B,z){var u=z.buildChildGas(this.node);var w=B.getStrokePolygonSetRenderable(u);var C=B.getStrokeArcSetRenderable(u);var D=this.node.getAttributeNS(null,"d");var p=l.parseCommands(D,b);var r=0,q=0,F,E;var v=false;var t=false;var A,o,s=null,m;var n=0;for(A=0;A<p.length;A++){o=p[A];switch(o[0]){case"M":w.startNewPolygon();n=0;r=o[1];q=o[2];s=[r,q];w.addPointToCurrentPolygon(r,q,n);break;case"m":w.startNewPolygon();n=0;r+=o[1];q+=o[2];s=[r,q];w.addPointToCurrentPolygon(r,q,n);break;case"A":if(o[1]===0||o[2]===0){r=o[6];q=o[7];w.addPointToCurrentPolygon(r,q,n);break}if(!v){v=true;t=true}F=o[6];E=o[7];m=this.buildArcData(r,q,F,E,o[1],o[2],o[3],o[4],o[5],u);if(m){m.dashOffset=n}C.addArcData(m);if(m){n+=m.length}r=F;q=E;w.startNewPolygon();w.addPointToCurrentPolygon(r,q,n);break;case"a":if(o[1]===0||o[2]===0){r+=o[6];q+=o[7];w.addPointToCurrentPolygon(r,q,n);break}if(!v){v=true;t=true}F=r+o[6];E=q+o[7];m=this.buildArcData(r,q,F,E,o[1],o[2],o[3],o[4],o[5],u);if(m){m.dashOffset=n}C.addArcData(m);if(m){n+=m.length}r=F;q=E;v=true;t=true;w.startNewPolygon();w.addPointToCurrentPolygon(r,q,n);break;case"L":F=o[1];E=o[2];w.addPointToCurrentPolygon(F,E,n);n+=Math.sqrt((F-r)*(F-r)+(E-q)*(E-q));r=F;q=E;break;case"l":F=r+o[1];E=q+o[2];w.addPointToCurrentPolygon(r,q,n);n+=Math.sqrt((F-r)*(F-r)+(E-q)*(E-q));r=F;q=E;break;case"z":case"Z":if(!v){w.closePolygon()}else{w.addPointToCurrentPolygon(s[0],s[1],n);w.startNewPolygon()}v=false;n=0;break}}if(t&&u.attributes.fillColor){throw new Error("broken filled polygon!!")}w.startNewPolygon();w.endPolygonGroup()},buildArcData:function(I,r,H,p,w,v,J,M,A,B){J=Math.PI*J/180;if(I===H&&r===p){return null}var x=M?1:0;var N=A?1:0;var D=(I-H)/2,z=(r-p)/2;var E=Math.cos(J)*D+Math.sin(J)*z,u=-Math.sin(J)*D+Math.cos(J)*z;w=Math.abs(w);v=Math.abs(v);var y=E*E/(w*w)+u*u/(v*v);if(y>1){w*=1.001*Math.sqrt(y);v*=1.001*Math.sqrt(y)}var G=Math.sqrt((w*w*v*v-w*w*u*u-v*v*E*E)/(w*w*u*u+v*v*E*E));if(x===N){G*=-1}var t=G*w*u/v,C=-G*v*E/w;var q=Math.cos(J)*t-Math.sin(J)*C+(I+H)/2,o=Math.sin(J)*t+Math.cos(J)*C+(r+p)/2;var n=(E-t)/w,m=(u-C)/v;var L=(-E-t)/w,s=(-u-C)/v;var F=k(1,0,n,m),K=k(n,m,L,s)%(2*Math.PI);if(N===0&&K>0){K-=Math.PI*2}if(N===1&&K<0){K+=Math.PI*2}return this.buildArcDataFinal(q,o,w,v,F,K,J,B)},buildArcDataFinal:function(r,q,p,n,t,m,s,u){if(p===n){t+=s;s=0}t*=-1;m*=-1;var o=false;if(m<0){t+=m;m*=-1;o=true}t=c(t);var v={totalAngle:m,startAngle:t,position:new h.Vector2(r,-q),xRadius:p,yRadius:n,offset:-s,gas:u,invert:o};v.length=this.computeArcLength(v);return v},computeArcLength:function(n){if(!n){return 0}var p=n.startAngle+n.offset;var o=p+n.totalAngle;var m=f(n.xRadius,n.yRadius,p,o,4);return m}});function k(o,m,u,q){var p=Math.sqrt(o*o+m*m);var n=Math.sqrt(u*u+q*q);var v=Math.acos((o*u+m*q)/(p*n));var t=o*q-m*u;if(t<0){v*=-1}return v}function c(m){var n=m%(2*Math.PI);if(n<0){n+=2*Math.PI}return n}function g(p){if(p===0){return 1}var r;var n=1;var m=1;for(r=1;r<=p;r++){n*=r;m*=2}var o=n*m;r=0;var q=1;if(p>2){for(r=0;r<=p-2;r++){q*=(2*r+1)}}return -q/o}function a(n,p,o){var m={0:o-p,1:0.5*(o+Math.sin(o)*Math.cos(o)-p-Math.sin(p)*Math.cos(p)),2:0.03125*(12*o+8*Math.sin(2*o)+Math.sin(4*o)-12*p-8*Math.sin(2*p)-Math.sin(4*p)),3:(1/192)*(60*o+45*Math.sin(2*o)+9*Math.sin(4*o)+Math.sin(6*o)-60*p-45*Math.sin(2*p)-9*Math.sin(4*p)-Math.sin(6*p)),4:(840*o+672*Math.sin(2*o)+168*Math.sin(4*o)+32*Math.sin(6*o)+3*Math.sin(8*o)-840*p-672*Math.sin(2*p)-168*Math.sin(4*p)-32*Math.sin(6*p)-3*Math.sin(8*p))/3072};return m[n]}function f(v,p,n,w,u){var o,x,q,s,t;if(v>p){t=1-(p*p)/(v*v);o=v;x=p;q=n;s=w}else{t=1-(v*v)/(p*p);o=p;x=v;q=n+0.5*Math.PI;s=w+0.5*Math.PI}var r=0;for(var m=0;m<=u;m++){r+=Math.pow(t,m)*g(m)*a(m,q,s)}return o*r}return j});define("DS/SVGLoader/SVGNode_circle",["DS/SVGLoader/SVGNode_abstract","DS/SVGLoader/SVGLoaderUtils","DS/Visualization/ThreeJS_DS"],function(b,d,a){var c=b.extend({init:function(e){this._parent(e)},fillRenderableBank:function(l,k){var h=k.buildChildGas(this.node);var f=l.getStrokeArcSetRenderable(h);var e=parseFloat(this.node.getAttributeNS(null,"cx"));var j=parseFloat(this.node.getAttributeNS(null,"cy"));var g=parseFloat(this.node.getAttributeNS(null,"r"));var i=l.getFilledCircleSetRenderable(h);if(h.getFillColor()){i.addFilledCircle(e,j,g,h)}if(h.getStrokeColor()){f.addArcData({xRadius:g,yRadius:g,totalAngle:2*Math.PI,startAngle:0,position:new a.Vector2(e,-j),offset:0,gas:h})}}});return c});define("DS/SVGLoader/SVGNodeTreeBuilder",["UWA/Class","DS/SVGLoader/SVGNode_svg","DS/SVGLoader/SVGNode_g","DS/SVGLoader/SVGNode_circle","DS/SVGLoader/SVGNode_ellipse","DS/SVGLoader/SVGNode_unknown","DS/SVGLoader/SVGNode_path","DS/SVGLoader/SVGNode_image"],function(b,c,f,e,j,i,h,g){var a={svg:c,g:f,circle:e,ellipse:j,path:h,image:g};var d=b.extend({init:function(k){this.svgRoot=k},buildTree:function(){return this.buildNodeTree(this.svgRoot)},buildNodeTree:function(o){var k=a[o.nodeName]||i;var n=new k(o);var l,m;for(l=0;l<o.childNodes.length;l++){if(o.childNodes[l].nodeType===1){m=this.buildNodeTree(o.childNodes[l]);n.children.push(m)}}return n}});return d});define("DS/SVGLoader/SVGToNode3D",["UWA/Class","DS/SVGLoader/SVGNodeTreeBuilder"],function(a,c){var b=a.extend({init:function(d){this.svgRootElement=d},buildNode3D:function(){var f=new c(this.svgRootElement);var e=f.buildTree();var d=e.buildNode3D(0);return d}});return b});define("DS/SVGLoader/SVGNode",["DS/Visualization/ThreeJS_DS","DS/Visualization/Node3D","DS/Mesh/MeshUtils","DS/SVGLoader/SVGToNode3D","DS/Visualization/GetSVGMode"],function(d,f,e,b,a){var c;c=f.extend({init:function(i,g){this._parent(g);var j=new b(i);var h=j.buildNode3D();this.addChild(h)}});return c});define("DS/SVGLoader/SVGLoader",["UWA/Class","DS/SVGLoader/SVGToNode3D"],function(b,c){var a=b.extend({init:function(d){d=d||{};this.renderCB=d.renderCB;this.onProgressCB=d.onProgressCB;this.onLoadedCB=d.onLoadedCB;this.onErrorCB=d.onErrorCB},load:function(e,d){var g=this.onLoadedCB;var h=new XMLHttpRequest();h.onload=function(){var p=new DOMParser();var m=h.response;var n=p.parseFromString(m,"image/svg+xml");var j=n.rootElement,l,o;if(!j){for(l=0;l<n.childNodes.length&&!j;l++){o=n.childNodes[l];if(o.nodeType===1&&o.nodeName==="svg"){j=o}}}if(!j){if(this.onErrorCB){this.onErrorCB()}}else{var k=new c(j);d.addChild(k.buildNode3D());if(g){g()}}};var f=e.serverurl+e.filename;h.open("GET",f,true);h.send(null)}});return a});