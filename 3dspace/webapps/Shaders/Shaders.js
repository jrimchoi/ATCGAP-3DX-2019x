define("DS/Shaders/BloomShaders",["DS/Visualization/ThreeJS_DS"],function(e){var f=function(h){var i="tDiffuse"+(h?h:"");var g={defines:{LEVEL:1},uniforms:{invSize:{type:"v2",value:new e.Vector2(512,512)},radius:{type:"f",value:0.5}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",e._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform vec2 invSize;","uniform sampler2D "+i+";","varying vec2 vUv;","void main() {","vec2 screenPos = vUv;","vec4 result = vec4(0.0);","float blurSize = invSize.x;","#if (LEVEL == 1)","result += texture2D("+i+", vec2(vUv.x - 1.2 * blurSize, vUv.y)) * 0.3125;","result += texture2D("+i+", vec2(vUv.x, vUv.y)) * 0.375;","result += texture2D("+i+", vec2(vUv.x + 1.2 * blurSize, vUv.y)) * 0.3125;","#endif","#if (LEVEL == 2)","result += texture2D("+i+", vec2(vUv.x - 1.285714285714 * blurSize, vUv.y)) * 0.328125;","result += texture2D("+i+", vec2(vUv.x, vUv.y)) * 0.3125;","result += texture2D("+i+", vec2(vUv.x + 1.285714285714 * blurSize, vUv.y)) * 0.328125;","#endif","#if (LEVEL == 3)","result += texture2D("+i+", vec2(vUv.x - 3.111111111111 * blurSize, vUv.y)) * 0.03515625;","result += texture2D("+i+", vec2(vUv.x - 1.333333333333 * blurSize, vUv.y)) * 0.328125;","result += texture2D("+i+", vec2(vUv.x, vUv.y)) * 0.2734375;","result += texture2D("+i+", vec2(vUv.x + 1.333333333333 * blurSize, vUv.y)) * 0.328125;","result += texture2D("+i+", vec2(vUv.x + 3.111111111111 * blurSize, vUv.y)) * 0.03515625;","#endif","#if (LEVEL == 4)","result += texture2D("+i+", vec2(vUv.x - 3.181818181818 * blurSize, vUv.y)) * 0.0537109375;","result += texture2D("+i+", vec2(vUv.x - 1.363636363636 * blurSize, vUv.y)) * 0.322265625;","result += texture2D("+i+", vec2(vUv.x, vUv.y)) * 0.24609375;","result += texture2D("+i+", vec2(vUv.x + 1.363636363636 * blurSize, vUv.y)) * 0.322265625;","result += texture2D("+i+", vec2(vUv.x + 3.181818181818 * blurSize, vUv.y)) * 0.0537109375;","#endif","#if (LEVEL == 5)","result += texture2D("+i+", vec2(vUv.x - 5.076923076923 * blurSize, vUv.y)) * 0.003173828125;","result += texture2D("+i+", vec2(vUv.x - 3.230769230769 * blurSize, vUv.y)) * 0.06982421875;","result += texture2D("+i+", vec2(vUv.x - 1.384615384615 * blurSize, vUv.y)) * 0.314208984375;","result += texture2D("+i+", vec2(vUv.x, vUv.y)) * 0.2255859375;","result += texture2D("+i+", vec2(vUv.x + 1.384615384615 * blurSize, vUv.y)) * 0.314208984375;","result += texture2D("+i+", vec2(vUv.x + 3.230769230769 * blurSize, vUv.y)) * 0.06982421875;","result += texture2D("+i+", vec2(vUv.x + 5.076923076923 * blurSize, vUv.y)) * 0.003173828125;","#endif","gl_FragColor = result;","}"].join("\n")};g.uniforms[i]={type:"t",value:null};return g},c={defines:{LEVEL:1},uniforms:{tDiffuse:{type:"t",value:null},invSize:{type:"v2",value:new e.Vector2(512,512)},radius:{type:"f",value:0.5}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",e._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform vec2 invSize;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec2 screenPos = vUv;","vec4 result = vec4(0.0);","float blurSize = invSize.y;","#if (LEVEL == 1)","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y - 1.2 * blurSize)) * 0.3125;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y)) * 0.375;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y + 1.2 * blurSize)) * 0.3125;","#endif","#if (LEVEL == 2)","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y - 1.285714285714 * blurSize)) * 0.328125;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y)) * 0.3125;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y + 1.285714285714 * blurSize)) * 0.328125;","#endif","#if (LEVEL == 3)","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y - 3.111111111111 * blurSize)) * 0.03515625;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y - 1.333333333333 * blurSize)) * 0.328125;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y)) * 0.2734375;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y + 1.333333333333 * blurSize)) * 0.328125;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y + 3.111111111111 * blurSize)) * 0.03515625;","#endif","#if (LEVEL == 4)","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y - 3.181818181818 * blurSize)) * 0.0537109375;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y - 1.363636363636 * blurSize)) * 0.322265625;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y)) * 0.24609375;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y + 1.363636363636 * blurSize)) * 0.322265625;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y + 3.181818181818 * blurSize)) * 0.0537109375;","#endif","#if (LEVEL == 5)","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y - 5.076923076923 * blurSize)) * 0.003173828125;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y - 3.230769230769 * blurSize)) * 0.06982421875;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y - 1.384615384615 * blurSize)) * 0.314208984375;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y)) * 0.2255859375;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y + 1.384615384615 * blurSize)) * 0.314208984375;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y + 3.230769230769 * blurSize)) * 0.06982421875;","result += texture2D(tDiffuse, vec2(vUv.x, vUv.y + 5.076923076923 * blurSize)) * 0.003173828125;","#endif","gl_FragColor = result;","}"].join("\n")},b={uniforms:{tDiffuse:{type:"t",value:null},invSize:{type:"v2",value:new e.Vector2(512,512)},radius:{type:"f",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",e._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform vec2 invSize;","uniform sampler2D tDiffuse;","uniform float radius;","varying vec2 vUv;","void main() {","vec4 result = vec4(0.0);","float radiusH = invSize.x * radius;","float radiusV = invSize.y * radius;","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * -0.326212, vUv.y + radiusV * -0.405805 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * -0.840144, vUv.y + radiusV * -0.07358 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * -0.695914, vUv.y + radiusV * 0.457137 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * -0.203345, vUv.y + radiusV * 0.620716 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * 0.96234, vUv.y + radiusV * -0.194983 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * 0.473434, vUv.y + radiusV * -0.480026 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * 0.519456, vUv.y + radiusV * 0.767022 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * 0.185461, vUv.y + radiusV * -0.893124 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * 0.507431, vUv.y + radiusV * 0.064425 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * 0.530992, vUv.y + radiusV * 0.412458 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * -0.32194, vUv.y + radiusV * -0.871945 ) );","result += texture2D( tDiffuse, vec2( vUv.x + radiusH * -0.791559, vUv.y + radiusV * 0.597705 ) );","gl_FragColor = result * 0.0833333333333333;","}"].join("\n")},d={uniforms:{tDiffuse2:{type:"t",value:null},threshold:{type:"f",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",e._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse2;","uniform float threshold;","varying vec2 vUv;","void main() {","    vec4 color = texture2D( tDiffuse2, vUv );","float lum = dot(color.rgb, vec3(0.2126, 0.7152, 0.0722));","float lum2 = clamp(lum - threshold, 0.0, 1.0);","color.rgb *= lum2;","gl_FragColor = color;","}"].join("\n")},a={uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null},tDiffuse3:{type:"t",value:null},tDiffuse4:{type:"t",value:null},tDiffuse5:{type:"t",value:null},tDiffuse6:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",e._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tDiffuse2;","uniform sampler2D tDiffuse3;","uniform sampler2D tDiffuse4;","uniform sampler2D tDiffuse5;","uniform sampler2D tDiffuse6;","varying vec2 vUv;","void main() {","    vec4 color = texture2D( tDiffuse, vUv );","    vec4 bloom1 = texture2D( tDiffuse2, vUv );","    vec4 bloom2 = texture2D( tDiffuse3, vUv );","    vec4 bloom3 = texture2D( tDiffuse4, vUv );","    vec4 bloom4 = texture2D( tDiffuse5, vUv );","    vec4 bloom5 = texture2D( tDiffuse6, vUv );","    vec3 bloom = 0.5 * bloom1.rgb + 0.5 * bloom2.rgb + 0.5 * bloom3.rgb + 0.5 * bloom4.rgb + 0.5 * bloom5.rgb;","    float bloomFactor = 0.9;","	 vec3 result = color.rgb + bloomFactor * bloom;","	 float maxComponent = max(result.x, max(result.y, result.z));","	 if (maxComponent > 1.0) { result /= maxComponent; }","    gl_FragColor = vec4(result, color.a);","}"].join("\n")};return{Threshold:d,BlurH:f(),BlurH2:f(2),BlurV:c,PoissonBlur:b,FinalBlending:a}});define("Shaders/BloomShaders",["DS/Shaders/BloomShaders","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/BloomShaders");return b});define("DS/Shaders/DisplayMipsRoughnessShader",["DS/Visualization/ThreeJS_DS"],function(b){var a={uniforms:{tDiffuse1:{type:"t",value:null},tDiffuse2:{type:"t",value:null},tDiffuse3:{type:"t",value:null},tDiffuse4:{type:"t",value:null},tDiffuse5:{type:"t",value:null},tDiffuse6:{type:"t",value:null},offset1:{type:"v2",value:new b.Vector2(0,0.5)},scale1:{type:"f",value:0.5},offset2:{type:"v2",value:new b.Vector2(0,0.25)},scale2:{type:"f",value:0.25},offset3:{type:"v2",value:new b.Vector2(0.25,0.25)},scale3:{type:"f",value:0.25},offset4:{type:"v2",value:new b.Vector2(0,0.125)},scale4:{type:"f",value:0.125},offset5:{type:"v2",value:new b.Vector2(0.125,0.125)},scale5:{type:"f",value:0.125},offset6:{type:"v2",value:new b.Vector2(0.25,0.125)},scale6:{type:"f",value:0.125}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse1;","uniform sampler2D tDiffuse2;","uniform sampler2D tDiffuse3;","uniform sampler2D tDiffuse4;","uniform sampler2D tDiffuse5;","uniform sampler2D tDiffuse6;","uniform vec2 offset1;","uniform float scale1;","uniform vec2 offset2;","uniform float scale2;","uniform vec2 offset3;","uniform float scale3;","uniform vec2 offset4;","uniform float scale4;","uniform vec2 offset5;","uniform float scale5;","uniform vec2 offset6;","uniform float scale6;","varying vec2 vUv;","void main() {","gl_FragColor = vec4(0.0);","vec2 vUv2 = (vUv - offset1) / scale1;","vec2 vUv3 = (vUv - offset2) / scale2;","vec2 vUv4 = (vUv - offset3) / scale3;","vec2 vUv5 = (vUv - offset4) / scale4;","vec2 vUv6 = (vUv - offset5) / scale5;","vec2 vUv7 = (vUv - offset6) / scale6;","if (vUv2.x > 0.0 && vUv2.y > 0.0 && vUv2.x < 1.0 && vUv2.y < 1.0) {","    vec3 color = texture2D( tDiffuse1, vUv2 ).xyz;","    color = pow(color, vec3(1.0 / 2.2));","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv3.x > 0.0 && vUv3.y > 0.0 && vUv3.x < 1.0 && vUv3.y < 1.0) {","    vec3 color = texture2D( tDiffuse2, vUv3 ).xyz;","    color = pow(color, vec3(1.0 / 2.2));","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv4.x > 0.0 && vUv4.y > 0.0 && vUv4.x < 1.0 && vUv4.y < 1.0) {","    vec3 color = texture2D( tDiffuse3, vUv4 ).xyz;","    color = pow(color, vec3(1.0 / 2.2));","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv5.x > 0.0 && vUv5.y > 0.0 && vUv5.x < 1.0 && vUv5.y < 1.0) {","    vec3 color = texture2D( tDiffuse4, vUv5 ).xyz;","    color = pow(color, vec3(1.0 / 2.2));","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv6.x > 0.0 && vUv6.y > 0.0 && vUv6.x < 1.0 && vUv6.y < 1.0) {","    vec3 color = texture2D( tDiffuse5, vUv6 ).xyz;","    color = pow(color, vec3(1.0 / 2.2));","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv7.x > 0.0 && vUv7.y > 0.0 && vUv7.x < 1.0 && vUv7.y < 1.0) {","    vec3 color = texture2D( tDiffuse6, vUv7 ).xyz;","    color = pow(color, vec3(1.0 / 2.2));","    gl_FragColor = vec4(color, 1.0); return;","}","}"].join("\n")};var c={uniforms:{tDiffuse1:{type:"t",value:null},tDiffuse2:{type:"t",value:null},tDiffuse3:{type:"t",value:null},tDiffuse4:{type:"t",value:null},tDiffuse5:{type:"t",value:null},tDiffuse6:{type:"t",value:null},tDiffuse7:{type:"t",value:null},offset1:{type:"v2",value:new b.Vector2(0,0.5)},scale1:{type:"v2",value:new b.Vector2(1,0.5)},offset2:{type:"v2",value:new b.Vector2(0,0.25)},scale2:{type:"v2",value:new b.Vector2(0.5,0.25)},offset3:{type:"v2",value:new b.Vector2(0.5,0.25)},scale3:{type:"v2",value:new b.Vector2(0.5,0.25)},offset4:{type:"v2",value:new b.Vector2(0,0.125)},scale4:{type:"v2",value:new b.Vector2(0.25,0.125)},offset5:{type:"v2",value:new b.Vector2(0.25,0.125)},scale5:{type:"v2",value:new b.Vector2(0.25,0.125)},offset6:{type:"v2",value:new b.Vector2(0.5,0.125)},scale6:{type:"v2",value:new b.Vector2(0.25,0.125)},offset7:{type:"v2",value:new b.Vector2(0.75,0.125)},scale7:{type:"v2",value:new b.Vector2(0.25,0.125)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse1;","uniform sampler2D tDiffuse2;","uniform sampler2D tDiffuse3;","uniform sampler2D tDiffuse4;","uniform sampler2D tDiffuse5;","uniform sampler2D tDiffuse6;","uniform sampler2D tDiffuse7;","uniform vec2 offset1;","uniform vec2 scale1;","uniform vec2 offset2;","uniform vec2 scale2;","uniform vec2 offset3;","uniform vec2 scale3;","uniform vec2 offset4;","uniform vec2 scale4;","uniform vec2 offset5;","uniform vec2 scale5;","uniform vec2 offset6;","uniform vec2 scale6;","uniform vec2 offset7;","uniform vec2 scale7;","varying vec2 vUv;","void main() {","gl_FragColor = vec4(0.0);","vec2 vUv2 = (vUv - offset1) / scale1;","vec2 vUv3 = (vUv - offset2) / scale2;","vec2 vUv4 = (vUv - offset3) / scale3;","vec2 vUv5 = (vUv - offset4) / scale4;","vec2 vUv6 = (vUv - offset5) / scale5;","vec2 vUv7 = (vUv - offset6) / scale6;","vec2 vUv8 = (vUv - offset7) / scale7;","if (vUv2.x > 0.0 && vUv2.y > 0.0 && vUv2.x < 1.0 && vUv2.y < 1.0) {","    vec3 color = texture2D( tDiffuse1, vec2(1.0 - vUv2.x, vUv2.y) ).xyz;","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv3.x > 0.0 && vUv3.y > 0.0 && vUv3.x < 1.0 && vUv3.y < 1.0) {","    vec3 color = texture2D( tDiffuse2, vec2(1.0 - vUv3.x, vUv3.y) ).xyz;","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv4.x > 0.0 && vUv4.y > 0.0 && vUv4.x < 1.0 && vUv4.y < 1.0) {","    vec3 color = texture2D( tDiffuse3, vec2(1.0 - vUv4.x, vUv4.y) ).xyz;","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv5.x > 0.0 && vUv5.y > 0.0 && vUv5.x < 1.0 && vUv5.y < 1.0) {","    vec3 color = texture2D( tDiffuse4, vec2(1.0 - vUv5.x, vUv5.y) ).xyz;","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv6.x > 0.0 && vUv6.y > 0.0 && vUv6.x < 1.0 && vUv6.y < 1.0) {","    vec3 color = texture2D( tDiffuse5, vec2(1.0 - vUv6.x, vUv6.y) ).xyz;","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv7.x > 0.0 && vUv7.y > 0.0 && vUv7.x < 1.0 && vUv7.y < 1.0) {","    vec3 color = texture2D( tDiffuse6, vec2(1.0 - vUv7.x, vUv7.y) ).xyz;","    gl_FragColor = vec4(color, 1.0); return;","} else if (vUv8.x > 0.0 && vUv8.y > 0.0 && vUv8.x < 1.0 && vUv8.y < 1.0) {","    vec3 color = texture2D( tDiffuse7, vec2(1.0 - vUv8.x, vUv8.y) ).xyz;","    gl_FragColor = vec4(color, 1.0); return;","}","}"].join("\n")};return{DisplayMips:a,MergeMips:c}});define("ShadersDebug/DisplayMipsRoughnessShader",["DS/Shaders/DisplayMipsRoughnessShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("ShadersDebug/DisplayMipsRoughnessShader");return b});define("DS/Shaders/FXAAShader",["DS/Visualization/ThreeJS_DS"],function(a){var b={uniforms:{tDiffuse:{type:"t",value:null},resolution:{type:"v2",value:new a.Vector2(1/1024,1/512)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",a._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec2 resolution;","varying vec2 vUv;","#define FXAA_REDUCE_MIN   (1.0/128.0)","#define FXAA_REDUCE_MUL   (1.0/8.0)","#define FXAA_SPAN_MAX     8.0","void main() {","vec3 rgbNW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ).xyz;","vec3 rgbNE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ).xyz;","vec3 rgbSW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ).xyz;","vec3 rgbSE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ).xyz;","vec4 rgbaM  = texture2D( tDiffuse,  gl_FragCoord.xy  * resolution );","vec3 rgbM  = rgbaM.xyz;","float opacity  = rgbaM.w;","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float lumaNW = dot( rgbNW, luma );","float lumaNE = dot( rgbNE, luma );","float lumaSW = dot( rgbSW, luma );","float lumaSE = dot( rgbSE, luma );","float lumaM  = dot( rgbM,  luma );","float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );","float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );","vec2 dir;","dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));","dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));","float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );","float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );","dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),","max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),","dir * rcpDirMin)) * resolution;","vec3 rgbA = 0.5 * (","texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * ( 1.0 / 3.0 - 0.5 ) ).xyz +","texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * ( 2.0 / 3.0 - 0.5 ) ).xyz );","vec3 rgbB = rgbA * 0.5 + 0.25 * (","texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * -0.5 ).xyz +","texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * 0.5 ).xyz );","float lumaB = dot( rgbB, luma );","if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {","gl_FragColor = vec4( rgbA, opacity );","} else {","gl_FragColor = vec4( rgbB, opacity );","}","}"].join("\n")};return b});define("Shaders/FXAAShader",["DS/Shaders/FXAAShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/FXAAShader");return b});define("DS/Shaders/DeferredShaders",["DS/Visualization/ThreeJS_R57"],function(i){var k={encode_float:["float shift_right(float v, float amt) {","v = floor(v) + 0.5;","return floor(v / exp2(amt));","}","float shift_left(float v, float amt) {","return floor(v * exp2(amt) + 0.5);","}","float mask_last(float v, float bits) {","return mod(v, shift_left(1.0, bits));","}","float extract_bits(float num, float from, float to) {","from = floor(from + 0.5);","to = floor(to + 0.5);","return mask_last(shift_right(num, from), to - from);","}","vec4 encode_float(float val) {","if (val == 0.0)","return vec4(0, 0, 0, 0);","float sign = val > 0.0 ? 0.0 : 1.0;","val = abs(val);","float exponent = floor(log2(val));","float biased_exponent = exponent + 127.0;","float fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;","float t = biased_exponent / 2.0;","float last_bit_of_biased_exponent = fract(t) * 2.0;","float remaining_bits_of_biased_exponent = floor(t);","float byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;","float byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;","float byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;","float byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0;","return vec4(byte4, byte3, byte2, byte1);","}",].join("\n"),unpackFloat:["vec3 float_to_vec3( float data ) {","vec3 uncompressed;","uncompressed.x = fract( data );","float zInt = floor( data / 255.0 );","uncompressed.z = fract( zInt / 255.0 );","uncompressed.y = fract( floor( data - ( zInt * 255.0 ) ) / 255.0 );","return uncompressed;","}"].join("\n"),picking_instancing_vertex:["if (instanceId > 16777215.0) vInstancePickingColor = vec3(0.0);","else {","vInstancePickingColor.r = floor(instanceId / 65536.0);","vInstancePickingColor.g = floor((instanceId - vInstancePickingColor.r * 65536.0) / 256.0);","vInstancePickingColor.b = floor(instanceId - vInstancePickingColor.r * 65536.0 - vInstancePickingColor.g * 256.0);","vInstancePickingColor /= 255.0;","}"].join("\n"),picking_instancing_fragment:["gl_FragColor = vec4(vInstancePickingColor, 1.0);"].join("\n"),};var h={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,i.UniformsLib.skinning,{map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new i.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new i.Vector4(1,1)}}]),vertexShaderPars:["#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif"].join("\n"),vertexShaderBody:["#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif",].join("\n"),fragmentShaderPars:["#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","uniform vec3 pickingColor;"].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   #ifdef ALPHA_CHANNEL","       float alpha = texture2D( map, vUvMap ).r;","   #else","       float alpha = texture2D( map, vUvMap ).w;","   #endif","   if ( alpha < ALPHATEST ) discard;","#endif","   gl_FragColor = vec4( pickingColor, 1.0 );"].join("\n"),vertexShader:[i.ShaderChunk.clip_pars_vertex,i.ShaderChunk.skinning_pars_vertex,"#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.skinbase_vertex,i.ShaderChunk.skinning_vertex,i.ShaderChunk.default_vertex,"#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif",i.ShaderChunk.clip_vertex,i.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[i.ShaderChunk.clip_pars_fragment,"#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","uniform vec3 pickingColor;","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,"#endif",i.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   #ifdef ALPHA_CHANNEL","       float alpha = texture2D( map, vUvMap ).r;","   #else","       float alpha = texture2D( map, vUvMap ).w;","   #endif","   if ( alpha < ALPHATEST ) discard;","#endif","   gl_FragColor = vec4( pickingColor, 1.0 );","}"].join("\n")};var j={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,i.UniformsLib.skinning,{map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new i.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new i.Vector4(1,1)}}]),vertexShader:[i.ShaderChunk.clip_pars_vertex,i.ShaderChunk.skinning_pars_vertex,"#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","varying vec3 vInstancePickingColor;","void main() {",i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.skinbase_vertex,i.ShaderChunk.skinning_vertex,i.ShaderChunk.default_vertex,"#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif",i.ShaderChunk.clip_vertex,i.ShaderChunk.PDSFX_end_vertex,k.picking_instancing_vertex,"}"].join("\n"),fragmentShader:[i.ShaderChunk.clip_pars_fragment,"#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","varying vec3 vInstancePickingColor;","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,"#endif",i.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   #ifdef ALPHA_CHANNEL","       float alpha = texture2D( map, vUvMap ).r;","   #else","       float alpha = texture2D( map, vUvMap ).w;","   #endif","   if ( alpha < ALPHATEST ) discard;","#endif",k.picking_instancing_fragment,"}"].join("\n")};var b={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,{map:{type:"t",value:null},size:{type:"f",value:1},scale:{type:"f",value:500},offsetAlphaMap:{type:"v2",value:new i.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new i.Vector4(1,1)}}]),vertexShaderPars:["uniform float size;","uniform float scale;","#ifdef USE_MAP_ALPHATEST","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif"].join("\n"),vertexShaderBody:["#ifdef USE_SIZEATTENUATION","gl_PointSize = size * ( scale / length( mvPosition.xyz ) );","#else","gl_PointSize = size;","#endif",].join("\n"),fragmentShaderPars:["#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif","uniform vec3 pickingColor;"].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","   gl_FragColor = vec4( pickingColor, 1.0 );"].join("\n"),vertexShader:[i.ShaderChunk.clip_pars_vertex,"uniform float size;","uniform float scale;","#ifdef USE_MAP_ALPHATEST","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",i.ShaderChunk.PDSFX_start_particle_vertex,i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.default_vertex,i.ShaderChunk.PDSFX_point_size_vertex,i.ShaderChunk.clip_vertex,i.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[i.ShaderChunk.clip_pars_fragment,"#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif","uniform vec3 pickingColor;","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,"#endif",i.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","   gl_FragColor = vec4( pickingColor, 1.0 );","}"].join("\n")};var a={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,{map:{type:"t",value:null},size:{type:"f",value:1},scale:{type:"f",value:500},offsetAlphaMap:{type:"v2",value:new i.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new i.Vector4(1,1)}}]),vertexShader:[i.ShaderChunk.clip_pars_vertex,"uniform float size;","uniform float scale;","#ifdef USE_MAP_ALPHATEST","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","varying vec3 vInstancePickingColor;","void main() {",i.ShaderChunk.PDSFX_start_particle_vertex,i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.default_vertex,i.ShaderChunk.PDSFX_point_size_vertex,i.ShaderChunk.clip_vertex,i.ShaderChunk.PDSFX_end_vertex,k.picking_instancing_vertex,"}"].join("\n"),fragmentShader:[i.ShaderChunk.clip_pars_fragment,"#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif","varying vec3 vInstancePickingColor;","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,"#endif",i.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif",k.picking_instancing_fragment,"}"].join("\n")};var e={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,i.UniformsLib.skinning,{map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new i.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new i.Vector4(1,1)}}]),fragmentShaderPars:[k.encode_float,"varying vec4 clipPos;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif"].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   #ifdef ALPHA_CHANNEL","       float alpha = texture2D( map, vUvMap ).r;","   #else","       float alpha = texture2D( map, vUvMap ).w;","   #endif","   if ( alpha < ALPHATEST ) discard;","#endif","	float tmp = 0.5 + 0.5 * clipPos.z / clipPos.w;","	vec4 encode = encode_float(tmp);","   gl_FragColor = encode;"].join("\n"),vertexShaderPars:["varying vec4 clipPos;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif"].join("\n"),vertexShaderBody:["#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif","   clipPos = gl_Position;"].join("\n"),fragmentShader:[i.ShaderChunk.clip_pars_fragment,k.encode_float,"varying vec4 clipPos;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,"#endif",i.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   #ifdef ALPHA_CHANNEL","       float alpha = texture2D( map, vUvMap ).r;","   #else","       float alpha = texture2D( map, vUvMap ).w;","   #endif","   if ( alpha < ALPHATEST ) discard;","#endif","	#ifdef PDSFX","	float tmp = 0.5 + 0.5 * _DSclipPosition.z / _DSclipPosition.w;","	#else","	float tmp = 0.5 + 0.5 * clipPos.z / clipPos.w;","	#endif","	vec4 encode = encode_float(tmp);","   gl_FragColor = encode;","}"].join("\n"),vertexShader:[i.ShaderChunk.clip_pars_vertex,i.ShaderChunk.skinning_pars_vertex,"varying vec4 clipPos;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.skinbase_vertex,i.ShaderChunk.skinning_vertex,i.ShaderChunk.default_vertex,"#ifdef USE_MAP_ALPHATEST","   vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif",i.ShaderChunk.clip_vertex,"   clipPos = gl_Position;",i.ShaderChunk.PDSFX_end_vertex,"}"].join("\n")};var c={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,{size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new i.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new i.Vector4(1,1)}}]),fragmentShader:[i.ShaderChunk.clip_pars_fragment,k.encode_float,"varying vec4 clipPos;","uniform float size;","uniform float scale;","#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,"#endif",i.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","	#ifdef PDSFX","	float tmp = 0.5 + 0.5 * _DSclipPosition.z / _DSclipPosition.w;","	#else","	float tmp = 0.5 + 0.5 * clipPos.z / clipPos.w;","	#endif","	vec4 encode = encode_float(tmp);","   gl_FragColor = encode;","}"].join("\n"),vertexShader:[i.ShaderChunk.clip_pars_vertex,"uniform float size;","uniform float scale;","#ifdef USE_MAP_ALPHATEST","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","varying vec4 clipPos;","void main() {",i.ShaderChunk.PDSFX_start_particle_vertex,i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.default_vertex,i.ShaderChunk.PDSFX_point_size_vertex,i.ShaderChunk.clip_vertex,"   clipPos = gl_Position;",i.ShaderChunk.PDSFX_end_vertex,"}"].join("\n")};var g={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,i.UniformsLib.lines]),vertexShader:[i.ShaderChunk.clip_pars_vertex,i.ShaderChunk.lines_pars_vertex,"varying vec4 clipPos;","void main() {",i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.default_vertex,i.ShaderChunk.clip_vertex,i.ShaderChunk.lines_vertex,"   clipPos = gl_Position;",i.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[i.ShaderChunk.clip_pars_fragment,i.ShaderChunk.lines_pars_fragment,k.encode_float,"varying vec4 clipPos;","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,"#endif",i.ShaderChunk.clip_fragment,i.ShaderChunk.lines_fragment,"	#ifdef PDSFX","	float tmp = 0.5 + 0.5 * _DSclipPosition.z / _DSclipPosition.w;","	#else","	float tmp = 0.5 + 0.5 * clipPos.z / clipPos.w;","	#endif","	vec4 encode = encode_float(tmp);","   gl_FragColor = encode;","}"].join("\n")};var m={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,i.UniformsLib.skinning,{map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new i.Vector2(0,0)},repeatAlphaMap:{type:"v2",value:new i.Vector2(1,1)},bumpMap:{type:"t",value:null},bumpScale:{type:"f",value:1},offsetBumpMap:{type:"v2",value:new i.Vector2(0,0)},repeatBumpMap:{type:"v2",value:new i.Vector2(1,1)}}]),fragmentShaderPars:["varying vec3 normalView;"].join("\n"),fragmentShaderBody:["   vec3 normal = normalize( normalView );","   #ifdef DOUBLE_SIDED","       normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );","   #endif","   gl_FragColor.xyz = normal * 0.5 + 0.5;"].join("\n"),vertexShaderPars:["varying vec3 normalView;"].join("\n"),vertexShaderBody:["   normalView = normalize( mvNormal );"].join("\n"),fragmentShader:[i.ShaderChunk.clip_pars_fragment,"#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","#ifdef USE_BUMPMAP","   varying vec2 vUv;","	#ifndef PDSFX","   varying vec3 vViewPosition;","	#else","   vec3 vViewPosition;","	#endif",i.ShaderChunk.bumpmap_pars_fragment,"#endif","varying vec3 normalView;","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,i.ShaderChunk.PDSFX_viewNormal_fragment,"#ifdef USE_BUMPMAP","vViewPosition = -ComputeViewPosition();","#endif","#endif",i.ShaderChunk.clip_fragment,"   #ifdef USE_MAP_ALPHATEST","   #ifdef ALPHA_CHANNEL","       float alpha = texture2D( map, vUvMap ).r;","   #else","       float alpha = texture2D( map, vUvMap ).w;","   #endif","       if ( alpha < ALPHATEST ) discard;","   #endif","#ifdef PDSFX","   vec3 normal = ComputeViewNormal();","#else","   vec3 normal = normalize( normalView );","#endif","   #ifdef DOUBLE_SIDED","       normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );","   #endif","   #ifdef USE_BUMPMAP","       normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );","   #endif","   gl_FragColor.xyz = normal * 0.5 + 0.5;","}"].join("\n"),vertexShader:[i.ShaderChunk.clip_pars_vertex,"varying vec3 normalView;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","#ifdef USE_BUMPMAP","   varying vec2 vUv;","	#ifndef PDSFX","   varying vec3 vViewPosition;","	#endif","   uniform vec2 offsetBumpMap;","   uniform vec2 repeatBumpMap;","#endif",i.ShaderChunk.morphtarget_pars_vertex,i.ShaderChunk.skinning_pars_vertex,"void main() {",i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.morphnormal_vertex,i.ShaderChunk.skinbase_vertex,i.ShaderChunk.skinnormal_vertex,i.ShaderChunk.defaultnormal_vertex,i.ShaderChunk.morphtarget_vertex,i.ShaderChunk.skinning_vertex,i.ShaderChunk.default_vertex,i.ShaderChunk.clip_vertex,"#ifdef PDSFX","transformedNormal = _viewTangentSpace.Normal;","#endif","   normalView = transformedNormal;","   #ifdef USE_MAP_ALPHATEST","vUvMap = uv * repeatAlphaMap.xy + offsetAlphaMap.xy;","   #endif","   #ifdef USE_BUMPMAP","       vUv = uv * repeatBumpMap.xy + offsetBumpMap.xy;","       vViewPosition = -mvPosition.xyz;","   #endif",i.ShaderChunk.PDSFX_end_vertex,"}"].join("\n")};var d={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,{size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new i.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new i.Vector4(1,1)}}]),fragmentShader:[i.ShaderChunk.clip_pars_fragment,"#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,"#endif",i.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","   gl_FragColor.xyz = vec3(1.0, 0.0, 0.0);","}"].join("\n"),vertexShader:[i.ShaderChunk.clip_pars_vertex,"uniform float size;","uniform float scale;","#ifdef USE_MAP_ALPHATEST","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",i.ShaderChunk.PDSFX_start_particle_vertex,i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.default_vertex,i.ShaderChunk.clip_vertex,"	#ifdef PDSFX","   gl_PointSize = ComputePointSize();","	#else","   gl_PointSize = size * scale / length(mvPosition.xyz);","	#endif",i.ShaderChunk.PDSFX_end_vertex,"}"].join("\n")};var f={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,i.UniformsLib.skinning,{map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new i.Vector2(0,0)},repeatAlphaMap:{type:"v2",value:new i.Vector2(1,1)},bumpMap:{type:"t",value:null},bumpScale:{type:"f",value:1},offsetBumpMap:{type:"v2",value:new i.Vector2(0,0)},repeatBumpMap:{type:"v2",value:new i.Vector2(1,1)},reflectionCoef:{type:"f",value:0}}]),fragmentShaderPars:["#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","uniform float reflectionCoef;","varying vec3 normalView;","varying vec4 clipPos;"].join("\n"),fragmentShaderBody:["   #ifdef USE_MAP_ALPHATEST","   #ifdef ALPHA_CHANNEL","       float alpha = texture2D( map, vUvMap ).r;","   #else","       float alpha = texture2D( map, vUvMap ).w;","   #endif","       if ( alpha < ALPHATEST ) discard;","   #endif","   vec3 normal = normalView;","   #ifdef DOUBLE_SIDED","       normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );","   #endif","   if ((dot(normal, normal) < 0.5) || (dot(normal.xy, normal.xy) < 0.000001)) gl_FragColor.xy = vec2(0.0);","   else { gl_FragColor.xy = normalize(normal.xy) * sqrt(0.5 * normal.z + 0.5); }","   gl_FragColor.z = reflectionCoef;","   gl_FragColor.w = 0.5 + 0.5 * clipPos.z / clipPos.w;"].join("\n"),vertexShaderPars:["varying vec3 normalView;","varying vec4 clipPos;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif"].join("\n"),vertexShaderBody:["   normalView = normalize( mvNormal );","   #ifdef USE_MAP_ALPHATEST","vUvMap = uv * repeatAlphaMap.xy + offsetAlphaMap.xy;","   #endif","   clipPos = gl_Position;"].join("\n"),fragmentShader:[i.ShaderChunk.clip_pars_fragment,"#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","#ifdef USE_BUMPMAP","   varying vec2 vUv;","   varying vec3 vViewPosition;",i.ShaderChunk.bumpmap_pars_fragment,"#endif","uniform float reflectionCoef;","varying vec3 normalView;","varying vec4 clipPos;","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,i.ShaderChunk.PDSFX_viewNormal_fragment,"#ifdef USE_BUMPMAP","vViewPosition = -ComputeViewPosition();","#endif","#endif",i.ShaderChunk.clip_fragment,"   #ifdef USE_MAP_ALPHATEST","   #ifdef ALPHA_CHANNEL","       float alpha = texture2D( map, vUvMap ).r;","   #else","       float alpha = texture2D( map, vUvMap ).w;","   #endif","       if ( alpha < ALPHATEST ) discard;","   #endif","#ifdef PDSFX","   vec3 normal = ComputeViewNormal();","#else","   vec3 normal = normalView;","#endif","   #ifdef DOUBLE_SIDED","       normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );","   #endif","   #ifdef USE_BUMPMAP","       normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );","   #endif","  vec2 tmpV;","   if ((dot(normal, normal) < 0.5) || (dot(normal.xy, normal.xy) < 0.000001)) tmpV = vec2(0.0);","   else tmpV = normalize(normal.xy) * sqrt(0.5 * normal.z + 0.5);",window.webVRBypass?"  gl_FragColor.xy = vec2(0.5,0.5)+0.5*tmpV;":"  gl_FragColor.xy = tmpV;","   gl_FragColor.z = reflectionCoef;","#ifdef PDSFX","   gl_FragColor.w = 0.5 + 0.5 * _DSclipPosition.z / _DSclipPosition.w;","#else","   gl_FragColor.w = 0.5 + 0.5 * clipPos.z / clipPos.w;","#endif","}"].join("\n"),vertexShader:[i.ShaderChunk.clip_pars_vertex,"varying vec3 normalView;","varying vec4 clipPos;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","#ifdef USE_BUMPMAP","   varying vec2 vUv;","   varying vec3 vViewPosition;","   uniform vec2 offsetBumpMap;","   uniform vec2 repeatBumpMap;","#endif",i.ShaderChunk.morphtarget_pars_vertex,i.ShaderChunk.skinning_pars_vertex,"void main() {",i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.morphnormal_vertex,i.ShaderChunk.skinbase_vertex,i.ShaderChunk.skinnormal_vertex,i.ShaderChunk.defaultnormal_vertex,i.ShaderChunk.morphtarget_vertex,i.ShaderChunk.skinning_vertex,i.ShaderChunk.default_vertex,i.ShaderChunk.clip_vertex,"#ifdef PDSFX","transformedNormal = _viewTangentSpace.Normal;","#endif","   normalView = transformedNormal;","   #ifdef USE_MAP_ALPHATEST","vUvMap = uv * repeatAlphaMap.xy + offsetAlphaMap.xy;","   #endif","   #ifdef USE_BUMPMAP","       vUv = uv * repeatBumpMap.xy + offsetBumpMap.xy;","       vViewPosition = -mvPosition.xyz;","   #endif","   clipPos = gl_Position;",i.ShaderChunk.PDSFX_end_vertex,"}"].join("\n")};var l={uniforms:i.UniformsUtils.merge([i.UniformsLib.clipPlanes,{size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new i.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new i.Vector4(1,1)}}]),fragmentShader:[i.ShaderChunk.clip_pars_fragment,"varying vec4 clipPos;","uniform float size;","uniform float scale;","#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif","void main() {","#ifdef PDSFX","ComputeCommonValues();",i.ShaderChunk.PDSFX_discard_fragment,"#endif",i.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","   gl_FragColor.xyz = vec3(1.0, 0.0, 0.0);","#ifdef PDSFX","   gl_FragColor.w = 0.5 + 0.5 * _DSclipPosition.z / _DSclipPosition.w;","#else","   gl_FragColor.w = 0.5 + 0.5 * clipPos.z / clipPos.w;","#endif","}"].join("\n"),vertexShader:[i.ShaderChunk.clip_pars_vertex,"uniform float size;","uniform float scale;","varying vec4 clipPos;","#ifdef USE_MAP_ALPHATEST","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",i.ShaderChunk.PDSFX_start_particle_vertex,i.ShaderChunk.PDSFX_start_vertex,i.ShaderChunk.default_vertex,i.ShaderChunk.clip_vertex,"   clipPos = gl_Position;",i.ShaderChunk.PDSFX_point_size_vertex,i.ShaderChunk.PDSFX_end_vertex,"}"].join("\n")};return{NormalDepth:f,NormalDepthParticle:l,Normal:m,NormalParticle:d,Depth:e,DepthParticle:c,DepthEdge:g,PickingFragment:h,PickingFragmentInstancing:j,PickingPointFragmentInstancing:a,PickingPointFragment:b,Chunks:k}});define("Shaders/DeferredShaders",["DS/Shaders/DeferredShaders","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/DeferredShaders");return b});define("DS/Shaders/MirrorShaders",["DS/Visualization/ThreeJS_DS"],function(c){var b={uniforms:{tDiffuse:{type:"t",value:null},texelSize:{type:"v2",value:new c.Vector2()},},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",c._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["varying vec2 vUv;","uniform sampler2D tDiffuse;","uniform vec2 texelSize;","vec4 blur(){","vec4 sum = vec4(0);","int nbSamples = 0;","float pixelSizeX = 1.0 / texelSize.x;","float pixelSizeY = 1.0 / texelSize.y;","for( int i = -10; i < 10; i+=2 ){","for( int j = -10; j < 10; j+=2 ){","sum += texture2D( tDiffuse, vUv + vec2(float(i)*pixelSizeX,float(j)*pixelSizeY) );","nbSamples++;","}","}","return sum / float(nbSamples);","}","void main() {","gl_FragColor = blur();","} "].join("\n")};var a={uniforms:{tReflectedScene:{type:"t",value:null},tDiffuse:{type:"t",value:null},reflectivity:{type:"f",value:0.3},},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",c._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["varying vec2 vUv;","uniform sampler2D tDiffuse;","uniform sampler2D tReflectedScene;","uniform float reflectivity;","void main() {","vec4 mirrorPlane    = texture2D(tDiffuse, vUv);","vec4 reflectedScene = texture2D(tReflectedScene, vUv);","float blend = 1.0 - reflectivity;","vec3 mirrorMix = (1.0 - blend) * reflectedScene.xyz + blend * mirrorPlane.xyz;","gl_FragColor = vec4(mirrorMix * reflectedScene.w + mirrorPlane.xyz * (1.0 - reflectedScene.w), mirrorPlane.w);","} "].join("\n")};return{blend:a,reflectedScene:b,}});define("Shaders/MirrorShaders",["DS/Shaders/MirrorShaders","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/MirrorShaders");return b});define("DS/Shaders/PreComputeSDFFontIterativeShaders",["DS/Visualization/ThreeJS_DS"],function(h){var g={defines:{},uniforms:{tDiffuse:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",h._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","float dist = texture2D(tDiffuse, vUv).r;","gl_FragColor = vec4(vec3(mod(10.0*dist, 1.0)), 1.0);","}"].join("\n")};var f={defines:{},uniforms:{prevMap:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",h._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D prevMap;","varying vec2 vUv;","void main() {","vec4 texel = texture2D(prevMap, vUv);","float diff = length(texel.rg) - length(texel.ba);","diff = clamp(20.0 * diff, -1.0, 1.0);","float toto = clamp(0.5 * diff + 0.5, 0.0, 1.0);","gl_FragColor = vec4(vec3(toto), 1.0);","}"].join("\n")};var a={defines:{},uniforms:{textureSize:{type:"v2",value:new h.Vector2(256,256)},invSize:{type:"v2",value:new h.Vector2(1/256,1/256)},tDiffuse:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",h._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec2 textureSize;","uniform vec2 invSize;","varying vec2 vUv;","float aastep (float threshold , float value) {","float afwidth = 0.7 * length ( vec2(dFdx(value), dFdy(value)));","return smoothstep (threshold - afwidth, threshold + afwidth, value);","}","void main() {","vec2 uv = vUv * textureSize;","vec2 uv00 = floor(uv - vec2(0.5));","vec2 uvlerp = uv - uv00 - vec2(0.5);","vec2 st00 = (uv00 + vec2(0.5)) * invSize;","vec4 D00 = texture2D(tDiffuse, st00);","vec4 D10 = texture2D(tDiffuse, st00 + vec2(invSize.x, 0.0));","vec4 D01 = texture2D(tDiffuse, st00 + vec2(0.0, invSize.y));","vec4 D11 = texture2D(tDiffuse, st00 + vec2(invSize.x, invSize.y));","vec2 D00_10 = vec2(D00.r, D10.r)*255.0-128.0 + vec2(D00.g, D10.g)*(255.0/256.0);","vec2 D01_11 = vec2(D01.r, D11.r)*255.0-128.0 + vec2(D01.g, D11.g)*(255.0/256.0);","vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);","float D = mix(D0_1.x, D0_1.y, uvlerp.x);","float g = aastep(0.0, D);","gl_FragColor = vec4(vec3(g), 1.0);","}"].join("\n")};var e={defines:{},uniforms:{prevMap:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",h._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D prevMap;","varying vec2 vUv;","void main() {","float texel = texture2D(prevMap, vUv).r;","gl_FragColor = vec4(texel > 0.99999 ? vec2(9999.0) : vec2(0.0), texel > 0.99999 ? vec2(0.0) : vec2(9999.0));","}"].join("\n")};var i={defines:{},uniforms:{invSize:{type:"v2",value:new h.Vector2(1/256,1/256)},prevMap:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",h._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D prevMap;","uniform vec2 invSize;","varying vec2 vUv;","void ComputeDistance(vec2 uv, vec2 offset, inout vec4 bestseed) {","vec2 newvec = uv + offset;","vec4 newseed = texture2D(prevMap, newvec);","if (newvec.x >= 0.0 && newvec.x <= 1.0 && newvec.y >= 0.0 && newvec.y <= 1.0) {","newseed.rg += offset;","newseed.ba += offset;","if (length(newseed.rg) < length(bestseed.rg)) {","bestseed.rg = newseed.rg;","}","if (length(newseed.ba) < length(bestseed.ba)) {","bestseed.ba = newseed.ba;","}","}","}","void main() {","vec4 bestseed = texture2D(prevMap, vUv);","ComputeDistance(vUv, vec2(-invSize.x, -invSize.y), bestseed);","ComputeDistance(vUv, vec2(-invSize.x,        0.0), bestseed);","ComputeDistance(vUv, vec2(-invSize.x,  invSize.y), bestseed);","ComputeDistance(vUv, vec2(0.0, -invSize.y),        bestseed);","ComputeDistance(vUv, vec2(0.0,  invSize.y),        bestseed);","ComputeDistance(vUv, vec2(invSize.x, -invSize.y), bestseed);","ComputeDistance(vUv, vec2(invSize.x,        0.0), bestseed);","ComputeDistance(vUv, vec2(invSize.x,  invSize.y), bestseed);","gl_FragColor = bestseed;","}"].join("\n")};var d={defines:{},uniforms:{tDiffuse1:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",h._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse1;","varying vec2 vUv;","void main() {","vec4 texel = texture2D(tDiffuse1, vUv);","gl_FragColor = vec4(texel);","}"].join("\n")};var c={uniforms:{tDiffuse2:{type:"t",value:null},tileMin:{type:"v2",value:new h.Vector2(0,0)},tileMax:{type:"v2",value:new h.Vector2(64,64)},realTileMax:{type:"v2",value:new h.Vector2(64,64)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",h._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform vec2 tileMin;","uniform vec2 tileMax;","uniform vec2 realTileMax;","uniform sampler2D tDiffuse2;","varying vec2 vUv;","void main() {","vec2 uv = vUv;","if (uv.x < tileMin.x) { discard; }","vec2 tiledUV = (uv - tileMin) / (tileMax - tileMin);","tiledUV.y = 1.0 - tiledUV.y;","gl_FragColor = texture2D(tDiffuse2, tiledUV);","}"].join("\n")};var b={defines:{},uniforms:{prevMap:{type:"t",value:null},invSize:{type:"v2",value:new h.Vector2(1/256,1/256)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",h._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["const float SQRT2 = 1.41421356;","uniform sampler2D prevMap;","uniform vec2 invSize;","varying vec2 vUv;","void main() {","#if defined(OUTSIDE)","float value = texture2D(prevMap, vUv).r;","#else","float value = texture2D(prevMap, vUv).r;","#endif","float qv = invSize.x;","float qd = SQRT2 * invSize.x;","#if defined(OUTSIDE)","float lValue  = texture2D(prevMap, vec2(vUv.x - invSize.x, vUv.y)).r + qv;","float rValue  = texture2D(prevMap, vec2(vUv.x + invSize.x, vUv.y)).r + qv;","float bValue  = texture2D(prevMap, vec2(vUv.x, vUv.y - invSize.y)).r + qv;","float tValue  = texture2D(prevMap, vec2(vUv.x, vUv.y + invSize.y)).r + qv;","float tlValue = texture2D(prevMap, vec2(vUv.x - invSize.x, vUv.y + invSize.y)).r + qd;","float trValue = texture2D(prevMap, vec2(vUv.x + invSize.x, vUv.y + invSize.y)).r + qd;","float blValue = texture2D(prevMap, vec2(vUv.x - invSize.x, vUv.y - invSize.y)).r + qd;","float brValue = texture2D(prevMap, vec2(vUv.x + invSize.x, vUv.y - invSize.y)).r + qd;","if (vUv.x - invSize.x > 0.0) { value = min(lValue, value); }","if (vUv.x + invSize.x < 1.0) { value = min(rValue, value); }","if (vUv.y - invSize.y > 0.0) { value = min(bValue, value); }","if (vUv.y + invSize.y < 1.0) { value = min(tValue, value); }","if (vUv.x - invSize.x > 0.0 && vUv.y + invSize.y < 1.0) { value = min(tlValue, value); }","if (vUv.x + invSize.x < 1.0 && vUv.y + invSize.y < 1.0) { value = min(trValue, value); }","if (vUv.x - invSize.x > 0.0 && vUv.y - invSize.y > 0.0) { value = min(blValue, value); }","if (vUv.x + invSize.x < 1.0 && vUv.y - invSize.y > 0.0) { value = min(brValue, value); }","#else","float lValue  = mix(1.0, texture2D(prevMap, vec2(vUv.x - invSize.x, vUv.y)).r + qv, inScreen4.x);","float rValue  = mix(1.0, texture2D(prevMap, vec2(vUv.x + invSize.x, vUv.y)).r + qv, inScreen4.y);","float bValue  = mix(1.0, texture2D(prevMap, vec2(vUv.x, vUv.y - invSize.y)).r + qv, inScreen4.z);","float tValue  = mix(1.0, texture2D(prevMap, vec2(vUv.x, vUv.y + invSize.y)).r + qv, inScreen4.w);","float tlValue = mix(1.0, texture2D(prevMap, vec2(vUv.x - invSize.x, vUv.y + invSize.y)).r + qd, inScreen4.x * inScreen4.w);","float trValue = mix(1.0, texture2D(prevMap, vec2(vUv.x + invSize.x, vUv.y + invSize.y)).r + qd, inScreen4.y * inScreen4.w);","float blValue = mix(1.0, texture2D(prevMap, vec2(vUv.x - invSize.x, vUv.y - invSize.y)).r + qd, inScreen4.x * inScreen4.z);","float brValue = mix(1.0, texture2D(prevMap, vec2(vUv.x + invSize.x, vUv.y - invSize.y)).r + qd, inScreen4.y * inScreen4.z);","#endif","gl_FragColor = vec4(vec3(value), 1.0);","}"].join("\n")};return{ComputeSDFFont:b,ComputeSDFFontSeed:e,ComputeSDFFontFlood:i,ComputeSDFFontDisplay:g,ComputeSDFFontDisplayResult:a,ComputeSDFFontMerge:f,Nothing:d,MergeTiles:c}});define("DS/Shaders/DownSamplingShaders",["DS/Visualization/ThreeJS_DS"],function(b){var a=function(f){var g="tDiffuse"+(f?f:"");var e={uniforms:{invSize:{type:"v2",value:new b.Vector2(512,512)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform vec2 invSize;","uniform sampler2D "+g+";","varying vec2 vUv;","void main() {","gl_FragColor = texture2D("+g+", vUv);","}"].join("\n")};e.uniforms[g]={type:"t",value:null};return e};var d=function(f){var g="tDiffuse"+(f?f:"");var e={uniforms:{invSize:{type:"v2",value:new b.Vector2(512,512)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform vec2 invSize;","uniform sampler2D "+g+";","varying vec2 vUv;","void main() {","vec3 result = vec3(0.0);","float total = 0.0;","for (int i = -2; i <= 2; ++i) {","for (int j = -2; j <= 2; ++j) {","vec2 offset = 1.0 * invSize * vec2(float(i), float(j));","float weight = 1.0 / (1.0 + dot(offset, offset));","result += weight * texture2D("+g+", vUv + offset).xyz;","total += weight;","}","}","result /= total;","gl_FragColor = vec4(result, 1.0);","}"].join("\n")};e.uniforms[g]={type:"t",value:null};return e};var c=function(p){var n={tDiffuse1:{type:"t",value:null},};var j=["uniform sampler2D tDiffuse1;",];var m=["if (vUv.y < 0.5) {","gl_FragColor = texture2D(tDiffuse1, vec2(vUv.x, 2.0 * vUv.y));","}",];for(var g=0;g<p;g++){var e=(g+2);var h=Math.pow(2,-e);var l=1/h;n["tDiffuse"+e]={type:"t",value:null};j.push("uniform sampler2D tDiffuse"+e+";");var f=1-h;var o=2*h;m.push("else if (vUv.y < "+f+" && vUv.x < "+o+") {");m.push("vec2 uv = vec2(float("+(l/2)+") * vUv.x, float("+l+") * (vUv.y - "+(1-o)+"));");m.push("gl_FragColor = texture2D(tDiffuse"+e+", uv);");m.push("}")}m.push("else {");m.push("gl_FragColor = vec4(vec3(0.0), 1.0);");m.push("}");j=j.join("\n");m=m.join("\n");var k={uniforms:n,vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:[j,"varying vec2 vUv;","void main() {",m,"}"].join("\n")};return k};return{DownSampling:a(2),DownSamplingBlur:d(2),MergeMips:c}});define("DS/Shaders/SSAO3Shader",["DS/Visualization/ThreeJS_DS"],function(f){var g=navigator.userAgent.toLowerCase().indexOf("firefox")>-1;var e={computeVertexPositionVS:["vec4 normalDepth = texture2D( tNormalDepth, vUv );",window.webVRBypass?"normalDepth.xy = vec2(-1.0,-1.0)+2.0*normalDepth.xy;":"","float z = normalDepth.w;","if ( z < 0.1 ) return;","vec2 xy = vUv * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4(xy, 2.0 * z - 1.0, 1.0);","vec4 vertexPositionVS = realProjectionMatrixInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","vertexPositionVS.w = 1.0;"].join("\n"),computeNormal:["vec3 normal = vec3(0.0, 0.0, 1.0);","if (dot(normalDepth.xy, normalDepth.xy) > 0.000001) {","   normal.z = 2.0 * dot(normalDepth.xy, normalDepth.xy) - 1.0;","   normal.xy = normalize(normalDepth.xy) * sqrt(1.0 - normal.z * normal.z);","}"].join("\n")},b={defines:{NB_SAMPLES:24,INV_NB_SAMPLES:1/72,TAU:"61.0"},uniforms:{tNormalDepth:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new f.Matrix4()},screenRatio:{type:"f",value:0.5},screenSize:{type:"v2",value:new f.Vector2(800,600)},invSize:{type:"v2",value:new f.Vector2(1/800,1/600)},radius:{type:"f",value:0.5},thresholdAngle:{type:"f",value:0.12},maxRadiusInPixels:{type:"f",value:30},prevMap:{type:"t",value:null},numIteration:{type:"i",value:0}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;",f._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrixInverse;","uniform float screenRatio;","uniform vec2 screenSize;","uniform vec2 invSize;","uniform float radius;","uniform float thresholdAngle;","uniform float maxRadiusInPixels;","uniform int numIteration;","uniform sampler2D prevMap;","uniform sampler2D tNormalDepth;","varying vec2 vUv;","const float PI = 3.14159265358979323846264;","const float one_over_tan_225 = 2.414213562373095;","const float sigma = 0.25;","float random(vec3 scale, float seed) {","  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","float Random1D(float seed) {","return random(vec3(12.9898, 78.233, 151.7182), seed);","}","void main() {","  gl_FragColor = vec4(1.0);",e.computeVertexPositionVS,e.computeNormal,"  vec3 origin = vertexPositionVS.xyz;","  float projRadius = - 0.5 * one_over_tan_225 * radius / origin.z;","  float scaleRadius = min(1.0, maxRadiusInPixels * invSize.y / projRadius);","  projRadius *= scaleRadius;","  float newRadius = scaleRadius * radius;","  float newRadius2 = newRadius * newRadius;","  float oneOverRadius2 = 1.0 / (newRadius2 + 0.0001);","  float maxInvSize = max(invSize.x, invSize.y);","  float occlusion = 0.0;","  float phi = 100.0 * Random1D(vUv.x + vUv.y);","  for (int i = 0; i < NB_SAMPLES; ++i) {",g?"    if (i >= NB_SAMPLES) { continue; }":"","    float alpha = (float(3 * i + numIteration) + 0.5) * INV_NB_SAMPLES;","    float h = max(maxInvSize, projRadius * alpha);","    float theta = 2.0 * PI * alpha * TAU + phi;","    vec2 u = vec2(screenRatio * cos(theta), sin(theta));","    vec2 uvSample = vUv + h * u;","    uvSample = floor(screenSize * uvSample) + vec2(0.5);","    uvSample *= invSize;","    float z = texture2D(tNormalDepth, uvSample).w;","    vec2 inScreen = step(vec2(0.0), uvSample) * step(vec2(-1.0), -uvSample) * step(0.0, z);","    vec4 posProjected = vec4(uvSample * 2.0 - 1.0, 2.0 * z - 1.0, 1.0);","    vec4 posVS = realProjectionMatrixInverse * posProjected;","    posVS.xyz /= posVS.w;","    vec3 Vi = posVS.xyz - origin;","    occlusion += inScreen.x * inScreen.y * max(0.0, dot(normalize(Vi), normal) - thresholdAngle) * max(0.0, newRadius2 - dot(Vi, Vi)) * oneOverRadius2;","  }","  occlusion = max(0.0, 1.0 - 2.0 * sigma * (2.0 - 1.0 * abs(normal.z)) * occlusion * 3.0 * INV_NB_SAMPLES);","  float prevAO = texture2D( prevMap, vUv ).r;","  gl_FragColor = vec4(vec3((prevAO * float(numIteration) + occlusion) / (float(numIteration) + 1.0)), 1.0);","}"].join("\n")},a={uniforms:{tNormalDepth:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new f.Matrix4()},screenRatio:{type:"f",value:0.5},nbSamples:{type:"i",value:12},tau:{type:"f",value:7},radius:{type:"f",value:0.5},thresholdAngle:{type:"f",value:0.071},screenSize:{type:"v2",value:new f.Vector2(800,600)},invSize:{type:"v2",value:new f.Vector2(1/800,1/600)},maxRadiusInPixels:{type:"f",value:30}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;",f._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrixInverse;","uniform float screenRatio;","uniform vec2 screenSize;","uniform vec2 invSize;","uniform float radius;","uniform int nbSamples;","uniform float tau;","uniform float thresholdAngle;","uniform float maxRadiusInPixels;","uniform sampler2D tNormalDepth;","varying vec2 vUv;","const int kernelSize = 32;","const float PI = 3.14159265358979323846264;","const float one_over_tan_225 = 2.414213562373095;","const float sigma = 0.25;","float random(vec3 scale, float seed) {","  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","float Random1D(float seed) {","return random(vec3(12.9898, 78.233, 151.7182), seed);","}","void main() {","  gl_FragColor = vec4(1.0);",e.computeVertexPositionVS,e.computeNormal,"  vec3 origin = vertexPositionVS.xyz;","  float projRadius = - 0.5 * one_over_tan_225 * radius / origin.z;","  float scaleRadius = min(1.0, maxRadiusInPixels * invSize.y / projRadius);","  projRadius *= scaleRadius;","  float newRadius = scaleRadius * radius;","  float newRadius2 = newRadius * newRadius;","  float oneOverRadius2 = 1.0 / (newRadius2 + 0.0001);","  float maxInvSize = max(invSize.x, invSize.y);","  float occlusion = 0.0;","  float phi = 100.0 * Random1D(vUv.x + vUv.y);","  for (int i = 0; i < kernelSize; ++i) {","    if (i >= nbSamples) { continue; }","    float alpha = (float(i) + 0.5) / float(nbSamples);","    float h = max(maxInvSize, projRadius * alpha);","    float theta = 2.0 * PI * alpha * tau + phi;","    vec2 u = vec2(screenRatio * cos(theta), sin(theta));","    vec2 uvSample = vUv + h * u;","    uvSample = floor(screenSize * uvSample) + vec2(0.5);","    uvSample *= invSize;","    float z = texture2D(tNormalDepth, uvSample).w;","    vec2 inScreen = step(vec2(0.0), uvSample) * step(vec2(-1.0), -uvSample) * step(0.0, z);","    vec4 posProjected = vec4(uvSample * 2.0 - 1.0, 2.0 * z - 1.0, 1.0);","    vec4 posVS = realProjectionMatrixInverse * posProjected;","    posVS.xyz /= posVS.w;","    vec3 Vi = posVS.xyz - origin;","    occlusion += inScreen.x * inScreen.y * max(0.0, dot(normalize(Vi), normal) - thresholdAngle) * max(0.0, newRadius2 - dot(Vi, Vi)) * oneOverRadius2;","  }","  occlusion = max(0.0, 1.0 - 2.0 * sigma * (2.0 - 1.0 * abs(normal.z)) * occlusion / float(nbSamples));","  gl_FragColor = vec4(vec3(occlusion), 1.0);","}"].join("\n")},d={uniforms:{tNormalDepth:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new f.Matrix4()},screenRatio:{type:"f",value:0.5},nbSamples:{type:"i",value:12},tau:{type:"f",value:7},radius:{type:"f",value:0.5},thresholdAngle:{type:"f",value:0.071},screenSize:{type:"v2",value:new f.Vector2(800,600)},invSize:{type:"v2",value:new f.Vector2(1/800,1/600)},maxRadiusInPixels:{type:"f",value:30}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;",f._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrixInverse;","uniform float screenRatio;","uniform vec2 screenSize;","uniform vec2 invSize;","uniform float radius;","uniform int nbSamples;","uniform float tau;","uniform float thresholdAngle;","uniform float maxRadiusInPixels;","uniform sampler2D tNormalDepth;","varying vec2 vUv;","const int nbDirections = 6;","const int nbSteps = 4;","const float invNbDirections = 1.0 / float(nbDirections);","const float invNbSteps = 1.0 / float(nbSteps);","const float PI = 3.14159265358979323846264;","const float one_over_tan_225 = 2.414213562373095;","const float sigma = 0.25;","float random(vec3 scale, float seed) {","  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","float Random1D(float seed) {","return random(vec3(12.9898, 78.233, 151.7182), seed);","}","vec3 minDiff(vec3 P, vec3 Pr, vec3 Pl) {","vec3 V1 = Pr - P;","vec3 V2 = P - Pl;","return (dot(V1, V1) < dot(V2, V2)) ? V1 : V2;","}","float invLength(vec2 v) {","return inversesqrt(dot(v, v));","}","vec3 getViewPosition(vec2 uv) {","vec4 normalDepth = texture2D(tNormalDepth, uv);","float z = normalDepth.w;","vec2 xy = uv * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4(xy, 2.0 * z - 1.0, 1.0);","vec4 vertexPositionVS = realProjectionMatrixInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","return vertexPositionVS.xyz;","}","void main() {","  gl_FragColor = vec4(1.0);","  vec3 origin = getViewPosition(vUv);","  vec3 Pr = getViewPosition(vUv + vec2( invSize.x, 0.0));","  vec3 Pl = getViewPosition(vUv + vec2(-invSize.x, 0.0));","  vec3 Pt = getViewPosition(vUv + vec2(0.0,  invSize.y));","  vec3 Pb = getViewPosition(vUv + vec2(0.0, -invSize.y));","  vec3 dPdu = minDiff(origin, Pr, Pl);","  vec3 dPdv = minDiff(origin, Pt, Pb) * screenRatio;","  float projRadius = - 0.5 * one_over_tan_225 * radius / origin.z;","  float maxScaleRadius = min(1.0, maxRadiusInPixels * invSize.y / projRadius);","  float minScaleRadius = max(1.0, float(nbSteps) * invSize.y / projRadius);","  float scaleRadius = minScaleRadius * maxScaleRadius;","  projRadius *= scaleRadius;","  float newRadius = scaleRadius * radius;","  float newRadius2 = newRadius * newRadius;","  float oneOverRadius2 = 1.0 / (newRadius2 + 0.0001);","  float h = projRadius * invNbSteps;","  float occlusion = 0.0;","  float phi = 100.0 * Random1D(vUv.x + vUv.y);","  float dTheta = 2.0 * PI * invNbDirections;","  for (int j = 0; j < nbDirections; j++) {","    float theta = dTheta * float(j) + phi;","    vec2 duv = h * vec2(screenRatio * cos(theta), sin(theta));","    vec3 T = duv.x * dPdu + duv.y * dPdv;","    float tanH = T.z * invLength(T.xy) + tan(30.0 * PI / 180.0);","    float sinH = tanH * inversesqrt(tanH * tanH + 1.0);","    vec2 uvSample = vUv;","    float tanS;","    vec3 S;","    float d2;","    for (int i = 0; i < nbSteps; ++i) {","      uvSample += duv;","      S = getViewPosition(uvSample);","      tanS =(S.z - origin.z) * invLength(S.xy - origin.xy);","      d2 = dot(S - origin, S - origin);","      if (d2 < newRadius2 && tanS > tanH) {","        float sinS = tanS * inversesqrt(tanS * tanS + 1.0);","        occlusion += (1.0 - d2 * oneOverRadius2) * (sinS - sinH);","        tanH = tanS;","        sinH = sinS;","      }","    }","  }","  gl_FragColor = vec4(vec3(1.0 - 0.5 * occlusion * invNbDirections), 1.0);","}"].join("\n")},c={uniforms:{tNormalDepth:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new f.Matrix4()},screenMin:{type:"f",value:1000},screenRatio:{type:"f",value:0.5},nbSamples:{type:"i",value:12},tau:{type:"f",value:7},radius:{type:"f",value:0.5},thresholdAngle:{type:"f",value:0.071}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;",f._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrixInverse;","uniform float screenMin;","uniform float screenRatio;","uniform float radius;","uniform int nbSamples;","uniform float tau;","uniform float thresholdAngle;","uniform sampler2D tNormalDepth;","varying vec2 vUv;","const int kernelSize = 32;","const float PI = 3.14159265358979323846264;","const float one_over_tan_225 = 2.414213562373095;","const float sigma = 0.25;","float random(vec3 scale, float seed) {","  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","float Random1D(float seed) {","return random(vec3(12.9898, 78.233, 151.7182), seed);","}","void main() {","  gl_FragColor = vec4(1.0);",e.computeVertexPositionVS,e.computeNormal,"  vec3 origin = vertexPositionVS.xyz;","  float projRadius = - 0.5 * one_over_tan_225 * radius / origin.z;","  float minDelta = projRadius / float(nbSamples);","  float scaleRadius = max(1.0, (8.0 / screenMin) / minDelta);","  projRadius *= scaleRadius;","  float newRadius = scaleRadius * radius;","  float newRadius2 = newRadius * newRadius;","  float occlusion = 0.0;","  float phi = 100.0 * Random1D(vUv.x + vUv.y);","  for (int i = 0; i < kernelSize; ++i) {","    if (i >= nbSamples) { continue; }","    float alpha = (float(i) + 0.5) / float(nbSamples);","    float h = projRadius * alpha * 0.5;","    float theta = 2.0 * PI * alpha * tau + phi;","    vec2 u = vec2(screenRatio * cos(theta), sin(theta));","    vec2 uvSample = vUv + h * u;","    float z = texture2D(tNormalDepth, uvSample).w;","    bvec4 inScreen4 = bvec4(uvSample.x >= 0.0, uvSample.x <= 1.0, uvSample.y >= 0.0, uvSample.y <= 1.0);","    bool inScreen = all(inScreen4);","    if (all(bvec2(inScreen, z > 0.0))) {","      vec4 posProjected = vec4(uvSample * 2.0 - 1.0, 2.0 * z - 1.0, 1.0);","      vec4 posVS = realProjectionMatrixInverse * posProjected;","      posVS.xyz /= posVS.w;","      vec3 Vi = posVS.xyz - origin;","      occlusion += max(0.0, dot(normalize(Vi), normal) - thresholdAngle) * max(0.0, newRadius2 - dot(Vi, Vi)) / (newRadius2 + 0.0001);","    }","  }","  occlusion = max(0.0, 1.0 - 2.0 * sigma * (2.0 - 1.0 * abs(normal.z)) * occlusion / float(nbSamples));","  gl_FragColor = vec4(vec3(occlusion), 1.0);","}"].join("\n")};return{SSAO_V0:c,SSAO_V1:b,SSAO_V2:a,SSAO_HBAO:d}});define("Shaders/SSAO3Shader",["DS/Shaders/SSAO3Shader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/SSAO3Shader");return b});define("DS/Shaders/DisplayShadowMapsShader",["DS/Visualization/ThreeJS_DS"],function(b){var a={uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null},tDiffuse3:{type:"t",value:null},tDiffuse4:{type:"t",value:null},tDiffuse5:{type:"t",value:null},offset:{type:"v2",value:new b.Vector2(0.505,0.01)},scale:{type:"f",value:0.485},offset2:{type:"v2",value:new b.Vector2(0.01,0.01)},scale2:{type:"f",value:0.485},offset3:{type:"v2",value:new b.Vector2(0.505,0.505)},scale3:{type:"f",value:0.485},offset4:{type:"v2",value:new b.Vector2(0.01,0.505)},scale4:{type:"f",value:0.485}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tDiffuse2;","uniform sampler2D tDiffuse3;","uniform sampler2D tDiffuse4;","uniform sampler2D tDiffuse5;","uniform vec2 offset;","uniform float scale;","uniform vec2 offset2;","uniform float scale2;","uniform vec2 offset3;","uniform float scale3;","uniform vec2 offset4;","uniform float scale4;","varying vec2 vUv;","void main() {","gl_FragColor = vec4(0.0);","vec2 vUv2 = (vUv - offset) / scale;","vec2 vUv3 = (vUv - offset2) / scale2;","vec2 vUv4 = (vUv - offset3) / scale3;","vec2 vUv5 = (vUv - offset4) / scale4;","if (vUv2.x > 0.0 && vUv2.y > 0.0 && vUv2.x < 1.0 && vUv2.y < 1.0) {","    vec4 normalDepth = texture2D( tDiffuse2, vUv2 );","    gl_FragColor = vec4(vec3(normalDepth.w), 0.7); return;","} else if (vUv3.x > 0.0 && vUv3.y > 0.0 && vUv3.x < 1.0 && vUv3.y < 1.0) {","    vec4 normalDepth = texture2D( tDiffuse3, vUv3 );","    gl_FragColor = vec4(vec3(normalDepth.w), 0.7); return;","} else if (vUv4.x > 0.0 && vUv4.y > 0.0 && vUv4.x < 1.0 && vUv4.y < 1.0) {","    vec4 normalDepth = texture2D( tDiffuse4, vUv4 );","    gl_FragColor = vec4(vec3(normalDepth.w), 0.7); return;","} else if (vUv5.x > 0.0 && vUv5.y > 0.0 && vUv5.x < 1.0 && vUv5.y < 1.0) {","    vec4 normalDepth = texture2D( tDiffuse5, vUv5 );","    gl_FragColor = vec4(vec3(normalDepth.w), 0.7); return;","}","}"].join("\n")};return a});define("Shaders/DisplayShadowMapsShader",["DS/Shaders/DisplayShadowMapsShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/DisplayShadowMapsShader");return b});define("DS/Shaders/SSAOShader",["DS/Visualization/ThreeJS_DS"],function(b){var c={computeVertexPositionVS:["vec4 normalDepth = texture2D( tNormalDepth, vUv );","float z = normalDepth.w;","if ( z == 0.0 ) discard;","vec2 xy = vUv * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4( xy, z, 1.0 );","vec4 vertexPositionVS = ProjectionMatrixInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","vertexPositionVS.w = 1.0;"].join("\n"),computeNormal:["vec3 normal = normalDepth.xyz * 2.0 - 1.0;"].join("\n")},a={uniforms:{tNormalDepth:{type:"t",value:null},ProjectionMatrixInverse:{type:"m4",value:new b.Matrix4()},ProjectionMatrix:{type:"m4",value:new b.Matrix4()},Intensity:{type:"f",value:2},OccluderBias:{type:"f",value:0.05},SamplingRadius:{type:"f",value:1},NbDirection:{type:"i",value:4},NbSamples:{type:"i",value:4},screenHeight:{type:"f",value:891},screenWidth:{type:"f",value:950},kernel:{type:"v2v",value:[]}},vertexShader:["varying vec2 vUv;","void main() {","vec4 pos = vec4(sign(position.xy), 0.0, 1.0);","vUv = pos.xy * vec2(0.5, 0.5) + 0.5;","gl_Position = pos;","}"].join("\n"),fragmentShader:["uniform sampler2D tNormalDepth;","uniform mat4 ProjectionMatrixInverse;","uniform mat4 ProjectionMatrix;","uniform float SamplingRadius;","uniform float OccluderBias;","uniform float Intensity;","uniform float screenHeight;","uniform float screenWidth;","uniform int NbDirection;","uniform int NbSamples;","uniform vec2 kernel[16];","const int NbDirectionMax = 10;","const int NbSamplesMax   = 10;","const float Sin45        = 0.707107;","varying vec2 vUv;","vec2 getRandom( vec2 uv){","    float rand=(fract(uv.x*(screenWidth/2.0))*0.25)+(fract(uv.y*(screenHeight/2.0))*0.5);","    return normalize(vec2(rand,rand));","}","float random(vec3 scale, float seed) {","    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","vec3 uniformlyRandomDirection(float seed) {","    float u = random(vec3(12.9898, 78.233, 151.7182), seed);","    float v = random(vec3(63.7264, 10.873, 623.6736), seed);","    float z = 1.0-2.0 * u ;","    float r = sqrt(1.0 - z * z);","    float angle = 6.283185307179586 * v;","    return vec3(r * cos(angle), r * sin(angle),z);","}","vec3 uniformlyRandomVector(float seed) {","    return uniformlyRandomDirection(seed) * sqrt(random(vec3(36.7539, 50.3658,306.2759), seed));","}","vec3 getPosition(vec2 uv) {","    vec4 normalDepth = texture2D( tNormalDepth, uv );","    float z = normalDepth.w;","    vec2 xy = uv * 2.0 - 1.0;","    vec4 posProjected = vec4( xy, z, 1.0 );","    vec4 posVS = ProjectionMatrixInverse * posProjected;","    posVS.xyz /= posVS.w;","    posVS.w = 1.0;","    return posVS.xyz;","}","float AmbientOcclusionCalcul(vec3 Position,  vec3 Normale, vec2 uv){","    vec3 VpxToSample = getPosition(uv) - Position;","    vec3 v           = normalize(VpxToSample);","    float Dist       = length(VpxToSample);","    return max(dot(v,Normale) - OccluderBias,0.0)","           *( 1.0/(1.0 + Dist))","           * Intensity;","}","void main() {",c.computeVertexPositionVS,c.computeNormal,"vec2 randVec    = vec2(uniformlyRandomVector( vUv.x + vUv.y ));","vec2 TexelSize  = vec2(1.0/screenWidth, 1.0/screenHeight);","float srcDepth  = -z;","float occlusion = 0.0;","float kernelRadius = SamplingRadius * (1.0 - srcDepth);","int var = 0;","for (int i = 0; i < NbDirectionMax; ++i) {","    if(i < NbDirection) {","        vec2 k1 = reflect(kernel[i], randVec);","        vec2 k2 = vec2(k1.x * Sin45 - k1.y * Sin45, k1.x * Sin45 + k1.y * Sin45);","        k1 *= TexelSize;","        k2 *= TexelSize;","        var = 0;","        for(int j=1; j<=NbSamplesMax; j++) {","            if(j < NbSamples) {","                if(var == 0) {","                    occlusion += AmbientOcclusionCalcul(vertexPositionVS.xyz, normal, vUv + k1 * kernelRadius * 1.0/float(j));","                    var = 1;","                } else {","                    occlusion += AmbientOcclusionCalcul(vertexPositionVS.xyz, normal, vUv + k2 * kernelRadius * 1.0/float(j));","                    var=0;","                }","            } else {","                break;","            }","        }","    } else {","        break;","    }","}","occlusion = 1.0 - occlusion / 16.0;","occlusion = clamp(occlusion, 0.0, 1.0);","gl_FragColor = vec4(vec3(occlusion), 1.0);","}"].join("\n")};return a});define("Shaders/SSAOShader",["DS/Shaders/SSAOShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/SSAOShader");return b});define("DS/Shaders/NothingShader",["DS/Visualization/ThreeJS_DS"],function(a){var b={uniforms:{tDiffuse:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",a._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","    gl_FragColor = texture2D( tDiffuse, vUv );","}"].join("\n")};return b});define("Shaders/NothingShader",["DS/Shaders/NothingShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/NothingShader");return b});define("DS/Shaders/SSAO2Shader",["DS/Visualization/ThreeJS_DS"],function(b){var a={computeVertexPositionVS:["vec4 normalDepth = texture2D( tNormalDepth, vUv );","float z = normalDepth.w;","if ( z == 0.0 ) return;","vec2 xy = vUv * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4( xy, 2.0 * z - 1.0, 1.0 );","vec4 vertexPositionVS = realProjectionMatrixInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","vertexPositionVS.w = 1.0;"].join("\n"),computeNormal:["vec3 normal = vec3(0.0, 0.0, 1.0);","if (dot(normalDepth.xy, normalDepth.xy) > 0.000001) {","   normal.z = 2.0 * dot(normalDepth.xy, normalDepth.xy) - 1.0;","   normal.xy = normalize(normalDepth.xy) * sqrt(1.0 - normal.z * normal.z);","}"].join("\n")},c={uniforms:{tNormalDepth:{type:"t",value:null},tRandomTex:{type:"t",value:null},realProjectionMatrix:{type:"m4",value:new b.Matrix4()},realProjectionMatrixInverse:{type:"m4",value:new b.Matrix4()},nbSamples:{type:"i",value:12},kernel:{type:"fv",value:[]},kernelRadius:{type:"fv1",value:[]},radius:{type:"f",value:0.5},thresholdAngle:{type:"f",value:0.071}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrix;","uniform mat4 realProjectionMatrixInverse;","uniform float radius;","uniform int nbSamples;","uniform vec3 kernel[32];","uniform float kernelRadius[32];","uniform float thresholdAngle;","uniform sampler2D tNormalDepth;","uniform sampler2D tRandomTex;","varying vec2 vUv;","const float fov = 0.7853981634;","const int kernelSize = 32;","const float PI = 3.14159265358979323846264;","const float one_over_tan_225 = 2.414213562373095;","float random(vec3 scale, float seed) {","  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","vec2 getScreenPos(vec3 pos) {","  vec4 offset = realProjectionMatrix * vec4(pos, 1.0);","  offset.xy /= offset.w;","  offset.xy = offset.xy * 0.5 + 0.5;","  return offset.xy;","}","void main() {","  vec2 screenPos = vUv;","  gl_FragColor = vec4( 1.0 );",a.computeVertexPositionVS,a.computeNormal,"  vec3 origin = vertexPositionVS.xyz;","  float minRadius = - one_over_tan_225 * radius / origin.z;","  float scaleRadius = max(1.0, 0.1 / minRadius);","  minRadius = scaleRadius * radius;","  float occlusion = 0.0;","  vec3 randVec = texture2D( tRandomTex, mod(gl_FragCoord.xy, 256.0) * vec2(1.0/256.0, 1.0/256.0) ).xyz;","  randVec = normalize(2.0 * randVec - 1.0);","  for (int i = 0; i < kernelSize; ++i) {","    if (i >= nbSamples) { continue; }","    vec3 svec = reflect(kernel[i], randVec);","    float angle = dot(svec, normal);","    float randRadius = minRadius * sign(angle);","    randRadius *= kernelRadius[i];","    vec3 sample = origin + randRadius * svec;","    vec2 sampleScreenPos = getScreenPos(sample);","    bvec4 inScreen4 = bvec4(sampleScreenPos.x >= 0.0, sampleScreenPos.x <= 1.0, sampleScreenPos.y >= 0.0, sampleScreenPos.y <= 1.0);","    if(!all(inScreen4)) { continue; }","    vec4 normalDepth = texture2D( tNormalDepth, sampleScreenPos );","    float z = normalDepth.w;","    if (z > 0.0) {","      vec2 xy = sampleScreenPos * 2.0 - 1.0;","      vec4 posProjected = vec4(xy, 2.0 * z - 1.0, 1.0);","      vec4 posVS = realProjectionMatrixInverse * posProjected;","      float sampleBufferDepth = posVS.z / posVS.w;","      float range_check = abs(origin.z - sampleBufferDepth);","      if (range_check < minRadius && sampleBufferDepth > sample.z && angle > thresholdAngle) {","        float l = range_check / minRadius;","        occlusion += 1.0 / (l*l + 1.0);","      }","    }","  }","  occlusion = 1.0 - occlusion / float(nbSamples);","  gl_FragColor = vec4( vec3(occlusion), 1.0 );","}"].join("\n")};return c});define("Shaders/SSAO2Shader",["DS/Shaders/SSAO2Shader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/SSAO2Shader");return b});define("DS/Shaders/BokehDOFShader",["DS/Visualization/ThreeJS_DS"],function(a){var b={defines:{RINGS:3,SAMPLES:8},uniforms:{textureWidth:{type:"f",value:512},textureHeight:{type:"f",value:512},focalDepth:{type:"f",value:1},focalLength:{type:"f",value:64},fstop:{type:"f",value:0.9},realProjectionMatrixInverse:{type:"m4",value:new a.Matrix4()},tDiffuse:{type:"t",value:null},tNormalDepth:{type:"t",value:null},maxblur:{type:"f",value:5},showFocus:{type:"i",value:0},manualdof:{type:"i",value:0},threshold:{type:"f",value:0.5},gain:{type:"f",value:2},bias:{type:"f",value:0.5},fringe:{type:"f",value:0.7},noise:{type:"i",value:1},dithering:{type:"f",value:0.0001},shaderFocus:{type:"i",value:0},focusCoords:{type:"v2",value:new a.Vector2()}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",a._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["varying vec2 vUv;","uniform mat4 realProjectionMatrixInverse;","uniform sampler2D tDiffuse;","uniform sampler2D tNormalDepth;","uniform float textureWidth;","uniform float textureHeight;","const float PI = 3.14159265;","float width = textureWidth; //texture width","float height = textureHeight; //texture height","vec2 texel = vec2(1.0 / width, 1.0 / height);","uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below","uniform float focalLength; //focal length in mm","uniform float fstop; //f-stop value","uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)","//------------------------------------------","//user variables","const int samples = SAMPLES; //samples on the first ring","const int rings = RINGS; //ring count","const int maxringsamples = rings * samples;","uniform bool manualdof; // manual dof calculation","float ndofstart = 1.0; // near dof blur start","float ndofdist = 2.0; // near dof blur falloff distance","float fdofstart = 1.0; // far dof blur start","float fdofdist = 3.0; // far dof blur falloff distance","float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)","uniform bool shaderFocus;","bool autofocus = shaderFocus;","uniform vec2 focusCoords;","uniform float maxblur;","uniform float threshold; // highlight threshold;","uniform float gain; // highlight gain;","uniform float bias; // bokeh edge bias","uniform float fringe; // bokeh chromatic aberration / fringing","uniform bool noise; //use noise instead of pattern for sample dithering","uniform float dithering;","float namount = dithering; //dither amount","//------------------------------------------","float getDepth( vec2 coords ) {","vec4 normalDepth = texture2D( tNormalDepth, coords );","float z = normalDepth.w;","if ( z == 0.0 ) return 0.0;","vec2 xy = coords * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4( xy, 2.0 * z - 1.0, 1.0 );","vec4 vertexPositionVS = realProjectionMatrixInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","vertexPositionVS.w = 1.0;","return -vertexPositionVS.z;","}","vec3 color(vec2 coords, float blur) {","vec3 col = texture2D(tDiffuse, coords).rgb;","return col;","}","vec2 rand(vec2 coord) {","float noiseX = ((fract(1.0-coord.s*(width/2.0))*0.25)+(fract(coord.t*(height/2.0))*0.75))*2.0-1.0;","float noiseY = ((fract(1.0-coord.s*(width/2.0))*0.75)+(fract(coord.t*(height/2.0))*0.25))*2.0-1.0;","if (noise) {","noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;","noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;","}","return vec2(noiseX, noiseY);","}","vec3 debugFocus(vec3 col, float blur, float depth) {","float edge = 0.002*depth; //distance based edge smoothing","float m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);","float e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);","col = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);","col = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);","return col;","}","float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {","float rings2 = float(rings);","float step = PI*2.0 / float(ringsamples);","float pw = cos(j*step)*i;","float ph = sin(j*step)*i;","float weight = mix(1.0, i/rings2, bias);","col += color(vUv.xy + vec2(pw*w, ph*h), blur) * weight;","return weight;","}","void main() {","float depth = getDepth(vUv.xy);","float fDepth = focalDepth;","if (autofocus) {","fDepth = getDepth(focusCoords);","}","// dof blur factor calculation","float blur = 0.0;","if (manualdof) {","float a = depth - fDepth;","float b = (a - fdofstart) / fdofdist;","float c = (- a - ndofstart) / ndofdist;","blur = (a > 0.0) ? b : c;","} else {","float f = focalLength;","float d = fDepth * 1000.0;","float o = depth * 1000.0;","float a = (o * f) / (o - f);","float b = (d * f) / (d - f);","float c = (d - f) / (d * fstop * CoC);","blur = abs(a - b) * c;","}","blur = clamp(blur, 0.0, 1.0);","vec2 noise = rand(vUv.xy) * namount * blur;","float w = (1.0 / width) * blur * maxblur + noise.x;","float h = (1.0 / height) * blur * maxblur + noise.y;","vec4 colAlpha = texture2D(tDiffuse, vUv.xy);","vec3 col = colAlpha.rgb;","float s = 1.0;","int ringsamples;","for (int i = 1; i <= rings; i++) {","ringsamples = i * samples;","for (int j = 0 ; j < maxringsamples ; j++) {","if (j >= ringsamples) break;","s += gather(float(i), float(j), ringsamples, col, w, h, blur);","}","}","col /= s;","if (showFocus) {","col = debugFocus(col, blur, depth);","}","gl_FragColor.rgb = col;","gl_FragColor.a = colAlpha.a;","} "].join("\n")};return b});define("Shaders/BokehDOFShader",["DS/Shaders/BokehDOFShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/BokehDOFShader");return b});define("DS/Shaders/DisplayPassShader",["DS/Visualization/ThreeJS_DS"],function(a){var b={uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null},tDiffuse3:{type:"t",value:null},tDiffuse4:{type:"t",value:null},offset:{type:"v2",value:new a.Vector2(0.505,0.01)},scale:{type:"f",value:0.485},offset2:{type:"v2",value:new a.Vector2(0.01,0.01)},scale2:{type:"f",value:0.485},offset3:{type:"v2",value:new a.Vector2(0.505,0.505)},scale3:{type:"f",value:0.485},offset4:{type:"v2",value:new a.Vector2(0.01,0.505)},scale4:{type:"f",value:0.485}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",a._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tDiffuse2;","uniform sampler2D tDiffuse3;","uniform sampler2D tDiffuse4;","uniform vec2 offset;","uniform float scale;","uniform vec2 offset2;","uniform float scale2;","uniform vec2 offset3;","uniform float scale3;","uniform vec2 offset4;","uniform float scale4;","varying vec2 vUv;","void main() {","gl_FragColor = vec4(0.0);","vec2 vUv2 = (vUv - offset) / scale;","vec2 vUv3 = (vUv - offset2) / scale2;","vec2 vUv4 = (vUv - offset3) / scale3;","vec2 vUv5 = (vUv - offset4) / scale4;","if (vUv2.x > 0.0 && vUv2.y > 0.0 && vUv2.x < 1.0 && vUv2.y < 1.0) {","    gl_FragColor = vec4(texture2D( tDiffuse2, vUv2 ).xyz, 1.0); return;","} else if (vUv3.x > 0.0 && vUv3.y > 0.0 && vUv3.x < 1.0 && vUv3.y < 1.0) {","    gl_FragColor = vec4(texture2D( tDiffuse3, vUv3 ).xyz, 1.0); return;","} else if (vUv4.x > 0.0 && vUv4.y > 0.0 && vUv4.x < 1.0 && vUv4.y < 1.0) {","    vec4 normalDepth = texture2D( tDiffuse4, vUv4 );","    gl_FragColor = vec4(vec3(normalDepth.w), 1.0); return;","} else if (vUv5.x > 0.0 && vUv5.y > 0.0 && vUv5.x < 1.0 && vUv5.y < 1.0) {","    vec4 normalDepth = texture2D( tDiffuse4, vUv5 );","    vec3 normal = vec3(0.0, 0.0, 1.0);","    if (dot(normalDepth.xy, normalDepth.xy) > 0.000001) {","        normal.z = 2.0 * dot(normalDepth.xy, normalDepth.xy) - 1.0;","        normal.xy = normalize(normalDepth.xy) * sqrt(1.0 - normal.z * normal.z);","    }","    gl_FragColor = vec4(0.5 + 0.5 * normal, 1.0); return;","}","}"].join("\n")};return b});define("Shaders/DisplayPassShader",["DS/Shaders/DisplayPassShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/DisplayPassShader");return b});define("DS/Shaders/ConvertLatLongToDualParaboloidShader",["DS/Visualization/ThreeJS_DS"],function(b){var a=function(d){var c={defines:{SCALE:1.2},uniforms:{map:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D map;","varying vec2 vUv;","const float PI = 3.14159265358979323846264;","float atan2(float y, float x) {","if (x > 0.0) return sign(y) * atan(abs(y/x));","else if (x < 0.0) return sign(y) * (PI - atan(abs(y/x)));","return 0.5 * PI * sign(y);","}","vec4 texture2DFromRGBE(sampler2D textureSampler, vec2 uv) {","vec4 texelRGBE = texture2D(textureSampler, uv);","float exponent = pow(2.0, 255.0 * texelRGBE.w - 128.0);","return vec4((255.0 / 256.0) * texelRGBE.xyz * exponent, 1.0);","}","vec4 texture2DBilinearFromRGBE(sampler2D textureSampler, vec2 uv, vec2 textureSize, vec2 texelSize) {","vec4 tl = texture2DFromRGBE(textureSampler, uv);","vec4 tr = texture2DFromRGBE(textureSampler, uv + vec2(texelSize.x, 0.0));","vec4 bl = texture2DFromRGBE(textureSampler, uv + vec2(0.0, texelSize.y));","vec4 br = texture2DFromRGBE(textureSampler, uv + vec2(texelSize.x, texelSize.y));","vec2 f = fract(uv.xy * textureSize.xy);","vec4 tA = mix(tl, tr, f.x);","vec4 tB = mix(bl, br, f.x);","return mix(tA, tB, f.y);","}","void main() {","gl_FragColor = vec4(0.0);","vec2 uv = vec2(fract(2.0 * vUv.x), vUv.y);","float phi = atan2(2.0 * uv.y - 1.0, 2.0 * uv.x - 1.0);","float theta;","float u;","if (vUv.x < 0.5) {","theta = 2.0 * atan(cos(phi) / (SCALE * (2.0 * uv.x - 1.0)));","u = fract(0.5*phi / PI);","} else {","theta = 2.0 * atan(SCALE * (1.0 - 2.0 * uv.x) / cos(phi));","phi += 1.0*PI;","u = fract(0.5*phi / PI);","}","float v = abs(theta / PI);"].join("\n")};if(d){c.fragmentShader=[c.fragmentShader,"gl_FragColor = texture2DBilinearFromRGBE(map, vec2(u, v), vec2(2048.0, 1024.0), vec2(1.0/2048.0, 1.0/1024.0));","}"].join("\n")}else{c.fragmentShader=[c.fragmentShader,"gl_FragColor = texture2D(map, vec2(u, v));","}"].join("\n")}return c};return{ConvertLatLongRGBEToDualParaboloid:a(true),ConvertLatLongToDualParaboloid:a(false)}});define("DS/Shaders/AdaptativeBlurShader",["DS/Visualization/ThreeJS_DS"],function(d){var a={defines:{NB_SAMPLES:1,STEP:"1.5"},uniforms:{tDiffuse:{type:"t",value:null},invSize:{type:"v2",value:new d.Vector2(512,512)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform vec2 invSize;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","float result = 0.0;","float total = 0.0;","for (int i = -NB_SAMPLES; i <= NB_SAMPLES; ++i) {","for (int j = -NB_SAMPLES; j <= NB_SAMPLES; ++j) {","vec2 offset = STEP * invSize * vec2(float(i), float(j));","float weight = 1.0 / (1.0 + dot(offset, offset));","result += weight * texture2D(tDiffuse, vUv + offset).x;","total += weight;","}","}","result /= total;","gl_FragColor = vec4(vec3(result), 1.0);","}"].join("\n")},c={defines:{NB_SAMPLES:4,STEP:1.5},uniforms:{tDiffuse:{type:"t",value:null},tNormalDepth:{type:"t",value:null},invSize:{type:"v2",value:new d.Vector2(512,512)},radius:{type:"f",value:0.5}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform vec2 invSize;","uniform sampler2D tDiffuse;","uniform sampler2D tNormalDepth;","varying vec2 vUv;","void main() {","vec2 screenPos = vUv;","vec4 normalDepth = texture2D( tNormalDepth, vUv );",window.webVRBypass?"normalDepth.xy = vec2(-1.0,-1.0)+2.0*normalDepth.xy;":"","float depth = normalDepth.w;","vec3 normal = vec3(0.0, 0.0, 1.0);","if (dot(normalDepth.xy, normalDepth.xy) > 0.000001) {","   normal.z = 2.0 * dot(normalDepth.xy, normalDepth.xy) - 1.0;","   normal.xy = normalize(normalDepth.xy) * sqrt(1.0 - normal.z * normal.z);","}","float result = texture2D(tDiffuse, vUv).x;","float total = 1.0;","for (int i = -NB_SAMPLES; i <= NB_SAMPLES; ++i) {","if (i != 0) {","vec2 pos = vUv + STEP * vec2(invSize.x * float(i), 0.0);","vec4 normalDepth2 = texture2D( tNormalDepth, pos );",window.webVRBypass?"normalDepth2.xy = vec2(-1.0,-1.0)+2.0*normalDepth2.xy;":"","float depth2 = normalDepth2.w;","vec3 normal2 = vec3(0.0, 0.0, 1.0);","if (dot(normalDepth2.xy, normalDepth2.xy) > 0.000001) {","   normal2.z = 2.0 * dot(normalDepth2.xy, normalDepth2.xy) - 1.0;","   normal2.xy = normalize(normalDepth2.xy) * sqrt(1.0 - normal2.z * normal2.z);","}","float weightDepth = 1.0 / (1.0 + 100.0*abs(depth2 - depth));","float weightNormal = clamp(dot(normal, normal2), 0.0, 1.0);","result += weightDepth * weightNormal * texture2D(tDiffuse, pos).x;","total += weightDepth * weightNormal;","}","}","result /= total;","gl_FragColor = vec4(vec3(result), 1.0);","}"].join("\n")},b={defines:{NB_SAMPLES:4,STEP:1.5},uniforms:{tDiffuse:{type:"t",value:null},tNormalDepth:{type:"t",value:null},invSize:{type:"v2",value:new d.Vector2(512,512)},radius:{type:"f",value:0.5}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform vec2 invSize;","uniform sampler2D tDiffuse;","uniform sampler2D tNormalDepth;","varying vec2 vUv;","void main() {","vec2 screenPos = vUv;","vec4 normalDepth = texture2D( tNormalDepth, vUv );",window.webVRBypass?"normalDepth.xy = vec2(-1.0,-1.0)+2.0*normalDepth.xy;":"","float depth = normalDepth.w;","vec3 normal = vec3(0.0, 0.0, 1.0);","if (dot(normalDepth.xy, normalDepth.xy) > 0.000001) {","   normal.z = 2.0 * dot(normalDepth.xy, normalDepth.xy) - 1.0;","   normal.xy = normalize(normalDepth.xy) * sqrt(1.0 - normal.z * normal.z);","}","float result = texture2D(tDiffuse, vUv).x;","float total = 1.0;","for (int i = -NB_SAMPLES; i <= NB_SAMPLES; ++i) {","if (i != 0) {","vec2 pos = vUv + STEP * vec2(0.0, invSize.y * float(i));","vec4 normalDepth2 = texture2D( tNormalDepth, pos );",window.webVRBypass?"normalDepth2.xy = vec2(-1.0,-1.0)+2.0*normalDepth2.xy;":"","float depth2 = normalDepth2.w;","vec3 normal2 = vec3(0.0, 0.0, 1.0);","if (dot(normalDepth2.xy, normalDepth2.xy) > 0.000001) {","   normal2.z = 2.0 * dot(normalDepth2.xy, normalDepth2.xy) - 1.0;","   normal2.xy = normalize(normalDepth2.xy) * sqrt(1.0 - normal2.z * normal2.z);","}","float weightDepth = 1.0 / (1.0 + 100.0*abs(depth2 - depth));","float weightNormal = clamp(dot(normal, normal2), 0.0, 1.0);","result += weightDepth * weightNormal * texture2D(tDiffuse, pos).x;","total += weightDepth * weightNormal;","}","}","result /= total;","gl_FragColor = vec4(vec3(result), 1.0);","}"].join("\n")};return{H:c,V:b,HV:a}});define("Shaders/AdaptativeBlurShader",["DS/Shaders/AdaptativeBlurShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/AdaptativeBlurShader");return b});define("DS/Shaders/CompareModelsShader",["DS/Visualization/ThreeJS_DS"],function(a){var b={uniforms:{tDiffuse:{type:"t",value:null},tCommonColor:{type:"t",value:null},tDepthOld:{type:"t",value:null},tDepthNew:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new a.Matrix4()},tolerance:{type:"f",value:0.0001}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",a._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tCommonColor;","uniform sampler2D tDepthOld;","uniform sampler2D tDepthNew;","uniform mat4 realProjectionMatrixInverse;","uniform float tolerance;","varying vec2 vUv;","float getLinearDepth(vec2 iUV, float iDepth) {","vec2 xy = iUV * 2.0 - 1.0;","vec4 posProjected = vec4(xy, 2.0 * iDepth - 1.0, 1.0);","vec4 posVS = realProjectionMatrixInverse * posProjected;","return posVS.z / posVS.w;","}","void main() {","vec4 color = texture2D(tDiffuse, vUv);","vec4 common = texture2D(tCommonColor, vUv);","float depthOld = texture2D(tDepthOld, vUv).w;","float depthNew = texture2D(tDepthNew, vUv).w;","float diff = abs(getLinearDepth(vUv, depthOld) - getLinearDepth(vUv, depthNew));","gl_FragColor = mix(vec4(mix(color.rgb, common.rgb, common.a), color.a), color, step(tolerance, diff));","}"].join("\n")};return b});define("Shaders/CompareModelsShader",["DS/Shaders/CompareModelsShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/CompareModelsShader");return b});define("DS/Shaders/EncodeHDRShader",["DS/Visualization/ThreeJS_DS"],function(b){var a={uniforms:{map:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D map;","varying vec2 vUv;","void main() {","vec3 color = texture2D(map, vUv).rgb;","float value = max(color.r, max(color.g, color.b));","int exponent = 0;","float mantissa = 0.0;","if (value > 1.0) {","for (int i = 1; i <= 127; i++) {","value /= 2.0;","exponent++;","if (value < 1.0) { break; }","}","} else if (value < 1.0) {","int j = 1;","for (int i = 1; i <= 129; i++) {","value *= 2.0;","exponent--;","if (value > 1.0) { j = 0; break; }","}","value /= 2.0;","exponent++;","if (j > 0) {","color = vec3(0.0);","exponent = 0;","}","}","gl_FragColor = vec4(color * pow(2.0, float(-exponent)), float(exponent + 128) / 255.0);","}"].join("\n")};return a});define("Shaders/EncodeHDRShader",["DS/Shaders/EncodeHDRShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/EncodeHDRShader");return b});define("DS/Shaders/FlareShaders",["DS/Visualization/ThreeJS_DS"],function(b){var a={uniforms:{tDiffuse:{type:"t",value:null},tBlur:{type:"t",value:null},tLensColor:{type:"t",value:null},tLensDirt:{type:"t",value:null},invSize:{type:"v2",value:new b.Vector2(512,512)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tBlur;","uniform sampler2D tLensColor;","uniform sampler2D tLensDirt;","uniform vec2 invSize;","const float ghostDispersal = 0.25;","const int ghosts = 8;","const float distortion = 5.0;","const float haloWidth = 1.0;","const float one_over_sqrt2 = 0.70710678;","varying vec2 vUv;","vec4 textureDistorted(sampler2D tex, vec2 texcoord, vec2 direction, vec3 distortion) {","   return vec4(","      texture2D(tex, texcoord + direction * distortion.r).r,","      texture2D(tex, texcoord + direction * distortion.g).g,","      texture2D(tex, texcoord + direction * distortion.b).b,","      1.0","   );","}","void main() {","   vec4 color = texture2D( tDiffuse, vUv );","   vec2 flippedUV = vec2(1.0) - vUv;","   vec2 uvToCenter = vec2(0.5) - flippedUV;","   vec3 distort = vec3(-invSize.x * distortion, 0.0, invSize.x * distortion);","   vec2 ghostVec = uvToCenter * ghostDispersal;","   vec4 flare = vec4(0.0);","   for (int i = 0; i < ghosts; ++i) {","      vec2 offset = fract(flippedUV + ghostVec * float(i));","      float ghostHeight = length(vec2(0.5) - offset) / one_over_sqrt2;","      ghostHeight = pow(1.0 - ghostHeight, 10.0);","      flare += textureDistorted(tBlur, offset, normalize(ghostVec), distort) * ghostHeight;","   }","   flare *= texture2D(tLensColor, vec2(length(uvToCenter) / one_over_sqrt2, 0.5));","   float dirt = texture2D( tLensDirt, vUv ).r;","   flare *= vec4(0.5) + dirt;","   gl_FragColor = vec4(color.rgb + flare.rgb, color.a);","}"].join("\n")};return{FinalBlending:a}});define("Shaders/FlareShaders",["DS/Shaders/FlareShaders","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/FlareShaders");return b});define("DS/Shaders/SSAO2IterativeShader",["DS/Visualization/ThreeJS_DS"],function(b){var c={computeVertexPositionVS:["vec4 normalDepth = texture2D( tNormalDepth, vUv );","float z = normalDepth.w;","if ( z == 0.0 ) return;","vec2 xy = vUv * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4( xy, 2.0 * z - 1.0, 1.0 );","vec4 vertexPositionVS = realProjectionMatrixInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","vertexPositionVS.w = 1.0;"].join("\n"),computeNormal:["vec3 normal = vec3(0.0, 0.0, 1.0);","if (dot(normalDepth.xy, normalDepth.xy) > 0.000001) {","   normal.z = 2.0 * dot(normalDepth.xy, normalDepth.xy) - 1.0;","   normal.xy = normalize(normalDepth.xy) * sqrt(1.0 - normal.z * normal.z);","}"].join("\n")},a={uniforms:{tNormalDepth:{type:"t",value:null},prevMap:{type:"t",value:null},tRandSeq:{type:"t",value:null},realProjectionMatrix:{type:"m4",value:new b.Matrix4()},realProjectionMatrixInverse:{type:"m4",value:new b.Matrix4()},radius:{type:"f",value:0.5},thresholdAngle:{type:"f",value:0.071},numIteration:{type:"i",value:0},firstSample:{type:"i",value:0},screenSize:{type:"v2",value:new b.Vector2(800,600)},invSize:{type:"v2",value:new b.Vector2(1/800,1/600)}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrix;","uniform mat4 realProjectionMatrixInverse;","uniform float radius;","uniform float thresholdAngle;","uniform int numIteration;","uniform int firstSample;","uniform sampler2D tNormalDepth;","uniform sampler2D prevMap;","uniform sampler2D tRandSeq;","uniform vec2 screenSize;","uniform vec2 invSize;","varying vec2 vUv;","const int nbSamples = 16;","const float fov = 0.7853981634;","const float PI = 3.14159265358979323846264;","const float one_over_tan_225 = 2.414213562373095;","float random(vec3 scale, float seed) {","  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","float Random1D(float seed) {","return random(vec3(12.9898, 78.233, 151.7182), seed);","}","float HaltonSequenceShift(int n, int base, float shift) {","float val = 0.0;","float invBase = 1.0 / float(base);","float invBi = invBase;","for (int i = 0; i < 32; i++) {","if (n == 0) break;","float d_i = mod(float(n), float(base));","val += float(d_i) * invBi;","n /= base;","invBi *= invBase;","}","return fract(val + shift);","}","vec3 LowDiscrepancy3DShift(int index, vec2 shift) {","int yy = index / 64;","float xx = mod(float(index), 64.0);","vec2 offset = vec2(xx, float(yy));","vec3 res = texture2D(tRandSeq, 0.015625 * (offset + 0.5)).xyz;","return fract(res + shift.xyx);","}","vec3 uniformlySampleSphere(vec2 E) {","  float z = 1.0 - 2.0 * E.x;","  float r = sqrt(1.0 - z * z);","  float angle = 6.283185307179586 * E.y;","  return vec3(r * cos(angle), r * sin(angle), z);","}","vec2 getScreenPos(vec3 pos) {","  vec4 offset = realProjectionMatrix * vec4(pos, 1.0);","  offset.xy /= offset.w;","  offset.xy = offset.xy * 0.5 + 0.5;","  offset.xy = floor(screenSize * offset.xy) + vec2(0.5);","  offset.xy *= invSize;","  return offset.xy;","}","void main() {","  vec2 screenPos = vUv;","  gl_FragColor = vec4( 1.0 );",c.computeVertexPositionVS,c.computeNormal,"  vec3 origin = vertexPositionVS.xyz;","  float minRadius = - one_over_tan_225 * radius / origin.z;","  float scaleRadius = max(1.0, 0.1 / minRadius);","  minRadius = scaleRadius * radius;","  float occlusion = 0.0;","  vec2 shift = vec2(Random1D(gl_FragCoord.x + gl_FragCoord.y), Random1D(gl_FragCoord.x * gl_FragCoord.y));","  for (int i = 0; i < nbSamples; ++i) {","    vec3 E = LowDiscrepancy3DShift(firstSample + i + 1, shift);","    vec3 svec = uniformlySampleSphere(E.xy);","    float angle = dot(svec, normal);","    float randRadius = minRadius * sign(angle);","    randRadius *= E.z;","    vec3 sample = origin + randRadius * svec;","    vec2 sampleScreenPos = getScreenPos(sample);","   vec2 isSameUV = step(invSize, abs(sampleScreenPos - vUv));","    bvec4 inScreen4 = bvec4(sampleScreenPos.x >= 0.0, sampleScreenPos.x <= 1.0, sampleScreenPos.y >= 0.0, sampleScreenPos.y <= 1.0);","    if(!all(inScreen4)) { continue; }","    vec4 normalDepth = texture2D( tNormalDepth, sampleScreenPos );","    float z = normalDepth.w;","    if (z > 0.0) {","      vec2 xy = sampleScreenPos * 2.0 - 1.0;","      vec4 posProjected = vec4(xy, 2.0 * z - 1.0, 1.0);","      vec4 posVS = realProjectionMatrixInverse * posProjected;","      float sampleBufferDepth = posVS.z / posVS.w;","      float range_check = abs(origin.z - sampleBufferDepth);","      if (range_check < minRadius && sampleBufferDepth > sample.z && angle > thresholdAngle) {","        float l = range_check / minRadius;","        occlusion += isSameUV.x * isSameUV.y / (l*l + 1.0);","      }","    }","  }","  occlusion = 1.0 - occlusion / float(nbSamples);","  float prevAO = texture2D( prevMap, vUv ).r;","  gl_FragColor = vec4(vec3((prevAO * float(numIteration) + occlusion) / (float(numIteration) + 1.0)), 1.0);","}"].join("\n")};return a});define("DS/Shaders/MSAAShaders",["DS/Visualization/ThreeJS_DS"],function(c){var b={uniforms:{tDiffuse:{type:"t",value:null},prevMap:{type:"t",value:null},numIteration:{type:"f",value:0},},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",c._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D prevMap;","uniform float numIteration;","varying vec2 vUv;","void main() {","vec4 prevColor = texture2D( prevMap, vUv );","vec4 currColor = texture2D( tDiffuse, vUv );","gl_FragColor = vec4((prevColor * numIteration + currColor) / (numIteration + 1.0));","}"].join("\n")};var a={uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null},},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",c._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse2;","varying vec2 vUv;","void main() {","gl_FragColor = texture2D( tDiffuse2, vUv );","}"].join("\n")};return{Blending:b,Transfer:a}});define("DS/Shaders/SSLRBlendShader",["DS/Visualization/ThreeJS_DS"],function(b){var a={uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tDiffuse2;","varying vec2 vUv;","void main() {","  vec4 color  = texture2D(  tDiffuse, vUv );","  vec4 color2 = texture2D( tDiffuse2, vUv );","  gl_FragColor = vec4((1.0 - color2.a) * color.xyz + color2.a * color2.xyz, color.a);","}"].join("\n")};return a});define("Shaders/SSLRBlendShader",["DS/Shaders/SSLRBlendShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/SSLRBlendShader");return b});define("DS/Shaders/AdvancedHighlightShader",["DS/Visualization/ThreeJS_R57"],function(e){var d={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,e.UniformsLib.skinning,{map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new e.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new e.Vector4(1,1)},colorHighlight:{type:"v4",value:new e.Vector4(0,0.6,1,1)}}]),vertexShaderPars:["varying float reflectionFactor;","uniform vec4 colorHighlight;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif",].join("\n"),vertexShaderBody:["    vec3 I = normalize( -mvPosition.xyz );","    reflectionFactor = abs( dot( I, mvNormal ) );","    float alpha = (1.0 - reflectionFactor);","    alpha *= alpha;","    reflectionFactor = (0.6 * alpha + 0.2) * colorHighlight.a * 2.0;","#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif",].join("\n"),fragmentShaderPars:["varying float reflectionFactor;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","uniform vec4 colorHighlight;",].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vUvMap ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","    gl_FragColor = vec4( colorHighlight.xyz, reflectionFactor );",].join("\n"),vertexShader:[e.ShaderChunk.clip_pars_vertex,e.ShaderChunk.skinning_pars_vertex,"const vec3 vOrthoDir = vec3(0.0, 0.0, 1.0);","varying float reflectionFactor;","uniform vec4 colorHighlight;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.skinbase_vertex,e.ShaderChunk.skinnormal_vertex,e.ShaderChunk.defaultnormal_vertex,e.ShaderChunk.skinning_vertex,e.ShaderChunk.default_vertex,"#ifdef PDSFX","transformedNormal = _viewTangentSpace.Normal;","#endif","    vec3 I = vOrthoDir;","    if (!(projectionMatrix[3][3] > 0.0)) {","       I = normalize( -mvPosition.xyz );","    }","    reflectionFactor = abs( dot( I, transformedNormal ) );","    float alpha = (1.0 - reflectionFactor);","    alpha *= alpha;","    reflectionFactor = (0.6 * alpha + 0.2) * colorHighlight.a * 2.0;","#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif","    gl_Position = projectionMatrix * mvPosition;",e.ShaderChunk.clip_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,"varying float reflectionFactor;","uniform vec4 colorHighlight;","float finalReflectionFactor;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","void main() {","finalReflectionFactor = reflectionFactor;","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,e.ShaderChunk.PDSFX_viewNormal_fragment,"vec3 mvPosition = ComputeViewPosition();","    vec3 I = vec3(0.0, 0.0, 1.0);","    if (!(projectionMatrix[3][3] > 0.0)) {","       I = normalize( -mvPosition.xyz );","    }","    finalReflectionFactor = abs( dot( I, _DSvNormal ) );","    float refAlpha = (1.0 - finalReflectionFactor);","    refAlpha *= refAlpha;","    finalReflectionFactor = (0.6 * refAlpha + 0.2) * colorHighlight.a * 2.0;","#endif",e.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vUvMap ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","  gl_FragColor = vec4( colorHighlight.xyz, finalReflectionFactor );","}"].join("\n")};var h={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,e.UniformsLib.lines,{colorHighlight:{type:"v4",value:new e.Vector4(0,0.6,1,1)}}]),vertexShaderPars:[].join("\n"),vertexShaderBody:[].join("\n"),fragmentShaderPars:["uniform vec4 colorHighlight;",].join("\n"),fragmentShaderBody:["  gl_FragColor = vec4( colorHighlight.xyz, 0.8 * colorHighlight.a * 2.0 );",].join("\n"),vertexShader:[e.ShaderChunk.clip_pars_vertex,e.ShaderChunk.lines_pars_vertex,"void main() {",e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.default_vertex,e.ShaderChunk.clip_vertex,e.ShaderChunk.lines_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,e.ShaderChunk.lines_pars_fragment,"uniform vec4 colorHighlight;","void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,"#endif",e.ShaderChunk.clip_fragment,e.ShaderChunk.lines_fragment,"    gl_FragColor = vec4( colorHighlight.xyz, 0.8 * colorHighlight.a * 2.0);","}"].join("\n")};var a={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,{map:{type:"t",value:null},size:{type:"f",value:1},colorHighlight:{type:"v4",value:new e.Vector4(0,0.6,1,1)},scale:{type:"f",value:500},offsetAlphaMap:{type:"v2",value:new e.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new e.Vector4(1,1)}}]),vertexShaderPars:["uniform float size;","uniform float scale;"].join("\n"),vertexShaderBody:["#ifdef USE_SIZEATTENUATION","gl_PointSize = size * ( scale / length( mvPosition.xyz ) );","#else","gl_PointSize = size;","#endif"].join("\n"),fragmentShaderPars:["uniform vec4 colorHighlight;","#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif"].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","    gl_FragColor = vec4( colorHighlight.xyz, 0.8 * colorHighlight.a * 2.0  );"].join("\n"),vertexShader:[e.ShaderChunk.clip_pars_vertex,"uniform float size;","uniform float scale;","#ifdef USE_MAP_ALPHATEST","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",e.ShaderChunk.PDSFX_start_particle_vertex,e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.default_vertex,e.ShaderChunk.PDSFX_point_size_vertex,e.ShaderChunk.clip_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,"uniform vec4 colorHighlight;","#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif","void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,"#endif","#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif",e.ShaderChunk.clip_fragment,"    gl_FragColor = vec4( colorHighlight.xyz, 0.8 * colorHighlight.a * 2.0);","}"].join("\n")};var g={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,e.UniformsLib.skinning,{map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new e.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new e.Vector4(1,1)},colorHighlight:{type:"v4",value:new e.Vector4(0,1,1,1)},}]),vertexShaderPars:["varying float reflectionFactor;","uniform vec4 colorHighlight;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif",].join("\n"),vertexShaderBody:["    vec3 I = normalize( -mvPosition.xyz );","    reflectionFactor = abs( dot( I, mvNormal ) );","    float alpha = (1.0 - reflectionFactor);","    alpha *= alpha;","    reflectionFactor = (0.6 * alpha + 0.2) * colorHighlight.a * 2.0;","#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif",].join("\n"),fragmentShaderPars:["varying float reflectionFactor;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","uniform vec4 colorHighlight;",].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vUvMap ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","    gl_FragColor = vec4( colorHighlight.xyz, 1.0 );",].join("\n"),vertexShader:[e.ShaderChunk.clip_pars_vertex,e.ShaderChunk.skinning_pars_vertex,"const vec3 vOrthoDir = vec3(0.0, 0.0, 1.0);","varying float reflectionFactor;","uniform vec4 colorHighlight;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.skinbase_vertex,e.ShaderChunk.skinnormal_vertex,e.ShaderChunk.defaultnormal_vertex,e.ShaderChunk.skinning_vertex,e.ShaderChunk.default_vertex,"#ifdef PDSFX","transformedNormal = _viewTangentSpace.Normal;","#endif","    vec3 I = vOrthoDir;","    if (!(projectionMatrix[3][3] > 0.0)) {","       I = normalize( -mvPosition.xyz );","    }","    reflectionFactor = abs( dot( I, transformedNormal ) );","    float alpha = (1.0 - reflectionFactor);","    alpha *= alpha;","    reflectionFactor = (0.6 * alpha + 0.2) * colorHighlight.a * 2.0;","#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif","    gl_Position = projectionMatrix * mvPosition;",e.ShaderChunk.clip_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,"varying float reflectionFactor;","uniform vec4 colorHighlight;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,"#endif",e.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vUvMap ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","    gl_FragColor = vec4( colorHighlight.xyz, 1.0 );","}"].join("\n")};var i={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,e.UniformsLib.lines,{colorHighlight:{type:"v4",value:new e.Vector4(0,1,1,1)}}]),vertexShaderPars:[].join("\n"),vertexShaderBody:[].join("\n"),fragmentShaderPars:["uniform vec4 colorHighlight;",].join("\n"),fragmentShaderBody:["    gl_FragColor = vec4( colorHighlight.xyz, 1.0);",].join("\n"),vertexShader:[e.ShaderChunk.clip_pars_vertex,e.ShaderChunk.lines_pars_vertex,"void main() {",e.ShaderChunk.PDSFX_start_vertex,e.ShaderChunk.default_vertex,e.ShaderChunk.clip_vertex,e.ShaderChunk.lines_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,e.ShaderChunk.lines_pars_fragment,"uniform vec4 colorHighlight;","void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,"#endif",e.ShaderChunk.clip_fragment,e.ShaderChunk.lines_fragment,"    gl_FragColor = vec4( colorHighlight.xyz, 1.0);","}"].join("\n")};var f={uniforms:e.UniformsUtils.merge([e.UniformsLib.clipPlanes,{map:{type:"t",value:null},size:{type:"f",value:1},scale:{type:"f",value:500},offsetAlphaMap:{type:"v2",value:new e.Vector4(0,0)},colorHighlight:{type:"v4",value:new e.Vector4(0,1,1,1)},repeatAlphaMap:{type:"v2",value:new e.Vector4(1,1)}}]),vertexShaderPars:["uniform float size;","uniform float scale;"].join("\n"),vertexShaderBody:["#ifdef USE_SIZEATTENUATION","gl_PointSize = size * ( scale / length( mvPosition.xyz ) );","#else","gl_PointSize = size;","#endif"].join("\n"),fragmentShaderPars:["uniform vec4 colorHighlight;","#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif"].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","    gl_FragColor = vec4( colorHighlight.xyz, 1.0 );",].join("\n"),vertexShader:[e.ShaderChunk.clip_pars_vertex,"uniform float size;","uniform float scale;","#ifdef USE_MAP_ALPHATEST","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",e.ShaderChunk.PDSFX_start_vertex,e._DefaultShaderChunk.model_view_transformation_vertex,"#ifdef PDSFX","_viewTangentSpace.Position = mvPosition.xyz;","ProcessViewTangentSpace(_viewTangentSpace);","mvPosition.xyz = _viewTangentSpace.Position;","#endif","#ifdef USE_SIZEATTENUATION","gl_PointSize = size * ( scale / length( mvPosition.xyz ) );","#else","gl_PointSize = size;","#endif","    gl_Position = projectionMatrix * mvPosition;",e.ShaderChunk.clip_vertex,e.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[e.ShaderChunk.clip_pars_fragment,"#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif","uniform vec4 colorHighlight;","void main() {","#ifdef PDSFX","ComputeCommonValues();",e.ShaderChunk.PDSFX_discard_fragment,"#endif","#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif",e.ShaderChunk.clip_fragment,"    gl_FragColor = vec4( colorHighlight.xyz, 1.0 );","}"].join("\n")};var c={defines:{POSTPRO:1},uniforms:{tAdd:{type:"t",value:null},tDiffuse:{type:"t",value:null},h:{type:"f",value:1/1024},v:{type:"f",value:1/1024},poisson:{type:"fv1",value:[]},invNumBlur:{type:"f",value:0.0833333333333333},iHaloColor:{type:"v4",value:new e.Vector4(0,0.6,1,1)},iHaloIntensity:{type:"f",value:2},iScanEffectIntensity:{type:"f",value:1},iOutlineColor2:{type:"v4",value:new e.Vector4(0,1,1,1)},iOutlineColor:{type:"v4",value:new e.Vector4(0,0.6,1,1)},iScanEffectColor:{type:"v4",value:new e.Vector4(0,0.6,1,1)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",e._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#if (POSTPRO == 1)","uniform sampler2D tDiffuse;","#endif","uniform sampler2D tAdd;","uniform float h;","uniform float v;","uniform float poisson[24];","uniform float invNumBlur;","uniform float iHaloIntensity;","uniform float iScanEffectIntensity;","uniform vec4 iOutlineColor2;","uniform vec4 iOutlineColor;","uniform vec4 iScanEffectColor;","uniform vec4 iHaloColor;","varying vec2 vUv;","void main() {","vec4 result = texture2D(tAdd, vUv);","float boardThin = 1.0;","float board = 1.0;","float center = 1.0 - result.r;","vec4 up = vec4(1.0 - texture2D(tAdd, vec2( vUv.x + h, vUv.y    ) ).r, ","1.0 - texture2D(tAdd, vec2( vUv.x - h, vUv.y + v) ).r, ","1.0 - texture2D(tAdd, vec2( vUv.x    , vUv.y + v) ).r, ","1.0 - texture2D(tAdd, vec2( vUv.x + h, vUv.y + v) ).r  ",");","vec4 down = vec4(1.0 - texture2D(tAdd, vec2( vUv.x - h, vUv.y - v) ).r, ","1.0 - texture2D(tAdd, vec2( vUv.x    , vUv.y - v) ).r, ","1.0 - texture2D(tAdd, vec2( vUv.x + h, vUv.y - v) ).r, ","1.0 - texture2D(tAdd, vec2( vUv.x - h, vUv.y    ) ).r  ",");","boardThin *= up.x   * up.y   * up.z   * up.w;","boardThin *= down.x * down.y * down.z * down.w;","board *= (1.0 - up.x)   * (1.0 - up.y)   * (1.0 - up.z)   * (1.0 - up.w);","board *= (1.0 - down.x) * (1.0 - down.y) * (1.0 - down.z) * (1.0 - down.w);","float isOutline = center  * (1.0 - boardThin) + (1.0 - center) * (1.0 - board);","if (isOutline == 1.0) {","result = iOutlineColor * center * (1.0 - boardThin) + iOutlineColor2 * (1.0 - center) * (1.0 - board);","} else {","if (result.r != 1.0) {","result   = iHaloColor;","result.a = 0.0;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[0], vUv.y + 4.0 * v * poisson[1] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[2], vUv.y + 4.0 * v * poisson[3] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[4], vUv.y + 4.0 * v * poisson[5] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[6], vUv.y + 4.0 * v * poisson[7] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[8], vUv.y + 4.0 * v * poisson[9] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[10], vUv.y + 4.0 * v * poisson[11] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[12], vUv.y + 4.0 * v * poisson[13] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[14], vUv.y + 4.0 * v * poisson[15] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[16], vUv.y + 4.0 * v * poisson[17] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[18], vUv.y + 4.0 * v * poisson[19] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[20], vUv.y + 4.0 * v * poisson[21] ) ).r;","result.a += 1.0 - texture2D( tAdd, vec2( vUv.x + 4.0 * h * poisson[22], vUv.y + 4.0 * v * poisson[23] ) ).r;","result.a = (1.0 - result.a * invNumBlur) * iHaloIntensity;","} else {","float alpha = result.a;","result = vec4(iScanEffectColor.xyz, alpha);","}","}","float coef = result.a;","#if (POSTPRO == 1)","vec4 add = texture2D( tDiffuse, vUv );","gl_FragColor = vec4(coef * result.rgb + (1.0 - coef) * add.rgb, add.a);","#else","gl_FragColor = vec4(result.rgb, coef);","#endif","}"].join("\n")};var b={defines:{POSTPRO:1},uniforms:{tAdd:{type:"t",value:null},tAdd2:{type:"t",value:null},tDiffuse:{type:"t",value:null},h:{type:"f",value:1/1024},v:{type:"f",value:1/1024},poisson:{type:"fv1",value:[]},invNumBlur:{type:"f",value:0.0833333333333333},iHaloIntensity:{type:"f",value:2}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",e._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#if (POSTPRO == 1)","uniform sampler2D tDiffuse;","#endif","uniform sampler2D tAdd;","uniform sampler2D tAdd2;","uniform float h;","uniform float v;","uniform float poisson[24];","uniform float invNumBlur;","uniform float iHaloIntensity;","varying vec2 vUv;","void main() {","vec4 result= texture2D(tAdd, vUv);","vec4 resultTAdd2 = texture2D(tAdd2, vUv);","float scanEffectIntensity = 1.0;","vec4  northWest1 = texture2D( tAdd2, vec2( vUv.x - h, vUv.y + v));","vec4  north1     = texture2D( tAdd2, vec2( vUv.x    , vUv.y + v));","vec4  northEast1 = texture2D( tAdd2, vec2( vUv.x + h, vUv.y + v));","vec4  west1      = texture2D( tAdd2, vec2( vUv.x - h, vUv.y));","vec3  center    = resultTAdd2.xyz;","vec4  east1      = texture2D( tAdd2, vec2( vUv.x + h, vUv.y));","vec4  southWest1 = texture2D( tAdd2, vec2( vUv.x - h, vUv.y - v));","vec4  south1     = texture2D( tAdd2, vec2( vUv.x    , vUv.y - v));","vec4  southEast1 = texture2D( tAdd2, vec2( vUv.x + h, vUv.y - v));","bool r1 = all(bvec3(all(equal(center , northWest1.xyz)),all(equal(center , north1.xyz)),all(equal(center , northEast1.xyz))));","bool r2 = all(bvec3(all(equal(center , west1.xyz))     ,all(equal(center , east1.xyz)) ,true));","bool r3 = all(bvec3(all(equal(center , southWest1.xyz)),all(equal(center , south1.xyz)),all(equal(center , southEast1.xyz))));","bool isNotOutline = all(bvec3(r1,r2,r3));","if (isNotOutline == false) {","if (resultTAdd2.a != 0.0) {","result = vec4(center.xyz, 1.0);","} else {","vec4  northWest = texture2D( tAdd, vec2( vUv.x - h, vUv.y + v));","vec4  north     = texture2D( tAdd, vec2( vUv.x    , vUv.y + v));","vec4  northEast = texture2D( tAdd, vec2( vUv.x + h, vUv.y + v));","vec4  west      = texture2D( tAdd, vec2( vUv.x - h, vUv.y));","vec4  east      = texture2D( tAdd, vec2( vUv.x + h, vUv.y));","vec4  southWest = texture2D( tAdd, vec2( vUv.x - h, vUv.y - v));","vec4  south     = texture2D( tAdd, vec2( vUv.x    , vUv.y - v));","vec4  southEast = texture2D( tAdd, vec2( vUv.x + h, vUv.y - v));","vec3 tmpColor = vec3(0.0);","float countColor = 0.0;","tmpColor += northWest1.a * northWest.xyz;","countColor += (1.0 * northWest1.a);","tmpColor += north1.a * north.xyz;","countColor += (1.0 * north1.a);","tmpColor += northEast1.a * northEast.xyz;","countColor += (1.0 * northEast1.a);","tmpColor += west1.a * west.xyz;","countColor += (1.0 * west1.a);","tmpColor += east1.a * east.xyz;","countColor += (1.0 * east1.a);","tmpColor += southWest1.a * southWest.xyz;","countColor += (1.0 * southWest1.a);","tmpColor += south1.a * south.xyz;","countColor += (1.0 * south1.a);","tmpColor += southEast1.a * southEast.xyz;","countColor += (1.0 * southEast1.a);","tmpColor = tmpColor / countColor;","result = vec4(tmpColor, 1.0);","}","}","else {","if (result.a == 0.0) {","vec3 tmpColor = vec3(0.0);","vec4 tmpPixel = vec4(0.0);","vec4 tmpPixel1= vec4(0.0);","float countColor = 0.0;","result   = vec4(0.0,0.0,0.0,0.0);","result.a = 0.0;","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[0], vUv.y + 4.0 * v *  poisson[1] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[0], vUv.y + 4.0 * v *  poisson[1] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[2], vUv.y + 4.0 * v *  poisson[3] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[2], vUv.y + 4.0 * v *  poisson[3] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[4], vUv.y + 4.0 * v *  poisson[5] ) );","tmpPixel = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[4], vUv.y + 4.0 * v *  poisson[5] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[6], vUv.y + 4.0 * v *  poisson[7] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[6], vUv.y + 4.0 * v *  poisson[7] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[8], vUv.y + 4.0 * v *  poisson[9] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[8], vUv.y + 4.0 * v *  poisson[9] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[10], vUv.y + 4.0 * v *  poisson[11] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[10], vUv.y + 4.0 * v *  poisson[11] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[12], vUv.y + 4.0 * v *  poisson[13] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[12], vUv.y + 4.0 * v *  poisson[13] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[14], vUv.y + 4.0 * v *  poisson[15] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[14], vUv.y + 4.0 * v *  poisson[15] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[16], vUv.y + 4.0 * v *  poisson[17] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[16], vUv.y + 4.0 * v *  poisson[17] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[18], vUv.y + 4.0 * v *  poisson[19] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[18], vUv.y + 4.0 * v *  poisson[19] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[20], vUv.y + 4.0 * v *  poisson[21] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[20], vUv.y + 4.0 * v *  poisson[21] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);","tmpPixel = texture2D( tAdd, vec2( vUv.x + 4.0 * h *  poisson[22], vUv.y + 4.0 * v *  poisson[23] ) );","tmpPixel1 = texture2D( tAdd2, vec2( vUv.x + 4.0 * h *  poisson[22], vUv.y + 4.0 * v *  poisson[23] ) );","tmpColor += tmpPixel1.a * tmpPixel.xyz;","countColor += (1.0 * tmpPixel1.a);","result.a += (1.0 - tmpPixel1.a);"," if( countColor > 0.0) {","tmpColor /= countColor;","result.xyz = tmpColor;","}","result.a = (1.0 - result.a * invNumBlur) * iHaloIntensity;","} else {","result = vec4(texture2D(tAdd, vUv).xyz, result.a);","}","}","float coef = result.a;","#if (POSTPRO == 1)","vec4 add = texture2D( tDiffuse, vUv );","gl_FragColor = vec4(coef * result.rgb + (1.0 - coef) * add.rgb, add.a);","#else","gl_FragColor = vec4(result.rgb, coef);","#endif","}"].join("\n")};return{HighlightFace:d,HighlightEdge:h,HighlightPoint:a,OutlineHighlightFace:g,OutlineHighlightEdge:i,OutlineHighlightPoint:f,FinalBlending:c,FinalBlendingMultiHL:b}});define("Shaders/AdvancedHighlightShader",["DS/Shaders/AdvancedHighlightShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/AdvancedHighlightShader");return b});define("DS/Shaders/VignettingShader",["DS/Visualization/ThreeJS_DS"],function(b){var a={uniforms:{tDiffuse:{type:"t",value:null},offset:{type:"f",value:1},darkness:{type:"f",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform float offset;","uniform float darkness;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );","gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );","}"].join("\n")};return a});define("Shaders/VignettingShader",["DS/Shaders/VignettingShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/VignettingShader");return b});define("DS/Shaders/ReplaceBlendShader",["DS/Visualization/ThreeJS_DS"],function(b){var a={uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tDiffuse2;","varying vec2 vUv;","void main() {","vec3 color  = texture2D(  tDiffuse, vUv ).xyz;","vec4 color2 = texture2D( tDiffuse2, vUv );","gl_FragColor = vec4((1.0 - color2.a) * color + color2.a * color2.xyz, 1.0);","}"].join("\n")};return a});define("Shaders/ReplaceBlendShader",["DS/Shaders/ReplaceBlendShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/ReplaceBlendShader");return b});define("DS/Shaders/PreComputeShaders",["DS/Visualization/ThreeJS_DS"],function(d){var b=["uniform sampler2D tEnvMap;","uniform float roughness;","const float PI = 3.14159265358979323846264;","varying vec2 vUv;","#define INV_GOLDEN_RATIO 0.6180339887","int ComputeIndex(int id, int N) {","float val = float(id) * (float(N) * 24.0);","int n = int( val / float(N));","int m = int(mod(val, float(N)));","return n + m;","}","vec2 LowDiscrepancy2D(int i, int N)","{","int id = ComputeIndex(i, N);","return vec2(fract((float(id) + 0.5) / float(N)* INV_GOLDEN_RATIO), fract(float(id) * INV_GOLDEN_RATIO));","}","vec2 vLogComplex(in float value) {","float real = log(abs(value));","float im = atan(0.0,value);","return vec2(real,im);","}","vec2 invComplex(in vec2 value) {","return vec2(value.x,-value.y)/(value.x * value.x + value.y * value.y);","}","vec3 GetLightVector(in vec3 R, in vec3 H) {","#if MODE == 3","return H;","#else","return 2.0 * dot(R, H) * H - R;","#endif","}","float GetWeight(in float NoL) {","#if MODE != 0","return 1.0;","#else","return NoL;","#endif","}","vec3 ImportanceSample(vec2 Xi, float roughness) {","vec3 H;","float Phi = 2.0 * PI * Xi.x;","#if MODE != 3","float a = roughness * roughness;","float a2 = a*a;","#endif","#if MODE == 0","float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a2 - 1.0) * Xi.y));","float SinTheta = sqrt(1.0 - CosTheta * CosTheta);","#endif","#if MODE == 1","float interiorTerm = 4.0*a2*exp(1.0/a2)/(4.0*a2*Xi.y + Xi.y - 1.0);","vec2 exteriorTerm = a2*vLogComplex(interiorTerm);","vec2 value = invComplex(exteriorTerm);","float val = min(length(value),1.0);","float SinTheta = sqrt(val);","float CosTheta = sqrt(1.0 - val);","#endif","#if MODE == 2","float loga = 8.0*a2*log(1.0-Xi.y);","float value = loga / (loga - 1.0);","float SinTheta = sqrt(value);","float CosTheta = sqrt(1.0 - value);","#endif","#if MODE == 3","float value = Xi.y;","float SinTheta = sqrt(value);","float CosTheta = sqrt(1.0 - value);","#endif","H.x = SinTheta * cos(Phi);","H.y = SinTheta * sin(Phi);","H.z = CosTheta;","return H;","}","vec3 TangentToWorld(vec3 Vec, vec3 TangentZ) {","vec3 UpVector = abs(TangentZ.z) < 0.999 ? vec3(0,0,1) : vec3(1,0,0);","vec3 TangentX = normalize(cross(UpVector, TangentZ));","vec3 TangentY = cross(TangentZ, TangentX);","return TangentX * Vec.x + TangentY * Vec.y + TangentZ * Vec.z;","}","float computeLODFromDirection(vec3 dir, float pdf) {","float d = 2.0 * DP_SCALE;","d *= (1.0 + abs(dir.z));","d *= d;","float lod = 0.5 * log2(pdf * d);","return max(LOD_CST - lod, 0.0);","}","vec3 sampleLatLongFromLocation(vec3 dir) {","float theta = acos(dir.z);","float phi = atan(dir.y, dir.x);","float u = 0.5 + 0.5 * phi / PI;","float v = theta / PI;","vec4 texelRGBE = texture2D(tEnvMap, vec2(u, v));","return (255.0 / 256.0) * texelRGBE.rgb * pow(2.0, 255.0 * texelRGBE.w - 128.0);","}","vec4 ImportanceSamplePDF(vec2 Xi, float roughness) {","vec3 H;","float Phi = 2.0 * PI * Xi.x;","float D = 0.0;","float normalisationTerm = 1.0/PI;","#if MODE != 3","float a = roughness * roughness;","float a2 = a*a;","#endif","#if MODE == 0","float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a2 - 1.0) * Xi.y));","float SinTheta = sqrt(1.0 - CosTheta * CosTheta);","float d = (a2 - 1.0) * CosTheta*CosTheta + 1.0;","D = a2 / (PI * d * d);","#endif","#if MODE == 1","float interiorTerm = 4.0*a2*exp(1.0/a2)/(4.0*a2*Xi.y + Xi.y - 1.0);","vec2 exteriorTerm = a2*vLogComplex(interiorTerm);","vec2 value = invComplex(exteriorTerm);","float val = min(length(value),1.0);","float SinTheta = sqrt(val);","float CosTheta = sqrt(1.0-val);","float cosine2 = max(CosTheta*CosTheta,1e-6);","float sine2 = max(SinTheta*SinTheta,1e-6);","normalisationTerm *= 1.0/(1.0 + 4.0*a2);","float sine4 = max(sine2 * sine2,1e-6);","float cotan2 = cosine2/sine2;","float value2 = -cotan2 / a2;","D = 1.0 + 4.0 * exp(value2)/ sine4;","D *= normalisationTerm;","#endif","#if MODE == 2","float loga = 8.0*a2*log(1.0-Xi.y);","float value = loga / (loga - 1.0);","float SinTheta = sqrt(value);","float CosTheta = sqrt(1.0 - value);","float cosine2 = max(CosTheta*CosTheta,1e-6);","float sine2 = max(SinTheta*SinTheta,1e-6);","normalisationTerm *= 1.0/(8.0*a2);","float cosine4 = max(cosine2 * cosine2,1e-6);","float tan2 = sine2/cosine2;","float value2 = -tan2/(a2*8.0);","D = exp(value2) / cosine4 ;","D *= normalisationTerm ;","#endif","#if MODE == 3","float value = Xi.y;","float SinTheta = sqrt(value);","float CosTheta = sqrt(1.0 - value);","D = normalisationTerm;","#endif","float PDF = D * CosTheta;","H.x = SinTheta * cos(Phi);","H.y = SinTheta * sin(Phi);","H.z = CosTheta;","return vec4(H, PDF);","}","vec3 sampleDualParaboloidFromLocation(vec3 dir, float lod) {","vec2 st = vec2(0.5);","if (dir.z < 0.0) {","st *= 0.5 * (1.0 - dir.xy / (DP_SCALE * (1.0 - dir.z)));","} else {","st *= 0.5 * (1.0 + dir.xy / (DP_SCALE * (1.0 + dir.z)));","st.x += 0.5;","}","float mipValue = floor(lod);","float mipNextValue = mipValue + 1.0;","float mipCoef = fract(lod);","if (lod >= float(MAX_LOD)) {","mipValue = float(MAX_LOD);","mipNextValue = float(MAX_LOD);","mipCoef = 1.0;","}","vec3 color1;","vec3 color2;","vec2 uv1 = st;","vec2 uv2 = st;","float scale1 = pow(2.0, -mipValue);","float scale2 = pow(2.0, -mipNextValue);","uv1 *= scale1;","uv2 *= scale2;","uv1.y += 1.0 - scale1;","uv2.y += 1.0 - scale2;","color1 = texture2D(tEnvMap, uv1).xyz;","color2 = texture2D(tEnvMap, uv2).xyz;","return mix(color1, color2, mipCoef);","}","vec3 GetIterativeFilteredColor(in vec3 L, in vec4 perturbedZ_PDF, in vec3 H, in vec3 R, in float roughness, in float NoL) {","#if MODE == 3","float lod = computeLODFromDirection(L, perturbedZ_PDF.w);","#else","float lod = computeLODFromDirection(L, perturbedZ_PDF.w/ (4.0 * clamp(dot(R,H),1e-6,1.0)));","#endif","vec3 filteredColor = min(sampleDualParaboloidFromLocation(L, lod),vec3(100.0)) * GetWeight(NoL);","return filteredColor;","}",].join("\n");var e={defines:{NB_SAMPLES:256,DP_SCALE:1.2,MODE:0,MAX_LOD:9,},uniforms:{tEnvMap:{type:"t",value:null},roughness:{type:"f",value:0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:[b,"vec3 prefilterEnvMap(float roughness, vec3 R, vec2 UV) {","vec3 filteredColor;","float weight = 0.0;","for (int i = 0; i < NB_SAMPLES; i++) {","vec2 E = LowDiscrepancy2D(i,NB_SAMPLES);","vec3 perturbedZ = ImportanceSample(E, roughness);","vec3 H = TangentToWorld(perturbedZ, R);","vec3 L = GetLightVector(R,H);","float NoL = clamp(dot(R, L), 0.0, 1.0);","if (NoL > 0.0) {","filteredColor += min(sampleLatLongFromLocation(L), vec3(100.0)) * GetWeight(NoL);","weight += GetWeight(NoL);","}","}","return filteredColor / max(weight, 0.001);","}","void main() {","gl_FragColor = vec4(0.0);","float phi = PI * (2.0 * vUv.x - 1.0);","float theta = PI * vUv.y;","vec3 R;","R.x = sin(theta) * cos(phi);","R.y = sin(theta) * sin(phi);","R.z = cos(theta);","gl_FragColor = vec4(prefilterEnvMap(roughness, R, vUv), 1.0);","}"].join("\n")};var a={defines:{NB_SAMPLES:256,DP_SCALE:1.2,LOD_CST:7.707519,MODE:0,MAX_LOD:9,},uniforms:{tEnvMap:{type:"t",value:null},roughness:{type:"f",value:0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:[b,"vec3 prefilterEnvMap(float roughness, vec3 R, vec2 UV) {","vec3 filteredColor;","float weight = 0.0;","for (int i = 0; i < NB_SAMPLES; i++) {","vec2 E = LowDiscrepancy2D(i,NB_SAMPLES);","vec4 perturbedZ_PDF = ImportanceSamplePDF(E, roughness);","vec3 H = TangentToWorld(perturbedZ_PDF.xyz, R);","vec3 L = GetLightVector(R,H);","float NoL = clamp(dot(R, L), 0.0, 1.0);","if (NoL > 0.0) {","filteredColor += GetIterativeFilteredColor(L, perturbedZ_PDF, H, R, roughness, NoL);","weight += GetWeight(NoL);","}","}","return filteredColor / max(weight, 0.001);","}","void main() {","gl_FragColor = vec4(0.0);","float phi = PI * (2.0 * vUv.x - 1.0);","float theta = PI * vUv.y;","vec3 R;","R.x = sin(theta) * cos(phi);","R.y = sin(theta) * sin(phi);","R.z = cos(theta);","gl_FragColor = vec4(prefilterEnvMap(roughness, R, vUv), 1.0);","}"].join("\n")};var c={defines:{NB_SAMPLES:256,NB_SAMPLES_IT:256,DP_SCALE:1.2,LOD_CST:7.707519,MODE:0,MAX_LOD:9,},uniforms:{prevMap:{type:"t",value:null},tEnvMap:{type:"t",value:null},roughness:{type:"f",value:0},firstSample:{type:"i",value:0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D prevMap;","uniform int firstSample;",b,"vec4 prefilterEnvMap(float roughness, vec3 R, vec2 UV) {","vec3 filteredColor;","float weight = 0.0;","for (int i = 0; i < NB_SAMPLES_IT; i++) {","int newI = firstSample + i;","vec2 E = LowDiscrepancy2D(newI,NB_SAMPLES);","vec4 perturbedZ_PDF = ImportanceSamplePDF(E, roughness);","vec3 H = TangentToWorld(perturbedZ_PDF.xyz, R);","vec3 L = GetLightVector(R,H);","float NoL = clamp(dot(R, L), 0.0, 1.0);","if (NoL > 0.0) {","filteredColor += GetIterativeFilteredColor(L, perturbedZ_PDF, H, R, roughness, NoL);","weight += GetWeight(NoL);","}","}","return vec4(filteredColor / max(weight, 0.001),max(weight, 0.001));","}","void main() {","gl_FragColor = vec4(0.0);","float phi = PI * (2.0 * vUv.x - 1.0);","float theta = PI * vUv.y;","vec3 R;","R.x = sin(theta) * cos(phi);","R.y = sin(theta) * sin(phi);","R.z = cos(theta);","vec4 prevTex = texture2D(prevMap, vUv);","vec4 res = prefilterEnvMap(roughness, R, vUv);","gl_FragColor = vec4((prevTex.rgb * prevTex.a + res.rgb * res.a) / (prevTex.a + res.a), prevTex.a + res.a);","}"].join("\n")};return{ComputeMipMapRoughness:e,ComputeMipMapRoughnessFIS:a,ComputeMipMapRoughnessIterative:c}});define("DS/Shaders/SSAOIterativeShader",["DS/Visualization/ThreeJS_DS"],function(b){var c={computeVertexPositionVS:["vec4 normalDepth = texture2D( tNormalDepth, vUv );","float z = normalDepth.w;","if ( z == 0.0 ) return;","vec2 xy = vUv * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4(xy, 2.0 * z - 1.0, 1.0);","vec4 vertexPositionVS = realProjectionMatrixInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","vertexPositionVS.w = 1.0;"].join("\n"),computeNormal:["vec3 normal = vec3(0.0, 0.0, 1.0);","if (dot(normalDepth.xy, normalDepth.xy) > 0.000001) {","   normal.z = 2.0 * dot(normalDepth.xy, normalDepth.xy) - 1.0;","   normal.xy = normalize(normalDepth.xy) * sqrt(1.0 - normal.z * normal.z);","}"].join("\n")},a={uniforms:{tNormalDepth:{type:"t",value:null},prevMap:{type:"t",value:null},realProjectionMatrixInverse:{type:"m4",value:new b.Matrix4()},screenMin:{type:"f",value:1000},screenRatio:{type:"f",value:0.5},numIteration:{type:"f",value:0},firstSample:{type:"i",value:0},radius:{type:"f",value:0.5},thresholdAngle:{type:"f",value:0.071}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrixInverse;","uniform float screenMin;","uniform float screenRatio;","uniform float radius;","uniform float thresholdAngle;","uniform float numIteration;","uniform int firstSample;","uniform sampler2D tNormalDepth;","uniform sampler2D prevMap;","varying vec2 vUv;","const float PI = 3.14159265358979323846264;","const float one_over_tan_225 = 2.414213562373095;","const float sigma = 0.25;","float HaltonSequence(int n, int base) {","float val = 0.0;","float invBase = 1.0 / float(base);","float invBi = invBase;","for (int i = 0; i < 32; i++) {","if (n == 0) break;","float d_i = mod(float(n), float(base));","val += float(d_i) * invBi;","n /= base;","invBi *= invBase;","}","return val;","}","vec2 LowDiscrepancy2D(int index) {","vec2 res;","res.x = HaltonSequence(index, 2);","res.y = HaltonSequence(index, 5);","return res;","}","float random(vec3 scale, float seed) {","  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","float Random1D(float seed) {","return random(vec3(12.9898, 78.233, 151.7182), seed);","}","void main() {","  gl_FragColor = vec4(1.0);",c.computeVertexPositionVS,c.computeNormal,"  vec3 origin = vertexPositionVS.xyz;","  float projRadius = - 0.5 * one_over_tan_225 * radius / origin.z;","  float minDelta = projRadius / 12.0;","  float scaleRadius = max(1.0, (8.0 / screenMin) / minDelta);","  projRadius *= scaleRadius;","  float newRadius = scaleRadius * radius;","  float newRadius2 = newRadius * newRadius;","  float occlusion = 0.0;","  float phi = 100.0 * Random1D(vUv.x + vUv.y);","  for (int i = 0; i < 8; ++i) {","	 vec2 E = LowDiscrepancy2D(firstSample + i);","	 E *= vec2(2.0 * PI, projRadius);","	 E += vec2(phi, 0.1 * projRadius);","    vec2 u = vec2(screenRatio * cos(E.x), sin(E.x));","	 vec2 uvSample = vUv + E.y * u;","    float z = texture2D(tNormalDepth, uvSample).w;","    bvec4 inScreen4 = bvec4(uvSample.x >= 0.0, uvSample.x <= 1.0, uvSample.y >= 0.0, uvSample.y <= 1.0);","    bool inScreen = all(inScreen4);","    if (all(bvec2(inScreen, z > 0.0))) {","      vec4 posProjected = vec4(uvSample * 2.0 - 1.0, 2.0 * z - 1.0, 1.0);","      vec4 posVS = realProjectionMatrixInverse * posProjected;","      posVS.xyz /= posVS.w;","      vec3 Vi = posVS.xyz - origin;","      occlusion += max(0.0, dot(normalize(Vi), normal) - thresholdAngle) * max(0.0, newRadius2 - dot(Vi, Vi)) / (newRadius2 + 0.0001);","    }","  }","  occlusion = max(0.0, 1.0 - 2.0 * sigma * (2.0 - 1.0 * abs(normal.z)) * occlusion / 8.0);","  float prevAO = texture2D( prevMap, vUv ).r;","  gl_FragColor = vec4(vec3((prevAO * numIteration + occlusion) / (numIteration + 1.0)), 1.0);","}"].join("\n")};return a});define("DS/Shaders/SSLRShader",["DS/Visualization/ThreeJS_DS"],function(b){var a={computeReflectionCoef:["vec4 normalDepth = texture2D( tNormalDepth, vUv );","float reflectionCoef = normalDepth.z;"].join("\n"),computeVertexPositionVS:["float z = normalDepth.w;","if ( z == 0.0 ) return;","vec2 xy = vUv * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4( xy, 2.0 * z - 1.0, 1.0 );","vec4 vertexPositionVS = realProjectionMatrixInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","vertexPositionVS.w = 1.0;"].join("\n"),computeNormal:["vec3 normal;","if (normalDepth.x == 0.0 && normalDepth.y == 0.0) { normal = vec3(0.0); } else {","   normal.z = 2.0 * dot(normalDepth.xy, normalDepth.xy) - 1.0;","   normal.xy = normalize(normalDepth.xy) * sqrt(1.0 - normal.z * normal.z);","}"].join("\n")},c={uniforms:{tDiffuse2:{type:"t",value:null},tNormalDepth:{type:"t",value:null},tRandomTex:{type:"t",value:null},size:{type:"v2",value:new b.Vector2(512,512)},realProjectionMatrix:{type:"m4",value:new b.Matrix4()},realProjectionMatrixInverse:{type:"m4",value:new b.Matrix4()},radius:{type:"f",value:0.5}},vertexShader:["varying vec2 vUv;","void main() {","  vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform mat4 realProjectionMatrix;","uniform mat4 realProjectionMatrixInverse;","uniform sampler2D tDiffuse2;","uniform sampler2D tNormalDepth;","uniform sampler2D tRandomTex;","uniform vec2 size;","uniform float radius;","varying vec2 vUv;","const float roughness = 0.0;","const vec3 unitY = vec3(0.0, 1.0, 0.0);","const vec3 unitZ = vec3(0.0, 0.0, 1.0);","vec2 getScreenPos(vec3 pos) {","  vec4 offset = realProjectionMatrix * vec4(pos, 1.0);","  offset.xy /= offset.w;","  offset.xy = offset.xy * 0.5 + 0.5;","  return offset.xy;","}","vec3 getScreenPos3(vec3 pos) {","  vec4 offset = realProjectionMatrix * vec4(pos, 1.0);","  offset.xyz /= offset.w;","  offset.xy = offset.xy * 0.5 + 0.5;","  return offset.xyz;","}","float random(vec3 scale, float seed) {","  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","void main() {","  vec2 screenPos = vUv;","  gl_FragColor = vec4(0.0);",a.computeReflectionCoef,"  if (reflectionCoef > 0.0) {",a.computeVertexPositionVS,a.computeNormal,"    vec3 origin = vertexPositionVS.xyz;","    vec3 I = normalize(origin);","    vec3 vReflect = normalize(reflect(I, normal));","    vec3 ptReflect = origin + radius * vReflect;","    vec3 originScreenPos = vec3(vUv, 2.0 * z - 1.0);","    vec3 endReflectScreenPos = getScreenPos3( ptReflect );","    vec3 reflectScreenPos = endReflectScreenPos - originScreenPos;","    reflectScreenPos /= length(endReflectScreenPos.xy - originScreenPos.xy);","    vec2 stepsToBorder = vec2(size * vUv / abs(reflectScreenPos.xy));","    if (reflectScreenPos.x > 0.0) stepsToBorder.x = size.x * (1.0 - vUv.x) / abs(reflectScreenPos.x);","    if (reflectScreenPos.y > 0.0) stepsToBorder.y = size.y * (1.0 - vUv.y) / abs(reflectScreenPos.y);","    float stepsToScreenBorder = min(stepsToBorder.x, stepsToBorder.y);","    reflectScreenPos /= size.x;","    float prevDepth = originScreenPos.z;","    float ray_marching_step = 16.0;","    float j = ray_marching_step;","    for (int i = 0; i < 64; ++i) {","      if (j > stepsToScreenBorder) { break; }","      vec3 sampleScreenPos = originScreenPos + j * reflectScreenPos;","      vec4 normalDepth = texture2D( tNormalDepth, sampleScreenPos.xy );","      float z = 2.0 * normalDepth.w - 1.0;","      vec3 n;","      n.z = 2.0 * dot(normalDepth.xy, normalDepth.xy) - 1.0;","      n.xy = normalize(normalDepth.xy) * sqrt(1.0 - n.z * n.z);","      float diffZ = sampleScreenPos.z - z;","      if (diffZ > 0.0) {","        if (ray_marching_step == 1.0) {","          if (abs(diffZ) < 10.0*abs(sampleScreenPos.z - prevDepth)) {","            float reflectAttenuation = clamp(-dot(n, vReflect), 0.0, 1.0) * ((stepsToScreenBorder - j) / stepsToScreenBorder);","            gl_FragColor = vec4( texture2D( tDiffuse2, sampleScreenPos.xy ).xyz, reflectAttenuation * reflectionCoef );","          }","          return;","        } else {","          ray_marching_step *= 0.5;","          j -= ray_marching_step;","        }","      } else {","        prevDepth = sampleScreenPos.z;","        j += ray_marching_step;","      }","    }","  }","}"].join("\n")};return c});define("Shaders/SSLRShader",["DS/Shaders/SSLRShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/SSLRShader");return b});define("DS/Shaders/CopyShader",["DS/Visualization/ThreeJS_DS"],function(a){var b={uniforms:{tDiffuse:{type:"t",value:null},opacity:{type:"f",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",a._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")};return b});define("Shaders/CopyShader",["DS/Shaders/CopyShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/CopyShader");return b});define("DS/Shaders/CompositeShader",[],function(){var a={defines:{USE_BLOOM:0},uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null},tDiffuse3:{type:"t",value:null},tDiffuse4:{type:"t",value:null},tDiffuse5:{type:"t",value:null},tDiffuse6:{type:"t",value:null},brightness:{type:"f",value:1},bloomFactor:{type:"f",value:0.9},gamma:{type:"f",value:2.2}},fragmentShader:["varying vec2 texCoord;","uniform sampler2D tDiffuse;","uniform sampler2D tDiffuse2;","uniform sampler2D tDiffuse3;","uniform sampler2D tDiffuse4;","uniform sampler2D tDiffuse5;","uniform sampler2D tDiffuse6;","uniform float brightness;","uniform float bloomFactor;","uniform float gamma;","#if defined (TONEMAP_FILMIC_NRE) || defined (TONEMAP_FILMIC_NRE_APPROXIMATE)","	#define FILMIC_NRE_A 0.22","	#define FILMIC_NRE_B 0.3","	#define FILMIC_NRE_C 0.1","	#define FILMIC_NRE_D 0.2","	#define FILMIC_NRE_E 0.01","	#define FILMIC_NRE_F 0.3","	#define FILMIC_NRE_W 11.2","#endif","#if defined (TONEMAP_PHOTOGRAPHIC_NRE)","	#define PHOTO_NRE_CRUSHBLACKS /*0.75*/0.0","	#define PHOTO_NRE_BURNHIGHLIGHTS /*0.25*/0.0","	#define PHOTO_NRE_SATURATION 1.0","	#define PHOTO_NRE_COLORCORRECTION_X 1.0","	#define PHOTO_NRE_COLORCORRECTION_Y 1.0","	#define PHOTO_NRE_COLORCORRECTION_Z 1.0","   float luminance_RGB (vec3 iColor) {","		vec3 luminance_weight=vec3(0.176204,0.812985,0.0108109);","		return dot(iColor,luminance_weight);","	}","#endif","#ifdef TONEMAP_UNCHARTED","   const float A = 0.15;","   const float B = 0.50;","   const float C = 0.10;","   const float D = 0.20;","   const float E = 0.02;","   const float F = 0.30;","   const float W = 11.2;","   vec3 Uncharted2Tonemap( vec3 x ) {","       return ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;","   }","#endif","float dither = 0.004;","float random(vec3 scale, float seed) {","  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","vec3 Random3D(float seed) {","vec3 res;","res.x = random(vec3(12.9898, 78.233, 151.7182), seed);","res.y = random(vec3(63.7264, 10.873, 623.6736), seed);","res.z = random(vec3(125.5736, 34.485, 437.2873), seed);","return res;","}","vec4 chromaticAberration(const in sampler2D tex, const in vec2 uv, const in float factor) {","vec2 dist = uv - 0.5;","vec2 offset = factor * dist * length(dist);","vec4 col;","col.r  = texture2D(tex, uv - offset).r;","col.ga = texture2D(tex, uv).ga;","col.b  = texture2D(tex, uv + offset).b;","return col;","}","float RGBToL(const in vec3 color) {","float fmin = min(min(color.r, color.g), color.b);","float fmax = max(max(color.r, color.g), color.b);","return (fmax + fmin) / 2.0;","}","vec3 colorBalance(const in vec3 color, const in vec3 lrgb, const in vec3 mrgb, const in vec3 hrgb) {","float lightness = RGBToL(color);","lightness = (1.5 * lightness) / (lightness + 0.5);","float a = 0.25;","float b = 0.333;","float scale = 0.7;","vec3 low = lrgb * clamp((lightness - b) / -a + 0.5, 0.0, 1.0);","vec3 mid = mrgb * clamp((lightness - b) / a + 0.5, 0.0, 1.0) * clamp((lightness + b - 1.0) / -a + 0.5, 0.0, 1.0);","vec3 high = hrgb * clamp((lightness + b - 1.0) / a + 0.5, 0.0, 1.0);","vec3 newColor = color + (low + mid + high) * scale;","newColor = clamp(newColor, 0.0, 1.0);","return normalize(newColor) * length(color);","}","void main() {","   vec4 inColorAlpha = texture2D( tDiffuse, texCoord );","   vec3 inColor = inColorAlpha.xyz;","   inColor *= brightness;","#if (USE_BLOOM == 1)","    vec4 bloom1 = texture2D( tDiffuse2, texCoord );","    vec4 bloom2 = texture2D( tDiffuse3, texCoord );","    vec4 bloom3 = texture2D( tDiffuse4, texCoord );","    vec4 bloom4 = texture2D( tDiffuse5, texCoord );","    vec4 bloom5 = texture2D( tDiffuse6, texCoord );","    vec3 bloom = 0.5 * bloom1.rgb + 0.5 * bloom2.rgb + 0.5 * bloom3.rgb + 0.5 * bloom4.rgb + 0.5 * bloom5.rgb;","	 inColor += bloomFactor * bloom;","#endif","   vec3 outColor;","   #if defined( TONEMAP_SIMPLE )","       outColor = sqrt( inColor );","   #elif defined( TONEMAP_LINEAR )","       outColor = pow( inColor, vec3( 1.0 / gamma ) );","   #elif defined( TONEMAP_REINHARD )","       inColor = inColor / ( 1.0 + inColor );","       outColor = pow( inColor, vec3( 1.0 / gamma ) );","   #elif defined( TONEMAP_FILMIC )","       vec3 x = max( vec3( 0.0 ), inColor - 0.004 );","       outColor = ( x * ( 6.2 * x + 0.5 ) ) / ( x * ( 6.2 * x + 1.7 ) + 0.06 );","   #elif defined( TONEMAP_UNCHARTED )","       float ExposureBias = 2.0;","       vec3 curr = Uncharted2Tonemap( ExposureBias * inColor );","       vec3 whiteScale = vec3( 1.0 ) / Uncharted2Tonemap( vec3( W ) );","       vec3 color = curr * whiteScale;","       outColor = pow( color, vec3( 1.0 / gamma ) );","   #elif defined( TONEMAP_FILMIC_NRE )","		vec4 tmpCol = vec4(inColor.xyz, FILMIC_NRE_W);","		tmpCol = ((tmpCol*(FILMIC_NRE_A*tmpCol+FILMIC_NRE_C*FILMIC_NRE_B)+FILMIC_NRE_D*FILMIC_NRE_E)","		/(tmpCol*(FILMIC_NRE_A*tmpCol+FILMIC_NRE_B)+FILMIC_NRE_D*FILMIC_NRE_F))","		-FILMIC_NRE_E/FILMIC_NRE_F;","		tmpCol.xyz = tmpCol.xyz/tmpCol.w;","		outColor.x = (tmpCol.x < 0.0031308)  ? (tmpCol.x*12.92) : 1.055*pow(tmpCol.x, 0.41666) - 0.055;","		outColor.y = (tmpCol.y < 0.0031308)  ? (tmpCol.y*12.92) : 1.055*pow(tmpCol.y, 0.41666) - 0.055;","		outColor.z = (tmpCol.z < 0.0031308)  ? (tmpCol.z*12.92) : 1.055*pow(tmpCol.z, 0.41666) - 0.055;","   #elif defined( TONEMAP_FILMIC_NRE_APPROXIMATE )","		vec4 tmpCol = vec4(inColor.xyz, FILMIC_NRE_W);","		tmpCol = ((tmpCol*(FILMIC_NRE_A*tmpCol+FILMIC_NRE_C*FILMIC_NRE_B)+FILMIC_NRE_D*FILMIC_NRE_E)","		/(tmpCol*(FILMIC_NRE_A*tmpCol+FILMIC_NRE_B)+FILMIC_NRE_D*FILMIC_NRE_F))","		-FILMIC_NRE_E/FILMIC_NRE_F;","		tmpCol.xyz = tmpCol.xyz/tmpCol.w;","       vec3 S1 = sqrt(tmpCol.xyz);","       vec3 S2 = sqrt(S1);","       vec3 S3 = sqrt(S2);","		outColor = 0.585122381 * S1 + 0.783140355 * S2 - 0.358252735 *S3;","   #elif defined( TONEMAP_PHOTOGRAPHIC_NRE )","		vec3 c = inColor.xyz * vec3(PHOTO_NRE_COLORCORRECTION_X,PHOTO_NRE_COLORCORRECTION_Y,PHOTO_NRE_COLORCORRECTION_Z);","		c *= (c*PHOTO_NRE_BURNHIGHLIGHTS+1.0)/(c+1.0); ","		c = mix(vec3(luminance_RGB(c)),c,PHOTO_NRE_SATURATION);","		float intens = luminance_RGB(c);","		if(intens<1.0){","			float crushblacks = 2.0* PHOTO_NRE_CRUSHBLACKS +1.0;","			intens = sqrt(intens);","			float oms2 = 1.0 - intens;"," 			c.x = c.x*intens + pow(c.x,crushblacks)*oms2;","			c.y = c.y*intens + pow(c.y,crushblacks)*oms2;"," 			c.z = c.z*intens + pow(c.z,crushblacks)*oms2;","		}","		outColor.x = (c.x < 0.0031308)  ? (c.x*12.92) : 1.055*pow(c.x, 0.41666) - 0.055;","		outColor.y = (c.y < 0.0031308)  ? (c.y*12.92) : 1.055*pow(c.y, 0.41666) - 0.055;","		outColor.z = (c.z < 0.0031308)  ? (c.z*12.92) : 1.055*pow(c.z, 0.41666) - 0.055;","   #elif defined( TONEMAP_LINEAR_NRE )","		vec3 c = inColor.xyz ;","		outColor.x = (c.x < 0.0031308)  ? (c.x*12.92) : 1.055*pow(c.x, 0.41666) - 0.055;","		outColor.y = (c.y < 0.0031308)  ? (c.y*12.92) : 1.055*pow(c.y, 0.41666) - 0.055;","		outColor.z = (c.z < 0.0031308)  ? (c.z*12.92) : 1.055*pow(c.z, 0.41666) - 0.055;","   #else","       outColor = inColor;","   #endif","   outColor += 2.0 * dither * (Random3D(texCoord.x + texCoord.y) - vec3(0.5));","   gl_FragColor = vec4( outColor, inColorAlpha.a );","}"].join("\n"),vertexShader:["varying vec2 texCoord;","void main() {","   vec4 pos = vec4( sign( position.xy ), 0.0, 1.0 );","   texCoord = pos.xy * vec2( 0.5 ) + 0.5;","   gl_Position = pos;","}"].join("\n")};return a});define("Shaders/CompositeShader",["DS/Shaders/CompositeShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/CompositeShader");return b});define("DS/Shaders/StereoShaders",["DS/Visualization/ThreeJS_DS"],function(d){var e={uniforms:{tLeftEye:{type:"t",value:null},tRightEye:{type:"t",value:null},tDiffuse:{type:"t",value:null},},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["varying vec2 vUv;","uniform sampler2D tDiffuse;","uniform sampler2D tLeftEye;","uniform sampler2D tRightEye;","void main() {","if(vUv.x < 0.5) {","gl_FragColor = texture2D(tLeftEye, vec2(vUv.x*2.0, vUv.y));","} else {","gl_FragColor = texture2D(tRightEye, vec2((vUv.x-0.5)*2.0, vUv.y));","}","} "].join("\n")};var c={uniforms:{tLeftEye:{type:"t",value:null},tRightEye:{type:"t",value:null},tDiffuse:{type:"t",value:null},},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["varying vec2 vUv;","uniform sampler2D tDiffuse;","uniform sampler2D tLeftEye;","uniform sampler2D tRightEye;","void main() {","vec4 cr = texture2D(tLeftEye, vUv);","vec4 cl = texture2D(tRightEye, vUv);","gl_FragColor = vec4(cl.r, cr.g, cr.b, 1.0);","} "].join("\n")};var b={uniforms:{tLeftEye:{type:"t",value:null},tRightEye:{type:"t",value:null},tDiffuse:{type:"t",value:null},scale:{type:"v2",value:new d.Vector2(1,1)},scaleIn:{type:"v2",value:new d.Vector2(1,1)},leftLensCenter:{type:"v2",value:new d.Vector2(0,0)},hmdWarpParam:{type:"v4",value:new d.Vector4(1,0,0,0)},chromAbParam:{type:"v4",value:new d.Vector4(1,0,0,0)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["varying vec2 vUv;","uniform sampler2D tDiffuse;","uniform sampler2D tLeftEye;","uniform sampler2D tRightEye;","uniform vec2 scale;","uniform vec2 scaleIn;","uniform vec2 leftLensCenter;","uniform vec4 hmdWarpParam;","uniform vec4 chromAbParam;","void main() {","  if(vUv.x >= 0.5) {","    vec2 lensCenter = leftLensCenter;","    vec2 uv = (vec2((vUv.x-0.5)*2.0, vUv.y)*2.0)-1.0;","    vec2 theta = (uv-lensCenter)*scaleIn;","    float rSq = theta.x*theta.x + theta.y*theta.y;","    vec2 rvector = theta*(hmdWarpParam.x + hmdWarpParam.y*rSq + hmdWarpParam.z*rSq*rSq + hmdWarpParam.w*rSq*rSq*rSq);","    vec2 rBlue = rvector * (chromAbParam.z + chromAbParam.w * rSq);","    vec2 tcBlue = (lensCenter + scale * rBlue);","    tcBlue = (tcBlue+1.0)/2.0;","    if (any(bvec2(clamp(tcBlue, vec2(0.0,0.0), vec2(1.0,1.0))-tcBlue))) {","      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);","      return;}","    vec2 tcGreen = lensCenter + scale * rvector;","    tcGreen = (tcGreen+1.0)/2.0;","    vec2 rRed = rvector * (chromAbParam.x + chromAbParam.y * rSq);","    vec2 tcRed = lensCenter + scale * rRed;","    tcRed = (tcRed+1.0)/2.0;","    gl_FragColor = vec4(texture2D(tLeftEye, tcRed).r, texture2D(tLeftEye, tcGreen).g, texture2D(tLeftEye, tcBlue).b, 1.0);","  } else {","    vec2 lensCenter = -leftLensCenter;","    vec2 uv = (vec2(vUv.x*2.0, vUv.y)*2.0)-1.0;","    vec2 theta = (uv-lensCenter)*scaleIn;","    float rSq = theta.x*theta.x + theta.y*theta.y;","    vec2 rvector = theta*(hmdWarpParam.x + hmdWarpParam.y*rSq + hmdWarpParam.z*rSq*rSq + hmdWarpParam.w*rSq*rSq*rSq);","    vec2 rBlue = rvector * (chromAbParam.z + chromAbParam.w * rSq);","    vec2 tcBlue = (lensCenter + scale * rBlue);","    tcBlue = (tcBlue+1.0)/2.0;","    if (any(bvec2(clamp(tcBlue, vec2(0.0,0.0), vec2(1.0,1.0))-tcBlue))) {","      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);","      return;}","    vec2 tcGreen = lensCenter + scale * rvector;","    tcGreen = (tcGreen+1.0)/2.0;","    vec2 rRed = rvector * (chromAbParam.x + chromAbParam.y * rSq);","    vec2 tcRed = lensCenter + scale * rRed;","    tcRed = (tcRed+1.0)/2.0;","    gl_FragColor = vec4(texture2D(tRightEye, tcRed).r, texture2D(tRightEye, tcGreen).g, texture2D(tRightEye, tcBlue).b, 1.0);","  }","} "].join("\n")};var a={uniforms:{tEye:{type:"t",value:null},tDiffuse:{type:"t",value:null},eyeToSourceUVScale:{type:"v2",value:new d.Vector2(0.33333333,0.3333333)},eyeToSourceUVOffset:{type:"v2",value:new d.Vector2(0.5,0.5)}},vertexShader:["varying vec2 uvr;","varying vec2 uvg;","varying vec2 uvb;","uniform vec2 eyeToSourceUVScale;","uniform vec2 eyeToSourceUVOffset;","void main() {","uvr = uv.xy * eyeToSourceUVScale + eyeToSourceUVOffset;","uvg = uv2.xy * eyeToSourceUVScale + eyeToSourceUVOffset;","uvb = tangent.xy * eyeToSourceUVScale + eyeToSourceUVOffset;","uvr.y = 1.0 - uvr.y;","uvg.y = 1.0 - uvg.y;","uvb.y = 1.0 - uvb.y;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["varying vec2 uvr;","varying vec2 uvg;","varying vec2 uvb;","uniform sampler2D tDiffuse;","uniform sampler2D tEye;","void main() {","gl_FragColor = vec4(texture2D(tEye, uvr).r, texture2D(tEye, uvg).g, texture2D(tEye, uvb).b, 1.0);","} "].join("\n")};return{leftRight:e,anaglyph:c,oculusDK1:b,oculusDK2:a}});define("Shaders/MirrorShaders",["DS/Shaders/MirrorShaders","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/MirrorShaders");return b});define("DS/Shaders/FlipXShader",["DS/Visualization/ThreeJS_DS"],function(a){var b={uniforms:{tDiffuse:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",a._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","    gl_FragColor = texture2D(tDiffuse, vec2(1.0 - vUv.x, vUv.y));","}"].join("\n")};return b});define("DS/Shaders/MLAAShaders",["DS/Visualization/ThreeJS_DS"],function(d){var b={uniforms:{tDiffuse:{type:"t",value:null},screenWidth:{type:"f",value:800},screenHeight:{type:"f",value:600}},vertexShader:["varying vec2 vUv;","varying vec4 offset[3];","uniform float screenHeight;","uniform float screenWidth;","vec2 SMAA_PIXEL_SIZE = vec2(1.0/screenWidth, 1.0/screenHeight);","void main() {","    vUv = uv;","    offset[0] = vUv.xyxy + SMAA_PIXEL_SIZE.xyxy * vec4(-1.0, 0.0, 0.0, 1.0);","    offset[1] = vUv.xyxy + SMAA_PIXEL_SIZE.xyxy * vec4( 1.0, 0.0, 0.0,-1.0);","    offset[2] = vUv.xyxy + SMAA_PIXEL_SIZE.xyxy * vec4(-2.0, 0.0, 0.0, -2.0);",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform float screenHeight;","uniform float screenWidth;","uniform sampler2D tDiffuse;","varying vec2 vUv;","varying vec4 offset[3];","vec2 SMAA_PIXEL_SIZE = vec2(1.0/screenWidth, 1.0/screenHeight);","const float threshold = 0.1;","void main() {","    vec3 weights = vec3(0.2126,0.7152, 0.0722);","    float L = dot(texture2D(tDiffuse, vUv.xy).rgb, weights);","    float Lleft = dot(texture2D(tDiffuse, offset[0].xy).rgb, weights);","    float Ltop = dot(texture2D(tDiffuse, offset[0].zw).rgb, weights);","    float Lright = dot(texture2D(tDiffuse, offset[1].xy).rgb, weights);","    float Lbottom = dot(texture2D(tDiffuse, offset[1].zw).rgb, weights);","    vec4 delta = abs(vec4(L) - vec4(Lleft, Ltop, Lright, Lbottom));","    vec4 edges = step(vec4(threshold), delta);","    gl_FragColor = edges;","    gl_FragColor.ba = vec2(0.0,1.0);","}"].join("\n")};var c={uniforms:{tDiffuse:{type:"t",value:null},areaTex:{type:"t",value:null},screenWidth:{type:"f",value:800},screenHeight:{type:"f",value:600}},vertexShader:["varying vec2 vUv;","uniform float screenHeight;","uniform float screenWidth;","void main() {","    vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D areaTex;","uniform float screenHeight;","uniform float screenWidth;","varying vec2 vUv;","const int   MAX_SEARCH_STEPS = 7;","const int   MAX_DISTANCE     = 16;","vec2 SMAA_PIXEL_SIZE = vec2(1.0/screenWidth, 1.0/screenHeight);","vec4 tex2DLod(sampler2D map, vec2 texcoord, float offset) {","    return texture2D(map, texcoord );","}","float SearchXLeft(vec2 texcoord) {","    int j;","    texcoord -= vec2(1.5, 0.0) * SMAA_PIXEL_SIZE;","    float g = 0.0;","    for (int i = 0; i < MAX_SEARCH_STEPS; i++) {","        j = i;","        g = texture2D(tDiffuse, texcoord).g;","        if (g < 0.9) break;","        texcoord -= vec2(2.0, 0.0) * SMAA_PIXEL_SIZE;","    }","    return max(-2.0 * float(j) - 2.0 * g, -2.0 * float(MAX_SEARCH_STEPS));","}","float SearchXRight(vec2 texcoord) {","    int j;","    texcoord += vec2(1.5, 0.0) * SMAA_PIXEL_SIZE;","    float g = 0.0;","    for(int i = 0; i < MAX_SEARCH_STEPS; i++) {","        j = i;","        g = texture2D(tDiffuse, texcoord).g;","        if (g < 0.9) break;","        texcoord += vec2(2.0, 0.0) * SMAA_PIXEL_SIZE;","    }","    return min(2.0 * float(j) + 2.0 * g, 2.0 * float(MAX_SEARCH_STEPS));","}","float SearchYUp(vec2 texcoord) {","    int j;","    texcoord += vec2(0.0, 1.5) * SMAA_PIXEL_SIZE;","    float r = 0.0;","    for(int i = 0; i < MAX_SEARCH_STEPS; i++) {","        j = i;","        r = texture2D(tDiffuse, texcoord).r;","        if (r < 0.9) break;","        texcoord += vec2(0.0, 2.0) * SMAA_PIXEL_SIZE;","    }","    return min(2.0 * float(j) + 2.0 * r, 2.0 * float(MAX_SEARCH_STEPS));","}","float SearchYDown(vec2 texcoord) {","    int j;","    texcoord -= vec2(0.0, 1.5) * SMAA_PIXEL_SIZE;","    float r = 0.0;","    for(int i = 0; i < MAX_SEARCH_STEPS; i++) {","        j = i;","        r = texture2D(tDiffuse, texcoord).r;","        if (r < 0.9) break;","        texcoord -= vec2(0.0, 2.0) * SMAA_PIXEL_SIZE;","    }","    return max(-2.0 * float(j) - 2.0 * r, -2.0 * float(MAX_SEARCH_STEPS));","}","vec2 round(vec2 invec) {","    return vec2(floor(abs(invec) + vec2(0.5)) * sign(invec));","}","vec2 Area(vec2 distance, float e1, float e2) {","    float areaSize = float(MAX_DISTANCE) * 5.0;","    vec2 pixcoord = float(MAX_DISTANCE) * ","                    round(4.0 * vec2(e1, e2)) ","                    + distance + vec2(0.5);","    vec2 texcoord = pixcoord / areaSize;","    return tex2DLod(areaTex, vec2(texcoord.x, 1.0 - texcoord.y), 0.0).rg;","}","void main() {","    vec4 weights = vec4(0.0, 0.0, 0.0, 0.0);","    vec2 e = texture2D(tDiffuse, vUv).rg;","    vec2 d;","    if (e.g != 0.0) { ","        d = vec2(SearchXLeft(vUv), SearchXRight(vUv));","        vec4 coords = vec4(d.x, 0.25, d.y + 1.0, 0.25) * SMAA_PIXEL_SIZE.xyxy + vUv.xyxy;","        float e1 = tex2DLod(tDiffuse, coords.xy, 0.0).r;","        float e2 = tex2DLod(tDiffuse, coords.zw, 0.0).r;","        weights.rg = Area(abs(d), e1, e2);","    }","    if (e.r != 0.0) {","        d = vec2(SearchYUp(vUv), SearchYDown(vUv));","        vec4 coords = vec4(-0.25, d.x, -0.25, d.y - 1.0) * SMAA_PIXEL_SIZE.xyxy + vUv.xyxy;","        float e1 = texture2D(tDiffuse, coords.xy).g;","        float e2 = texture2D(tDiffuse, coords.zw).g;","        weights.ba = Area(abs(d), e1, e2);","    }","    gl_FragColor = clamp(weights, 0.0, 1.0);","}"].join("\n")};var a={uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null},screenWidth:{type:"f",value:800},screenHeight:{type:"f",value:600}},vertexShader:["varying vec2 vUv;","void main() {","    vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tDiffuse2;","uniform float screenHeight;","uniform float screenWidth;","varying vec2 vUv;","vec2 SMAA_PIXEL_SIZE = vec2(1.0/screenWidth, 1.0/screenHeight);","void main() {","    vec4 topLeft = texture2D(tDiffuse2, vUv);","    float bottom = texture2D(tDiffuse2, vUv + vec2(0.0, -1.0) * SMAA_PIXEL_SIZE).g;","    float right = texture2D(tDiffuse2, vUv + vec2(1.0, 0.0) * SMAA_PIXEL_SIZE).a;","    vec4 a = vec4(topLeft.r, bottom, topLeft.b, right);","    vec4 w = a * a * a;","    float sum = dot(w, vec4(1.0));","    if (sum > 0.0) {","        vec4 o = a * SMAA_PIXEL_SIZE.yyxx;","        vec4 color = vec4(0.0);","        color = texture2D(tDiffuse, vUv + vec2( 0.0,  o.r)) * w.r + color;","        color = texture2D(tDiffuse, vUv + vec2( 0.0, -o.g)) * w.g + color;","        color = texture2D(tDiffuse, vUv + vec2(-o.b,  0.0)) * w.b + color;","        color = texture2D(tDiffuse, vUv + vec2( o.a,  0.0)) * w.a + color;","        gl_FragColor = color / sum;","    } else {","        gl_FragColor = texture2D(tDiffuse, vUv);","    }","}"].join("\n")};return{EdgeDetection:b,BlendingWeights:c,FinalBlending:a}});define("Shaders/MLAAShaders",["DS/Shaders/MLAAShaders","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/MLAAShaders");return b});define("DS/Shaders/AdvancedPreHighlightShader",["DS/Visualization/ThreeJS_R57"],function(c){var d={uniforms:c.UniformsUtils.merge([c.UniformsLib.clipPlanes,c.UniformsLib.skinning,{map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new c.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new c.Vector4(1,1)},}]),vertexShaderPars:["varying float reflectionFactor;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif",].join("\n"),vertexShaderBody:["    vec3 I = normalize( -mvPosition.xyz );","    reflectionFactor = abs( dot( I, mvNormal ) );","#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif","    gl_Position = projectionMatrix * mvPosition;"].join("\n"),fragmentShaderPars:["varying float reflectionFactor;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif",].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vUvMap ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","    gl_FragColor = vec4( 0.0, reflectionFactor, 0.0, 1.0 );",].join("\n"),vertexShader:[c.ShaderChunk.clip_pars_vertex,c.ShaderChunk.skinning_pars_vertex,"varying float reflectionFactor;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",c.ShaderChunk.PDSFX_start_vertex,c.ShaderChunk.skinbase_vertex,c.ShaderChunk.skinnormal_vertex,c.ShaderChunk.defaultnormal_vertex,c.ShaderChunk.skinning_vertex,c.ShaderChunk.default_vertex,"#ifdef PDSFX","transformedNormal = _viewTangentSpace.Normal;","#endif","    vec3 I = normalize( -mvPosition.xyz );","    reflectionFactor = abs( dot( I, transformedNormal ) );","#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif","    gl_Position = projectionMatrix * mvPosition;",c.ShaderChunk.clip_vertex,c.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[c.ShaderChunk.clip_pars_fragment,"varying float reflectionFactor;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","void main() {","#ifdef PDSFX","ComputeCommonValues();",c.ShaderChunk.PDSFX_discard_fragment,"#endif",c.ShaderChunk.clip_fragment,"#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vUvMap ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","    gl_FragColor = vec4( 0.0, reflectionFactor, 0.0, 1.0 );","}"].join("\n")};var b={uniforms:c.UniformsUtils.merge([c.UniformsLib.clipPlanes,c.UniformsLib.lines]),vertexShaderPars:[].join("\n"),vertexShaderBody:[].join("\n"),fragmentShaderPars:[].join("\n"),fragmentShaderBody:["    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );",].join("\n"),vertexShader:[c.ShaderChunk.clip_pars_vertex,c.ShaderChunk.lines_pars_vertex,"void main() {",c.ShaderChunk.PDSFX_start_vertex,c.ShaderChunk.default_vertex,c.ShaderChunk.clip_vertex,c.ShaderChunk.lines_vertex,c.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[c.ShaderChunk.clip_pars_fragment,c.ShaderChunk.lines_pars_fragment,"void main() {","#ifdef PDSFX","ComputeCommonValues();",c.ShaderChunk.PDSFX_discard_fragment,"#endif",c.ShaderChunk.clip_fragment,c.ShaderChunk.lines_fragment,"    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );","}"].join("\n")};var e={uniforms:c.UniformsUtils.merge([c.UniformsLib.clipPlanes,{map:{type:"t",value:null},size:{type:"f",value:1},scale:{type:"f",value:500},offsetAlphaMap:{type:"v2",value:new c.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new c.Vector4(1,1)}}]),vertexShaderPars:["uniform float size;","uniform float scale;"].join("\n"),vertexShaderBody:["#ifdef USE_SIZEATTENUATION","gl_PointSize = size * ( scale / length( mvPosition.xyz ) );","#else","gl_PointSize = size;","#endif"].join("\n"),fragmentShaderPars:["#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif"].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif","    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );",].join("\n"),vertexShader:[c.ShaderChunk.clip_pars_vertex,"uniform float size;","uniform float scale;","void main() {",c.ShaderChunk.PDSFX_start_particle_vertex,c.ShaderChunk.PDSFX_start_vertex,c.ShaderChunk.default_vertex,c.ShaderChunk.PDSFX_point_size_vertex,c.ShaderChunk.clip_vertex,c.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[c.ShaderChunk.clip_pars_fragment,"#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif","void main() {","#ifdef PDSFX","ComputeCommonValues();",c.ShaderChunk.PDSFX_discard_fragment,"#endif","#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif",c.ShaderChunk.clip_fragment,"    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );","}"].join("\n")};var a={defines:{POSTPRO:1},uniforms:{tAdd:{type:"t",value:null},tDiffuse:{type:"t",value:null},h:{type:"f",value:1/1024},v:{type:"f",value:1/1024},invNumBlur:{type:"f",value:0.0833333333333333},iHaloColor:{type:"v4",value:new c.Vector4(0,0.6,1,1)},iHaloIntensity:{type:"f",value:2},iScanEffectIntensity:{type:"f",value:1},iOutlineColor2:{type:"v4",value:new c.Vector4(0,1,1,1)},iOutlineColor:{type:"v4",value:new c.Vector4(0,0.6,1,1)},iScanEffectColor:{type:"v4",value:new c.Vector4(0,0.6,1,1)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",c._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#if (POSTPRO == 1)","uniform sampler2D tDiffuse;","#endif","uniform sampler2D tAdd;","uniform float h;","uniform float v;","uniform float invNumBlur;","uniform float iHaloIntensity;","uniform float iScanEffectIntensity;","uniform vec4 iOutlineColor2;","uniform vec4 iOutlineColor;","uniform vec4 iScanEffectColor;","uniform vec4 iHaloColor;","varying vec2 vUv;","void main() {","float boardThin = 1.0;","float board = 1.0;","float center = texture2D( tAdd, vUv ).r;","vec4 up = vec4(texture2D( tAdd, vec2( vUv.x + h, vUv.y    ) ).r, ","texture2D( tAdd, vec2( vUv.x - h, vUv.y + v) ).r, ","texture2D( tAdd, vec2( vUv.x    , vUv.y + v) ).r, ","texture2D( tAdd, vec2( vUv.x + h, vUv.y + v) ).r  ",");","vec4 down = vec4(texture2D( tAdd, vec2( vUv.x - h, vUv.y - v) ).r, ","texture2D( tAdd, vec2( vUv.x    , vUv.y - v) ).r, ","texture2D( tAdd, vec2( vUv.x + h, vUv.y - v) ).r, ","texture2D( tAdd, vec2( vUv.x - h, vUv.y    ) ).r  ",");","boardThin *= up.x   * up.y   * up.z   * up.w;","boardThin *= down.x * down.y * down.z * down.w;","board *= (1.0 - up.x)   * (1.0 - up.y)   * (1.0 - up.z)   * (1.0 - up.w);","board *= (1.0 - down.x) * (1.0 - down.y) * (1.0 - down.z) * (1.0 - down.w);","float isOutline = center * (1.0 - boardThin) + (1.0 - center) * (1.0 - board);","if (isOutline == 1.0) {","gl_FragColor = iOutlineColor * center * (1.0 - boardThin) + iOutlineColor2 * (1.0 - center) * (1.0 - board);","} else {","#if (POSTPRO == 1)","gl_FragColor = texture2D( tDiffuse, vUv );","#else","gl_FragColor = vec4(0.0);","#endif","}","}"].join("\n")};return{HighlightFace:d,HighlightEdge:b,HighlightPoint:e,FinalBlending:a}});define("Shaders/AdvancedPreHighlightShader",["DS/Shaders/AdvancedPreHighlightShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/AdvancedPreHighlightShader");return b});define("DS/Shaders/OITShader",["DS/Visualization/ThreeJS_DS"],function(b){var a={uniforms:{tOpaque:{type:"t",value:null},tAccum:{type:"t",value:null},tReveal:{type:"t",value:null}},vertexShader:["varying vec2 vUv;","void main() {","   vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tOpaque;","uniform sampler2D tReveal;","uniform sampler2D tAccum;","const float inf = 1e6;","bool isinf(float n){","   return abs(n) == inf;","}","const float threshold = 1e-6;","varying vec2 vUv;","float maxComponent(vec4 iVector) {","   return max(iVector.r,max(iVector.g,max(iVector.b,iVector.a)));","}","void main() {","   vec4 opaque = texture2D(tOpaque, vUv);","   float reveal = texture2D(tReveal, vUv).r;","   if (reveal > 1.0 - threshold) {","       gl_FragColor = opaque;","       return;","   }","   vec4 accum = texture2D(tAccum, vUv);","   if (isinf(maxComponent(abs(accum)))){","       accum.rgb = vec3(max(accum.a,threshold));","   }","   vec3 avgCol = accum.rgb / max(accum.a,threshold);","   gl_FragColor = vec4(avgCol * (1.0 - reveal) + reveal * opaque.rgb,1.0);","}"].join("\n")};return a});define("Shaders/OITShader",["DS/Shaders/OITShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/OITShader");return b});define("DS/Shaders/DisplayIrradianceMapShader",["DS/Visualization/ThreeJS_DS"],function(b){var a={uniforms:{tDiffuse1:{type:"t",value:null},offset1:{type:"v2",value:new b.Vector2(0,0.5)},scale1:{type:"f",value:0.5},},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",b._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse1;","uniform vec2 offset1;","uniform float scale1;","varying vec2 vUv;","void main() {","gl_FragColor = vec4(0.0);","vec2 vUv2 = (vUv - offset1) / scale1;","if (vUv2.x > 0.0 && vUv2.y > 0.0 && vUv2.x < 1.0 && vUv2.y < 1.0) {","    vec3 color = texture2D( tDiffuse1, vUv2 ).xyz;","    color = pow(color, vec3(1.0 / 2.2));","    gl_FragColor = vec4(color, 1.0); return;","}","}"].join("\n")};return a});define("Shaders/DisplayIrradianceMapShader",["DS/Shaders/DisplayIrradianceMapShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/DisplayIrradianceMapShader");return b});define("DS/Shaders/MultiplicativeBlendShader",["DS/Visualization/ThreeJS_DS"],function(a){var b={defines:{POSTPRO:1},uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null},strength:{type:"f",value:0.5}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",a._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["#if (POSTPRO == 1)","uniform sampler2D tDiffuse;","#endif","uniform sampler2D tDiffuse2;","uniform float strength;","varying vec2 vUv;","void main() {","float color2 = texture2D( tDiffuse2, vUv ).x;","float mult = clamp((color2 - strength)/(1.0 -strength), 0.0, 1.0);","mult *= mult;","#if (POSTPRO == 1)","mult *= mult;","vec4 color  = texture2D(  tDiffuse, vUv );","gl_FragColor = vec4(color.xyz * mult, color.a);","#else","gl_FragColor = vec4(vec3(0.0), 1.0 - mult);","#endif","}"].join("\n")};return b});define("Shaders/MultiplicativeBlendShader",["DS/Shaders/MultiplicativeBlendShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/MultiplicativeBlendShader");return b});define("DS/Shaders/ConvertCubemapToLatlongShader",["DS/Visualization/ThreeJS_DS"],function(a){var b={defines:{ORIENTATION:0,},uniforms:{cubemap:{type:"t",value:null},},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;",a._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform samplerCube cubemap;","const float PI = 3.14159265358979323846264;","varying vec2 vUv;","void main() {","gl_FragColor = vec4(0.0);","vec3 N;","float phi = PI * (2.0 * vUv.x - 1.0);","#if ORIENTATION > 0","float theta = PI * vUv.y;","N.x = sin(theta) * sin(phi);","N.y = cos(theta);","N.z = sin(theta) * cos(phi);","#else","float theta = PI * (1.0 - vUv.y);","N.x = sin(theta) * cos(phi);","N.y = sin(theta) * sin(phi);","N.z = cos(theta);","#endif","gl_FragColor = textureCube(cubemap, N);","}"].join("\n")};return{ConvertCubemapToLatlong:b}});define("DS/Shaders/AdvancedHighlightShaderSinglePass",["DS/Visualization/ThreeJS_R57"],function(c){var d={uniforms:c.UniformsUtils.merge([c.UniformsLib.clipPlanes,c.UniformsLib.skinning,{map:{type:"t",value:null},offsetAlphaMap:{type:"v2",value:new c.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new c.Vector4(1,1)},iScanEffectIntensity:{type:"f",value:1},iOutlineColor2:{type:"v4",value:new c.Vector4(0,1,1,1)},iOutlineColor:{type:"v4",value:new c.Vector4(0,0.6,1,1)},iScanEffectColor:{type:"v4",value:new c.Vector4(0,0.6,1,1)},},]),vertexShaderPars:[c.ShaderChunk.clip_pars_vertex,"varying float reflectionFactor;",].join("\n"),vertexShaderBody:["    vec3 I = normalize( -mvPosition.xyz );","    reflectionFactor = abs( dot( I, mvNormal ) );",c.ShaderChunk.clip_vertex].join("\n"),fragmentShaderPars:[c.ShaderChunk.clip_pars_fragment,"varying float reflectionFactor;","uniform float iScanEffectIntensity;","uniform vec4 iScanEffectColor;",].join("\n"),fragmentShaderBody:[c.ShaderChunk.clip_fragment,"   float alpha = 1.0 - pow(reflectionFactor, 2.0);","   alpha *= alpha;","	gl_FragColor = vec4(iScanEffectColor.xyz, 0.6 * alpha + 0.2);",].join("\n"),vertexShader:[c.ShaderChunk.clip_pars_vertex,c.ShaderChunk.skinning_pars_vertex,"varying float reflectionFactor;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",c.ShaderChunk.PDSFX_start_vertex,c.ShaderChunk.skinbase_vertex,c.ShaderChunk.skinnormal_vertex,c.ShaderChunk.defaultnormal_vertex,c.ShaderChunk.skinning_vertex,c.ShaderChunk.default_vertex,"#ifdef PDSFX","transformedNormal = _viewTangentSpace.Normal;","#endif","    vec3 I = normalize( -mvPosition.xyz );","    reflectionFactor = abs( dot( I, transformedNormal ) );","#ifdef USE_MAP_ALPHATEST","    vUvMap = uv * repeatAlphaMap + offsetAlphaMap;","#endif","    gl_Position = projectionMatrix * mvPosition;",c.ShaderChunk.clip_vertex,c.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[c.ShaderChunk.clip_pars_fragment,"varying float reflectionFactor;","float finalReflectionFactor;","uniform float iScanEffectIntensity;","uniform vec4 iScanEffectColor;","#ifdef USE_MAP_ALPHATEST","varying vec2 vUvMap;","uniform sampler2D map;","#endif","void main() {","finalReflectionFactor = reflectionFactor;","#ifdef PDSFX","ComputeCommonValues();",c.ShaderChunk.PDSFX_discard_fragment,c.ShaderChunk.PDSFX_viewNormal_fragment,"vec3 mvPosition = ComputeViewPosition();","    vec3 I = normalize( -mvPosition.xyz );","    finalReflectionFactor = abs( dot( I, _DSvNormal ) );","#endif",c.ShaderChunk.clip_fragment,"   float alpha = 1.0 - pow(finalReflectionFactor, 2.0);","   alpha *= alpha;","#ifdef USE_MAP_ALPHATEST","   float alpha2 = texture2D( map, vUvMap ).w;","   if ( alpha2 < ALPHATEST ) discard;","#endif","   gl_FragColor = vec4(iScanEffectColor.xyz, (0.6 * alpha + 0.2) * iScanEffectIntensity);","}"].join("\n")};var b={uniforms:c.UniformsUtils.merge([c.UniformsLib.clipPlanes,c.UniformsLib.lines,{iScanEffectColor:{type:"v4",value:new c.Vector4(0,0.7,1,1)}}]),vertexShaderPars:[c.ShaderChunk.clip_pars_vertex,c.ShaderChunk.lines_pars_vertex,].join("\n"),vertexShaderBody:[c.ShaderChunk.clip_vertex,c.ShaderChunk.lines_vertex].join("\n"),fragmentShaderPars:[c.ShaderChunk.clip_pars_fragment,c.ShaderChunk.lines_pars_fragment,"uniform vec4 iScanEffectColor;",].join("\n"),fragmentShaderBody:[c.ShaderChunk.clip_fragment,c.ShaderChunk.lines_fragment,"	gl_FragColor = vec4( iScanEffectColor.xyz, 1.0 );",].join("\n"),vertexShader:[c.ShaderChunk.clip_pars_vertex,c.ShaderChunk.lines_pars_vertex,"void main() {",c.ShaderChunk.PDSFX_start_vertex,c.ShaderChunk.default_vertex,c.ShaderChunk.clip_vertex,c.ShaderChunk.lines_vertex,c.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[c.ShaderChunk.clip_pars_fragment,c.ShaderChunk.lines_pars_fragment,"uniform vec4 iScanEffectColor;","void main() {","#ifdef PDSFX","ComputeCommonValues();",c.ShaderChunk.PDSFX_discard_fragment,"#endif",c.ShaderChunk.clip_fragment,c.ShaderChunk.lines_fragment,"	gl_FragColor = vec4( iScanEffectColor.xyz, 1.0 );","}"].join("\n")};var a={uniforms:c.UniformsUtils.merge([c.UniformsLib.clipPlanes,{map:{type:"t",value:null},size:{type:"f",value:1},scale:{type:"f",value:500},offsetAlphaMap:{type:"v2",value:new c.Vector4(0,0)},repeatAlphaMap:{type:"v2",value:new c.Vector4(1,1)},iScanEffectColor:{type:"v4",value:new c.Vector4(0,0.7,1,1)}}]),vertexShaderPars:[c.ShaderChunk.clip_pars_vertex,"uniform float size;","uniform float scale;"].join("\n"),vertexShaderBody:[c.ShaderChunk.clip_vertex,"#ifdef USE_SIZEATTENUATION","gl_PointSize = size * ( scale / length( mvPosition.xyz ) );","#else","gl_PointSize = size;","#endif"].join("\n"),fragmentShaderPars:[c.ShaderChunk.clip_pars_fragment,"uniform vec4 iScanEffectColor;","#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif"].join("\n"),fragmentShaderBody:["#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif",c.ShaderChunk.clip_fragment,"    gl_FragColor = vec4( iScanEffectColor.xyz, 1.0 );"].join("\n"),vertexShader:[c.ShaderChunk.clip_pars_vertex,"uniform float size;","uniform float scale;","#ifdef USE_MAP_ALPHATEST","uniform vec2 offsetAlphaMap;","uniform vec2 repeatAlphaMap;","#endif","void main() {",c.ShaderChunk.PDSFX_start_vertex,c.ShaderChunk.default_vertex,c.ShaderChunk.PDSFX_point_size_vertex,c.ShaderChunk.clip_vertex,c.ShaderChunk.PDSFX_end_vertex,"}"].join("\n"),fragmentShader:[c.ShaderChunk.clip_pars_fragment,"uniform vec4 iScanEffectColor;","#ifdef USE_MAP_ALPHATEST","uniform sampler2D map;","#endif","void main() {","#ifdef PDSFX","ComputeCommonValues();",c.ShaderChunk.PDSFX_discard_fragment,"#endif","#ifdef USE_MAP_ALPHATEST","   float alpha = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).w;","   if ( alpha < ALPHATEST ) discard;","#endif",c.ShaderChunk.clip_fragment,"    gl_FragColor = vec4( iScanEffectColor.xyz, 1.0 );","}"].join("\n")};return{HighlightFace:d,HighlightEdge:b,HighlightPoint:a}});define("Shaders/AdvancedHighlightShaderSinglePass",["DS/Shaders/AdvancedHighlightShaderSinglePass","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/AdvancedHighlightShaderSinglePass");return b});define("DS/Shaders/SMAAShader",["DS/Visualization/ThreeJS_DS"],function(d){var b={uniforms:{tDiffuse:{type:"t",value:null},screenWidth:{type:"f",value:800},screenHeight:{type:"f",value:600}},vertexShader:["varying vec2 vUv;","varying vec4 offset[3];","uniform float screenHeight;","uniform float screenWidth;","vec2 SMAA_PIXEL_SIZE = vec2(1.0/screenWidth,1.0/screenHeight);","void main() {","    vUv = uv;","    offset[0] = vUv.xyxy + SMAA_PIXEL_SIZE.xyxy * vec4(-1.0, 0.0, 0.0, 1.0);","    offset[1] = vUv.xyxy + SMAA_PIXEL_SIZE.xyxy * vec4( 1.0, 0.0, 0.0, -1.0);","    offset[2] = vUv.xyxy + SMAA_PIXEL_SIZE.xyxy * vec4(-2.0, 0.0, 0.0, -2.0);",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","varying vec2 vUv;","varying vec4 offset[3];","float SMAA_THRESHOLD = 0.1;","void main() {","   vec2 threshold = vec2(SMAA_THRESHOLD, SMAA_THRESHOLD);","   vec3 weights   = vec3(0.2126,0.7152,0.0722);","   float L        = dot(texture2D(tDiffuse, vUv.xy).rgb, weights);","   float Lleft    = dot(texture2D(tDiffuse, offset[0].xy).rgb, weights);","   float Ltop     = dot(texture2D(tDiffuse, offset[0].zw).rgb, weights);","   vec4 delta;","   delta.xy   = abs(L - vec2(Lleft, Ltop));","   vec2 edges = step(threshold, delta.xy);","   float Lright   = dot(texture2D(tDiffuse, offset[1].xy).rgb, weights);","   float Lbottom  = dot(texture2D(tDiffuse, offset[1].zw).rgb, weights);","   delta.zw = abs(L - vec2(Lright, Lbottom));","   vec2 maxDelta  = max(delta.xy, delta.zw);","   maxDelta       = max(maxDelta.xx, maxDelta.yy);","   float Lleftleft = dot(texture2D(tDiffuse, offset[2].xy).rgb, weights);","   float Ltoptop   = dot(texture2D(tDiffuse, offset[2].zw).rgb, weights);","   delta.zw        = abs(vec2(Lleft, Ltop) - vec2(Lleftleft, Ltoptop));","   maxDelta = max(maxDelta.xy, delta.zw);","   edges.xy *= step(0.5 * maxDelta, delta.xy);","   gl_FragColor = vec4(edges, 0.0, 1.0);","}"].join("\n")};var c={uniforms:{tDiffuse:{type:"t",value:null},areaTex:{type:"t",value:null},searchTex:{type:"t",value:null},screenWidth:{type:"f",value:800},screenHeight:{type:"f",value:600}},vertexShader:["varying vec2 vUv;","varying vec4 offset[3];","uniform float screenHeight;","uniform float screenWidth;","vec2 SMAA_PIXEL_SIZE = vec2(1.0/screenWidth, 1.0/screenHeight);","const int SMAA_MAX_SEARCH_STEPS = 8;","void main() {","   vUv = uv;","   offset[0] = vUv.xyxy + SMAA_PIXEL_SIZE.xyxy * vec4(-0.25, 0.125,  1.25, 0.125);","   offset[1] = vUv.xyxy + SMAA_PIXEL_SIZE.xyxy * vec4(-0.125, 0.25, -0.125,  -1.25);","   offset[2] = vec4(offset[0].xz, offset[1].yw) + vec4(-2.0, 2.0, -2.0, 2.0) * SMAA_PIXEL_SIZE.xxyy * float(SMAA_MAX_SEARCH_STEPS);",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D searchTex;","uniform sampler2D areaTex;","uniform float screenHeight;","uniform float screenWidth;","varying vec2 vUv;","varying vec4 offset[3];","vec2 SMAA_PIXEL_SIZE = vec2(1.0/screenWidth, 1.0/screenHeight);","const int   SMAA_FORCE_DIAGONAL_DETECTION  = 1;","const int   SMAA_FORCE_CORNER_DETECTION    = 1;","const int   SMAA_AREATEX_MAX_DISTANCE      = 16;","const int   SMAA_AREATEX_MAX_DISTANCE_DIAG = 20;","const float SMAA_AREATEX_SUBTEX_SIZE       = 1.0 / 7.0;","const vec2  SMAA_AREATEX_PIXEL_SIZE        = vec2(1.0 / 160.0, 1.0/ 560.0);","const float  SMAA_THRESHOLD              = 0.1;","const int    SMAA_MAX_SEARCH_STEPS       = 16;","const int    SMAA_MAX_SEARCH_STEPS_DIAG  = 8;","const int    SMAA_CORNER_ROUNDING        = 25;","float SMAASearchLength(vec2 e, float bias, float scale) {","   e.r = bias + e.r * scale;","   return  255.0*texture2D(searchTex, vec2(e.x,1.0-e.y)).r;","}","float SMAASearchXLeft() {","   vec2 texCoord = vUv + SMAA_PIXEL_SIZE * vec2(-0.25, 0.125);","   float end = (vUv.x - 0.25 * SMAA_PIXEL_SIZE.x) - 2.0 * SMAA_PIXEL_SIZE.x * float(SMAA_MAX_SEARCH_STEPS);","   vec2 e = vec2(0.0, 1.0);","   for(int i = 0;i<SMAA_MAX_SEARCH_STEPS;i++){","       if((texCoord.x > end) && (e.g > 0.8281) && (e.r == 0.0)){","           e = texture2D(tDiffuse, texCoord).rg;","           texCoord.x -= 2.0 * SMAA_PIXEL_SIZE.x;","       }else","           break;","   }","   texCoord.x += 0.25 * SMAA_PIXEL_SIZE.x;","   texCoord.x += SMAA_PIXEL_SIZE.x;","   texCoord.x += 2.0 * SMAA_PIXEL_SIZE.x;","   texCoord.x -= SMAA_PIXEL_SIZE.x * SMAASearchLength(e, 0.0, 0.5);","   return texCoord.x  ;","}","float SMAASearchXRight() {","   vec2 texcoord = vUv + SMAA_PIXEL_SIZE * vec2(1.25, 0.125);","   float end = (vUv.x + 1.25 * SMAA_PIXEL_SIZE.x) + 2.0 * SMAA_PIXEL_SIZE.x * float(SMAA_MAX_SEARCH_STEPS);","   vec2 e = vec2(0.0, 1.0);","   for(int i = 0;i<SMAA_MAX_SEARCH_STEPS;i++){","       if((texcoord.x < end) && (e.g > 0.8281) && (e.r == 0.0)){","           e = texture2D(tDiffuse, texcoord).rg;","           texcoord += vec2(2.0, 0.0) * SMAA_PIXEL_SIZE;","       }else","           break;","   }","   texcoord.x -= 0.25 * SMAA_PIXEL_SIZE.x;","   texcoord.x -= SMAA_PIXEL_SIZE.x;","   texcoord.x -= 2.0 * SMAA_PIXEL_SIZE.x;","   texcoord.x += SMAA_PIXEL_SIZE.x * SMAASearchLength(e, 0.5, 0.5);","   return texcoord.x;","}","float SMAASearchYDown() {","   vec2 texcoord = vUv + SMAA_PIXEL_SIZE * vec2(-0.125, -1.25);","   float end = (vUv.y - 1.25 * SMAA_PIXEL_SIZE.y) - 2.0 * SMAA_PIXEL_SIZE.y * float(SMAA_MAX_SEARCH_STEPS);","   vec2 e = vec2(1.0, 0.0);","   for(int i = 0;i<SMAA_MAX_SEARCH_STEPS;i++){","       if((texcoord.y > end) && (e.r > 0.8281) && (e.g == 0.0)){","           e = texture2D(tDiffuse, texcoord).rg;","           texcoord -= vec2(0.0, 2.0) * SMAA_PIXEL_SIZE;","       }else","           break;","   }","   texcoord.y += 0.25 * SMAA_PIXEL_SIZE.y;","   texcoord.y += SMAA_PIXEL_SIZE.y;","   texcoord.y -= SMAA_PIXEL_SIZE.y * SMAASearchLength(e.gr ,0.5, 0.5);","   return texcoord.y ;","}","float SMAASearchYUp() {","   vec2 texcoord = vUv + SMAA_PIXEL_SIZE * vec2(-0.125, 0.25);","   float end = (vUv.y + 0.25 * SMAA_PIXEL_SIZE.y) + 2.0 * SMAA_PIXEL_SIZE.y * float(SMAA_MAX_SEARCH_STEPS);","   vec2 e = vec2(1.0, 0.0);","   for(int i = 0;i<SMAA_MAX_SEARCH_STEPS;i++){","       if((texcoord.y < end) && (e.r > 0.8281) && (e.g == 0.0)){","           e = texture2D(tDiffuse, texcoord).rg;","           texcoord += vec2(0.0, 2.0) * SMAA_PIXEL_SIZE;","       }else","           break;","   }","   texcoord.y -= 0.25 * SMAA_PIXEL_SIZE.y;","   texcoord.y -= SMAA_PIXEL_SIZE.y;","   texcoord.y -= 2.0 * SMAA_PIXEL_SIZE.y;","   texcoord.y += SMAA_PIXEL_SIZE.y * SMAASearchLength(e.gr, 0.0, 0.5);","   return texcoord.y ;","}","vec2 round(vec2 invec) {","   return vec2(floor(abs(invec) + vec2(0.5)) * sign(invec));","}","vec2 SMAAArea(vec2 dist, float e1, float e2, float offset) {","   vec2 texcoord = float(SMAA_AREATEX_MAX_DISTANCE) * round(4.0 * vec2(e1, e2)) + dist  ;","   texcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + (0.5 * SMAA_AREATEX_PIXEL_SIZE);","   return texture2D(areaTex, vec2(texcoord.x,1.0-texcoord.y)).rg;","}","void SMAADetectHorizontalCornerPattern(vec2 weights, vec2 texcoord, vec2 d) {","   if (SMAA_CORNER_ROUNDING < 100 || SMAA_FORCE_CORNER_DETECTION == 1 ){","       vec4 coords = vec4(d.x, 0.0, d.y, 0.0)*SMAA_PIXEL_SIZE.xyxy+ texcoord.xyxy;","       vec2 e;","       e.r = texture2D(tDiffuse, (coords.xy + vec2(0.0,  -1.0))).r;","       bool left = abs(d.x) < abs(d.y);","       e.g = texture2D(tDiffuse, (coords.xy + vec2(0.0, 2.0))).r;","       if (left) weights *= clamp(float(SMAA_CORNER_ROUNDING) / 100.0 + 1.0 - e,0.0,1.0);","       e.r = texture2D(tDiffuse, (coords.zw + vec2(1.0,  -1.0))).r;","       e.g = texture2D(tDiffuse, (coords.zw + vec2(1.0, 2.0))).r;","       if (!left) weights *= clamp(float(SMAA_CORNER_ROUNDING) / 100.0 + 1.0 - e,0.0,1.0);","   }","}","void SMAADetectVerticalCornerPattern(vec2 weights, vec2 texcoord, vec2 d) {","   if (SMAA_CORNER_ROUNDING < 100 || SMAA_FORCE_CORNER_DETECTION == 1){","       vec4 coords = vec4(0.0, d.x, 0.0, d.y)*SMAA_PIXEL_SIZE.xyxy + texcoord.xyxy;","       vec2 e;","       e.r = texture2D(tDiffuse, (coords.xy + vec2( 1.0, 0.0))).g;","       bool left = abs(d.x) < abs(d.y);","       e.g = texture2D(tDiffuse, (coords.xy + vec2(-2.0, 0.0))).g;","       if (left) weights *= clamp(float(SMAA_CORNER_ROUNDING) / 100.0 + 1.0 - e,0.0,1.0);","       e.r = texture2D(tDiffuse, (coords.zw + vec2( 1.0, -1.0))).g;","       e.g = texture2D(tDiffuse, (coords.zw + vec2(-2.0, -1.0))).g;","       if (!left) weights *= clamp(float(SMAA_CORNER_ROUNDING) / 100.0 + 1.0 - e,0.0,1.0);","	}","}","vec2 SMAAAreaDiag(vec2 dist, vec2 e) {","   vec2 texcoord = float(SMAA_AREATEX_MAX_DISTANCE_DIAG) * e + dist;","   texcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + (0.5 * SMAA_AREATEX_PIXEL_SIZE);","   texcoord.x += 0.5;","   return texture2D(areaTex, vec2(texcoord.x,1.0-texcoord.y)).rg;","}","float SMAASearchDiag1(vec2 texcoord, vec2 dir, float c) {","   texcoord += dir * SMAA_PIXEL_SIZE;","   vec2 e = vec2(0.0, 0.0);","   int j;","   for (int i = 0; i < SMAA_MAX_SEARCH_STEPS_DIAG; i++) {","       j = i;","       e.rg = texture2D(tDiffuse, texcoord).rg;","       if (dot(e, vec2(1.0, 1.0)) < 1.9) break;","       texcoord += dir * SMAA_PIXEL_SIZE;","   }","   return float(j) + float(e.g > 0.9) * c;","}","float SMAASearchDiag2(vec2 texcoord, vec2 dir, float c) {","   texcoord += dir * SMAA_PIXEL_SIZE;","   vec2 e = vec2(0.0, 0.0);","   int j;","   for (int i = 0; i < SMAA_MAX_SEARCH_STEPS_DIAG; i++) {","       j = i;","       e.g = texture2D(tDiffuse, texcoord).g;","       e.r = texture2D(tDiffuse, (texcoord + (vec2(1.0, 0.0)* SMAA_PIXEL_SIZE))).r;","       if (dot(e, vec2(1.0, 1.0)) < 1.9) break;","       texcoord += dir * SMAA_PIXEL_SIZE;","   }","   return float(j) + float(e.g > 0.9) * c;","}","vec2 SMAACalculateDiagWeights(vec2 texcoord, vec2 e, ivec4 subsampleIndices) {","   vec2 weights = vec2(0.0, 0.0);","   vec2 d;","   d.x = e.r > 0.0? SMAASearchDiag1(texcoord, vec2(-1.0,  -1.0), 1.0) : 0.0;","   d.y = SMAASearchDiag1(texcoord, vec2(1.0, 1.0), 0.0);","   if (d.r + d.g > 2.0) {","       vec4 coords = vec4(-d.r, -d.r, d.g, d.g) * SMAA_PIXEL_SIZE.xyxy + texcoord.xyxy;","       vec4 c;","       c.x = texture2D(tDiffuse, (coords.xy + vec2( -1.0, 0.0 )* SMAA_PIXEL_SIZE)).g;","       c.y = texture2D(tDiffuse, (coords.xy + vec2( 0.0,  0.0 )* SMAA_PIXEL_SIZE)).r;","       c.z = texture2D(tDiffuse, (coords.zw + vec2( 1.0,  0.0 )* SMAA_PIXEL_SIZE)).g;","       c.w = texture2D(tDiffuse, (coords.zw + vec2( 1.0, 1.0 )* SMAA_PIXEL_SIZE)).r;","       vec2 e = 2.0 * c.xz + c.yw;","       float t = float(SMAA_MAX_SEARCH_STEPS_DIAG) - 1.0;","       e *= step(d.rg, vec2(t, t));","       weights += SMAAAreaDiag(d, e);","   }","   d.x = SMAASearchDiag2(texcoord, vec2(-1.0, 1.0), 0.0);","   float right = texture2D(tDiffuse, (texcoord + vec2(1.0, 0.0)* SMAA_PIXEL_SIZE)).r;","   d.y = right > 0.0? SMAASearchDiag2(texcoord, vec2(1.0, -1.0), 1.0) : 0.0;","   if (d.r + d.g > 2.0) { ","       vec4 coords = vec4(-d.r, d.r, d.g, -d.g)* SMAA_PIXEL_SIZE.xyxy+ texcoord.xyxy;","       vec4 c;","       c.x  = texture2D(tDiffuse, (coords.xy + vec2(-1.0,  0.0)* SMAA_PIXEL_SIZE)).g;","       c.y  = texture2D(tDiffuse, (coords.xy + vec2( 0.0, 1.0)* SMAA_PIXEL_SIZE)).r;","       c.zw = texture2D(tDiffuse, (coords.zw + vec2( 1.0,  0.0)* SMAA_PIXEL_SIZE)).gr;","       vec2 e = 2.0 * c.xz + c.yw;","       float t = float(SMAA_MAX_SEARCH_STEPS_DIAG) - 1.0;","       e *= step(d.rg, vec2(t, t));","       weights += SMAAAreaDiag(d, e).gr;","   }","   return weights;","}","void main() {","	vec2 pixcoord = vUv / SMAA_PIXEL_SIZE;","   vec4 weights = vec4(0.0, 0.0, 0.0, 0.0);","   vec2 e = texture2D(tDiffuse, vUv).rg;","   if (e.g > 0.0) {","       if (SMAA_MAX_SEARCH_STEPS_DIAG > 0 || SMAA_FORCE_DIAGONAL_DETECTION == 1)","       weights.rg = SMAACalculateDiagWeights(vUv, e, ivec4(0));","       if (dot(weights.rg, vec2(1.0, 1.0)) == 0.0) {","           vec2 d;","           vec2 coords;","           coords.x = SMAASearchXLeft();","           coords.y = vUv.y + 0.25 * SMAA_PIXEL_SIZE.y ;","           d.x = coords.x;","           float e1 = texture2D(tDiffuse, coords).r;","           coords.x = SMAASearchXRight();","           d.y = coords.x;","           d =  (d / SMAA_PIXEL_SIZE.x) - pixcoord.x ;","           vec2 sqrt_d = sqrt(abs(d));","           float e2 = texture2D(tDiffuse, (coords + vec2(1.0, 0.0)* SMAA_PIXEL_SIZE)).r;","           weights.rg = SMAAArea(sqrt_d, e1, e2, 0.0);","           SMAADetectHorizontalCornerPattern(weights.rg, vUv, d);","       } else","           e.r = 0.0;","   }","   if (e.r > 0.0) {","       vec2 d;","       vec2 coords;","       coords.y = SMAASearchYUp();","       coords.x = offset[0].x;","       d.x = coords.y;","       float e1 = texture2D(tDiffuse, coords).g;","       coords.y = SMAASearchYDown();","       d.y = coords.y;","       d = d / SMAA_PIXEL_SIZE.y - pixcoord.y;","       vec2 sqrt_d = sqrt(abs(d));","       float e2 = texture2D(tDiffuse, (coords + vec2(0.0, 1.0)* SMAA_PIXEL_SIZE)).g;","       weights.ba = SMAAArea(sqrt_d, e1, e2, 0.0);","       SMAADetectVerticalCornerPattern(weights.ba, vUv, d);","   }","   gl_FragColor=weights;","}"].join("\n")};var a={uniforms:{tDiffuse:{type:"t",value:null},tDiffuse2:{type:"t",value:null},screenWidth:{type:"f",value:800},screenHeight:{type:"f",value:600}},vertexShader:["uniform float screenHeight;","uniform float screenWidth;","varying vec2 vUv;","vec2 SMAA_PIXEL_SIZE = vec2(1.0/screenWidth, 1.0/screenHeight);","void main() {","    vUv = uv;",d._DefaultShaderChunk.model_view_projection_transformation_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tDiffuse2;","uniform float screenHeight;","uniform float screenWidth;","varying vec2 vUv;","vec2 SMAA_PIXEL_SIZE = vec2(1.0/screenWidth, 1.0/screenHeight);","void main() {","   vec4 topLeft = texture2D(tDiffuse2, vUv);","   float bottom = texture2D(tDiffuse2, vUv.xy + SMAA_PIXEL_SIZE.xy * vec2(0.0, -1.0)).g;","   float right = texture2D(tDiffuse2, vUv.xy + SMAA_PIXEL_SIZE.xy * vec2(1.0, 0.0)).a;","   vec4 a = vec4(topLeft.r, bottom, topLeft.b, right);","   vec4 w = a * a * a;","   float sum = dot(w, vec4(1.0));","   if (sum > 0.0) {","       vec4 color = vec4(0.0);","       vec4 CurrentColor = texture2D(tDiffuse, vUv);","       vec4 ColorLeft = texture2D(tDiffuse, vUv.xy + SMAA_PIXEL_SIZE.xy * vec2(-1.0, 0.0));","       vec4 ColorTop = texture2D(tDiffuse, vUv.xy + SMAA_PIXEL_SIZE.xy * vec2(0.0, 1.0));","       vec4 ColorRight = texture2D(tDiffuse, vUv.xy + SMAA_PIXEL_SIZE.xy * vec2(1.0, 0.0));","       vec4 ColorBottom = texture2D(tDiffuse, vUv.xy + SMAA_PIXEL_SIZE.xy * vec2(0.0, -1.0));","       color = mix(CurrentColor, ColorTop, a.r) * w.r + color;","       color = mix(CurrentColor, ColorBottom, a.g) * w.g + color;","       color = mix(CurrentColor, ColorLeft, a.b) * w.b + color;","       color = mix(CurrentColor, ColorRight, a.a) * w.a + color;","       gl_FragColor = color / sum;","   } else {","       gl_FragColor = texture2D(tDiffuse,vUv);","   }","}"].join("\n")};return{EdgeDetection:b,BlendingWeights:c,FinalBlending:a}});define("Shaders/SMAAShader",["DS/Shaders/SMAAShader","DS/DSMigration/DSMigration"],function(b,a){a.deprecateModule("Shaders/SMAAShader");return b});