import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.dassault_systemes.enovia.ChangeRequestAddons.services.ChangeProcessDashboardConstants;
import com.dassault_systemes.enovia.ChangeRequestAddons.services.ChangeServiceAddons;
import com.dassault_systemes.enovia.ChangeRequestAddons.services.impl.ChangeServiceImplAddons;
import com.dassault_systemes.enovia.enterprisechangemgt.common.ChangeAction;
import com.dassault_systemes.enovia.enterprisechangemgt.common.ChangeOrder;
import com.dassault_systemes.enovia.questionnaire.ImpactQuestionnaireService;
import com.dassault_systemes.enovia.questionnaire.ImpactQuestionnaireServiceImpl;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.PolicyUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.framework.ui.UIUtil;

import matrix.db.BusinessObject;
import matrix.db.BusinessObjectWithSelect;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.StringList;

public class ${CLASSNAME} implements ChangeProcessDashboardConstants {

	public MapList identifyProposedChanges(Context context, String[] args) throws Exception {

		MapList stepDataMap = new MapList();

		Map<String, String> programMap  	= (Map<String, String>)JPO.unpackArgs(args);
		String changeOrderId            	= (String) programMap.get("objectId");
		ChangeOrder changeOrder 			= new ChangeOrder(changeOrderId);
		MapList changeActionList 			= changeOrder.getAffectedChangeActions(context);

		String relatedDataId		= "";
		String relatedDataName		= "";

		String relatedCAName		= "";
		String relatedCAId			= "";

		for (Object objMap1 : changeActionList) {

			Map mObject 				= (Map) objMap1;
			String changeActionId  		= (String) mObject.get(DomainConstants.SELECT_ID);
			relatedCAId					= changeActionId; //TODO: Handle multiple CAs
			relatedCAName				= (String) mObject.get(DomainConstants.SELECT_NAME);
			MapList proposedChanges 	= new ChangeAction(changeActionId).getAffectedItems(context);

			if(proposedChanges != null && !proposedChanges.isEmpty()) {

				Iterator mLitr	= proposedChanges.iterator();

				if(mLitr.hasNext()) {

					Map proposedChangeMap 		= (Map)mLitr.next();						
					String proposedChangeId 	= (String)proposedChangeMap.get(DomainConstants.SELECT_ID);
					String proposedChangeName 	= (String)proposedChangeMap.get(DomainConstants.SELECT_NAME);

					relatedDataId 	= proposedChangeId;//relatedDataId = relatedDataId + "|" + proposedChangeId; //TODO: Handle multiple CAs and multiple affected items on CA
					relatedDataName = proposedChangeName;
				}
			}
		}

		HashMap chgAssmntPrgMap = new HashMap();
		chgAssmntPrgMap.put("objectId", changeOrderId);
		String[] chgAssmntArgs = JPO.packArgs(chgAssmntPrgMap);

		MapList candidateItems 			= JPO.invoke(context, "enoECMChangeAssessment", null, "getCandidateItems", chgAssmntArgs, MapList.class);
		String cndItmRelatedDataId 		= "";
		String cndItmRelatedDataName 	= "";

		if(candidateItems != null) {

			Iterator cndItmIter	= candidateItems.iterator();

			if(cndItmIter.hasNext()) {

				Map cndItm 			= (Map)cndItmIter.next();				
				cndItmRelatedDataId = (String)cndItm.get(DomainConstants.SELECT_ID); //TODO: handle multiple candidate items

				DomainObject cndItmObj 	= new DomainObject(cndItmRelatedDataId);
				cndItmRelatedDataName 	= cndItmObj.getInfo(context, DomainConstants.SELECT_NAME); //TODO: handle multiple candidate items
			}
		}

		String changeOrderName 	= DomainObject.newInstance(context,changeOrderId).getInfo(context,DomainObject.SELECT_NAME);

		Map outputMap1 = new HashMap();
		outputMap1.put("sequence", "1");
		outputMap1.put(RELATEDACTIONID, changeOrderId);
		outputMap1.put(RELATEDDATANAME, changeOrderName);
		stepDataMap.add(outputMap1);


		Map outputMap2 = new HashMap();
		outputMap2.put("sequence", "2");
		outputMap2.put(RELATEDACTIONID, relatedCAId);
		outputMap2.put(RELATEDDATANAME, relatedCAName);			
		stepDataMap.add(outputMap2);

		Map outputMap3 = new HashMap();
		outputMap3.put("sequence", "3");
		outputMap3.put(RELATEDACTIONID, changeOrderId);
		outputMap3.put(RELATEDDATANAME, changeOrderName);
		stepDataMap.add(outputMap3);

		return stepDataMap;
	}
	
	public HashMap getChangeActions(Context context, String[] args) throws Exception {

		HashMap<String,List<String>> groupNameCAIdsListMap = new HashMap<String, List<String>>();

		Map<String, String> programMap  = (Map<String, String>) JPO.unpackArgs(args);
		String changeOrderId            = (String) programMap.get("objectId");
		String selectedProposedItems    = (String) programMap.get(ChangeProcessDashboardConstants.SELECTED_PROPOSED_ITEMS);

		ChangeOrder changeOrder 	= new ChangeOrder(changeOrderId);
		MapList changeActionList 	= changeOrder.getAffectedChangeActions(context);

		if(UIUtil.isNullOrEmpty(selectedProposedItems))
		{
			ChangeServiceAddons changeService	=new ChangeServiceImplAddons();
			selectedProposedItems				=changeService.getDefaultProposedItemToBeSelected(context,changeOrderId);
		}
				
		for (Object objMap1 : changeActionList) {

			Map mObject 			= (Map) objMap1;
			String changeActionId  	= (String) mObject.get(DomainConstants.SELECT_ID);

			ChangeAction changeAction		= new ChangeAction(changeActionId);
			MapList proposedChangeItems		= changeAction.getAffectedItems(context);
					
			HashMap<String,List<String>> proposedChangeTypeIdsMap = new HashMap<String,List<String>>();

			List<String> allProposedChgItemsForCA = new ArrayList<String>();
			for (Object proposedChangeMap : proposedChangeItems) {

				Map proposedChangeInfo 		= (Map)proposedChangeMap;
				String proposedChangeId		= (String)proposedChangeInfo.get(DomainConstants.SELECT_ID);
				allProposedChgItemsForCA.add(proposedChangeId);
			}
			
			List<String> selectedProposedChgIds		= FrameworkUtil.split(selectedProposedItems, "|");
			boolean processProposedChangesForCA		= false;
			
			for(String selectedProposedChgItemId:selectedProposedChgIds)
			{
				if(allProposedChgItemsForCA.contains(selectedProposedChgItemId)) {
					processProposedChangesForCA = true;
					break;
				}
			}
			
			if(processProposedChangesForCA)
			{
				for (Object proposedChangeMap : proposedChangeItems) {
	
					Map proposedChangeInfo 		= (Map)proposedChangeMap;
					String proposedChangeId		= (String)proposedChangeInfo.get(DomainConstants.SELECT_ID);
					String proposedChangeType	= (String)proposedChangeInfo.get(DomainConstants.SELECT_TYPE);
	
					List<String> proposedChangeIdsForType = proposedChangeTypeIdsMap.get(proposedChangeType);
	
					if(proposedChangeIdsForType == null) {
	
						proposedChangeIdsForType = new ArrayList<String>();
						proposedChangeIdsForType.add(proposedChangeId);
						proposedChangeTypeIdsMap.put(proposedChangeType, proposedChangeIdsForType);    					
					} else {
	
						proposedChangeIdsForType.add(proposedChangeId);
					}    			
				}
	
				String groupName 	= null;
				String[] typeNames 	= proposedChangeTypeIdsMap.keySet().toArray(new String[0]);				
	
				if(typeNames.length==1) {
	
					groupName = typeNames[0]; //All affected items for the (single) CA are of the same type
				}/* else if(typeNames.length <= 2) {
					groupName = getDelimitedStringFromList(Arrays.asList(typeNames), " ");
				}*/ else {
					groupName = "";					
				}
	
				List<String> groupChangeActionIds = groupNameCAIdsListMap.get(groupName);
	
				if(groupChangeActionIds == null) {
	
					groupChangeActionIds = new ArrayList<String>();
					groupChangeActionIds.add(changeActionId);					
				} else {
	
					groupChangeActionIds.add(changeActionId);
				}
	
				groupNameCAIdsListMap.put(groupName, groupChangeActionIds);		
			}
		}

		return groupNameCAIdsListMap;
	}

	
	public MapList ImplementApprovedChanges(Context context, String[] args) throws Exception {

		Map<String, String> programMap  = (Map<String, String>) JPO.unpackArgs(args);
		String changeOrderId            = (String) programMap.get("objectId");
		MapList outputList				= new MapList();
		String selectAttrEffectiveDate	= "attribute[" + PropertyUtil.getSchemaProperty(context, "attribute_EffectiveDate") + "]";
		String controlledDocumentType	= PropertyUtil.getSchemaProperty(context, "type_CONTROLLEDDOCUMENTS");

		ChangeOrder changeOrder 	= new ChangeOrder(changeOrderId);
		MapList changeActionList 	= changeOrder.getAffectedChangeActions(context);

		for (Object objMap1 : changeActionList) {
			Map mObject 				= (Map) objMap1;
			String changeActionId  		= (String) mObject.get(DomainConstants.SELECT_ID);
			ChangeAction changeAction   = new ChangeAction(changeActionId);

			MapList implementedChanges 	= changeAction.getRealizedChanges(context);
			Iterator<?> mLitr 			= implementedChanges.iterator();

			if(!mLitr.hasNext()) {

				MapList proposedChanges = changeAction.getAffectedItems(context);
				mLitr					= proposedChanges.iterator();
			}

			while(mLitr.hasNext()) {
				Map<?,?> map = (Map<?,?>)mLitr.next();

				String implementedItemId = (String)map.get("id");

				String[] oids 			= new String[]{implementedItemId};
				StringList selectlist 	= new StringList(5);
				selectlist.add("owner");
				selectlist.add("name");
				selectlist.add("type");
				selectlist.add(selectAttrEffectiveDate);

				//TODO: Handle multi controlled documents connected to single CA
				BusinessObjectWithSelect busWithSelect = BusinessObject.getSelectBusinessObjectData(context, oids, selectlist).getElement(0);

				DomainObject implementedItemObj = new DomainObject(implementedItemId);
				if(implementedItemObj.isKindOf(context, controlledDocumentType)) {

					Map outputMap = new HashMap();
					outputMap.put("sequence", "1");
					outputMap.put(RELATEDACTIONID, implementedItemId);
					outputMap.put("actionCommand", "command_ENOLSAProcessDashboardPromote");
					outputMap.put("actionLabel", "Promote Document To Release");
					outputMap.put(RELATEDDATANAME, busWithSelect.getSelectData("name"));
					outputMap.put("owner", busWithSelect.getSelectData("owner"));
					outputMap.put("dueDate", busWithSelect.getSelectData(selectAttrEffectiveDate));

					outputList.add(outputMap);
				}
			}

		}

		return outputList;
	}

	public String getDelimitedStringFromList(List elementsList, String delimitString)
	{
		StringBuilder delimitedStringBuffer = new StringBuilder();

		if(elementsList != null)
		{
			Iterator elementsIterator  = elementsList.iterator();
			while(elementsIterator.hasNext())
			{
				String elementString = (String)elementsIterator.next();

				if(elementsIterator.hasNext())
				{
					delimitedStringBuffer.append(elementString);
					delimitedStringBuffer.append(delimitString);
				}
				else
					delimitedStringBuffer.append(elementString);
			}
		}

		return delimitedStringBuffer.toString();
	}

	public Map<String,String> checkForDocumentOnCA(Context context, String[] args) throws Exception
	{
		Map programMap  			= JPO.unpackArgs(args);
		String[] changeOrderIds    = (String[])programMap.get("objectIds");
		
		Map <String,String> objectIdCheckStatusMap=new HashMap();
		ChangeServiceAddons changeService=new ChangeServiceImplAddons();
		for(int i=0;i<changeOrderIds.length;i++)
		{
			String[] changeActionIds=changeService.getChangeActionsFromChangeorder( context, new String[]{changeOrderIds[i]});
			ChangeServiceAddons service=new ChangeServiceImplAddons();
			Map mChangeAction=service.checkForTypeOnCA(context, changeActionIds, "type_CONTROLLEDDOCUMENTS");
			if(mChangeAction.containsValue("TRUE")||mChangeAction.containsValue("true"))
			{
				objectIdCheckStatusMap.put(changeOrderIds[i], String.valueOf(true));
			}
			else
				objectIdCheckStatusMap.put(changeOrderIds[i], String.valueOf(false));
		}	
		return objectIdCheckStatusMap;
	}

	
	public Map<String,String> checkForPartOnCA(Context context, String[] args) throws Exception
	{
		Map programMap  			= JPO.unpackArgs(args);
		String[] changeOrderIds    = (String[])programMap.get("objectIds");
		
		ChangeServiceAddons changeService=new ChangeServiceImplAddons();
		Map <String,String> objectIdCheckStatusMap=new HashMap();
		for(int i=0;i<changeOrderIds.length;i++)
		{
			String[] changeActionIds=changeService.getChangeActionsFromChangeorder( context, new String[]{changeOrderIds[i]});
			ChangeServiceAddons service=new ChangeServiceImplAddons();
			Map mChangeAction=service.checkForTypeOnCA(context, changeActionIds, "type_Part");
			if(mChangeAction.containsValue("TRUE")||mChangeAction.containsValue("true"))
			{
				objectIdCheckStatusMap.put(changeOrderIds[i], String.valueOf(true));
			}
			else
				objectIdCheckStatusMap.put(changeOrderIds[i], String.valueOf(false));
		}	
		return objectIdCheckStatusMap;
	}

	public Map<String,String> checkForChangeTemplateConnected(Context context, String[] args) throws Exception {

		Map programMap  	= (Map<String, String>)JPO.unpackArgs(args);
		String[] changeOrderIds    =        (String[])programMap.get("objectIds");
		ChangeServiceAddons changeServiceAddons = new ChangeServiceImplAddons();
		
		return changeServiceAddons.checkForChangeTemplateConnected(context, changeOrderIds);	

	}
		public Map<String,String> checkImpactQuestionnairePresent(Context context, String[] args) throws Exception
		{
			Map programMap  			= JPO.unpackArgs(args);
			Map objectIdCheckStatusMap		= new HashMap<String,String>();
			String[] changeOrder    = (String[])programMap.get("objectIds");	
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
    		
			for(int i=0; i<changeOrder.length; ++i) {
				List<Map> mlEForms = eFormService.getObjectRelatedEForms(context, changeOrder[i]);
				if(mlEForms.size()>0)
					objectIdCheckStatusMap.put(changeOrder[i], String.valueOf(true));
				else
					objectIdCheckStatusMap.put(changeOrder[i],String.valueOf(false));
			}
			return objectIdCheckStatusMap;
			
		}
		
		public Map<String,String> checkIfRouteIsPresentOnState(Context context, String[] args) throws Exception {

			Map<String,String> objectIdCheckStatusMap		= new HashMap<String,String>();
			Map programMap  	= (Map<String, String>)JPO.unpackArgs(args);
			String[] changeObjectIds    =        (String[])programMap.get("objectIds");
			ChangeServiceAddons changeServiceAddons = new ChangeServiceImplAddons();
			return 	changeServiceAddons.checkIfRouteIsPresentOnState(context, changeObjectIds);
		}
		
		public Map<String,String> checkForFasttrackPolicy(Context context, String[] args) throws Exception {

			Map<String,String> objectIdCheckStatusMap		= new HashMap<String,String>();
			StringList objectSelects=new StringList();
			objectSelects.add(DomainObject.SELECT_POLICY);
			objectSelects.add(DomainObject.SELECT_ID);
			Map programMap  	= (Map<String, String>)JPO.unpackArgs(args);
			String[] changeObjectIds    =        (String[])programMap.get("objectIds");
			List<Map> mlChangeInfo=DomainObject.getInfo(context, changeObjectIds, objectSelects);
			for(Map mChange:mlChangeInfo){
				String strId=(String)mChange.get(DomainObject.SELECT_ID);
				String strPolicy=(String)mChange.get(DomainObject.SELECT_POLICY);
				if(strPolicy.equals(ChangeProcessDashboardConstants.POLICY_FASTTRACKCHANGE))
				objectIdCheckStatusMap.put(strId, String.valueOf(true));
				else
					objectIdCheckStatusMap.put(strId,String.valueOf(false));
			}

			return 	objectIdCheckStatusMap;
		}
		
		public Map<String,String> checkForFormalChangePolicy(Context context, String[] args) throws Exception {

			Map<String,String> objectIdCheckStatusMap		= new HashMap<String,String>();
			StringList objectSelects=new StringList();
			objectSelects.add(DomainObject.SELECT_POLICY);
			objectSelects.add(DomainObject.SELECT_ID);
			Map programMap  	= (Map<String, String>)JPO.unpackArgs(args);
			String[] changeObjectIds    =        (String[])programMap.get("objectIds");
			List<Map> mlChangeInfo=DomainObject.getInfo(context, changeObjectIds, objectSelects);
			for(Map mChange:mlChangeInfo){
				String strId=(String)mChange.get(DomainObject.SELECT_ID);
				String strPolicy=(String)mChange.get(DomainObject.SELECT_POLICY);
				if(strPolicy.equals(ChangeProcessDashboardConstants.POLICY_FORMALCHANGE))
				objectIdCheckStatusMap.put(strId, String.valueOf(true));
				else
					objectIdCheckStatusMap.put(strId,String.valueOf(false));
			}

			return 	objectIdCheckStatusMap;
		}
		
	public Map<String, List<Map<String,String>>> getReleaseProposedChangeDocuments(Context context, String[] args) throws Exception
	{
		Map<String, List<Map<String,String>>> objectIdRelatedDataMap = new HashMap<String, List<Map<String,String>>>();
		
		Map programMap  					= JPO.unpackArgs(args);
		String[] changeOrderIds    			= (String[])programMap.get("objectIds");
		String selectedProposedItem    		= (String)programMap.get(ChangeProcessDashboardConstants.SELECTED_PROPOSED_ITEMS);
		ChangeServiceAddons changeService	= new ChangeServiceImplAddons();
		
		String[] changeActionIds=changeService.getChangeActionsFromChangeorder( context, new String[]{changeOrderIds[0]});
		String selectAttrEffectiveDate		= "attribute[" + PropertyUtil.getSchemaProperty(context, "attribute_EffectiveDate") + "]";
		String selectAttrEffectivityOption	= "attribute[" + PropertyUtil.getSchemaProperty(context, "attribute_EffectivityOption") + "]";
		
		if(UIUtil.isNullOrEmpty(selectedProposedItem))
		{			
			selectedProposedItem=changeService.getDefaultProposedItemToBeSelected(context,changeOrderIds[0]);
		}
		
		List<String> slSelectedProposedId				= FrameworkUtil.split(selectedProposedItem, "|");		
		List<Map<String,String>> proposedChangeDataList	= new ArrayList<Map<String,String>>();
		String controlledDocumentTypeName 				= PropertyUtil.getSchemaProperty(context, "type_CONTROLLEDDOCUMENTS");
		
		for(int i=0;i<changeActionIds.length;i++)
		{
			ChangeAction changeAction				= new ChangeAction(changeActionIds[i]);
			MapList proposedChangeItems				= changeAction.getAffectedItems(context);
			
			for (Object proposedChangeMap : proposedChangeItems) {

				Map proposedChangeInfo 		= (Map)proposedChangeMap;
				String proposedChangeId		= (String)proposedChangeInfo.get(DomainConstants.SELECT_ID);
				
				if(slSelectedProposedId.contains(proposedChangeId))	{
					
					String[] oids 			= new String[]{proposedChangeId};
					StringList selectlist 	= new StringList(5);
					selectlist.add("owner");
					selectlist.add("name");
					selectlist.add("type");
					selectlist.add(selectAttrEffectiveDate);
					selectlist.add(String.format("type.kindof[%s]", controlledDocumentTypeName));
					selectlist.add(selectAttrEffectivityOption);
	
					//TODO: Handle multi controlled documents connected to single CA
					BusinessObjectWithSelect busWithSelect 	= BusinessObject.getSelectBusinessObjectData(context, oids, selectlist).getElement(0);					
					DomainObject proposedChgObj 			= new DomainObject(proposedChangeId);					
					Map<String,String> proposedChangeData	= new HashMap<String,String>();					
					String isControlledDocument 			= busWithSelect.getSelectData(String.format("type.kindof[%s]", controlledDocumentTypeName));
					
					if(!Boolean.valueOf(isControlledDocument).booleanValue())
						continue;
	
					proposedChangeData.put(ChangeProcessDashboardConstants.OWNER, proposedChgObj.getInfo(context, DomainConstants.SELECT_OWNER));
					proposedChangeData.put(RELATEDACTIONID, proposedChangeId);
					proposedChangeData.put(RELATEDDATANAME, proposedChgObj.getInfo(context, DomainConstants.SELECT_NAME));
					proposedChangeData.put("actionCommand",  "command_ENOLSAProcessDashboardPromote");
					proposedChangeData.put("actionLabel",  "Promote Document To Release");
					proposedChangeData.put("dueDate",  busWithSelect.getSelectData(selectAttrEffectiveDate));
					proposedChangeData.put(DATEPREFIX,  busWithSelect.getSelectData(selectAttrEffectivityOption));
					proposedChangeDataList.add(proposedChangeData);
					
				}
			}
			objectIdRelatedDataMap.put(changeOrderIds[0], proposedChangeDataList);	
		}
		
		return objectIdRelatedDataMap;
	}
	
		
	public Map<String,String> showAddAffectedItemsAction(Context context, String[] args) throws Exception {

		Map<String,String> objectIdCheckStatusMap		= new HashMap<String,String>();
		StringList objectSelects=new StringList();
		objectSelects.add(DomainObject.SELECT_POLICY);
		objectSelects.add(DomainObject.SELECT_ID);
		objectSelects.add(DomainObject.SELECT_CURRENT);

		Map programMap  	= (Map<String, String>)JPO.unpackArgs(args);
		String[] changeObjectIds    =        (String[])programMap.get("objectIds");
		List<Map> mlChangeInfo=DomainObject.getInfo(context, changeObjectIds, objectSelects);
		for(Map mChange:mlChangeInfo){
			String strId=(String)mChange.get(DomainObject.SELECT_ID);
			String strPolicy=(String)mChange.get(DomainObject.SELECT_POLICY);
			String strCurrentState=(String)mChange.get(DomainObject.SELECT_CURRENT);
			if(PolicyUtil.checkState(context, strId, "Prepare", PolicyUtil.LE))
			objectIdCheckStatusMap.put(strId, String.valueOf(true));
			else
				objectIdCheckStatusMap.put(strId,String.valueOf(false));
		}

		return 	objectIdCheckStatusMap;
	}
	
	public Map<String, List<Map<String,String>>> getChangeAssesmentItems(Context context, String[] args) throws Exception
	{
		Map<String, List<Map<String,String>>> objectIdRelatedDataMap = new HashMap<String, List<Map<String,String>>>();
		
		Map programMap  			= JPO.unpackArgs(args);
		String[] changeOrderIds    = (String[])programMap.get("objectIds");
		String selectedProposedItem    = (String)programMap.get(ChangeProcessDashboardConstants.SELECTED_PROPOSED_ITEMS);
		ChangeServiceAddons changeService=new ChangeServiceImplAddons();
		
		String[] changeActionIds=changeService.getChangeActionsFromChangeorder( context, new String[]{changeOrderIds[0]});
		String selectAttrEffectiveDate	= "attribute[" + PropertyUtil.getSchemaProperty(context, "attribute_EffectiveDate") + "]";
		
		
		if(UIUtil.isNullOrEmpty(selectedProposedItem))
		{
			
			selectedProposedItem=changeService.getDefaultProposedItemToBeSelected(context,changeOrderIds[0]);
		}
		
		List<String> slSelectedProposedId=FrameworkUtil.split(selectedProposedItem, "|");
		
		List<Map<String,String>> proposedChangeDataList	= new ArrayList<Map<String,String>>();
		
		for(int i=0;i<changeActionIds.length;i++)
		{
			ChangeAction changeAction				= new ChangeAction(changeActionIds[i]);
			MapList proposedChangeItems				= changeAction.getAffectedItems(context);
			
			for (Object proposedChangeMap : proposedChangeItems) {

				Map proposedChangeInfo 		= (Map)proposedChangeMap;
				String proposedChangeId		= (String)proposedChangeInfo.get(DomainConstants.SELECT_ID);
				
				if(slSelectedProposedId.contains(proposedChangeId))	{
					
					String[] oids 			= new String[]{proposedChangeId};
					StringList selectlist 	= new StringList(5);
					selectlist.add("owner");
					selectlist.add("name");
					selectlist.add("type");
					selectlist.add(selectAttrEffectiveDate);
	
					//TODO: Handle multi controlled documents connected to single CA
					BusinessObjectWithSelect busWithSelect = BusinessObject.getSelectBusinessObjectData(context, oids, selectlist).getElement(0);
	
					
					DomainObject proposedChgObj = new DomainObject(proposedChangeId);
					
					Map<String,String> proposedChangeData	= new HashMap<String,String>();
						
	
					proposedChangeData.put(ChangeProcessDashboardConstants.OWNER, proposedChgObj.getInfo(context, DomainConstants.SELECT_OWNER));
					proposedChangeData.put(RELATEDACTIONID, proposedChangeId);
					proposedChangeData.put(RELATEDDATANAME, proposedChgObj.getInfo(context, DomainConstants.SELECT_NAME));
					proposedChangeData.put("actionCommand",  "command_ECMChangeAssessment");
					proposedChangeData.put("actionLabel",  "Perform Change Assessment");
					proposedChangeDataList.add(proposedChangeData);
					
				}
			}
			objectIdRelatedDataMap.put(changeOrderIds[0], proposedChangeDataList);
			
			
		}
		
		return objectIdRelatedDataMap;
	}
}

