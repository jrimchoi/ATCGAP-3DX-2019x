var CONDITIONS = ["startswithany", "startswithsequence", "starting with", "endswithany", "endswithsequence", "ending with", "containsany", "containssequence", "containing"];
var OWNERKINDS = ["bus" , "businessobject" , "connection" ];
var params = proc.declareParameters(["setname", "rootids", "type", "vault", "select"],
		["label", "where", "orderby", "limit", "condition", "physicalids", "dump", "notsubstitute", "format","escape" , "ownerkind","labelAbort"]);

var valid = false;
var hascondition = !!(condition);
if (hascondition)
{
	if (!physicalids)
		proc.write(label, null, "Condition is defined, but not physicalids");
	else if (CONDITIONS.indexOf(condition)<0)
		proc.write(label, null, "Unknown condition");
	else if (proc.get("where") && !params.isWhereClauseValid(where))
		proc.write(label, null, "Invalid where clause");
	else
		valid = true;
}
else
	valid = true;
	
if (!(/^[\w\+-:]+$/.test(setname)))
{
	proc.write(label, null, "Invalid set name");
	valid = false;
}

if ( (ownerkind) && ( OWNERKINDS.indexOf(ownerkind)<0) ) {
	proc.write(label, null, "Invalid owner kind");
	valid = false;
}

if (valid)
{
	var cmd = "query path type $1 vault $2";
	params.addVars([type, vault]);
	
	if (hascondition)
		cmd += " " + condition + params.addVars(JSON.parse(physicalids));
	
	var fullwhere = "(ownermember[" + setname + "] == TRUE)";
	if (params.getBoolean("escape"))
		fullwhere = "escape " + fullwhere;
	if (where)
		fullwhere += " AND (" + where + ")";
	
	cmd += " where" + params.addVar(fullwhere);
		
	if (orderby) {
        var orderbys = JSON.parse(orderby);
        for (var i = 0; i < orderbys.length; i++)
            cmd += " orderby" + params.addVar(orderbys[i]);
    }
	
	if (limit)
		cmd += " limit" + params.addVar(limit);
	
	cmd += " select";
	if (dump || params.getBoolean("notsubstitute"))
		cmd += " notsubstitute";
	
	cmd += params.addVars(JSON.parse(select));
	
	if (dump)
		cmd += " dump" + params.addVar(dump);
	
	if (format) {
        switch (format) {
            case "tcl":
                cmd += " tcl";
                break;
            case "json":
                cmd += " json";
                break;
            case "txt":
                break;
            default:
                proc.write(label, null, "format " + format + " not supported");
                ok = false;
        }
    }
    else {
       cmd += " tcl";
    }
	var modSetCmd = "mod set $1 add bus $2";
	if (ownerkind) {
		modSetCmd = "mod set $1 add " + ownerkind + " $2";
	}
	mql.startTransaction(true);
	mql.execute(null, modSetCmd, [setname, JSON.parse(rootids).join()]);
	mql.execute(label, cmd, params);
	if (labelAbort)
		mql.abortTransaction(null, true, labelAbort);
	else
		mql.abortTransaction(); 
}

