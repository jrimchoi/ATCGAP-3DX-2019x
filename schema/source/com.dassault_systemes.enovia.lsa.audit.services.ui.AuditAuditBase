/************************************************************************************************************
 * /* AuditAuditBase
 ** 
 ** Copyright (c) 2014-2018 Dassault Systemes All Rights Reserved. This program
 * contains proprietary and trade secret information of Dassault Systemes
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 ** 
 * 
 * 
 * Author Date Description
 * 
 * SCT 07-NOV-2006 AuditAuditBase program to handle Audit type
 ************************************************************************************************************/

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.stream.Collectors;

import com.dassault_systemes.enovia.lsa.DateUtil;
import com.dassault_systemes.enovia.lsa.EmxTableRowId;
import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.LSAException;
import com.dassault_systemes.enovia.lsa.QueryUtil;
import com.dassault_systemes.enovia.lsa.audit.AuditConstants;
import com.dassault_systemes.enovia.lsa.audit.AuditException;
import com.dassault_systemes.enovia.lsa.audit.AuditUtil;
import com.dassault_systemes.enovia.lsa.audit.services.AuditRequestService;
import com.dassault_systemes.enovia.lsa.audit.services.AuditedItemsService;
import com.dassault_systemes.enovia.lsa.componentframework.Component;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentFactory;
import com.matrixone.apps.common.util.ComponentsUtil;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.DomainSymbolicConstants;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.FrameworkProperties;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MailUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.XSSUtil;
import com.matrixone.apps.domain.util.eMatrixDateFormat;
import com.matrixone.apps.domain.util.i18nNow;

import matrix.db.Attribute;
import matrix.db.AttributeList;
import matrix.db.AttributeType;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.db.Person;
import matrix.db.RelationshipType;
import matrix.db.Role;
import matrix.db.RoleList;
import matrix.db.User;
import matrix.db.UserList;
import matrix.util.MatrixException;
import matrix.util.SelectList;
import matrix.util.StringList;
import matrix.util.StringUtils;

public class ${CLASSNAME} {
	public ${CLASSNAME}(Context context, String[] args) throws Exception {
	}

	public static final String PREFIX_ACTION_TASK = "ACTTASK";

	/**
	 * This method is executed if a method is not specified. -> Does nothing
	 * right now
	 * 
	 * @param context
	 *            the eMatrix <code>Context</code> object
	 * @param args
	 *            holds no arguments
	 * @return always 0
	 * @throws Exception
	 *             if the operation fails
	 */

	public int mxMain(Context context, String[] args) throws Exception {
		return 0;
	}

	/**
	 * Gets AuditRequestService implementation reference
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @return AuditRequestTemplateService implementation reference
	 * @throws AuditException
	 *             if operation fails
	 */
	private static AuditRequestService getAuditRequestService(Context context) throws AuditException {
		try {
			Component LSAQICCore = ComponentFactory.getInstance(context, "LSAAUDCoreComponent");
			AuditRequestService service = (AuditRequestService) LSAQICCore.getService(AuditRequestService.class);
			return service;
		}
		catch (Exception e) {
			throw new AuditException(e);
		}
	}

	/**
	 * Gets AuditedItemsService implementation reference
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @return AuditedItemsService implementation reference
	 * @throws AuditException
	 *             if operation fails
	 */
	private static AuditedItemsService getAuditedItemsService(Context context) throws AuditException {
		try {
			Component LSAQICCore = ComponentFactory.getInstance(context, "LSAAUDCoreComponent");
			AuditedItemsService service = (AuditedItemsService) LSAQICCore.getService(AuditedItemsService.class);
			return service;
		}
		catch (Exception e) {
			throw new AuditException(e);
		}
	}

	@com.matrixone.apps.framework.ui.PreProcessCallable
	public Map checkLicense(Context context, String[] args) {
		HashMap returnMap = new HashMap();

		try {
			ComponentsUtil.checkLicenseReserved(context, AuditConstants.QIC_FULL_USER_LICENSE_TRIGRAM);
		}
		catch (Exception e) {
			returnMap.put("Action", "Stop");

			returnMap.put("Message", e.getMessage());
		}

		return returnMap;
	}

	public boolean checkLicenseForFormField(Context context, String[] args) throws MatrixException {

		ComponentsUtil.checkLicenseReserved(context, AuditConstants.QIC_FULL_USER_LICENSE_TRIGRAM);

		return true;
	}

	public String getSpecialFieldAuditTypeValues(Context context, String[] args) throws Exception {
		ComponentsUtil.checkLicenseReserved(context, AuditConstants.QIC_FULL_USER_LICENSE_TRIGRAM);

		return getFieldAuditTypeValues(context, args);
	}

	/**
	 * This method is post process JPO for Edit Audit Updated attribute values
	 * and connects new supplier if selected
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the map
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@com.matrixone.apps.framework.ui.PostProcessCallable
	public Map editAudit(Context context, String[] args) throws Exception {

		HashMap returnMap = new HashMap();
		// Get form info
		HashMap programMap = (HashMap) JPO.unpackArgs(args);
		HashMap paramMap = (HashMap) programMap.get("paramMap");
		try {
			ComponentsUtil.checkLicenseReserved(context, AuditConstants.QIC_FULL_USER_LICENSE_TRIGRAM);
			// fix date localization issues
			DateUtil.fixDateFieldForInput(context, args, paramMap, null, null, null);

			// HashMap formMap = (HashMap) programMap.get("formMap");
			// MapList formFieldList = (MapList) formMap.get("fields");
			// prepare a form map List, so that the below code will work as it
			// is.
			/*
			 * patch code for getting the field names, as the "formMap" is
			 * getting null from the paramMap
			 */
			MapList formFieldList = new MapList();
			StringList sListFields = new StringList();
			sListFields.add("name");
			sListFields.add("owner");
			// sListFields.add("Audit Location");
			sListFields.add("description");
			sListFields.add("Audit Type");
			// sListFields.add( "Suppliers");
			sListFields.add("Audit Sub-System");
			sListFields.add("Audit Device");
			sListFields.add("Audit Is ReAudit");
			sListFields.add("Audit Planned Start Date");
			sListFields.add("Audit Planned End Date");
			sListFields.add("Audit Actual Start Date");
			sListFields.add("Audit Actual End Date");
			sListFields.add("Related Schedule");
			String strFieldName = "";
			HashMap mapField = new HashMap();
			for (Iterator iter = sListFields.iterator(); iter.hasNext();) {
				strFieldName = (String) iter.next();
				mapField = new HashMap();
				mapField.put("name", strFieldName);
				formFieldList.add(mapField);
				mapField = null;
			}
			/* patch code ends here */

			String objectId = (String) ((String[]) paramMap.get("objectId"))[0];
			String strAuditReAuditValue = (String) paramMap.get("AuditReAudit");
			String strAuditExternalInfo = (String) paramMap.get(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO));
			String strAuditOwner = (String) paramMap.get(DomainConstants.SELECT_OWNER);
			// save audit Sub-System value
			String strAuditSubSystem = "";
			String strSubSyscount = (String) paramMap.get("SUB_Count");
			String strAuditSubSystemFreeText = (String) paramMap
					.get("Final_" + AuditConstants.STR_SUBSTEMPREFIX + PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM));
			String strAuditType = (String) paramMap.get("Audit Type");
			String strSupplierObjId = (String) paramMap.get("SuppliersOID");

			StringList sListSelects = new StringList();
			// define select attributes list
			sListSelects.add(DomainConstants.SELECT_ID);

			DomainObject newObj = DomainObject.newInstance(context, objectId);

			// set Audit ReAudit value
			if (null != strAuditReAuditValue) {
				newObj.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITREAUDIT),
						strAuditReAuditValue);
			}

			// set Audit External Infor if its not null
			if (null != strAuditExternalInfo && !"".equals(strAuditExternalInfo)) {
				newObj.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO),
						strAuditExternalInfo);
			}

			// set Audit SubSystem value starts here
			String strAuditSubSystemTxt = "";
			if (null != strSubSyscount && !"".equals(strSubSyscount)) {
				int iSubSyscount = Integer.parseInt(strSubSyscount);
				for (int i = 1; i <= iSubSyscount; i++) {
					strAuditSubSystem = (String) paramMap.get(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM) + i);
					if (null != strAuditSubSystem) {
						if (null != strAuditSubSystemTxt && !"null".equals(strAuditSubSystemTxt) && !"".equals(strAuditSubSystemTxt)) {
							strAuditSubSystemTxt += "," + strAuditSubSystem;
						}
						else {
							strAuditSubSystemTxt = strAuditSubSystem;
						}
					}
				}
			}
			if (null != strAuditSubSystemFreeText && !"".equals(strAuditSubSystemFreeText)) {
				strAuditSubSystemFreeText = strAuditSubSystemFreeText.replace('~', ',');
				String strVal = strAuditSubSystemTxt + "," + strAuditSubSystemFreeText;
				newObj.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM), strVal);
			}
			else {
				newObj.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM), strAuditSubSystemTxt);
			}

			// set Audit SubSystem value ends here

			for (int i = 0; i < formFieldList.size(); i++) {
				HashMap fieldMap = (HashMap) formFieldList.get(i);
				String fieldName = (String) fieldMap.get("name");

				// Exclude subsystem as it returns a String[] value
				if (fieldName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM))) {
					continue;
				}
				// Exclude owner as it is not attribute
				// It is handled later after editing all other fields to remove
				// any conflicts
				if (fieldName.equalsIgnoreCase(DomainConstants.SELECT_OWNER)) {
					continue;
				}
				String fieldValue = (String) paramMap.get(fieldName);
				if (fieldValue != null && !"".equals(fieldValue)) {
					if (DomainConstants.SELECT_DESCRIPTION.equalsIgnoreCase(fieldName)) {
						// Code Added to update the descritpion field values
						newObj.setDescription(context, fieldValue);
					}
					else {
						newObj.setAttributeValue(context, fieldName, fieldValue);
					}
				}
			}

			// Code to Connect Audit Object with Supplier
			if (strAuditType != null) {
				// Disconnect suppliers if Audit type has changed.
				if (!strAuditType.equalsIgnoreCase(AuditConstants.STR_SUPPLIER)) {
					disconnectSuppliers(context, newObj);
				}
				else {
					// Calling a method to get the supplier Id after finding
					// with name
					// strSupplierObjId will be populated if user selects a
					// choice from autonomy search.
					if (strSupplierObjId != null && !"".equalsIgnoreCase(strSupplierObjId)) {
						DomainObject newSupplierObj = DomainObject.newInstance(context, strSupplierObjId);
						disconnectSuppliers(context, newObj);
						newSupplierObj.addToObject(context,
								new RelationshipType(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSUPPLIER)), objectId);
					}
				}
				
				if (!strAuditType.equalsIgnoreCase(AuditConstants.STR_OTHER)) {
					if(!Helper.isNullOrEmpty(strAuditExternalInfo)){
						newObj.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO),AuditConstants.STR_EMPTY);
					}
				}
				else
				{
					if(Helper.isNullOrEmpty(strAuditExternalInfo)){
						newObj.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO),AuditConstants.STR_EMPTY);
					}
				}
			}

			String strAuditLocation = (String) paramMap.get("Audit LocationDisplay");
			String strLocationObjId = (String) paramMap.get("Audit LocationOID");
			if (strAuditLocation == null || "".equalsIgnoreCase(strAuditLocation)) {
				disconnectLocations(context, newObj);
			}
			else {
				if (strLocationObjId != null && !"".equalsIgnoreCase(strLocationObjId)) {

					DomainObject newLocationObj = DomainObject.newInstance(context, strLocationObjId);
					disconnectLocations(context, newObj);
					newLocationObj.addToObject(context,
							new RelationshipType(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITLOCATION)), objectId);
				}
			}

			// Update the Owner
			if (strAuditOwner.equalsIgnoreCase(AuditConstants.STR_TEST)) {
				strAuditOwner = AuditConstants.STR_TESTEVERYTHING;
			}
			// Call method to set the audit owner and send email notification if
			// it is different.
			updateAuditOwner(context, newObj, strAuditOwner);

		}
		catch (Exception e) {
			e.printStackTrace();
			returnMap.put("Action", "Stop");
			returnMap.put("Message", e.getMessage());
		}
		return returnMap;

	}

	/**
	 * Utility method to update the audit owner and send a notification email.
	 * Will only update and send the mail if the passed in owner is different
	 * than the current owner.
	 */
	private void updateAuditOwner(Context context, DomainObject audit, String newOwner) throws Exception {
		User oldOwner = audit.getOwner(context);
		String oldOwnerName = "";
		if (oldOwner != null) {
			oldOwnerName = oldOwner.getName();
		}

		if (!newOwner.equals(oldOwner)) {
			audit.setOwner(context, newOwner);
			sendEmailNotificationMemberChange(context, oldOwnerName, newOwner, audit, "Audit Owner");
		}

	}

	public static void sendEmailNotificationMemberChange(Context context, String oldVal, String newVal, DomainObject audit, String attr)
			throws Exception {

		if (oldVal == null) {
			oldVal = "";
		}
		if (newVal == null) {
			newVal = "";
		}

		String[] oldmembers = oldVal.split("~");
		String[] newmembers = newVal.split("~");
		StringList sendAddEmail = createDifferenceOfMembersList(newmembers, oldmembers);
		StringList sendRemoveEmail = createDifferenceOfMembersList(oldmembers, newmembers);

		if (sendRemoveEmail.size() > 0) {
			StringList toList = createToList(context, sendRemoveEmail);
			String subject = "Removed from member list for Audit " + audit.getInfo(context, DomainConstants.SELECT_NAME);
			String body = createEMailBodyForChangedUser(context, audit, attr, false);
			Helper.sendMail(context, subject, body, toList);
		}

		if (sendAddEmail.size() > 0) {
			StringList toList = createToList(context, sendAddEmail);
			String subject = "Added to member list for Audit " + audit.getInfo(context, DomainConstants.SELECT_NAME);
			String body = createEMailBodyForChangedUser(context, audit, attr, true);
			Helper.sendMail(context, subject, body, toList);
		}

	}

	private static String createEMailBodyForChangedUser(Context context, DomainObject audit, String attr, boolean add)
			throws FrameworkException, Exception {
		StringBuffer body = new StringBuffer();
		if (add) {
			body.append("\nYou have been added to ");
		}
		else {
			body.append("\nYou have been removed from ");
		}

		if (attr.equals(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR))) {
			body.append("Lead Auditor");
		}
		else if (attr.equals(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS))) {
			body.append("Auditor's List");
		}
		else if (attr.equals("Audit Owner")) {
			body.append("Audit Owner");
		}
		else {
			body.append("Member's List");
		}

		body.append(" for Audit ");
		body.append(audit.getInfo(context, DomainConstants.SELECT_NAME));
		body.append("\nYou can use this URL to open Audit: ");
		body.append(MailUtil.getBaseURL(context) + "?objectId=" + audit.getId());
		return body.toString();
	}

	/**
	 * This code was duplicated a couple of times in the method
	 * sendEmailNotificationMemberChange so I extracted it into its own method.
	 * It builds the list
	 * 
	 * @param context
	 * @param sendRemoveEmail
	 * @return
	 * @throws FrameworkException
	 */
	private static StringList createToList(Context context, StringList sendRemoveEmail) throws FrameworkException {
		StringList toList = new StringList();
		for (int i = 0; i < sendRemoveEmail.size(); i++) {
			String tempM = (String) sendRemoveEmail.get(i);

			String[] splitName = tempM.split(",");
			if (splitName.length == 2) {
				// In this case we assume the name is in the form 'last,first'
				// and we need to get the username
				String lastName = splitName[0].trim();
				String firstName = splitName[1].trim();

				// Person.doesPersonExists(context, "");
				StringList objSelects = new StringList(6); // object select
															// list.
				objSelects.addElement(DomainConstants.SELECT_ID);

				String whereExpression = "( " + com.matrixone.apps.common.Person.SELECT_LAST_NAME + "==\"" + lastName + "\" ) && ( "
						+ com.matrixone.apps.common.Person.SELECT_FIRST_NAME + "==\"" + firstName + "\" )";

				MapList objList = DomainObject.findObjects(context, DomainConstants.TYPE_PERSON, null, whereExpression, objSelects);

				if (objList.size() > 0) {
					Map personMap = (Map) objList.get(0);
					String objId = (String) personMap.get(DomainConstants.SELECT_ID);

					DomainObject personObj = DomainObject.newInstance(context, objId);
					String personName = personObj.getInfo(context, DomainConstants.SELECT_NAME);
					toList.add(personName);
				}
			}
			else {
				// in this case we assume we are already dealing with a username
				// and
				// no conversion is necessary
				toList.add(tempM);
			}

		}
		return toList;
	}

	/**
	 * This creates a list of the members that should be notified via an email.
	 * It was originally duplicated in the method
	 * sendEmailNotificationMemberChange and was extracted to this method to
	 * clean up copy/pasted code.
	 * 
	 * @param memberList1
	 * @param memberList2
	 * @return
	 */
	private static StringList createDifferenceOfMembersList(String[] memberList1, String[] memberList2) {
		StringList differenceList = new StringList();
		boolean isOld;
		for (String mem : memberList1) {
			if (mem == null || mem.equals("")) {
				continue;
			}
			isOld = false;

			for (String newM : memberList2) {
				if (newM.compareTo(mem) == 0) {
					isOld = true;
					break;
				}
			}
			if (!isOld) {
				differenceList.addElement(mem);
			}

		}
		return differenceList;
	}

	private void disconnectSuppliers(Context context, DomainObject auditObj) throws FrameworkException, Exception, MatrixException {

		StringList sListSelects = new StringList();
		sListSelects.add(DomainConstants.SELECT_ID);

		MapList mlRealtedSuppliers = auditObj.getRelatedObjects(context,
				PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSUPPLIER), DomainConstants.TYPE_COMPANY, true, false, 1,
				sListSelects, null, null, "", null, null, null);
		for (Iterator iter = mlRealtedSuppliers.iterator(); iter.hasNext();) {
			Map SupplierMap = (Map) iter.next();
			String strConnectedSupplierId = (String) SupplierMap.get(DomainConstants.SELECT_ID);
			if (null != strConnectedSupplierId && !" ".equals(strConnectedSupplierId)) {
				DomainObject connectedSupplierObj = DomainObject.newInstance(context, strConnectedSupplierId);
				connectedSupplierObj.disconnect(context,
						new RelationshipType(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSUPPLIER)), true, auditObj);
			}
		}
	}

	private void disconnectLocations(Context context, DomainObject auditObj) throws FrameworkException, Exception, MatrixException {

		StringList sListSelects = new StringList();
		sListSelects.add(DomainConstants.SELECT_ID);

		MapList mlRealtedLocations = auditObj.getRelatedObjects(context,
				PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITLOCATION), DomainConstants.TYPE_LOCATION, true, false, 1,
				sListSelects, null, null, "", null, null, null);
		for (Iterator iter = mlRealtedLocations.iterator(); iter.hasNext();) {
			Map locationsMap = (Map) iter.next();
			String strConnectedLocationsId = (String) locationsMap.get(DomainConstants.SELECT_ID);
			if (null != strConnectedLocationsId && !" ".equals(strConnectedLocationsId)) {
				DomainObject connectedLocationsObj = DomainObject.newInstance(context, strConnectedLocationsId);
				connectedLocationsObj.disconnect(context,
						new RelationshipType(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITLOCATION)), true, auditObj);
			}
		}
	}

	/**
	 * This is used from the My Audits structure browser. As you can see it
	 * simply defers to the other createAutoNamed method and then removes the
	 * OID from the return map. This causes the screen to stay on the structure
	 * browser rather then displaying the newly created object.
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.PostProcessCallable
	public Map createAutoNamedNoOID(Context context, String[] args) throws Exception {
		Map returnMap = createAutoNamed(context, args);
		returnMap.remove("objectId");
		return returnMap;
	}

	/**
	 * Creates the auto named Audit Object. COnnects to the selected Supplier if
	 * Audit Type is Supplier Audit. Imports the Audit Template
	 * Request,Response, File Attachment objects, clones them and connects them
	 * to the new Audit
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the map
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@com.matrixone.apps.framework.ui.CreateProcessCallable
	public Map createAutoNamed(Context context, String[] args) throws Exception {
		HashMap returnMap = new HashMap();
		boolean bContextPushed = false;
		try {
			final String ATTRIBUTE_AUDIT_PLANNED_START_DATE = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_PLANNEDSTARTDATE);
			final String ATTRIBUTE_AUDIT_PLANNED_END_DATE = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_PLANNEDENDDATE);
			ComponentsUtil.checkLicenseReserved(context, AuditConstants.QIC_FULL_USER_LICENSE_TRIGRAM);
			// Get form info
			HashMap<?, ?> programMap = (HashMap<?, ?>) JPO.unpackArgs(args);
			// fixDateAttributeFormat(context, programMap);
			String currentUser = context.getUser();
			// Create autonamed object
			String sNewAuditObjId = FrameworkUtil.autoName(context, AuditConstants.REG_TYPE_AUDIT, "", AuditConstants.REG_POLICY_AUDIT, "");
			DomainObject newAuditObject = DomainObject.newInstance(context, sNewAuditObjId);
			String strAuditType = (String) programMap.get("Audit Type");
			String strAuditTemplateId = (String) programMap.get("AuditTemplateOID");
			String strSupplierObjId = (String) programMap.get("SuppliersOID");
			String strLocationObjId = (String) programMap.get("Audit LocationOID");
			String strAuditedItemsId = (String) programMap.get("Audited ItemsOID");
			String strAuditedPlannedStartDate = (String) programMap.get(ATTRIBUTE_AUDIT_PLANNED_START_DATE);
			String strAuditedPlannedEndDate = (String) programMap.get(ATTRIBUTE_AUDIT_PLANNED_END_DATE);
			String strTimezone = (String) programMap.get("timeZone");
			Locale locale = context.getSession().getLocale();
			double dClientTimeOffset = (new Double(strTimezone)).doubleValue();
			strAuditedPlannedStartDate = eMatrixDateFormat.getFormattedInputDate(context, strAuditedPlannedStartDate, dClientTimeOffset, locale);
			strAuditedPlannedEndDate = eMatrixDateFormat.getFormattedInputDate(context, strAuditedPlannedEndDate, dClientTimeOffset, locale);
			newAuditObject.setAttributeValue(context, ATTRIBUTE_AUDIT_PLANNED_START_DATE, strAuditedPlannedStartDate);
			newAuditObject.setAttributeValue(context, ATTRIBUTE_AUDIT_PLANNED_END_DATE, strAuditedPlannedEndDate);
			AuditRequestService auditRequestService = getAuditRequestService(context);
			AuditedItemsService auditedItemsService = getAuditedItemsService(context);
			StringList sListSelects = new StringList();
			// define select attributes list
			sListSelects.add(DomainConstants.SELECT_ID);
			sListSelects.add(DomainConstants.SELECT_DESCRIPTION);

			if (programMap.containsKey("requestObjectIds")) {
				String requestObjectids = (String) programMap.get("requestObjectIds");
				if (!Helper.isNullOrEmpty(requestObjectids)) {
					String[] arrRequestObjectIds = StringUtils.split(requestObjectids, ",");
					for (String requestObjectId : arrRequestObjectIds) {
						DomainObject auditRequestObject = DomainObject.newInstance(context, requestObjectId);

						// copy reference documents from Audit Request to Audit
						List<Map<?, ?>> mListDocuments = QueryUtil.getRelatedObjects(context, auditRequestObject,
								AuditConstants.SYM_REL_REFERENCE_DOCUMENT, AuditConstants.STR_WILD, sListSelects, null, false, true, (short) 0,
								DomainObject.EMPTY_STRING, DomainObject.EMPTY_STRING);
						if (!Helper.isNullOrEmpty(mListDocuments)) {
							for (Object object : mListDocuments) {
								Map<?, ?> map = (Map<?, ?>) object;
								String objectId = (String) map.get(DomainObject.SELECT_ID);
								DomainObject document = DomainObject.newInstance(context, objectId);
								QueryUtil.connectObjects(context, newAuditObject, AuditConstants.SYM_REL_REFERENCE_DOCUMENT, document, null);
							}
						}

						// reference audited items from Audit Request to Audit
						List<Map<?, ?>> mListAuditedItems = QueryUtil.getRelatedObjects(context, auditRequestObject,
								AuditConstants.SYM_REL_RELATED_ITEMS, AuditConstants.STR_WILD, sListSelects, null, false, true, (short) 0,
								DomainObject.EMPTY_STRING, DomainObject.EMPTY_STRING);
						if (!Helper.isNullOrEmpty(mListAuditedItems)) {
							for (Object object : mListAuditedItems) {
								Map<?, ?> map = (Map<?, ?>) object;
								String objectId = (String) map.get(DomainObject.SELECT_ID);
								DomainObject auditedItem = DomainObject.newInstance(context, objectId);
								auditedItemsService.addAuditedItem(context, newAuditObject, auditedItem, DomainObject.EMPTY_STRING);
							}
						}

						// make a connection between Audit and Audit Request
						// using Audit Request relationship
						auditRequestService.addAuditRequest(context, newAuditObject, requestObjectId);
					}
				}
			}

			if (!Helper.isNullOrEmpty(strAuditedItemsId)) {
				String[] arrAuditedItemsIds = StringUtils.split(strAuditedItemsId, "\\|");
				for (String string : arrAuditedItemsIds) {
					DomainObject domAuditedItem = DomainObject.newInstance(context, string);
					QueryUtil.connectObjects(context, newAuditObject, AuditConstants.SYM_REL_RELATED_ITEMS, domAuditedItem, null);
				}
			}

			if (null != strAuditTemplateId && !"".equals(strAuditTemplateId) && strAuditTemplateId.length() > 0) {

				DomainObject doAuditTemplate = DomainObject.newInstance(context, strAuditTemplateId);

				newAuditObject.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDIT_DEVICE),
						doAuditTemplate.getAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDIT_DEVICE)));
				newAuditObject.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM),
						doAuditTemplate.getAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM)));

				// Copy related Audit Suppliers over
				if (strAuditType != null && strAuditType.equalsIgnoreCase(AuditConstants.STR_SUPPLIER)) {
					if (strSupplierObjId == null || "".equalsIgnoreCase(strSupplierObjId)) {
						MapList mlRealtedSuppliers = doAuditTemplate.getRelatedObjects(context,
								PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSUPPLIER), DomainConstants.TYPE_COMPANY, true,
								false, 1, sListSelects, null, null, "", null, null, null);
						if (mlRealtedSuppliers.size() > 0) {
							Map relatedSupplier = (Map) mlRealtedSuppliers.get(0);
							strSupplierObjId = (String) relatedSupplier.get(DomainConstants.SELECT_ID);
						}
					}
				}

				// Copy related Audit Locations over
				if (strLocationObjId == null || "".equalsIgnoreCase(strLocationObjId)) {
					MapList mlRealtedSuppliers = doAuditTemplate.getRelatedObjects(context,
							PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITLOCATION), DomainConstants.TYPE_LOCATION, true, false,
							1, sListSelects, null, null, "", null, null, null);
					if (mlRealtedSuppliers.size() > 0) {
						Map relatedSupplier = (Map) mlRealtedSuppliers.get(0);
						strLocationObjId = (String) relatedSupplier.get(DomainConstants.SELECT_ID);

					}
				}

				// Reference the document Objects from Audit Template to Audit
				List<Map<?, ?>> mListDocuments = QueryUtil.getRelatedObjects(context, doAuditTemplate, AuditConstants.SYM_REL_REFERENCE_DOCUMENT,
						AuditConstants.STR_WILD, sListSelects, null, false, true, (short) 0, DomainObject.EMPTY_STRING, DomainObject.EMPTY_STRING);
				if (!Helper.isNullOrEmpty(mListDocuments)) {
					for (Object object : mListDocuments) {
						Map<?, ?> map = (Map<?, ?>) object;
						String objectId = (String) map.get(DomainObject.SELECT_ID);
						DomainObject document = DomainObject.newInstance(context, objectId);
						QueryUtil.connectObjects(context, newAuditObject, AuditConstants.SYM_REL_REFERENCE_DOCUMENT, document, null);
					}
				}

				// reference audited items from Audit Template to Audit
				List<Map<?, ?>> mListAuditedItems = QueryUtil.getRelatedObjects(context, doAuditTemplate, AuditConstants.SYM_REL_RELATED_ITEMS,
						AuditConstants.STR_WILD, sListSelects, null, false, true, (short) 0, DomainObject.EMPTY_STRING, DomainObject.EMPTY_STRING);
				if (!Helper.isNullOrEmpty(mListAuditedItems)) {
					for (Object object : mListAuditedItems) {
						Map<?, ?> map = (Map<?, ?>) object;
						String objectId = (String) map.get(DomainObject.SELECT_ID);
						DomainObject auditedItem = DomainObject.newInstance(context, objectId);
						auditedItemsService.addAuditedItem(context, newAuditObject, auditedItem, DomainObject.EMPTY_STRING);
					}
				}

				// make a connection between Audit and Audit Template using
				// Audit Template relationship
				QueryUtil.connectObjects(context, newAuditObject, AuditConstants.SYM_REL_AUDITTEMPLATE, doAuditTemplate, null);
			}

			HashMap<String, String> webform2Object = new HashMap();
			webform2Object.put("Audit Type", PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITTYPE));
			AttributeList attributesToSet = new AttributeList();
			Iterator<String> keyIterator = webform2Object.keySet().iterator();
			while (keyIterator.hasNext()) {
				String key = keyIterator.next();
				StringList value = new StringList(webform2Object.get(key));
				AttributeList attributeList = newAuditObject.getAttributeValues(context, value, true);
				Attribute attribute = (Attribute) attributeList.get(0);
				attribute.setValue((String) programMap.get(key));
				attributesToSet.add(attribute);
			}
			newAuditObject.setAttributeValues(context, attributesToSet);

			newAuditObject.setDescription(context, (String) programMap.get("description"));

			String parentOID = (String) programMap.get("parentOID");
			String relConnect = (String) programMap.get("connect_rel");
			if (relConnect != null && !"".equals(relConnect)) {
				DomainObject parentObj = DomainObject.newInstance(context, parentOID);
				newAuditObject.connect(context, new RelationshipType(relConnect), false, parentObj);
			}

			// set Audit ReAudit value
			String strAuditReAuditValue = (String) programMap.get("AuditReAudit");
			String isReAudit = (String) programMap.get("AuditIsReAudit");
			if (!Helper.isNullOrEmpty(isReAudit) && isReAudit.equalsIgnoreCase("Yes") && !Helper.isNullOrEmpty(strAuditReAuditValue)) {
				newAuditObject.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITREAUDIT),
						strAuditReAuditValue);
				newAuditObject.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITISREAUDIT), "Yes");
			}
			else if (!Helper.isNullOrEmpty(isReAudit) && isReAudit.equalsIgnoreCase("No")) {
				newAuditObject.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITISREAUDIT), "No");
			}

			// set Audit External Info if its not null
			String strAuditExternalInfo = (String) programMap.get(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO));
			if (null != strAuditExternalInfo && !"".equals(strAuditExternalInfo)) {
				newAuditObject.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO),
						strAuditExternalInfo);
			}

			// Code to Connect Audit Object with Supplier
			if (strAuditType != null && strAuditType.equalsIgnoreCase(AuditConstants.STR_SUPPLIER)) {
				if (strSupplierObjId != null && !strSupplierObjId.equals("")) {
					// Calling a method to get the supplier Id after finding
					// with name
					// strSupplierObjId =
					// findSupplierID(context,strSupplierName);
					DomainObject newSupplierObj = DomainObject.newInstance(context, strSupplierObjId);

					// connect Supplier to Audit
					newSupplierObj.addToObject(context,
							new RelationshipType(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSUPPLIER)), sNewAuditObjId);
				}
			}

			// Code to Connect Audit Object with Location
			if (strLocationObjId != null && !strLocationObjId.equals("")) {
				DomainObject newLocationObj = DomainObject.newInstance(context, strLocationObjId);

				// connect Supplier to Audit
				newLocationObj.addToObject(context,
						new RelationshipType(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITLOCATION)), sNewAuditObjId);
			}

			// set Audit SubSystem value starts here
			// save audit Sub-System value
			String strSubSyscount = (String) programMap.get("SUB_Count");
			String strAuditSubSystemTxt = "";
			if (null != strSubSyscount && !"".equals(strSubSyscount)) {
				int iSubSyscount = Integer.parseInt(strSubSyscount);
				for (int i = 1; i <= iSubSyscount; i++) {
					String strAuditSubSystem = (String) programMap
							.get(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM) + i);
					if (null != strAuditSubSystem) {
						if (null != strAuditSubSystemTxt && !"null".equals(strAuditSubSystemTxt) && !"".equals(strAuditSubSystemTxt)) {
							strAuditSubSystemTxt += "," + strAuditSubSystem;
						}
						else {
							strAuditSubSystemTxt = strAuditSubSystem;
						}
					}
				}
			}
			String strAuditSubSystemFreeText = (String) programMap
					.get("Final_" + AuditConstants.STR_SUBSTEMPREFIX + PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM));
			if (null != strAuditSubSystemFreeText && !"".equals(strAuditSubSystemFreeText)) {
				strAuditSubSystemFreeText = strAuditSubSystemFreeText.replace('~', ',');
				String strVal = strAuditSubSystemTxt + "," + strAuditSubSystemFreeText;
				newAuditObject.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM), strVal);
			}
			else {
				newAuditObject.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM),
						strAuditSubSystemTxt);
			}
			// set Audit SubSystem value ends here

			String strAuditFormat = (String) programMap.get("AuditFormat");
			if (!Helper.isNullOrEmpty(strAuditFormat)) {
				newAuditObject.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDIT_FORMAT),
						strAuditFormat);
			}

			String strAuditObjectives = (String) programMap.get("AuditObjectives");
			if (!Helper.isNullOrEmpty(strAuditObjectives)) {
				newAuditObject.setAttributeValue(context,
						PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_Objective), strAuditObjectives);
			}

			String strAuditedOrganizationId = (String) programMap.get("AuditedOrganizationOID");
			if (!Helper.isNullOrEmpty(strAuditedOrganizationId)) {
				DomainObject.newInstance(context, strAuditedOrganizationId).addToObject(context,
						new RelationshipType(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITED_ORGANIZATION)), sNewAuditObjId);
			}

			// Update the Owner. Note: This logic is intentionally last so there
			// are no issues
			// in the case where the user creating the audit chooses a different
			// user as the owner.
			// We change the owner as the last step because if we change the
			// owner too soon we can
			// run into access permission issues when updating other fields.
			String strAuditOwner = (String) programMap.get(DomainConstants.SELECT_OWNER);
			if (strAuditOwner.equalsIgnoreCase(AuditConstants.STR_TEST)) {
				strAuditOwner = AuditConstants.STR_TESTEVERYTHING;
			}

			newAuditObject.setOwner(context, strAuditOwner);
			// if the owner is someone different then the person
			// creating the audit we need to send an email notification
			if (!currentUser.equals(strAuditOwner)) {
				sendEmailNotificationMemberChange(context, currentUser, strAuditOwner, newAuditObject, "Audit Owner");
			}

			newAuditObject.closeObject(context, true);
			returnMap.put("id", sNewAuditObjId);
		}

		catch (Exception ex) {
			throw new Exception(ex);
		}
		finally {
			if (bContextPushed) {
				ContextUtil.popContext(context);
				bContextPushed = false;
			}
		}
		return returnMap;
	}

	/**
	 * Sets the auditors from webform.
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @throws Exception
	 *             the exception
	 */
	public static void setAuditorsFromWebform(Context context, String[] args) throws Exception {
		// Get all the arguments
		HashMap mapProgram = (HashMap) JPO.unpackArgs(args);
		HashMap mapRequest = (HashMap) mapProgram.get("requestMap");
		HashMap mapParam = (HashMap) mapProgram.get("paramMap");
		HashMap mapField = (HashMap) mapProgram.get("fieldMap");
		Map mapSettings = (Map) mapField.get("settings");
		String strObjectId = (String) mapParam.get("objectId");
		String strAttributeName = (String) mapSettings.get("Admin Type");
		// The assumption here is, the Admin Type setting will have attribute
		// symbolic name.
		String strAttribute = PropertyUtil.getSchemaProperty(strAttributeName);

		String sAttrValues[] = (String[]) mapRequest.get("Final_" + strAttribute);

		String newValue;
		if (sAttrValues != null) {
			newValue = sAttrValues[0];
		}
		else {
			newValue = "";
		}

		DomainObject newObj = DomainObject.newInstance(context, strObjectId);
		String oldValue = newObj.getInfo(context, "attribute[" + strAttribute + "]");

		if (!newValue.equals(oldValue)) {
			// Note: there is a check trigger on the attributes 'Audit Lead
			// Auditor,
			// Audit Auditors, and Audit Auditees to send email when updated.
			// In the past we did it in this transaction but found a bug where
			// if
			// the email failed the transaction would be rolled back. We did not
			// want that. We had to use a check trigger because that is the only
			// trigger where both the new and old value is present.
			newObj.setAttributeValue(context, strAttribute, newValue);
		}
	}

	/**
	 * This code was duplicated in 2 places so I extracted it into a separate
	 * method.
	 * 
	 * @return
	 */
	private static StringList getSelectsForRequestsAndFindings(Context context) {
		StringList busSelects = new StringList();
		busSelects.add(DomainConstants.SELECT_ID);
		busSelects.add(DomainConstants.SELECT_CURRENT);
		// busSelects.add(AuditConstants.SELECT_AUDITAUDITEES);
		busSelects.add(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES)));
		// busSelects.add(AuditConstants.SELECT_AUDITOR);
		busSelects.add(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITOR)));
		return busSelects;
	}

	/**
	 * This is a helper method that was extracted out of the massive, 400 line
	 * method below in an attempt to make the code just a tiny bit more
	 * readable. It finds all related Requests and builds a list of the users
	 * assigned to those requests. We need this information when we determine if
	 * it is acceptable to remove an auditor from the audit.
	 * 
	 * @param context
	 * @param doObject
	 * @param strAttr
	 * @return
	 * @throws Exception
	 */
	private static String getUsersOnRelatedRequests(Context context, DomainObject doObject, String strAttr) throws Exception {

		StringBuffer users = new StringBuffer();
		/*
		 * Getting the related Requests of the Audit since Member could be the
		 * Auditor/Auditee of Audit Request
		 */
		MapList mapRelatedRequests = doObject.getRelatedObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITREQUEST),
				PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDITREQUEST), false, true, 1,
				getSelectsForRequestsAndFindings(context), null, null, "", null, null, null);
		Iterator iter = mapRelatedRequests.iterator();
		while (iter.hasNext()) {
			Hashtable melement = (Hashtable) iter.next();
			String strRequestId = (String) melement.get(DomainConstants.SELECT_ID);
			DomainObject dmoRequest = DomainObject.newInstance(context, strRequestId);

			if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS))
					|| strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR))) {
				users.append(AuditConstants.AUDIT_MEMBER_NAME_SEPARATOR
						+ dmoRequest.getAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITOR)));
			}
			else if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES))) {
				users.append(AuditConstants.AUDIT_MEMBER_NAME_SEPARATOR + dmoRequest.getAttributeValue(context, strAttr));
			}
		}
		return users.toString();
	}

	/**
	 * This is a helper method that was extracted out of the massive, 400 line
	 * method below in an attempt to make the code just a tiny bit more
	 * readable. It finds all related Findings and builds a list of the users
	 * assigned to those Findings. We need this information when we determine if
	 * it is acceptable to remove an auditor from the audit.
	 * 
	 * @param context
	 * @param doObject
	 * @param strAttr
	 * @return
	 * @throws Exception
	 */
	private static String getUsersOnRelatedFindings(Context context, DomainObject doObject, String strAttr) throws Exception {
		StringBuffer users = new StringBuffer();

		/*
		 * Get related Audit Findings of the Audit since Member could be the
		 * Auditor of Audit Finding
		 */
		MapList mapRelatedFindings = doObject.getRelatedObjects(context,
				PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITFINDINGS),
				PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDITFINDING), false, true, 1,
				getSelectsForRequestsAndFindings(context), null, null, "", null, null, null);
		Iterator iter = mapRelatedFindings.iterator();
		while (iter.hasNext()) {
			Hashtable melement = (Hashtable) iter.next();
			String strFindingId = (String) melement.get(DomainConstants.SELECT_ID);
			DomainObject dmoFinding = DomainObject.newInstance(context, strFindingId);

			if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS))
					|| strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR))) {
				users.append(AuditConstants.AUDIT_MEMBER_NAME_SEPARATOR
						+ dmoFinding.getAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITOR)));
			}
		}
		return users.toString();
	}

	/**
	 * This is a helper method that was extracted out of the massive, 400 line
	 * method below in an attempt to make the code just a tiny bit more
	 * readable. It is used to determine if a person is associated with a
	 * request or a finding. It gets called twice, once with a list of people
	 * associated with Requests, and once again with a list of people associated
	 * with Findings.
	 * 
	 * @param memberDisplayName
	 * @param currentState
	 * @param usersOnRequestOrFinding
	 * @param strAttr
	 * @param strValue
	 * @return
	 */
	private static boolean isMemberOnRequestOrFinding(Context context, String memberDisplayName, String currentState, String usersOnRequestOrFinding,
			String strAttr, String strValue) {
		boolean found;
		String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
		String STATE_PLAN = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT, AuditConstants.SYM_STATE_PLAN);
		String STATE_ACTIVE = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT, AuditConstants.SYM_STATE_ACTIVE);

		if ((usersOnRequestOrFinding.indexOf(memberDisplayName) != -1)
				&& (currentState.equalsIgnoreCase(STATE_PLAN) || currentState.equalsIgnoreCase(STATE_ACTIVE))) {
			found = true;
		}
		// specially add for check auditors whether is assigned to Request
		else if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS))
				&& (currentState.equalsIgnoreCase(STATE_PLAN) || currentState.equalsIgnoreCase(STATE_ACTIVE))
				&& usersOnRequestOrFinding.indexOf(strValue) != -1) {
			found = true;
		}
		else {
			found = false;
		}
		return found;
	}

	/**
	 * This method is used to allow input of auditors
	 * 
	 * @param context
	 * @param args
	 *            ,Field Map, Value Map, Request Map.
	 * @return String HMTL-Output. Returns the checkbox HTML each time. This
	 *         will not handle the other field types.
	 * @throws Exception
	 */
	public static String getAuditorsFromWebformnew(Context context, String[] args) throws Exception {
		try {
			String sSplitter = AuditConstants.AUDIT_MEMBER_NAME_SEPARATOR;

			// Get all the arguments
			HashMap mapProgram = (HashMap) JPO.unpackArgs(args);
			HashMap mapRequest = (HashMap) mapProgram.get(AuditConstants.REQUEST_MAP);
			HashMap mapField = (HashMap) mapProgram.get(AuditConstants.FIELD_MAP);
			Map mapSettings = (Map) mapField.get(AuditConstants.SETTINGS);

			// Initialize parameters for getting settings details
			String strMode = (String) mapRequest.get(AuditConstants.MODE);
			String strObjectId = (String) mapRequest.get(AuditConstants.OBJECT_ID);
			String strAttributeName = (String) mapSettings.get(AuditConstants.ADMIN_TYPE);

			Vector vExistingValues = new Vector();
			int iNextNum = 0;

			// StringBuilder for programHTML output,
			StringBuilder sbOutput = new StringBuilder();

			// Get Current Attribute Value.
			// The assumption here is, the Admin Type setting will have
			// attribute symbolic name.
			String strAttr = PropertyUtil.getSchemaProperty(strAttributeName);

			if (!Helper.isNullOrEmpty(strObjectId)) {
				// This is not a create so we need to get the values
				List<Map<?, ?>> lmObjectInfo = QueryUtil.getInfo(context, new String[] { strObjectId },
						Helper.stringList(DomainConstants.SELECT_CURRENT, DomainConstants.SELECT_TYPE, DomainObject.getAttributeSelect(strAttr)));

				if (!Helper.isNullOrEmpty(lmObjectInfo)) {
					Map<?, ?> mpObjectInfo = lmObjectInfo.get(0);
					if (!Helper.isNullOrEmpty(mpObjectInfo)) {
						final String SELECT_TYPE_KIND_OF_AUDIT = AuditUtil.getTypeKindOfSelectable(context, AuditConstants.SYM_TYPE_AUDIT);
						String strCurrent = (String) mpObjectInfo.get(DomainConstants.SELECT_CURRENT);
						String strType = (String) mpObjectInfo.get(DomainConstants.SELECT_TYPE);
						String strSelectedAttrValue = (String) mpObjectInfo.get(DomainObject.getAttributeSelect(strAttr));

						// Tokenizers for attribute
						if (null != strSelectedAttrValue) {
							StringTokenizer stokAttrValues = new StringTokenizer(strSelectedAttrValue, sSplitter);
							// Get Vector for currently selected values
							while (stokAttrValues.hasMoreTokens()) {
								vExistingValues.addElement(stokAttrValues.nextToken());
							}
							iNextNum = vExistingValues.size() + 1;
						}

						if (AuditConstants.MODE_EDIT.equalsIgnoreCase(strMode)) {
							DomainObject doObject = DomainObject.newInstance(context, strObjectId);
							/*
							 * Build a list of all auditors and auditees
							 * assigned to Requests and Findings
							 */
							String usersOnRequest = getUsersOnRelatedRequests(context, doObject, strAttr);
							String usersOnFinding = getUsersOnRelatedFindings(context, doObject, strAttr);

							String strInitialArrayString = DomainConstants.EMPTY_STRING;
							String strSeperator = DomainConstants.EMPTY_STRING;

							for (int iLoop = 0; iLoop < vExistingValues.size(); iLoop++) {
								String strValue = (String) vExistingValues.get(iLoop);
								strInitialArrayString += strSeperator + "" + strValue;
								strSeperator = "~";
							}
							if ("".equals(strInitialArrayString)) {
								// strInitialArrayString = "\"\"";
							}

							strAttr = strAttr.trim();

							sbOutput.append("<table>\n");

							sbOutput.append("<input type=\"hidden\" id=\"count_").append(strAttr).append("\" name=\"count_").append(strAttr);
							sbOutput.append("\" value=\"").append(iNextNum).append("\" />\n");
							sbOutput.append("<input type=\"hidden\" id=\"ARR_").append(strAttr).append("\" name=\"ARR_").append(strAttr);
							sbOutput.append("\" value='").append(strInitialArrayString).append("' />\n");
							sbOutput.append("<tr><td>");
							sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Input"));
							sbOutput.append("</td></tr>\n");
							sbOutput.append(
									getAuditorsInputForWebform(context, vExistingValues, strType, strCurrent, strAttr, SELECT_TYPE_KIND_OF_AUDIT));

							sbOutput.append(getLeadAuditorsInputForWebform(context, vExistingValues, strType, strCurrent, usersOnRequest,
									usersOnFinding, strAttr, SELECT_TYPE_KIND_OF_AUDIT));

							sbOutput.append("</div>\n");
							sbOutput.append("</td>\n");
							sbOutput.append("</tr>\n");
							sbOutput.append("</table>\n");
							sbOutput.append("<input type=\"hidden\" name=\"Final_").append(strAttr).append("\" value='").append(strInitialArrayString)
									.append("' />");
							sbOutput.append("\n");
							sbOutput.append("\n");
							sbOutput.append("\n");
							sbOutput.append("<script>addEvent(window, \"load\", function() {javascript:showFieldsBasedOnAuditType();})</script>");
						}
						else // show in view only mode
						{
							String auditorOrAuditeeDisplayName = DomainConstants.EMPTY_STRING;
							sbOutput.append("<table>\n");

							sbOutput.append("<tr><td ID=\"inputTableCell\"><div id=\"anchorDiv\">\n");
							String strValue = DomainConstants.EMPTY_STRING;
							for (int iLoop = 0; iLoop < vExistingValues.size(); iLoop++) {
								strValue = (String) vExistingValues.get(iLoop);
								if (null != strValue && !"".equals(strValue)) {
									// Getting the full name of user
									try {
										auditorOrAuditeeDisplayName = PersonUtil.getFullName(context, strValue);
									}
									catch (Exception ex) {
										auditorOrAuditeeDisplayName = strValue;
									}
								}
								String sDivName = "Auditor_" + iLoop + "_Div";
								sbOutput.append("<div id=\"").append(sDivName).append("\">\n");
								sbOutput.append("&nbsp;<img src=\"images/iconSmallPerson.gif\" alt=\"\" name=\"").append(strValue)
										.append("\"/>&nbsp;").append(auditorOrAuditeeDisplayName).append("\n");
								sbOutput.append("</div>\n");
							}

							sbOutput.append("</div>\n");
							sbOutput.append("</td>\n");
							sbOutput.append("</tr>\n");
							sbOutput.append("</table>");
						}

					}
				}

			}

			return sbOutput.toString();

		}
		catch (Exception ex) {
			System.err.println("Exception Occured..." + ex.toString());
			ex.printStackTrace();
			return DomainConstants.EMPTY_STRING;
		}
	}

	private static StringBuffer getLeadAuditorsInputForWebform(Context context, Vector vExistingValues, String strType, String strCurrent,
			String usersOnRequest, String usersOnFinding, String strAttr, String strTypeKindOfAudit) {
		StringBuffer sbOutput = new StringBuffer();
		String auditorOrAuditeeDisplayName;
		String strLeadAuditor = "";
		String strLeadAuditorDisplay = "";
		String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
		String STATE_PLAN = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT, AuditConstants.SYM_STATE_PLAN);
		String STATE_ACTIVE = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT, AuditConstants.SYM_STATE_ACTIVE);
		sbOutput.append("<tr><td ID=\"inputTableCell\"><div id=\"anchorDiv_").append(strAttr).append("\">\n");
		int iLoop = 0;
		try {
			for (iLoop = 0; iLoop < vExistingValues.size(); iLoop++) {
				String strValue = (String) vExistingValues.get(iLoop);
				String sDivName = "Auditor_" + iLoop + "_Div_" + strAttr;

				// Getting the full name of user
				try {
					auditorOrAuditeeDisplayName = PersonUtil.getFullName(context, strValue);
				}
				catch (Exception ex) {
					ex.printStackTrace();
					auditorOrAuditeeDisplayName = strValue;
				}

				// Determine if Auditee or Auditor is assigned to a request or a
				// finding and set a flag.
				// We will use this later to determine if the Auditor or Auditee
				// can
				// be removed from the
				// Members screen
				boolean isMemberOnRequest = isMemberOnRequestOrFinding(context, auditorOrAuditeeDisplayName, strCurrent, usersOnRequest, strAttr,
						strValue);
				boolean isMemberOnFinding = isMemberOnRequestOrFinding(context, auditorOrAuditeeDisplayName, strCurrent, usersOnFinding, strAttr,
						strValue);

				sbOutput.append("<div id=\"").append(sDivName).append("\">\n");

				// added if condition for lead auditor should not be editable
				// after
				// Plan state of Audit
				if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR))
						&& (AuditConstants.STR_TRUE.equalsIgnoreCase(strTypeKindOfAudit) && !strCurrent.equalsIgnoreCase(STATE_PLAN))) {
					sbOutput.append("&nbsp;<img src=\"images/iconSmallPerson.gif\" alt=\"\" name=\"").append(strValue).append("\"/>");
					sbOutput.append(")&nbsp;").append(auditorOrAuditeeDisplayName).append("\n");
				}
				else if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS))
						&& (AuditConstants.STR_TRUE.equalsIgnoreCase(strTypeKindOfAudit) && !strCurrent.equalsIgnoreCase(STATE_ACTIVE))) {
					sbOutput.append("&nbsp;<img src=\"images/iconSmallPerson.gif\" alt=\"\" name=\"" + strValue + "\"/>&nbsp;"
							+ auditorOrAuditeeDisplayName + "\n");
				}
				else if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES))
						&& (AuditConstants.STR_TRUE.equalsIgnoreCase(strTypeKindOfAudit)
								&& (!strCurrent.equalsIgnoreCase(STATE_PLAN) && !strCurrent.equalsIgnoreCase(STATE_ACTIVE)))) {
					sbOutput.append("&nbsp;<img src=\"images/iconSmallPerson.gif\" alt=\"\" name=\"").append(strValue).append("\"/>&nbsp;")
							.append(auditorOrAuditeeDisplayName).append("\n");
				}
				else {
					sbOutput.append("&nbsp;<img src=\"images/iconSmallPerson.gif\" alt=\"\" name=\"").append(strValue).append("\"/>&nbsp;");
					sbOutput.append(auditorOrAuditeeDisplayName);
					sbOutput.append("<a href=\"javascript:;\"");
					sbOutput.append("onclick=\"removeAuditor('").append(XSSUtil.encodeForJavaScript(context, sDivName) + "','")
							.append(XSSUtil.encodeForJavaScript(context, strAttr)).append("','")
							.append(XSSUtil.encodeForJavaScript(context, auditorOrAuditeeDisplayName));
					sbOutput.append("','").append(isMemberOnRequest).append("','").append(isMemberOnFinding).append("');\">&nbsp;");
					sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Button.Remove")).append("</a>\n");
				}
				sbOutput.append("</div>\n");
				sbOutput.append("<input type=\"hidden\" id=\"Type_").append(strAttr).append("\" name=\"Type_").append(strAttr).append("\" value=\"")
						.append(strType).append("\" />\n");
				sbOutput.append("<input type=\"hidden\" id=\"State_").append(strAttr).append("\" name=\"State_").append(strAttr).append("\" value=\"")
						.append(strCurrent).append("\" />\n");
			}
			// modified for when Audit is in Active state, one Auditee must
			// remain
			if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES))) {
				sbOutput.append("<input type=\"hidden\" id=\"CountAuditees\" name=\"CountAuditees\" value=\"").append(vExistingValues.size())
						.append("\" />\n");
			}
		}
		catch (LSAException e) {
		}
		return sbOutput;
	}

	private static StringBuffer getAuditorsInputForWebform(Context context, Vector vExistingValues, String strType, String strCurrent, String strAttr,
			String strTypeKindOfAudit) throws LSAException {
		StringBuffer sbOutput = new StringBuffer();
		boolean show = true;
		String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
		String STATE_PLAN = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT, AuditConstants.SYM_STATE_PLAN);

		String strFindLinkName = " " + Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Auditor");
		String strFindPersonName = Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.AuditorName");

		if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITRESPONDER))
				|| strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_CLOSINGMEETINGATTENDEES))) {
			strFindLinkName = " " + Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Responder");
			strFindPersonName = Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Responder");
		}
		else if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITRESOLUTIONASSIGNEDTO))) {
			strFindLinkName = " " + Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Assignee");
			strFindPersonName = Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.AssigneeTo");
		}
		else if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES))) {
			strFindLinkName = " " + Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Auditee");
			strFindPersonName = " " + Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Auditee");
		}

		// added if condition for lead auditor should be editable ONLY IN Plan
		// state of Audit
		if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR))
				&& (AuditConstants.STR_TRUE.equalsIgnoreCase(strTypeKindOfAudit) && strCurrent.equalsIgnoreCase(STATE_PLAN))) {
			sbOutput.append("<tr><td>").append(strFindPersonName).append(" : ");
			sbOutput.append("<input type=\"hidden\" id=\"").append(strAttr);
			sbOutput.append("\" readonly  name=\"").append(strAttr).append("\" /> <br>");
			if (show) {
				sbOutput.append("<input type=\"text\" id=\"display_").append(strAttr).append("\"  name=\"").append(strAttr).append("\" />");
				sbOutput.append("<a href=\"javascript:;\" onclick=\"FindAuditor('").append(strAttr).append("');\"> ");
				sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Find"));
				sbOutput.append(strFindLinkName).append("</a>");
			}
			else {
				sbOutput.append("<input type=\"text\" disabled=true id=\"display_").append(strAttr).append("\"  name=\"").append(strAttr)
						.append("\" />");
				sbOutput.append("<a disabled=true href=\"javascript:;\" onclick=\"FindAuditor('").append(strAttr).append("');\"> ");
				sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Find"));
				sbOutput.append(strFindLinkName).append("</a>");
			}
			sbOutput.append("<button type=\"button\" id=\"Add_").append(strAttr).append("\" name=\"Add_").append(strAttr).append("\" ");
			sbOutput.append(" OnClick=\"javascript:addAuditorSingle('").append(strAttr).append("');\">");
			sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Add"));
			sbOutput.append("</button></td></tr>\n");
		}
		else if (strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITRESOLUTIONASSIGNEDTO))
				|| strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITRESPONDER))
				|| strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITVERIFIEDBY))) {
			sbOutput.append("<tr><td>").append(strFindPersonName).append(" : ");
			sbOutput.append("<input type=\"text\" id=\"display_").append(strAttr).append("\"  name=\"display_").append(strAttr)
					.append("\" onkeypress=\"return handleEnter();\" />");
			sbOutput.append("<a href=\"javascript:;\" onclick=\"FindAuditor('").append(strAttr).append("');\">");
			sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Find"));
			sbOutput.append(strFindLinkName).append("</a>");
			sbOutput.append("<input type=\"hidden\" id=\"").append(strAttr).append("\"  name=\"").append(strAttr).append("\" />");
			sbOutput.append("<button type=\"button\" id=\"Add_").append(strAttr).append("\" name=\"Add_").append(strAttr).append("\" ");
			if (vExistingValues.size() >= 1) {
				sbOutput.append(" disabled ");
			}
			sbOutput.append(" OnClick=\"javascript:addAuditorSingle('").append(strAttr).append("');\">");
			sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Add"));
			sbOutput.append("</button></td></tr>\n");
		}
		else if (!strAttr.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR))) {
			if (show) {
				sbOutput.append("<tr><td>").append(strFindPersonName).append(" : ");
				sbOutput.append("<input type=\"text\" id=\"display_").append(strAttr).append("\"  name=\"display_").append(strAttr)
						.append("\" onkeypress=\"return handleEnter();\" />");
				sbOutput.append("<a href=\"javascript:;\" onclick=\"FindAuditor('").append(strAttr).append("');\">");
				sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Find"));
				sbOutput.append(strFindLinkName).append("</a> ");
			}
			else {
				sbOutput.append("<tr><td>").append(strFindPersonName).append(" : ");
				sbOutput.append("<input type=\"text\" disabled=true id=\"display_").append(strAttr).append("\"  name=\"display_").append(strAttr)
						.append("\" onkeypress=\"return handleEnter();\" />");
				sbOutput.append("<a disabled=true href=\"javascript:;\" >");
				sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Find"));
				sbOutput.append(strFindLinkName).append("</a> ");
			}
			sbOutput.append("<input type=\"hidden\" id=\"").append(strAttr).append("\"  name=\"").append(strAttr).append("\" />");

			if (show) {
				sbOutput.append("<button type=\"button\" id=\"Add_").append(strAttr).append("\" name=\"Add_").append(strAttr).append("\" ");
				sbOutput.append(" OnClick=\"javascript:addAuditorMultiple('").append(strAttr).append("');\">");
				sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Add"));
				sbOutput.append("</button></td></tr>\n");
			}
			else {
				sbOutput.append("<button type=\"button\" disabled=true id=\"Add_").append(strAttr).append("\" name=\"Add_").append(strAttr)
						.append("\" ");
				sbOutput.append(" OnClick=\"javascript:addAuditorMultiple('").append(strAttr).append("');\">");
				sbOutput.append(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Add"));
				sbOutput.append("</button></td></tr>\n");
			}
		}
		return sbOutput;
	}

	/**
	 * Gets the internal audit search result.
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the internal audit search result
	 * 
	 * @throws Exception
	 *             the exception
	 */
	public MapList getInternalAuditSearchResult(Context context, String[] args) throws Exception {
		MapList totalresultList = null;
		try {
			// Get the parameter Hashmap.
			HashMap paramMap = (HashMap) JPO.unpackArgs(args);
			String strObjectId = (String) paramMap.get("objectId");
			String strSearchMode = (String) paramMap.get("searchmode");
			String strObjName = "";
			String strName = (String) paramMap.get("txtName");
			String strQueryLimit = (String) paramMap.get("QueryLimit");
			String strWhereExp = "";
			char chDblQuotes = '\"';
			String strTxtFormat = "*";
			String strTxtSearch = "";
			String strtype = (String) paramMap.get("type");
			String strAuditLocation = (String) paramMap.get("txtAuditLocation");
			String strTitle = (String) paramMap.get("txtTitle");

			String strVault = PersonUtil.getDefaultVault(context);
			// setting the query limit if it is blank
			if (strQueryLimit == null || strQueryLimit.equals("null") || strQueryLimit.equals("")) {
				strQueryLimit = "100";
			}
			// if name is blank the setting the name *
			if (strName == null || strName.equalsIgnoreCase("null") || strName.length() <= 0) {
				strName = "*";
			}

			if (null != strAuditLocation && !"".equals(strAuditLocation) && !"null".equals(strAuditLocation) && !"*".equals(strAuditLocation)) {
				strWhereExp += "(attribute[" + PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITLOCATION) + "] ~~ " + chDblQuotes
						+ strAuditLocation + chDblQuotes + ")";
			}
			if (null != strTitle && !"".equals(strTitle) && !"null".equals(strTitle) && !"*".equals(strTitle)) {

				if (null != strWhereExp && !"null".equals(strWhereExp) && !"".equals(strWhereExp)) {
					strWhereExp += " && (attribute[" + PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_TITLE) + "] ~~ " + chDblQuotes
							+ strTitle + chDblQuotes + ")";
				}
				else {
					strWhereExp = "(attribute[" + PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_TITLE) + "] ~~ " + chDblQuotes
							+ strTitle + chDblQuotes + ")";
				}

			}

			SelectList resultSelects = new SelectList(7);
			resultSelects.add(DomainConstants.SELECT_ID);
			resultSelects.add(DomainConstants.SELECT_TYPE);
			resultSelects.add(DomainConstants.SELECT_NAME);
			resultSelects.add(DomainConstants.SELECT_REVISION);
			resultSelects.add(DomainConstants.SELECT_DESCRIPTION);
			resultSelects.add(DomainConstants.SELECT_CURRENT);
			resultSelects.add(DomainConstants.SELECT_POLICY);

			totalresultList = new MapList();
			// find all object which setisfy the condition
			totalresultList = DomainObject.findObjects(context, strtype, strName, "*", "*", strVault, strWhereExp, null, true, resultSelects,
					Short.parseShort(strQueryLimit), strTxtFormat, strTxtSearch);

			// Code to remove the same object from the result set in AddExisting
			// Case
			if (null != strSearchMode && !"".equals(strSearchMode) && "addexisting".equals(strSearchMode)) {
				DomainObject newObj = DomainObject.newInstance(context, strObjectId);
				// Getting the name of Parent object
				String strCurrentObj = newObj.getInfo(context, DomainConstants.SELECT_NAME);
				for (int iCnt = 0; iCnt < totalresultList.size(); iCnt++) {
					HashMap fieldMap = (HashMap) totalresultList.get(iCnt);
					strObjName = (String) fieldMap.get("name");
					// If the parent object's name is there in result set
					if (null != strObjName && !"".equals(strCurrentObj) && strCurrentObj.equals(strObjName)) {
						// Removing the entry
						totalresultList.remove(fieldMap);
					}
				}
			}
			// Code to remove the same object from the result set in AddExisting
			// Case Ends here.
			return totalresultList;

		}
		catch (Exception objException) {
			return totalresultList;
		}
	}

	/**
	 * It generates HTML text to display the Audit Type Values in form
	 * 
	 * @param context
	 * @param args
	 * @return String
	 * @throws Exception
	 */
	public String getFieldAuditTypeValues(Context context, String[] args) throws Exception {
		StringBuffer strBufferOutput = new StringBuffer();
		try {
			HashMap mapProgram = (HashMap) JPO.unpackArgs(args);
			HashMap mapRequest = (HashMap) mapProgram.get("requestMap");
			HashMap mapField = (HashMap) mapProgram.get("fieldMap");
			Map mapSettings = (Map) mapField.get("settings");
			String strObjectId = (String) mapRequest.get("objectId");
			String strMode = (String) mapRequest.get("mode");// create/edit/search
																// mode
			String strAttrName = (String) mapSettings.get("Admin Type");
			String sAttrName = (String) mapSettings.get("IW_Attr_Name");
			String strActualName = PropertyUtil.getSchemaProperty(strAttrName);
			DomainObject doAuditObject;
			
			String strAuditType = "";
			String strAuditExternalInfo = "";
			String strOptionRange = "", strOptionRangeI18 = "";

			if (strObjectId == null) {
				strObjectId = "";
			}

			// Getting the attribute Ranges
			StringList strRangesList = (StringList) FrameworkUtil.getRanges(context, strActualName);
			strRangesList.add(0, "");
			ArrayList alRange = (ArrayList) strRangesList.parallelStream().sorted().collect(Collectors.toList());
			strRangesList.clear();
			for (Object object : alRange) {
				strRangesList.add((String) object);
			}

			StringList strRangeListI18 = i18nNow.getAttrRangeI18NStringList(sAttrName, strRangesList, context.getSession().getLanguage());

			// Strip off the leading blank item in the list as the Audit Type
			// range values
			// already include a blank.
			if ("".equals(strRangesList.get(0)) && "".equals(strRangesList.get(1))) {
				strRangesList.remove(0);
				strRangeListI18.remove(0);
			}

			// Iterating the Range Values
			Iterator itr = strRangesList.iterator();
			Iterator itrI18 = strRangeListI18.iterator();
			// Adding the code for drop down box
			if (!Helper.isNullOrEmpty(strObjectId)) {
				doAuditObject = DomainObject.newInstance(context, strObjectId);
					if (null != strMode) {
					
					// Getting the Audit Type value
					strAuditType = doAuditObject.getAttributeValue(context,
							PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITTYPE));
					strAuditExternalInfo = doAuditObject.getAttributeValue(context,
							PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO));
					// Setting the Value
					// strBufferOutput.append(strAuditType);
				
				// add style sheet
				/*
				 * strBufferOutput.append("<script type=\"text/javascript\">");
				 * strBufferOutput.append("addStyleSheet(\"iwCommonStyles\");");
				 * strBufferOutput.append("</script>");
				 */
				strBufferOutput.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"../common/styles/iwCommonStyles.css\" />");

				strBufferOutput.append(" <table><tr><td>");
				strBufferOutput.append(" <select " + strActualName + " name='" + strActualName + "' id='" + strActualName
						+ "' onChange=\"javascript:checkAuditType()\">");
				while (itr.hasNext()) {
					strOptionRange = (String) itr.next();
					strOptionRangeI18 = (String) itrI18.next();
					strBufferOutput.append("<option value ='" + strOptionRange + "'");
					// Setting the existing Value in Edit screen
					if (strAuditType.equals(strOptionRange)) {
						strBufferOutput.append(" selected ");
					}
					strBufferOutput.append(">" + strOptionRangeI18 + "</option>");
				}
				strBufferOutput.append(" </select></td><td>");
				strBufferOutput.append("&nbsp;&nbsp;&nbsp;&nbsp;</td><td>");
				strBufferOutput.append(
						"<input type=\"text\" id='" + PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO) + "' ");

				if (null != strAuditType && "Other".equalsIgnoreCase(strAuditType)) {
					// strBufferOutput.append("style=\"visibility:visible;\"
					// value='"
					// + strAuditExternalInfo + "'");
					// take out the inline style definition
					strBufferOutput.append("value='" + strAuditExternalInfo + "'");
				}

				strBufferOutput.append("name='" + PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO) + "' />");
				strBufferOutput.append("</td></tr> </table>");

			}
		
		
			else {
				// Getting the Audit Type value
				strAuditType = doAuditObject.getAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITTYPE));

				// If the audit type is not a blank, then try to get the i18n
				// string. otherwise leave it blank.
				String strAuditTypeI18 = "";
				if (!"".equals(strAuditType)) {
					strAuditTypeI18 = i18nNow.getI18nString(("emxFramework.Range.Audit_Type." + strAuditType).trim().replace(' ', '_'),
							"emxFrameworkStringResource", context.getSession().getLanguage());
				}

				if(!(AuditConstants.STR_OTHER.equalsIgnoreCase(strAuditType)))	
				{
				strBufferOutput.append(strAuditTypeI18);
				}
				// Code to get the Audit Type = Other text field
				
				if (null != strAuditType && AuditConstants.STR_OTHER.equalsIgnoreCase(strAuditType)) {
					strAuditExternalInfo = doAuditObject.getAttributeValue(context,
							PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO));
					if(Helper.isNullOrEmpty(strAuditExternalInfo))
					{
						strBufferOutput.append(" " + AuditConstants.STR_OTHER);
					}
					else
					{
					strBufferOutput.append(" " + strAuditExternalInfo);
					}
				}
			}
		}
	}
		catch (Exception objException) {
			objException.printStackTrace();
			throw objException;
		}
		return strBufferOutput.toString();
	}

	/**
	 * It generates HTML text to display the Supplier Name Values in form
	 * 
	 * @param context
	 * @param args
	 * @return String
	 * @throws Exception
	 */
	public String getFieldSupplierNames(Context context, String[] args) throws Exception {
		StringBuffer strBufferOutput = new StringBuffer();
		try {
			HashMap mapProgram = (HashMap) JPO.unpackArgs(args);
			HashMap mapRequest = (HashMap) mapProgram.get("requestMap");
			String strMode = (String) mapRequest.get("mode");// create/edit/search
																// mode
			// Getting needed Values
			SelectList sListResultsSelects = new SelectList(7);
			sListResultsSelects.add(DomainObject.SELECT_ID);
			// Selectables added for sorting
			sListResultsSelects.add(DomainConstants.SELECT_TYPE);
			sListResultsSelects.add(DomainConstants.SELECT_NAME);
			sListResultsSelects.add(DomainConstants.SELECT_REVISION);
			sListResultsSelects.add(DomainConstants.SELECT_CURRENT);
			MapList mListResults;
			String strSupplierObjId = "";
			String strSupplierName = "";
			String strSupplierSelected = "";
			String strActualName = AuditConstants.STR_SUPPLIER;
			DomainObject doAuditObject;
			DomainObject doAuditTemplateObject;
			StringList sListArrRange = new StringList();
			String strOptionRange = "";
			String strAuditType = "";
			String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
			String STATE_ACTIVE = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT,
					AuditConstants.SYM_STATE_ACTIVE);

			// Where clause to get only Active Suppliers
			String strWhereExp = DomainConstants.SELECT_CURRENT + "==" + STATE_ACTIVE;

			// Finding the objects of type Audit Supplier
			mListResults = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDITSUPPLIER), // Type
					// Pattern
					null, // Name Pattern
					"*", // Rev Pattern
					"*", // Owner Pattern
					null, // Vault Pattern
					strWhereExp, // Where Expression
					null, // QueryName
					false, // Expand Type
					sListResultsSelects, // Object Selects
					Short.parseShort("100")); // Limit

			if (null != strMode) {
				String strObjectId = (String) mapRequest.get("objectId");
				if (strObjectId != null && !strObjectId.equals("")) {
					StringList sListSelects = new StringList();
					sListSelects.add(DomainConstants.SELECT_ID);
					sListSelects.add(DomainConstants.SELECT_NAME);
					// Calling the method to get Supplier Name
					strSupplierSelected = getSupplierNames(context, strObjectId, sListSelects);
					// Adding the Supplier name to display.
					// strBufferOutput.append(strSupplierSelected);
					doAuditTemplateObject = DomainObject.newInstance(context, strObjectId);
					strAuditType = doAuditTemplateObject.getAttributeValue(context,
							PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITTYPE));
				}
				// Code to display blank
				sListArrRange.add("");
				// Adding the code for drop Down Box
				if ((null != strAuditType && !"null".equalsIgnoreCase(strAuditType) && AuditConstants.STR_SUPPLIER.equalsIgnoreCase(strAuditType))
						|| null != strSupplierSelected && !"null".equalsIgnoreCase(strSupplierSelected) && !"".equals(strSupplierSelected)) {
					strBufferOutput.append(" <select " + strActualName + " name='" + strActualName + "' id='" + strActualName + "'selected>");
				}
				else {
					strBufferOutput
							.append(" <select " + strActualName + " name='" + strActualName + "' id='" + strActualName + "'selected disabled>");
				}
				for (int i = 0; i < mListResults.size(); i++) {
					HashMap hmSupplierFound = (HashMap) mListResults.get(i);
					strSupplierObjId = (String) hmSupplierFound.get(DomainConstants.SELECT_ID);
					strSupplierName = (String) hmSupplierFound.get(DomainConstants.SELECT_NAME);
					// Adding the names to String list
					sListArrRange.add(strSupplierName);
				}
				// Iterating to display ranges
				Iterator itr = sListArrRange.iterator();
				while (itr.hasNext()) {
					strOptionRange = (String) itr.next();
					// Code to add the range values in drop down
					strBufferOutput.append("<option value ='" + strOptionRange + "'");
					if (null != strSupplierSelected && !("null".equalsIgnoreCase(strSupplierSelected)) && !"".equals(strSupplierSelected)) {
						// If supplier name already exists
						if (strOptionRange.equals(strSupplierSelected)) {
							// Code to display as selected
							strBufferOutput.append(" selected ");
						}
					}
					strBufferOutput.append(">" + strOptionRange + "</option>");
				}

			}
			else {
				String strObjectId = (String) mapRequest.get("objectId");
				if (strObjectId != null && !strObjectId.equals("")) {
					StringList sListSelects = new StringList();
					sListSelects.add(DomainConstants.SELECT_ID);
					sListSelects.add(DomainConstants.SELECT_NAME);
					// Calling the method to get Supplier Name
					strSupplierName = getSupplierNames(context, strObjectId, sListSelects);
				}
				// Adding the Supplier name to display.
				strBufferOutput.append(strSupplierName);
			}
		}
		catch (Exception objException) {
			objException.printStackTrace();
			throw objException;
		}
		return strBufferOutput.toString();
	}

	/**
	 * Get suppliers in the Active state
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.IncludeOIDProgramCallable
	public static StringList getSuppliers(Context context, String[] args) throws Exception {
		MapList personList = DomainObject.findObjects(context, DomainConstants.TYPE_PERSON, context.getUser(), "*", "*", null, "", false,
				new StringList(DomainConstants.SELECT_ID));
		if (personList.size() > 0) {
			DomainObject person = DomainObject.newInstance(context, (String) ((HashMap) personList.get(0)).get(DomainConstants.SELECT_ID));
			MapList companyMapList = getCompaniesRelatedToPerson(context, person, "current == Active");
			return getSuppliersRelatedtoCompanies(context, companyMapList, "current == Active");
		}
		else {
			throw new Exception("User: " + context.getUser() + "has no business object");
		}
	}

	/**
	 * Use in the global search to find suppliers. We want to display both
	 * active and inactive. this was created as a result of bug 31657
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.IncludeOIDProgramCallable
	public static StringList getActiveAndInactiveSuppliers(Context context, String[] args) throws Exception {
		MapList personList = DomainObject.findObjects(context, DomainConstants.TYPE_PERSON, context.getUser(), "*", "*", null, "", false,
				new StringList(DomainConstants.SELECT_ID));
		if (personList.size() > 0) {
			DomainObject person = DomainObject.newInstance(context, (String) ((HashMap) personList.get(0)).get(DomainConstants.SELECT_ID));
			MapList companyMapList = getCompaniesRelatedToPerson(context, person, "");
			return getSuppliersRelatedtoCompanies(context, companyMapList, "");
		}
		else {
			throw new Exception("User: " + context.getUser() + "has no business object");
		}
	}

	/**
	 * Did some refactoring and extracted this from getSuppliers() so it could
	 * be reused in getActiveAndInactiveSuppliers
	 * 
	 * @param context
	 * @param companyMapList
	 * @param whereClause
	 * @return
	 * @throws FrameworkException
	 */
	private static StringList getSuppliersRelatedtoCompanies(Context context, MapList companyMapList, String whereClause) throws FrameworkException {
		StringList suppliers = new StringList();
		int companySize = companyMapList.size();
		for (int i = 0; i < companySize; i++) {
			Map companyMap = (Map) companyMapList.get(i);
			DomainObject company = DomainObject.newInstance(context, (String) companyMap.get(DomainConstants.SELECT_ID));
			MapList suppliersMapList = company.getRelatedObjects(context, DomainConstants.RELATIONSHIP_SUPPLIER, DomainConstants.TYPE_COMPANY,
					new StringList(DomainConstants.SELECT_ID), new StringList(DomainConstants.SELECT_RELATIONSHIP_ID), false, true, (short) 1,
					whereClause, "", 0);
			int suppliersSize = suppliersMapList.size();
			for (int j = 0; j < suppliersSize; j++) {
				Map supplierMap = (Map) suppliersMapList.get(j);
				suppliers.add((String) supplierMap.get(DomainConstants.SELECT_ID));
			}
		}
		return suppliers;
	}

	/**
	 * Did some refactoring and extracted this from getSuppliers() so it could
	 * be reused in getActiveAndInactiveSuppliers
	 * 
	 * @param context
	 * @param person
	 * @param whereClause
	 * @return
	 * @throws FrameworkException
	 */
	private static MapList getCompaniesRelatedToPerson(Context context, DomainObject person, String whereClause) throws FrameworkException {
		MapList companyMapList = person.getRelatedObjects(context, DomainConstants.RELATIONSHIP_EMPLOYEE, DomainConstants.TYPE_COMPANY,
				new StringList(DomainConstants.SELECT_ID), new StringList(DomainConstants.SELECT_RELATIONSHIP_ID), true, false, (short) 1,
				whereClause, "", 0);
		return companyMapList;
	}

	/**
	 * It is a generic method that will return Supplier Name connected with an
	 * Object
	 * 
	 * @param context
	 * @param args
	 * @return String
	 * @throws Exception
	 */

	public static String getSupplierNames(Context context, String objId, StringList sListSelects) throws Exception {
		String strConnectedSupplier = "", strConnectedSupplierID = "", returnHTML = "";

		try {
			MapList mlRealtedSuppliers = new MapList();
			// creating the Domain Object
			DomainObject doAuditObject = DomainObject.newInstance(context, objId);
			// Getting the related Suppliers
			mlRealtedSuppliers = doAuditObject.getRelatedObjects(context,
					PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSUPPLIER), DomainConstants.TYPE_COMPANY, true, false, 1,
					sListSelects, null, null, "", null, null, null);
			for (Iterator iter = mlRealtedSuppliers.iterator(); iter.hasNext();) {
				Map SupplierMap = (Map) iter.next();
				strConnectedSupplier = (String) SupplierMap.get(DomainConstants.SELECT_NAME);
				strConnectedSupplierID = (String) SupplierMap.get(DomainConstants.SELECT_ID);

				String supplierIconFile = "images/" + FrameworkProperties.getProperty(context, "emxFramework.smallIcon.type_Company");
				returnHTML = "<a class=\"object\" href=\"JavaScript:emxFormLinkClick(&quot;../common/emxTree.jsp?objectId=" + strConnectedSupplierID
						+ "&amp;relId=null&quot;, &quot;popup&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;" + strConnectedSupplier
						+ "&quot;)\">" +
						// "<img border=\"0\"
						// src=\"/images/iconSmallCompany.gif\">"+
						"<img border=\"0\" src=\"" + supplierIconFile + "\">" + strConnectedSupplier + "</a>";
			}
		}
		catch (Exception objException) {
			objException.printStackTrace();
			throw objException;

		}

		return returnHTML;
	}

	/**
	 * This is a generic method that will return Supplier ID after Finding
	 * object with Name.
	 * 
	 * @param context
	 * @param args
	 * @return String
	 * @throws Exception
	 */

	public static String findSupplierID(Context context, String strSupplierName) throws Exception {
		String strSupplierObjId = "";
		try {
			// Getting needed Values
			SelectList sListResultsSelects = new SelectList(3);
			sListResultsSelects.add(DomainObject.SELECT_ID);
			// Selectables added for sorting
			sListResultsSelects.add(DomainConstants.SELECT_TYPE);
			sListResultsSelects.add(DomainConstants.SELECT_NAME);
			MapList mListResults;

			// Finding the objects of type Audit Supplier
			mListResults = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDITSUPPLIER), // Type
					// Pattern
					strSupplierName, // Name Pattern
					"*", // Rev Pattern
					"*", // Owner Pattern
					null, // Vault Pattern
					null, // Where Expression
					null, // QueryName
					false, // Expand Type
					sListResultsSelects, // Object Selects
					Short.parseShort("100")); // Limit

			if ((null != mListResults) && (!mListResults.isEmpty())) {
				int nCnt = mListResults.size();
				// Getting the Id of the object
				for (int nCount = 0; nCount < nCnt; nCount++) {
					strSupplierObjId = (String) ((Map) mListResults.get(nCount)).get(DomainConstants.SELECT_ID);
				}
			}
		}
		catch (Exception objException) {
			objException.printStackTrace();
			throw objException;
		}
		return strSupplierObjId;
	}

	/**
	 * Gets the auditorfor audit.
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the auditorfor audit
	 * 
	 * @throws Exception
	 *             the exception
	 */
	public MapList getAuditorforAudit(Context context, String[] args) throws Exception {
		MapList mAuditor = new MapList();
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			String strAuditorName = (String) programMap.get("SearchAuditor");
			char chDblQuotes = '\"';
			StringList sListSelects = new StringList(4);
			sListSelects.add(DomainConstants.SELECT_ID);
			sListSelects.add(DomainConstants.SELECT_NAME);
			String strWhereExp = "";

			if (null != strAuditorName && !strAuditorName.equalsIgnoreCase("null") && strAuditorName.equals("*")) {
				strAuditorName = "";
			}
			if (!(strAuditorName == null || strAuditorName.equalsIgnoreCase("null") || strAuditorName.length() <= 0)) {
				// take care of blank WhereClause Expression
				if (strWhereExp.equals("")) {
					strWhereExp += "(name ~~ " + chDblQuotes + "*" + strAuditorName + "*" + chDblQuotes + ")";
				}

				else {
					strWhereExp += "&& (name ~~ " + chDblQuotes + "*" + strAuditorName + "*" + chDblQuotes + ")";
				}
			}

			mAuditor = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_PERSON), null, strWhereExp,
					sListSelects);

		}
		catch (Exception e) {
			e.printStackTrace();
			System.err.println("e.getMessage()" + e.getMessage());
		}
		return mAuditor;
	}

	/**
	 * Gets the auditorfor audit.
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the auditorfor audit
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getAuditorNew(Context context, String[] args) throws Exception {
		MapList mAuditor = new MapList();
		MapList mAuditorTemp = new MapList();
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			String strAuditorName = (String) programMap.get("SearchAuditor");

			String strAttributeName = (String) programMap.get("fieldName");

			// The assumption here is, the Admin Type setting will have
			// attribute symbolic name.
			String strAttribute = strAttributeName; // PropertyUtil.getSchemaProperty(strAttributeName);

			char chDblQuotes = '\"';
			StringList sListSelects = new StringList(4);
			sListSelects.add(DomainConstants.SELECT_ID);
			sListSelects.add(DomainConstants.SELECT_NAME);

			String strWhereExp = "";

			if (null != strAuditorName && !strAuditorName.equalsIgnoreCase("null") && strAuditorName.equals("*")) {
				strAuditorName = "";
			}
			if (!(strAuditorName == null || strAuditorName.equalsIgnoreCase("null") || strAuditorName.length() <= 0)) {
				// take care of blank WhereClause Expression
				if (strWhereExp.equals("")) {
					strWhereExp += "(name ~~ " + chDblQuotes + "*" + strAuditorName + "*" + chDblQuotes + ")";
				}

				else {
					strWhereExp += "&& (name ~~ " + chDblQuotes + "*" + strAuditorName + "*" + chDblQuotes + ")";
				}
			}

			mAuditorTemp = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_PERSON), null,
					strWhereExp, sListSelects);

			// get roles list for the attribute passed
			StringList sListRoles = getRoles(context, strAttribute);
			String strId = "";
			Map element = null;
			Person doObject = null;
			String strRole = "";
			Iterator iterator = null;
			boolean bTrue = false;

			// if there are no roles specified then returns all users
			if (sListRoles.isEmpty()) {
				mAuditor = mAuditorTemp;
			}
			else { // travers through the users and check for role assignments
				for (Iterator iter = mAuditorTemp.iterator(); iter.hasNext();) {
					bTrue = false;
					element = (Map) iter.next();
					strId = (String) element.get(DomainConstants.SELECT_NAME);
					doObject = new Person(strId);

					for (iterator = sListRoles.iterator(); iterator.hasNext();) {
						strRole = (String) iterator.next();
						if (doObject.isAssigned(context, strRole)) {
							bTrue = true;
						}
					}

					if (bTrue) {
						mAuditor.add(element);
					}
				}
			}

		}
		catch (Exception e) {
			e.printStackTrace();
			System.err.println("e.getMessage()" + e.getMessage());
		}
		return mAuditor;
	}

	/**
	 * Gets the auditor.
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the auditor
	 * 
	 * @throws Exception
	 *             the exception
	 */
	public String getAuditor(Context context, String[] args) throws Exception {
		String strReturnValue = "False";
		MapList mAuditor = new MapList();
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			String strAuditorName = (String) programMap.get("SearchAuditor");

			char chDblQuotes = '\"';
			StringList sListSelects = new StringList(4);
			sListSelects.add(DomainConstants.SELECT_ID);
			sListSelects.add(DomainConstants.SELECT_NAME);

			String strWhereExp = "";

			if (null != strAuditorName && !strAuditorName.equalsIgnoreCase("null") && strAuditorName.equals("*")) {
				strAuditorName = "";
			}
			if (!(strAuditorName == null || strAuditorName.equalsIgnoreCase("null") || strAuditorName.length() <= 0)) {
				// take care of blank WhereClause Expression
				if (strWhereExp.equals("")) {
					strWhereExp += "(name ~~ " + chDblQuotes + "*" + strAuditorName + "*" + chDblQuotes + ")";
				}

				else {
					strWhereExp += "&& (name ~~ " + chDblQuotes + "*" + strAuditorName + "*" + chDblQuotes + ")";
				}
			}

			mAuditor = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_PERSON), null, strWhereExp,
					sListSelects);

			if (mAuditor.size() == 1) {
				Map element = (Map) mAuditor.get(0);
				String strName = (String) element.get(DomainConstants.SELECT_NAME);
				if (strAuditorName.equalsIgnoreCase(strName)) {
					strReturnValue = "true";
				}

			}
		}
		catch (Exception e) {
			e.printStackTrace();
			System.err.println("e.getMessage()" + e.getMessage());
		}
		return strReturnValue;
	}

	/**
	 * returns the stringList of the roles for the particular attributes. Lead
	 * Auditor, Auditees, auditors.
	 * 
	 * @param strAttributeName
	 *            ( name of an attribute)
	 * @return Stringlist
	 */
	public static StringList getRoles(Context context, String strAttributeName) {
		StringList sListRoles = new StringList();

		// get the roles for the particular attributes values
		if (strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITVERIFIEDBY))
				|| strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITOR))) {
			sListRoles.add(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITUSER));
			sListRoles.add(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITLEAD));
		}
		else if (strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR))) {
			sListRoles.add(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITLEAD));
		}
		else if (strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITRESPONDER))
				|| strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES))
				|| strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS))
				|| strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITRESOLUTIONASSIGNEDTO))
				|| strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITDATEVERIFIED))) {
			sListRoles.add(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITUSER));
		}
		else if (strAttributeName.equalsIgnoreCase(DomainConstants.SELECT_OWNER)) {
			sListRoles.add(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITLEAD));
			sListRoles.add(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN));
		}
		else if (strAttributeName.equalsIgnoreCase(DomainConstants.ATTRIBUTE_ORIGINATOR)) {
			sListRoles.add(DomainConstants.ATTRIBUTE_ORIGINATOR);
		}

		return sListRoles;
	}

	public Object getRangeValues(Context context, String[] args) throws Exception {
		StringList fieldRangeValues = (StringList) ${CLASS:com.dassault_systemes.enovia.lsa.audit.services.trigger.AuditUtils}
				.getAttributeChoices(context, args);
		StringList fieldDisplayRangeValues = (StringList) ${CLASS:com.dassault_systemes.enovia.lsa.audit.services.trigger.AuditUtils}
				.getI18AttributeChoices(context, args);
		HashMap tempMap = new HashMap();
		tempMap.put("field_choices", fieldRangeValues);
		tempMap.put("field_display_choices", fieldDisplayRangeValues);
		return tempMap;
	}

	public Map<?, ?> getFieldAuditTypeRange(Context context, String[] args) throws AuditException {
		try {
			HashMap paramMap = (HashMap) JPO.unpackArgs(args);
			HashMap fieldMap = (HashMap) paramMap.get("fieldMap");
			HashMap settingsMap = (HashMap) fieldMap.get("settings");
			String symbolicAttributeName = (String) settingsMap.get("Admin Type");
			HashMap returnMap = new HashMap();
			String actualAttributeName = PropertyUtil.getSchemaProperty(context, symbolicAttributeName);
			AttributeType attr = new AttributeType(actualAttributeName);
			attr.open(context);
			StringList choices = attr.getChoices(context);
			attr.close(context);
			choices.add(DomainObject.EMPTY_STRING);
			ArrayList alRange = (ArrayList) choices.parallelStream().sorted().collect(Collectors.toList());
			choices.clear();
			for (Object object : alRange) {
				choices.add((String) object);
			}
			StringList strRangeListI18 = i18nNow.getAttrRangeI18NStringList(actualAttributeName, choices, context.getSession().getLanguage());
			returnMap.put(AuditConstants.FIELD_CHOICES, choices);
			returnMap.put(AuditConstants.FIELD_DISPLAY_CHOICES, strRangeListI18);
			return returnMap;
		}
		catch (Exception e) {
			throw new AuditException(e);
		}
	}

	/**
	 * It generates HTML text to display the Audit subsystem in form
	 * 
	 * @param context
	 * @param args
	 * @return String
	 * @throws Exception
	 */
	public String getFieldAuditSubSystem(Context context, String[] args) throws Exception {
		StringBuffer strBufferOutput = new StringBuffer();
		try {
			HashMap mapProgram = (HashMap) JPO.unpackArgs(args);
			HashMap mapRequest = (HashMap) mapProgram.get("requestMap");
			HashMap mapField = (HashMap) mapProgram.get("fieldMap");
			Map mapSettings = (Map) mapField.get("settings");
			String strObjectId = (String) mapRequest.get("objectId");
			String strMode = (String) mapRequest.get("mode");// create/edit/search
																// mode
			String strActualName = (String) mapSettings.get("IW_Attr_Name");

			DomainObject doAuditObject;
			String strAuditSubsystem = "";
			String strOptionRange = "", strOptionRangeI18 = "";
			boolean bReturn = false;
			Vector vExistingValues = new Vector();
			int iNextNum = 0;
			String sSplitter = ",";
			if (strObjectId == null) {
				strObjectId = "";
			}

			// Getting the attribute Ranges
			StringList strRangesList = (StringList) ${CLASS:com.dassault_systemes.enovia.lsa.audit.services.trigger.AuditUtils}
					.getAttributeChoices(context, args);
			StringList strRangeListI18 = (StringList) ${CLASS:com.dassault_systemes.enovia.lsa.audit.services.trigger.AuditUtils}
					.getI18AttributeChoices(context, args);
			// Iterating the Range Values
			Iterator itr = strRangesList.iterator();
			Iterator itrI18 = strRangeListI18.iterator();

			// Adding the code for drop down box
			if (null != strMode) {
				if (strObjectId != null && !strObjectId.equals("")) {
					doAuditObject = DomainObject.newInstance(context, strObjectId);
					// Getting the Audit Subsystem value
					strAuditSubsystem = doAuditObject.getAttributeValue(context, strActualName);
				}
				// Tokenizers for attribute
				String strToken = "";
				if (null != strAuditSubsystem) {
					StringTokenizer stokAttrValues = new StringTokenizer(strAuditSubsystem, sSplitter);

					// Get Vector for currently selected values
					while (stokAttrValues.hasMoreTokens()) {
						strToken = stokAttrValues.nextToken();
						if (!strRangesList.contains(strToken)) {
							vExistingValues.addElement(strToken);
						}
					}
					iNextNum = vExistingValues.size() + 1;
				}

				String strInitialArrayString = "";
				String strSeperator = "";

				for (int iLoop = 0; iLoop < vExistingValues.size(); iLoop++) {
					String strValue = (String) vExistingValues.get(iLoop);
					strInitialArrayString += strSeperator + "" + strValue;
					strSeperator = "~";
				}

				int iIncrementer = 1;
				strBufferOutput.append("<table>\n");
				while (itr.hasNext()) {
					strOptionRange = (String) itr.next();
					strOptionRangeI18 = (String) itrI18.next();

					if (null != strOptionRange && !"".equals(strOptionRange) && !strOptionRange.equals(AuditConstants.STR_OTHER)) {
						strBufferOutput.append("<tr><td>");
						strBufferOutput.append("<input type=\"checkbox\" name='" + strActualName + iIncrementer + "' id='" + strActualName
								+ iIncrementer + "' value ='" + strOptionRange + "'");
						// Setting the existing Value in Edit screen
						if (strAuditSubsystem.indexOf(strOptionRange) != -1)// ||
																			// vExistingValues.contains(
						// strOptionRange ))
						{
							strBufferOutput.append(" checked=checked ");
						}
						strBufferOutput.append(">" + strOptionRangeI18 + "</input></td></tr>");
						iIncrementer++;
					}
				}
				strBufferOutput.append("</table>\n");
				strBufferOutput.append("<input type=\"hidden\" name='" + strActualName + "' id='" + strActualName + "' value=\"--\" />\n");
				strBufferOutput.append("<input type=\"hidden\" id=\"SUB_Count\" name=\"SUB_Count\" value=\"" + (iIncrementer - 1) + "\" />\n");

				// add prefix to make it different than the actual attribute
				// name
				strActualName = AuditConstants.STR_SUBSTEMPREFIX + strActualName;

				strBufferOutput.append("<table>\n");
				strBufferOutput.append("<input type=\"hidden\" id=\"count_" + strActualName + "\" name=\"count_" + strActualName + "\" value=\""
						+ iNextNum + "\" />\n");
				strBufferOutput.append("<input type=\"hidden\" id=\"ARR_" + strActualName + "\" name=\"ARR_" + strActualName + "\" value='"
						+ strInitialArrayString + "' />\n");
				strBufferOutput.append("<input type=\"hidden\" id=\"" + strActualName + "\"  name=\"" + strActualName + "\" />");

				strBufferOutput.append("<tr><td>" + Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.EnterScopeItemName")
						+ ": <input type=\"text\" id=\"display_" + strActualName + "\"  name=\"display_" + strActualName
						+ "\" onkeypress=\"return handleEnter();\" /> <button type=\"button\" OnClick=\"javascript:addAuditorMultiple('"
						+ strActualName + "');\">" + Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Add")
						+ "</button></td></tr>\n");
				strBufferOutput.append("<tr><td ID=\"inputTableCell\"><div id=\"anchorDiv_" + strActualName + "\">\n");

				for (int iLoop = 0; iLoop < vExistingValues.size(); iLoop++) {
					String strValue = (String) vExistingValues.get(iLoop);
					String sDivName = "Auditor_" + iLoop + "_Div_" + strActualName;
					strBufferOutput.append("<div id=\"" + sDivName + "\">\n");
					strBufferOutput.append("&nbsp<img src=\"images/iconSmallPerson.gif\" alt=\"\" name=\'"
							+ XSSUtil.encodeForHTMLAttribute(context, strValue) + "\'/>" + XSSUtil.encodeForHTMLAttribute(context, strValue)
							+ "<a href=\"javascript:;\" onclick=\"removeAuditor('" + XSSUtil.encodeForJavaScript(context, sDivName) + "','"
							+ XSSUtil.encodeForJavaScript(context, strActualName) + "','" + bReturn + "');\">&nbsp;"
							+ Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Button.Remove") + "</a>\n");
					strBufferOutput.append("</div>\n");
				}

				strBufferOutput.append("</div>\n");
				strBufferOutput.append("</td>\n");
				strBufferOutput.append("</tr>\n");
				strBufferOutput.append("</table>\n");
				strBufferOutput.append("<input type=\"hidden\" name=\"Final_" + strActualName + "\" value='" + strInitialArrayString + "' />");
				strBufferOutput.append("\n");
				strBufferOutput.append("\n");
				strBufferOutput.append("\n");
			}
			else {
				doAuditObject = DomainObject.newInstance(context, strObjectId);
				// Getting the Audit Type value
				strAuditSubsystem = doAuditObject.getAttributeValue(context, strActualName);

				String[] split = strAuditSubsystem.split(",");
				// String keyBase = "emxFramework.Range.Audit_Sub-System.";

				StringBuilder returnStr = new StringBuilder();

				for (String subSys : split) {
					String value = i18nNow.getRangeI18NString(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM), subSys,
							context.getSession().getLanguage());

					if (returnStr.length() == 0)
						returnStr.append(value);

					else
						returnStr.append("," + value);
				}

				strBufferOutput.append(returnStr);
			}
		}
		catch (Exception objException) {
			objException.printStackTrace();
			throw objException;
		}
		return strBufferOutput.toString();
	}

	public Vector getAuditSubSystemI18(Context context, String[] args) throws Exception {
		HashMap mapProgram = (HashMap) JPO.unpackArgs(args);
		// HashMap mapParamList = (HashMap) mapProgram.get("paramList");

		MapList objectList = (MapList) mapProgram.get("objectList");
		String strActualName = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM);
		Vector returnVec = new Vector(objectList.size());

		for (int i = 0; i < objectList.size(); i++) {
			Object obj = objectList.get(i);
			String temp[] = (obj.getClass().getName()).split("\\.");
			String name = temp[temp.length - 1];
			String strObjectId = "";

			if (name.compareTo("Hashtable") == 0)
				strObjectId = (String) ((Hashtable) objectList.get(i)).get("id");

			else if (name.compareTo("HashMap") == 0)
				strObjectId = (String) ((HashMap) objectList.get(i)).get("id");

			DomainObject doAuditObject = DomainObject.newInstance(context, strObjectId);
			// Getting the Audit Type value
			String strAuditSubsystem = doAuditObject.getAttributeValue(context, strActualName);

			String[] split = strAuditSubsystem.split(",");
			String keyBase = "emxFramework.Range.Audit_Sub-System.";

			StringBuilder returnStr = new StringBuilder();

			for (String subSys : split) {
				String key = (keyBase + subSys.trim()).replace(' ', '_');
				String value = i18nNow.getI18nString(key, "emxFrameworkStringResource", context.getSession().getLanguage());

				if (value.compareTo(key) == 0)
					value = subSys;

				if (returnStr.length() == 0)
					returnStr.append(value);

				else
					returnStr.append("," + value);
			}

			returnVec.add(returnStr.toString());

		}
		return returnVec;
	}

	/**
	 * get the HTML text for the users with the roles assigned Audit admin and
	 * Audit Lead
	 * 
	 * @param context
	 * @param args
	 * @return string (HTML formatted output)
	 * @throws Exception
	 */
	public String getAuditOwner(Context context, String[] args) throws Exception {
		StringBuilder strBufferOutput = new StringBuilder();
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap mapRequest = (HashMap) programMap.get("requestMap");
			String strMode = (String) mapRequest.get("mode");// create/edit/search
			// mode

			String strAttribute = DomainConstants.SELECT_OWNER;
			String strObjectId = (String) mapRequest.get(AuditConstants.OBJECT_ID);

			String strSelectedOwner = DomainConstants.EMPTY_STRING;
			if (!Helper.isNullOrEmpty(strObjectId)) {
				DomainObject doObject = DomainObject.newInstance(context, strObjectId);
				strSelectedOwner = doObject.getOwner(context).getName();
			}
			else {
				strSelectedOwner = context.getUser();
			}

			if (null != strMode) {
				Role roleAuditLead = new Role(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITLEAD));
				Role roleAuditAdmin = new Role(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN));
				Role roleAuthor = new Role(AuditConstants.ROLE_VPLM_CREATOR);
				Role roleLeader = new Role(AuditConstants.ROLE_VPLM_PROJECT_LEADER);
				RoleList childAuthorRoles = roleAuthor.getChildren(context, true);
				RoleList childLeaderRoles = roleLeader.getChildren(context, true);

				UserList userAuditLeadList = roleAuditLead.getAssignments(context);
				UserList userAuditAdminList = roleAuditAdmin.getAssignments(context);
				UserList userAuthorList = roleAuthor.getAssignments(context, false);
				UserList userLeaderList = roleLeader.getAssignments(context, false);
				userAuditLeadList.addAll(userAuditAdminList);
				userAuditLeadList.addAll(userAuthorList);
				userAuditLeadList.addAll(userLeaderList);
				for (Role role : childAuthorRoles) {
					UserList userList = role.getAssignments(context, true);
					userAuditLeadList.addAll(userList);
				}
				for (Role role : childLeaderRoles) {
					UserList userList = role.getAssignments(context, true);
					userAuditLeadList.addAll(userList);
				}

				HashSet<String> hsUnique = new HashSet<String>();
				Iterator itrUnique = userAuditLeadList.iterator();

				while (itrUnique.hasNext()) {
					hsUnique.add(((User) itrUnique.next()).getName());
				}

				strBufferOutput.append(" <select name='").append(strAttribute).append("' id='");
				strBufferOutput.append(strAttribute).append("' >");

				for (Iterator iter = hsUnique.iterator(); iter.hasNext();) {
					String strPersonName = (String) iter.next();
					strBufferOutput.append("<option value ='").append(strPersonName).append("'");

					if (strSelectedOwner.equalsIgnoreCase(strPersonName)) {
						strBufferOutput.append(" selected ");
					}
					strBufferOutput.append('>').append(PersonUtil.getFullName(context, strPersonName)).append(" ( ");
					strBufferOutput.append(strPersonName).append(" ) </option>");
				}

				strBufferOutput.append("</select>");
			}
			else {
				strBufferOutput.append(strSelectedOwner);
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			System.err.println("e.getMessage()" + e.getMessage());
		}
		return strBufferOutput.toString();
	}

	public Map<?, ?> getFieldAuditOwnerRange(Context context, String[] args) throws AuditException {
		try {
			Map<String, StringList> returnMap = new HashMap();
			Role roleAuditLead = new Role(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITLEAD));
			Role roleAuditAdmin = new Role(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN));
			Role roleAuthor = new Role(AuditConstants.ROLE_VPLM_CREATOR);
			Role roleLeader = new Role(AuditConstants.ROLE_VPLM_PROJECT_LEADER);
			RoleList childAuthorRoles = roleAuthor.getChildren(context, true);
			RoleList childLeaderRoles = roleLeader.getChildren(context, true);

			UserList userAuditLeadList = roleAuditLead.getAssignments(context);
			UserList userAuditAdminList = roleAuditAdmin.getAssignments(context);
			UserList userAuthorList = roleAuthor.getAssignments(context, false);
			UserList userLeaderList = roleLeader.getAssignments(context, false);
			userAuditLeadList.addAll(userAuditAdminList);
			userAuditLeadList.addAll(userAuthorList);
			userAuditLeadList.addAll(userLeaderList);
			for (Role role : childAuthorRoles) {
				UserList userList = role.getAssignments(context, true);
				userAuditLeadList.addAll(userList);
			}
			for (Role role : childLeaderRoles) {
				UserList userList = role.getAssignments(context, true);
				userAuditLeadList.addAll(userList);
			}

			StringBuilder contextUserName = new StringBuilder();
			String strContextUserName = context.getUser();
			contextUserName.append(PersonUtil.getFullName(context, strContextUserName)).append(" (").append(strContextUserName).append(")");
			StringList fullUserNames = new StringList();
			StringList userNames = new StringList();
			for (User user : userAuditLeadList) {
				String username = user.getName();
				StringBuilder fullName = new StringBuilder();
				fullName.append(PersonUtil.getFullName(context, username)).append(" (").append(username).append(")");
				if (!userNames.contains(username)) {
					fullUserNames.add(fullName.toString());
					userNames.add(username);
				}
			}

			int contextUserIndex = userNames.indexOf(context.getUser());
			userNames.remove(contextUserIndex);
			userNames.add(0, context.getUser());

			int index = fullUserNames.indexOf(contextUserName.toString());
			fullUserNames.remove(index);
			fullUserNames.add(0, contextUserName.toString());

			returnMap.put(AuditConstants.FIELD_CHOICES, userNames);
			returnMap.put(AuditConstants.FIELD_DISPLAY_CHOICES, fullUserNames);
			return returnMap;
		}
		catch (Exception e) {
			throw new AuditException(e);
		}
	}

	/**
	 * Update value.
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @throws Exception
	 *             the exception
	 */
	public void UpdateValue(Context context, String[] args) throws Exception {
		// String strReturnValue = "";
		HashMap programMap = (HashMap) JPO.unpackArgs(args);
		HashMap requestMap = (HashMap) programMap.get("requestMap");
		HashMap fieldMap = (HashMap) programMap.get("fieldMap");
		HashMap settingsMap = (HashMap) fieldMap.get("settings");
		HashMap paramMap = (HashMap) programMap.get("paramMap");
		String sAttrValues[] = (String[]) requestMap.get(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITREAUDIT));
		String strAuditReAuditValue = null;
		if (sAttrValues != null) {
			strAuditReAuditValue = sAttrValues[0];
		}
		// String strAuditReAuditValue = (String)
		// requestMap.get(${CLASS:AuditConstants}.ATTR_AUDITREAUDIT);
		String strObjectid = (String) paramMap.get("objectId");
		DomainObject doObject = DomainObject.newInstance(context, strObjectid);
		String strAttributeName = (String) settingsMap.get("IW_Attr_Name");
		String strNewValue = (String) paramMap.get("New Value");
		if (strNewValue.equalsIgnoreCase("Yes")) {
			doObject.setAttributeValue(context, strAttributeName, "Yes");
		}
		else {
			doObject.setAttributeValue(context, strAttributeName, "No");
		}

		if (null != strAuditReAuditValue && !"".equals(strAuditReAuditValue)) {
			doObject.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITREAUDIT), strAuditReAuditValue);
		}

	}

	/**
	 * get the HTML for audit summary and score edit and view . this displays
	 * Audit Sub-system text and below that two fields for summary and score.
	 * 
	 * @param context
	 * @param args
	 * @return String
	 * @throws Exception
	 */
	public String getAuditSummaryAndScore(Context context, String[] args) throws Exception {

		HashMap programMap = (HashMap) JPO.unpackArgs(args);
		HashMap mapRequest = (HashMap) programMap.get("requestMap");
		// HashMap mapField = (HashMap) programMap.get("fieldMap");
		// Map mapSettings = (Map) mapField.get("settings");
		String strObjectId = (String) mapRequest.get("objectId");
		String strmode = (String) mapRequest.get("mode");
		StringBuffer strBufferOutput = new StringBuffer();

		List listSubsystem = new ArrayList();
		Map mapAuditScore = new HashMap();
		Map mapAuditSummary = new HashMap();
		String strSubsystemName = "";

		StringList sListSelects = new StringList();
		sListSelects.add(DomainConstants.SELECT_ID);
		// sListSelects.add(AuditConstants.SELECT_AUDITSUBSYSTEMSUMMARY);
		sListSelects.add(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITSUBSYSTEMSUMMARY)));
		// sListSelects.add(AuditConstants.SELECT_AUDITSUBSYSTEMSCORE);
		sListSelects.add(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITSUBSYSTEMSCORE)));
		StringList sListRelSelects = new StringList();
		// sListRelSelects.add(AuditConstants.SELECT_SUBSYSTEM);
		sListRelSelects.add(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM)));

		int iNextNum = 1;
		try {

			// get the already stored values
			if (null != strObjectId && !"".equals(strObjectId)) {
				DomainObject doObject = DomainObject.newInstance(context, strObjectId);
				String strSubSystem = doObject.getAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM));
				String strSubstring = "";

				if (null != strSubSystem && !"".equals(strSubSystem)) {
					StringTokenizer strToken = new StringTokenizer(strSubSystem, ",");
					while (strToken.hasMoreTokens()) {
						strSubstring = (String) strToken.nextToken();
						listSubsystem.add(strSubstring);
					}
				}

				Map mapElement = null;
				String strSummary = "";
				String strScore = "";
				// Getting the related Audit
				MapList mlRelatedAuditScoreCard = doObject.getRelatedObjects(context,
						PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSCORECARD),
						PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDITSCORECARD), false, true, 1, sListSelects,
						sListRelSelects, null, "", null, null, null);

				for (Iterator iter = mlRelatedAuditScoreCard.iterator(); iter.hasNext();) {
					mapElement = (Map) iter.next();
					String strSubstringSelectable = "attribute[" + PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM) + "]";
					strSubstring = (String) mapElement.get(strSubstringSelectable);
					// strSummary = (String)
					// mapElement.get(AuditConstants.SELECT_AUDITSUBSYSTEMSUMMARY);
					strSummary = (String) mapElement.get(
							DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITSUBSYSTEMSUMMARY)));
					// strScore = (String)
					// mapElement.get(AuditConstants.SELECT_AUDITSUBSYSTEMSCORE);
					strScore = (String) mapElement.get(
							DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITSUBSYSTEMSCORE)));

					if (null != strSummary) {
						mapAuditSummary.put(strSubstring, strSummary);
					}
					if (null != strScore) {
						mapAuditScore.put(strSubstring, strScore);
					}
				}
			}

			String language = context.getSession().getLanguage();

			String i18nScore = Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Score");
			String i18nSummary = Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Summary");

			if (strmode != null && strmode.equalsIgnoreCase("edit")) {
				// start table
				strBufferOutput.append("<table>");

				for (Iterator iter = listSubsystem.iterator(); iter.hasNext();) {
					strSubsystemName = (String) iter.next();
					String i18nSubSystemName = i18nNow.getRangeI18NString(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM),
							strSubsystemName, language);

					// creating the first row
					// display subsystem name
					strBufferOutput.append("<tr>");
					strBufferOutput.append("<td colspan=\"20\" class=\"label\">" + i18nSubSystemName + "</td>");
					strBufferOutput.append("<input type=\"hidden\" id=\"subsystem" + iNextNum + "\" name=\"subsystem" + iNextNum + "\" value=\""
							+ strSubsystemName + "\" />\n");
					strBufferOutput.append("</tr>");
					// display labels
					strBufferOutput.append("<tr>");
					strBufferOutput.append("<td> </td>");
					strBufferOutput.append("<td class=\"label\" > " + i18nSummary + " </td>");
					// strBufferOutput.append("&nbsp;&nbsp;&nbsp;");
					strBufferOutput.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </td>");
					strBufferOutput.append("<td class=\"label\" > " + i18nScore + " </td>");
					strBufferOutput.append("</tr>\n");
					// making text boxes for summary and score
					strBufferOutput.append("<tr>");
					strBufferOutput.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>");
					strBufferOutput.append("<td class=\"inputfield\"><textarea cols=\"30\" rows=\"5\" name=\"Summary" + iNextNum + "\" >");
					if (!"".equals(strSubsystemName) && mapAuditSummary.containsKey(strSubsystemName)) {
						strBufferOutput.append((String) mapAuditSummary.get(strSubsystemName));
					}
					strBufferOutput.append("</textarea></td>");
					strBufferOutput.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </td>");
					strBufferOutput.append("<td class=\"inputfield\"><input type=\"text\" name=\"Score" + iNextNum
							+ "\" size=2 maxlength=2 onKeyUp=\"javascript:checkForDecimal('Score" + iNextNum + "')\" ");
					if (!"".equals(strSubsystemName) && mapAuditScore.containsKey(strSubsystemName)) {
						strBufferOutput.append(" value ='" + (String) mapAuditScore.get(strSubsystemName) + "'");
					}
					strBufferOutput.append("></td>");
					strBufferOutput.append("</tr><tr></tr>\n");
					// increment incrementer
					iNextNum++;
				} // for ends here
					// creating the hidden field for keeping count value
				strBufferOutput.append("<input type=\"hidden\" id=\"count\" name=\"count\" value=\"" + (iNextNum - 1) + "\" />\n");
				strBufferOutput.append("</table>"); // table end
			} // if ends here
			else // show in view only mode
			{
				// add style sheet
				/*
				 * strBufferOutput.append("<script type=\"text/javascript\">");
				 * strBufferOutput.append("addStyleSheet(\"iwCommonStyles\");");
				 * strBufferOutput.append("</script>");
				 */
				strBufferOutput.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"../common/styles/iwCommonStyles.css\" />");
				// start table
				strBufferOutput.append("<table>");

				for (Iterator iter = listSubsystem.iterator(); iter.hasNext();) {
					strSubsystemName = (String) iter.next();
					String i18nSubSystemName = i18nNow.getRangeI18NString(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM),
							strSubsystemName, language);

					// creating the first row
					// display subsystem name
					strBufferOutput.append("<tr>");
					strBufferOutput.append("<td colspan=\"20\" class=\"label\">" + i18nSubSystemName + "</td>");
					strBufferOutput.append("</tr>");
					// display labels
					strBufferOutput.append("<tr>");
					// strBufferOutput.append("<td> </td>");
					strBufferOutput.append("<td class=\"label\" >&nbsp;&nbsp; " + i18nSummary + "&nbsp;&nbsp;</td>");
					strBufferOutput.append("<td class=\"label\" >&nbsp;&nbsp; " + i18nScore + "&nbsp;&nbsp;</td>");
					strBufferOutput.append("</tr>");
					// making text boxes for summary and score
					strBufferOutput.append("<tr>");
					// strBufferOutput.append("<td> </td>");
					strBufferOutput.append("<td>");
					if (!"".equals(strSubsystemName) && mapAuditSummary.containsKey(strSubsystemName)) {
						strBufferOutput.append((String) mapAuditSummary.get(strSubsystemName));
					}
					else {
						strBufferOutput.append("-");
					}
					strBufferOutput.append("</td>");
					// strBufferOutput.append("<td align=\"center\" >");
					strBufferOutput.append("<td class=\"alignCenter\" >");
					if (!"".equals(strSubsystemName) && mapAuditScore.containsKey(strSubsystemName)) {
						strBufferOutput.append((String) mapAuditScore.get(strSubsystemName));
					}
					else {
						strBufferOutput.append("-");
					}
					strBufferOutput.append("</td>");
					strBufferOutput.append("</tr>");
					strBufferOutput.append("<tr></tr>");
					// increment incrementer
					iNextNum++;
				} // for ends here

				strBufferOutput.append("</table>"); // table end
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return strBufferOutput.toString();
	}

	/**
	 * Updates the values for the attribute Regulatory Requirement Value is
	 * formed as (type,name,reference) & its multiples seperated by seperaotr |
	 * 
	 * @param context
	 * @param args
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.PostProcessCallable
	public void updateAuditScoreCard(Context context, String[] args) throws Exception {

		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);

			HashMap paramMap = (HashMap) programMap.get("paramMap");

			HashMap mapRequest = (HashMap) programMap.get("requestMap");
			// HashMap mapField = (HashMap) programMap.get("fieldMap");
			// Map mapSettings = (Map) mapField.get("settings");
			// String strattributename = (String) mapSettings.get("Admin Type");

			String strObjectId = (String) paramMap.get("objectId");
			String strOverallRating = (String) paramMap.get(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITOVERALLRATING));

			// String strmode = (String)paramMap.get("mode");
			StringList sListSelects = new StringList();
			sListSelects.add(DomainConstants.SELECT_ID);
			// sListSelects.add(AuditConstants.SELECT_AUDITSUBSYSTEMSUMMARY);
			sListSelects.add(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITSUBSYSTEMSUMMARY)));
			// sListSelects.add(AuditConstants.SELECT_AUDITSUBSYSTEMSCORE);
			sListSelects.add(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITSUBSYSTEMSCORE)));
			StringList sListRelSelects = new StringList();
			// sListRelSelects.add(AuditConstants.SELECT_SUBSYSTEM);
			sListRelSelects.add(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM)));

			String[] strTemp;
			String strCount = "";
			Object objCount = mapRequest.get("count");

			if (objCount instanceof String) {
				strCount = (String) mapRequest.get("count");
			}
			else {
				strTemp = (String[]) mapRequest.get("count");
				strCount = strTemp[0];
			}
			Object objSummary;
			Object objScore;
			// it can't be blank
			int iCount = Integer.parseInt(strCount);

			String strSummary = "";
			String strScore = "";
			String strSubSystem = "";
			// get the value and append it with seperator |
			for (int i = 1; i <= iCount; i++) {
				// get Summary
				objSummary = mapRequest.get("Summary" + i);
				// get score
				objScore = mapRequest.get("Score" + i);
				if (null != objSummary && !"".equals(objSummary)) {
					if (objSummary instanceof String) {
						strSummary = (String) mapRequest.get("Summary" + i);
					}
					else {
						strTemp = (String[]) mapRequest.get("Summary" + i);
						strSummary = strTemp[0];
					}

					if (objScore instanceof String) {
						strScore = (String) mapRequest.get("Score" + i);
					}
					else {
						strTemp = (String[]) mapRequest.get("Score" + i);
						strScore = strTemp[0];
					}

					objScore = mapRequest.get("subsystem" + i);

					if (objScore instanceof String) {
						strSubSystem = (String) mapRequest.get("subsystem" + i);
					}
					else {
						strTemp = (String[]) mapRequest.get("subsystem" + i);
						strSubSystem = strTemp[0];
					}

					DomainObject doObject = DomainObject.newInstance(context, strObjectId);
					// String strWhere = AuditConstants.SELECT_SUBSYSTEM +
					// " == '" + strSubSystem + "'";
					String strWhere = DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM))
							+ " == '" + strSubSystem + "'";
					// Getting the related Audit
					MapList mlRelatedAuditScoreCard = doObject.getRelatedObjects(context,
							PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSCORECARD),
							PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDITSCORECARD), false, true, 1, sListSelects,
							sListRelSelects, null, strWhere, null, null, null);

					Map mapElement = null;
					String strAuditScoreId = "";
					DomainObject doAuditScore = null;
					if (!mlRelatedAuditScoreCard.isEmpty()) {
						for (Iterator iter = mlRelatedAuditScoreCard.iterator(); iter.hasNext();) {
							mapElement = (Map) iter.next();
							strAuditScoreId = (String) mapElement.get(DomainConstants.SELECT_ID);
							doAuditScore = DomainObject.newInstance(context, strAuditScoreId);

							doAuditScore.setAttributeValue(context,
									PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITSUBSYSTEMSUMMARY), strSummary);
							doAuditScore.setAttributeValue(context,
									PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITSUBSYSTEMSCORE), strScore);
						}
					}
					else {
						// create audit score card object
						createAuditScoreCardObject(context, strSubSystem, strSummary, strScore, strObjectId);
					}
				}
			}

			// update the Overall Rating value of an audit if its not null &
			// empty
			if (null != strOverallRating && !"".equals(strOverallRating)) {
				DomainObject newObj = DomainObject.newInstance(context, strObjectId);
				newObj.openObject(context);
				newObj.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITOVERALLRATING),
						strOverallRating);
				newObj.closeObject(context, true);
			}

		}
		catch (Exception ex) {
			ex.printStackTrace();
			System.err.println("Exception Occured..." + ex.toString());
		}
	}

	/**
	 * It creates an object audit score card and connect that attribute to
	 * Parent Audit Object. It also sets Relationship attributes values.
	 * 
	 * @param context
	 * @param strSubSystem
	 * @param strSummary
	 * @param strScore
	 * @param parentAuditId
	 * @throws Exception
	 */
	public static void createAuditScoreCardObject(Context context, String strSubSystem, String strSummary, String strScore, String parentAuditId)
			throws Exception {
		try {
			// Create autonamed object
			String sNewObjId = FrameworkUtil.autoName(context, AuditConstants.REG_TYPE_AUDITSCORECARD, "", AuditConstants.REG_POLICY_AUDITSCORECARD,
					"");
			DomainObject newObj = DomainObject.newInstance(context, sNewObjId);
			newObj.openObject(context);
			// set audit score card attribute values
			newObj.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITSUBSYSTEMSUMMARY), strSummary);
			newObj.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITSUBSYSTEMSCORE), strScore);
			// create relationship type
			RelationshipType rel_AuditScore = new RelationshipType(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSCORECARD));

			Map mapRelAttrs = new HashMap();
			mapRelAttrs.put(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_SUBSYSTEM), strSubSystem);

			// connect object with the parent Audit Object
			DomainRelationship rel_audit = newObj.addRelatedObject(context, rel_AuditScore, true, parentAuditId);
			// set relationship attribute values
			rel_audit.setAttributeValues(context, mapRelAttrs);

			newObj.closeObject(context, true);

			// object created and connected successfully
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Thie method creates the field Related Schedule on the Audit properties
	 * page.
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the field related schedule
	 * 
	 * @throws Exception
	 *             the exception
	 */
	public String getFieldRelatedSchedule(Context context, String[] args) throws Exception {
		StringBuilder strBufferOutput = new StringBuilder();
		try {
			HashMap mapProgram = (HashMap) JPO.unpackArgs(args);
			HashMap mapRequest = (HashMap) mapProgram.get("requestMap");
			// HashMap mapField = (HashMap) mapProgram.get("fieldMap");
			String strObjectId = (String) mapRequest.get("objectId");
			Map mapElement;
			DomainObject doAuditObject;
			String strResultObjectId = "";
			DomainObject doObject = new DomainObject();
			if (strObjectId == null) {
				strObjectId = "";
			}
			// Setting the attributes to be selected
			StringList sListSelects = new StringList();
			sListSelects.add(DomainConstants.SELECT_ID);
			sListSelects.add(DomainConstants.SELECT_NAME);
			if (strObjectId != null && !strObjectId.equals("")) {
				doAuditObject = DomainObject.newInstance(context, strObjectId);
				// Getting the connected Audit Schedules
				MapList mlScheduleObjects = doAuditObject.getRelatedObjects(context,
						PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSCHEDULE), "*", true, false, 1, sListSelects, null, null,
						"", null, null, null);
				if (null != mlScheduleObjects && mlScheduleObjects.size() > 0) {
					for (Iterator iter = mlScheduleObjects.iterator(); iter.hasNext();) {
						mapElement = (Map) iter.next();
						strResultObjectId = (String) mapElement.get(DomainConstants.SELECT_ID);
						doObject = DomainObject.newInstance(context, strResultObjectId);

						StringBuilder objectLink = new StringBuilder();
						objectLink.append("<a href=\"JavaScript:showModalDialog('../common/emxTree.jsp?");
						objectLink.append("&emxSuiteDirectory=LQIAudit&suiteKey=LQIAudit&objectId=");
						objectLink.append(XSSUtil.encodeForJavaScript(context, strResultObjectId));
						objectLink.append("&relId=null', '', '', true, 'Medium')\" class=\"object\">");
						objectLink.append(doObject.getInfo(context, DomainConstants.SELECT_NAME));
						objectLink.append("</a>");

						strBufferOutput.append(objectLink);
						strBufferOutput.append("<br>");
					}
				}

			}
			else {
				strBufferOutput.append("");
			}
			// }
		}
		catch (Exception objException) {
			objException.printStackTrace();
			throw objException;
		}
		return strBufferOutput.toString();
	}

	/**
	 * This method creates the field Audited Items on the Audit Summary Report
	 * form .
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the field Audited Items
	 * 
	 * @throws AuditException
	 *             the exception
	 */
	public String getFieldAuditedItems(Context context, String[] args) throws AuditException {
		try {
			StringBuilder strBufferOutput = new StringBuilder();
			HashMap mapProgram = (HashMap) JPO.unpackArgs(args);
			HashMap mapRequest = (HashMap) mapProgram.get("requestMap");
			String strObjectId = (String) mapRequest.get("objectId");
			Map mapElement;
			DomainObject doAuditObject;
			String strResultObjectId = "";
			DomainObject doObject = new DomainObject();
			if (strObjectId == null) {
				strObjectId = "";
			}
			StringList sListSelects = new StringList();
			sListSelects.add(DomainConstants.SELECT_ID);
			sListSelects.add(DomainConstants.SELECT_NAME);
			if (!Helper.isNullOrEmpty(strObjectId)) {
				doAuditObject = DomainObject.newInstance(context, strObjectId);
				// Getting the connected Audited Items
				List<Map<?, ?>> relatedAuditedItems = QueryUtil.getRelatedObjects(context, doAuditObject, AuditConstants.SYM_REL_RELATED_ITEMS, "*",
						sListSelects, null, false, true, (short) 0, DomainObject.EMPTY_STRING, DomainObject.EMPTY_STRING);
				// MapList mlScheduleObjects =
				// doAuditObject.getRelatedObjects(context,
				// PropertyUtil.getSchemaProperty(context,
				// AuditConstants.SYM_REL_AUDITSCHEDULE), "*", true, false, 1,
				// sListSelects, null, null,
				// "", null, null, null);
				if (!Helper.isNullOrEmpty(relatedAuditedItems)) {
					for (Iterator iter = relatedAuditedItems.iterator(); iter.hasNext();) {
						mapElement = (Map) iter.next();
						strResultObjectId = (String) mapElement.get(DomainConstants.SELECT_ID);
						doObject = DomainObject.newInstance(context, strResultObjectId);

						StringBuilder objectLink = new StringBuilder();
						objectLink.append("<a href=\"JavaScript:showModalDialog('../common/emxTree.jsp?");
						objectLink.append("&emxSuiteDirectory=LQIAudit&suiteKey=LQIAudit&objectId=");
						objectLink.append(XSSUtil.encodeForJavaScript(context, strResultObjectId));
						objectLink.append("&relId=null', '', '', true, 'Medium')\" class=\"object\">");
						objectLink.append(doObject.getInfo(context, DomainConstants.SELECT_NAME));
						objectLink.append("</a>");

						strBufferOutput.append(objectLink);
						strBufferOutput.append("<br>");
					}
				}
			}
			else {
				strBufferOutput.append("");
			}
			return strBufferOutput.toString();
		}
		catch (Exception e) {
			throw new AuditException(e);
		}

	}

	/**
	 * It generates HTML text to display the User's name Values in form This is
	 * to set value in the table
	 * 
	 * @param context
	 * @param args
	 * @return Vector
	 * @throws Exception
	 */
	public static Vector getTableAuditorNames(Context context, String[] args) throws Exception {
		Vector vColumnValues = new Vector();
		try {
			// Getting the parameters
			HashMap mapProgram = (HashMap) JPO.unpackArgs(args);
			MapList mapObjectList = (MapList) mapProgram.get("objectList");
			String strName = "";
			String strId = "";
			String strDisplayName = "";
			Map element;

			for (Iterator iter = mapObjectList.iterator(); iter.hasNext();) {
				element = (Map) iter.next();
				// Getting the name parameter
				strName = (String) element.get("name");
				if (null != strName && !"".equals(strName)) {
					strDisplayName = PersonUtil.getFullName(context, strName);
					// Getting the full name and adding that to Vector.
					vColumnValues.add(strDisplayName);

				}
			}
		}
		catch (Exception objException) {
			objException.printStackTrace();
			throw objException;
		}
		return vColumnValues;
	}

	/**
	 * This method updates the next scheduled audit date on the relationship
	 * Audit Schedule.
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the map
	 * 
	 * @throws Exception
	 *             the exception
	 */
	public Map updateNextScheduledAudit(Context context, String[] args) throws Exception {
		HashMap returnMap = new HashMap();

		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap paramMap = (HashMap) programMap.get("paramMap");
			String strRelId = (String) paramMap.get("relId");
			String strNewValue = (String) paramMap.get("New Value");
			DomainRelationship domRel = new DomainRelationship(strRelId);
			domRel.setAttributeValue(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_NEXTSCHEDULEDAUDIT), strNewValue);

		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return returnMap;

	}

	/**
	 * This method is to check for Create Request Access
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return true, if user has required Roles
	 */
	public boolean canDeleteAudit(Context context, String[] args) throws Exception {
		final String SELECT_TYPE_KIND_OF_AUDIT = AuditUtil.getTypeKindOfSelectable(context, AuditConstants.SYM_TYPE_AUDIT);
		final String SELECT_ATTRIBUTE_LEAD_AUDITOR = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_LEADAUDITOR);
		final String SELECT_ATTRIBUTE_AUDITORS = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_AUDITORS);
		final String SELECT_ATTRIBUTE_AUDITEES = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_AUDITAUDITEES);
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get(AuditConstants.OBJECT_ID);
			boolean showDelete = false;
			String strCurrentUser = context.getUser();
			// needs an user name
			String strCurrentOwner = strCurrentUser;
			// required full name of the user for matching
			strCurrentUser = PersonUtil.getFullName(context, strCurrentUser);

			if (!Helper.isNullOrEmpty(strObjectId)) {

				List<Map<?, ?>> lmObjectInfo = QueryUtil.getInfo(context, new String[] { strObjectId },
						Helper.stringList(DomainConstants.SELECT_OWNER, DomainObject.getAttributeSelect(SELECT_TYPE_KIND_OF_AUDIT),
								SELECT_ATTRIBUTE_LEAD_AUDITOR, SELECT_ATTRIBUTE_AUDITORS, SELECT_ATTRIBUTE_AUDITEES));

				if (!Helper.isNullOrEmpty(lmObjectInfo)) {
					Map<?, ?> mpObjectInfo = lmObjectInfo.get(0);
					if (!Helper.isNullOrEmpty(mpObjectInfo)) {
						String strAuditOwner = (String) mpObjectInfo.get(DomainConstants.SELECT_OWNER);
						String strTypeKindOfAudit = (String) mpObjectInfo.get(DomainObject.getAttributeSelect(SELECT_TYPE_KIND_OF_AUDIT));
						String strLeadAuditor = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_LEAD_AUDITOR);
						String strAuditors = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDITORS);
						String strAuditees = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDITEES);

						if (AuditConstants.STR_TRUE.equalsIgnoreCase(strTypeKindOfAudit)) {
							com.matrixone.apps.common.Person currUser = com.matrixone.apps.common.Person.getPerson(context);

							if (currUser.hasRole(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN))) {
								showDelete = true;
							}
							else if (strCurrentOwner.equals(strAuditOwner)) {
								showDelete = true;
							}
							else if (strCurrentUser.equals(AuditConstants.STR_TRUE.equalsIgnoreCase(strLeadAuditor))) {
								showDelete = true;
							}
							else if (strAuditOwner.length() == 0) {
								showDelete = true;
							}
							else {
								StringList sListAuditees = new StringList();
								StringList sListAuditors = new StringList();
								if (strAuditees != null && strAuditees.length() > 0) {
									sListAuditees = FrameworkUtil.split(strAuditees, ",");
									if (sListAuditees.contains(strCurrentUser)) {
										showDelete = true;
									}
								}

								if (strAuditors != null && strAuditors.length() > 0) {
									sListAuditors = FrameworkUtil.split(strAuditors, ",");
									if (sListAuditors.contains(strCurrentUser)) {
										showDelete = true;
									}
								}

							}
						}
					}
				}
			}

			return showDelete;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new AuditException(ex);
		}
	}

	/**
	 * Displays all the Audit based on the filter value.
	 * 
	 * @param context
	 * @param args
	 * @return MapList
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public MapList getTableQICAUDOpenAuditDashboard(Context context, String[] args) throws Exception {
		MapList objList = new MapList();
		try {
			Map<?, ?> programMap = (HashMap<?, ?>) JPO.unpackArgs(args);
			String strFilterValue = (String) programMap.get(AuditConstants.QIC_AUDIT_FILTER);
			String auditFilterRevisionOption = (String)programMap.get(AuditConstants.QIC_AUDIT_REVISION_FILTER);
			String whereExpression="";
			if(AuditConstants.QIC_CURRENT_REVISION.equalsIgnoreCase(auditFilterRevisionOption)) {
				whereExpression="revision==last";
			}
			switch (strFilterValue) {
			case AuditConstants.FILTER_VALUE_ALL_AUDITS:
				objList = getMyAudits(context, args);
				break;

			case AuditConstants.FILTER_VALUE_OPEN_AUDITS:
				objList = getMyAuditsOpen(context, args, whereExpression);
				break;

			case AuditConstants.FILTER_VALUE_PLAN:
				objList = getMyAuditsPlan(context, args, whereExpression);
				break;

			case AuditConstants.FILTER_VALUE_ACTIVE:
				objList = getMyAuditsActive(context, args, whereExpression);
				break;

			case AuditConstants.FILTER_VALUE_FINALIZATON:
				objList = getMyAuditsFinalization(context, args, whereExpression);
				break;

			case AuditConstants.FILTER_VALUE_RESOLUTION:
				objList = getMyAuditsResolution(context, args, whereExpression);
				break;

			case AuditConstants.FILTER_VALUE_FINAL_APPROVAL:
				objList = getMyAuditsFinalApproval(context, args, whereExpression);
				break;

			case AuditConstants.FILTER_VALUE_CLOSED:
				objList = getMyAuditsClosed(context, args, whereExpression);
				break;

			}

		}
		catch (Exception ex) {
			ex.printStackTrace();
		}
		return objList;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyAudits(Context context, String[] args) throws Exception {

		MapList auditSummary = new MapList();
		try {
			Map<?, ?> programMap = (HashMap<?, ?>) JPO.unpackArgs(args);
			Optional<String> auditFilterRevisionOption = Optional.ofNullable((String) programMap.get(AuditConstants.QIC_AUDIT_REVISION_FILTER));
			String strFilterValue = (String) programMap.get(AuditConstants.QIC_AUDIT_FILTER);
			String whereExpression="";
			if(AuditConstants.QIC_CURRENT_REVISION.equalsIgnoreCase(auditFilterRevisionOption.get())) {
				whereExpression="revision==last";
			}
			
			if (AuditConstants.FILTER_VALUE_ALL_AUDITS.equalsIgnoreCase(strFilterValue)) {
				auditSummary = getMyAuditsAll(context, args, whereExpression);
			}
			else if (AuditConstants.FILTER_VALUE_OPEN_AUDITS.equalsIgnoreCase(strFilterValue)) {
				auditSummary = getMyAuditsOpen(context, args, whereExpression);
			}
			else if (AuditConstants.FILTER_VALUE_PLAN.equalsIgnoreCase(strFilterValue)) {
				auditSummary = getMyAuditsPlan(context, args, whereExpression);
			}
			else if (AuditConstants.FILTER_VALUE_ACTIVE.equalsIgnoreCase(strFilterValue)) {
				auditSummary = getMyAuditsActive(context, args, whereExpression);
			}
			else if (AuditConstants.FILTER_VALUE_FINALIZATON.equalsIgnoreCase(strFilterValue)) {
				auditSummary = getMyAuditsFinalization(context, args, whereExpression);
			}
			else if (AuditConstants.FILTER_VALUE_RESOLUTION.equalsIgnoreCase(strFilterValue)) {
				auditSummary = getMyAuditsResolution(context, args, whereExpression);
			}
			else if (AuditConstants.FILTER_VALUE_FINAL_APPROVAL.equalsIgnoreCase(strFilterValue)) {
				auditSummary = getMyAuditsFinalApproval(context, args, whereExpression);
			}
			else if (AuditConstants.FILTER_VALUE_CLOSED.equalsIgnoreCase(strFilterValue)) {
				auditSummary = getMyAuditsClosed(context, args, whereExpression);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}
		return auditSummary;
	}

	/**
	 * Displays all the Audit based on conditions below;Irrespective of state
	 * Conditions to Display 1. Logged in user should be owner of the Audit. 2.
	 * Logged in user should be assignes as Audit Lead Auditor or Audit Auditees
	 * or Audit Auditors
	 * 
	 * @param context
	 * @param args
	 * @return MapList
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyAuditsAll(Context context, String[] args, String whereExpression) throws Exception {

		MapList objList = new MapList();
		try {
			StringList objSelects = new StringList(); // object select list.
			objSelects.addElement(DomainConstants.SELECT_ID);
			objSelects.addElement(DomainConstants.SELECT_NAME);
			objSelects.addElement(DomainConstants.SELECT_CURRENT);

			com.matrixone.apps.common.Person currUser = com.matrixone.apps.common.Person.getPerson(context);

			String strCurrentUserName = context.getUser();
			// Where condtions
			// String strWhere = "(owner =='" + context.getUser() + "' || "
			// + AuditConstants.SELECT_AUDITAUDITEES + " ~~ '*" +
			// strCurrentUserFullname + "*' || "
			// + AuditConstants.SELECT_LEADAUDITOR + "== '" +
			// strCurrentUserFullname + "' || "
			// + AuditConstants.SELECT_AUDITORS + "~~'*" +
			// strCurrentUserFullname + "*')";
			if(!Helper.isNullOrEmpty(whereExpression)) {
				whereExpression=whereExpression+" &&";	
			}
			String strWhere = "("+whereExpression+" (owner =='" + strCurrentUserName + "' || "
					+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES)) + " ~~ '*"
					+ strCurrentUserName + "*' || "
					+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR)) + "== '"
					+ strCurrentUserName + "' || "
					+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS)) + "~~'*"
					+ strCurrentUserName + "*'))";

			if (currUser.hasRole(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN))) {
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null, "",
						objSelects);
			}
			else {
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null, strWhere,
						objSelects);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}
		return objList;
	}

	/**
	 * Displays all the Audit in Plan state, based on conditions below;
	 * Conditions to Display 1. Logged in user should be owner of the Audit. 2.
	 * Logged in user should be assignes as Audit Lead Auditor or Audit Auditees
	 * or Audit Auditors
	 * 
	 * @param context
	 * @param args
	 * @return MapList
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyAuditsPlan(Context context, String[] args, String whereExpression) throws Exception {

		MapList objList = new MapList();
		try {
			StringList objSelects = new StringList(); // object select list.
			objSelects.addElement(DomainConstants.SELECT_ID);
			objSelects.addElement(DomainConstants.SELECT_NAME);
			objSelects.addElement(DomainConstants.SELECT_CURRENT);
			com.matrixone.apps.common.Person currUser = com.matrixone.apps.common.Person.getPerson(context);
			String strCurrentUserName = context.getUser();
			String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
			String STATE_PLAN = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT, AuditConstants.SYM_STATE_PLAN);

			// Where condtions for state wise view
			String strWhereState = "(" + DomainConstants.SELECT_CURRENT + " == " + STATE_PLAN + " )";

			if (currUser.hasRole(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN))) {
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null,
						strWhereState, objSelects);
			}
			else {
				// Where condtions
				// String strWhere = "(owner =='" + context.getUser() + "' || "
				// + AuditConstants.SELECT_AUDITAUDITEES + " ~~ '*" +
				// strCurrentUserFullname
				// + "*' || " + AuditConstants.SELECT_LEADAUDITOR + "== '" +
				// strCurrentUserFullname
				// + "' || " + AuditConstants.SELECT_AUDITORS + "~~'*" +
				// strCurrentUserFullname
				// + "*')";
				if(!Helper.isNullOrEmpty(whereExpression)) {
					whereExpression="&& "+whereExpression;	
				}
				String strWhere = "(owner =='" + context.getUser() + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES)) + " ~~ '*"
						+ strCurrentUserName + "*' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR)) + "== '"
						+ strCurrentUserName + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS)) + "~~'*"
						+ strCurrentUserName + "*'"
						+whereExpression+")";

				strWhere += "&&" + strWhereState;
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null, strWhere,
						objSelects);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}

		return objList;
	}

	/**
	 * Displays all the Audit in Active state, based on conditions below;
	 * Conditions to Display 1. Logged in user should be owner of the Audit. 2.
	 * Logged in user should be assignes as Audit Lead Auditor or Audit Auditees
	 * or Audit Auditors
	 * 
	 * @param context
	 * @param args
	 * @return MapList
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyAuditsActive(Context context, String[] args, String whereExpression) throws Exception {

		MapList objList = new MapList();
		try {

			StringList objSelects = new StringList(); // object select list.
			objSelects.addElement(DomainConstants.SELECT_ID);
			objSelects.addElement(DomainConstants.SELECT_NAME);
			objSelects.addElement(DomainConstants.SELECT_CURRENT);
			com.matrixone.apps.common.Person currUser = com.matrixone.apps.common.Person.getPerson(context);
			String strCurrentUserName = context.getUser();
			String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
			String STATE_ACTIVE = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT,
					AuditConstants.SYM_STATE_ACTIVE);

			// Where condtions for state wise view
			String strWhereState = "(" + DomainConstants.SELECT_CURRENT + " == " + STATE_ACTIVE + " )";

			if (currUser.hasRole(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN))) {
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null,
						strWhereState, objSelects);
			}
			else {
				// Where condtions to check attribute values
				// String strWhere = "(owner =='" + context.getUser() + "' || "
				// + AuditConstants.SELECT_AUDITAUDITEES + " ~~ '*" +
				// strCurrentUserFullname
				// + "*' || " + AuditConstants.SELECT_LEADAUDITOR + "== '" +
				// strCurrentUserFullname
				// + "' || " + AuditConstants.SELECT_AUDITORS + "~~'*" +
				// strCurrentUserFullname
				// + "*')";
				if(!Helper.isNullOrEmpty(whereExpression)) {
					whereExpression="&& "+whereExpression;	
				}
				String strWhere = "(owner =='" + context.getUser() + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES)) + " ~~ '*"
						+ strCurrentUserName + "*' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR)) + "== '"
						+ strCurrentUserName + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS)) + "~~'*"
						+ strCurrentUserName + "*')";
				strWhere += "&&" + strWhereState;
				strWhere +=whereExpression;
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null, strWhere,
						objSelects);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}

		return objList;
	}

	/**
	 * Displays all the Audit in Finalization state, based on conditions below;
	 * Conditions to Display 1. Logged in user should be owner of the Audit. 2.
	 * Logged in user should be assignes as Audit Lead Auditor or Audit Auditees
	 * or Audit Auditors
	 * 
	 * @param context
	 * @param args
	 * @return MapList
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyAuditsFinalization(Context context, String[] args, String whereExpression) throws Exception {

		MapList objList = new MapList();
		try {
			StringList objSelects = new StringList(); // object select list.
			objSelects.addElement(DomainConstants.SELECT_ID);
			objSelects.addElement(DomainConstants.SELECT_NAME);
			objSelects.addElement(DomainConstants.SELECT_CURRENT);
			com.matrixone.apps.common.Person currUser = com.matrixone.apps.common.Person.getPerson(context);
			String strCurrentUserName = context.getUser();
			String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
			String STATE_FINALIZATION = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT,
					AuditConstants.SYM_STATE_FINALIZATION);
			// Where condtions for state wise view
			String strWhereState = "(" + DomainConstants.SELECT_CURRENT + " == " + STATE_FINALIZATION + " )";

			if (currUser.hasRole(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN))) {
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null,
						strWhereState, objSelects);
			}
			else {
				// Where condtions to check attribute values
				// String strWhere = "(owner =='" + context.getUser() + "' || "
				// + AuditConstants.SELECT_AUDITAUDITEES + " ~~ '*" +
				// strCurrentUserFullname
				// + "*' || " + AuditConstants.SELECT_LEADAUDITOR + "== '" +
				// strCurrentUserFullname
				// + "' || " + AuditConstants.SELECT_AUDITORS + "~~'*" +
				// strCurrentUserFullname
				// + "*')";
				if(!Helper.isNullOrEmpty(whereExpression)) {
					whereExpression="&& "+whereExpression;	
				}
				String strWhere = "(owner =='" + context.getUser() + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES)) + " ~~ '*"
						+ strCurrentUserName + "*' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR)) + "== '"
						+ strCurrentUserName + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS)) + "~~'*"
						+ strCurrentUserName + "*')";

				strWhere += "&&" + strWhereState;
				strWhere += whereExpression;
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null, strWhere,
						objSelects);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}

		return objList;
	}

	/**
	 * Displays all the Audit in Resolution state ,based on conditions below;
	 * Conditions to Display 1. Logged in user should be owner of the Audit. 2.
	 * Logged in user should be assignes as Audit Lead Auditor or Audit Auditees
	 * or Audit Auditors
	 * 
	 * @param context
	 * @param args
	 * @return MapList
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyAuditsResolution(Context context, String[] args, String whereExpression) throws Exception {

		MapList objList = new MapList();
		try {
			String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
			String STATE_FINALAPPROVAL = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT,
					AuditConstants.SYM_STATE_FINALAPPROVAL);
			StringList objSelects = new StringList(); // object select list.
			objSelects.addElement(DomainConstants.SELECT_ID);
			objSelects.addElement(DomainConstants.SELECT_NAME);
			objSelects.addElement(DomainConstants.SELECT_CURRENT);
			com.matrixone.apps.common.Person currUser = com.matrixone.apps.common.Person.getPerson(context);
			String strCurrentUserName = context.getUser();
			String POLICY_AUDITFINDING = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDITFINDING);
			String STATE_RESOLUTION = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDITFINDING,
					AuditConstants.SYM_STATE_RESOLUTION);

			// Where condtions for state wise view
			String strWhereState = "(" + DomainConstants.SELECT_CURRENT + " == " + STATE_RESOLUTION + " )";

			if (currUser.hasRole(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN))) {
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null,
						strWhereState, objSelects);
			}
			else {
				// Where condtions to check attribute values
				// String strWhere = "(owner =='" + context.getUser() + "' || "
				// + AuditConstants.SELECT_AUDITAUDITEES + " ~~ '*" +
				// strCurrentUserFullname
				// + "*' || " + AuditConstants.SELECT_LEADAUDITOR + "== '" +
				// strCurrentUserFullname
				// + "' || " + AuditConstants.SELECT_AUDITORS + "~~'*" +
				// strCurrentUserFullname
				// + "*')";
				if(!Helper.isNullOrEmpty(whereExpression)) {
					whereExpression="&& "+whereExpression;	
				}
				String strWhere = "(owner =='" + context.getUser() + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES)) + " ~~ '*"
						+ strCurrentUserName + "*' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR)) + "== '"
						+ strCurrentUserName + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS)) + "~~'*"
						+ strCurrentUserName + "*')";
				strWhere += "&&" + strWhereState;
				strWhere += whereExpression;
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null, strWhere,
						objSelects);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}

		return objList;
	}

	/**
	 * Displays all the Audit in Final Approval state, based on conditions
	 * below; Conditions to Display 1. Logged in user should be owner of the
	 * Audit. 2. Logged in user should be assignes as Audit Lead Auditor or
	 * Audit Auditees or Audit Auditors
	 * 
	 * @param context
	 * @param args
	 * @return MapList
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyAuditsFinalApproval(Context context, String[] args, String whereExpression) throws Exception {
		MapList objList = new MapList();
		try {
			StringList objSelects = new StringList(); // object select list.
			objSelects.addElement(DomainConstants.SELECT_ID);
			objSelects.addElement(DomainConstants.SELECT_NAME);
			objSelects.addElement(DomainConstants.SELECT_CURRENT);
			com.matrixone.apps.common.Person currUser = com.matrixone.apps.common.Person.getPerson(context);
			String strCurrentUserName = context.getUser();
			String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
			String STATE_FINALAPPROVAL = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT,
					AuditConstants.SYM_STATE_FINALAPPROVAL);

			// Where condtions for state wise view
			String strWhereState = "(" + DomainConstants.SELECT_CURRENT + " == " + "\"" + STATE_FINALAPPROVAL + "\")";

			if (currUser.hasRole(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN))) {
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null,
						strWhereState, objSelects);
			}
			else {
				// Where condtions to check attribute values
				// String strWhere = "(owner =='" + context.getUser() + "' || "
				// + AuditConstants.SELECT_AUDITAUDITEES + " ~~ '*" +
				// strCurrentUserFullname
				// + "*' || " + AuditConstants.SELECT_LEADAUDITOR + "== '" +
				// strCurrentUserFullname
				// + "' || " + AuditConstants.SELECT_AUDITORS + "~~'*" +
				// strCurrentUserFullname
				// + "*')";
				if(!Helper.isNullOrEmpty(whereExpression)) {
					whereExpression="&& "+whereExpression;	
				}
				String strWhere = "(owner =='" + context.getUser() + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES)) + " ~~ '*"
						+ strCurrentUserName + "*' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR)) + "== '"
						+ strCurrentUserName + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS)) + "~~'*"
						+ strCurrentUserName + "*')";
				strWhere += "&&" + strWhereState;
				strWhere += whereExpression;
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null, strWhere,
						objSelects);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}
		return objList;

	}

	/**
	 * Displays all the Audit in Closed state, based on conditions below;
	 * Conditions to Display 1. Logged in user should be owner of the Audit. 2.
	 * Logged in user should be assignes as Audit Lead Auditor or Audit Auditees
	 * or Audit Auditors
	 * 
	 * @param context
	 * @param args
	 * @return MapList
	 * @throws Exception
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyAuditsClosed(Context context, String[] args, String whereExpression) throws Exception {

		MapList objList = new MapList();
		try {

			StringList objSelects = new StringList(); // object select list.
			objSelects.addElement(DomainConstants.SELECT_ID);
			objSelects.addElement(DomainConstants.SELECT_NAME);
			objSelects.addElement(DomainConstants.SELECT_CURRENT);
			com.matrixone.apps.common.Person currUser = com.matrixone.apps.common.Person.getPerson(context);
			String strCurrentUserName = context.getUser();
			String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
			String STATE_CLOSED = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT,
					AuditConstants.SYM_STATE_CLOSED);

			// Where condtions for state wise view
			String strWhereState = "(" + DomainConstants.SELECT_CURRENT + " == " + STATE_CLOSED + " )";

			if (currUser.hasRole(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN))) {
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null,
						strWhereState, objSelects);
			}
			else {
				// Where condtions to check attribute values
				// String strWhere = "(owner =='" + context.getUser() + "' || "
				// + AuditConstants.SELECT_AUDITAUDITEES + " ~~ '*" +
				// strCurrentUserFullname
				// + "*' || " + AuditConstants.SELECT_LEADAUDITOR + "== '" +
				// strCurrentUserFullname
				// + "' || " + AuditConstants.SELECT_AUDITORS + "~~'*" +
				// strCurrentUserFullname
				// + "*')";
				if(!Helper.isNullOrEmpty(whereExpression)) {
					whereExpression="&& "+whereExpression;	
				}
				String strWhere = "(owner =='" + context.getUser() + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES)) + " ~~ '*"
						+ strCurrentUserName + "*' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR)) + "== '"
						+ strCurrentUserName + "' || "
						+ DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS)) + "~~'*"
						+ strCurrentUserName + "*')";
				strWhere += "&&" + strWhereState;
				strWhere += whereExpression;
				// Getting the objects
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null, strWhere,
						objSelects);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}

		return objList;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyAuditsOpen(Context context, String[] args, String whereExpression) throws Exception {
		final String POLICY_AUDIT = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_POLICY_AUDIT);
		final String STATE_CLOSED = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, POLICY_AUDIT,
				AuditConstants.SYM_STATE_CLOSED);
		MapList objList = new MapList();
		try {
			if(!Helper.isNullOrEmpty(whereExpression)) {
				whereExpression="&& "+whereExpression;	
			}
			StringList objSelects = new StringList(); // object select list.
			objSelects.addElement(DomainConstants.SELECT_ID);
			objSelects.addElement(DomainConstants.SELECT_NAME);
			objSelects.addElement(DomainConstants.SELECT_CURRENT);

			com.matrixone.apps.common.Person currUser = com.matrixone.apps.common.Person.getPerson(context);

			String strCurrentUserName = context.getUser();

			StringBuilder sbWhereCondition = new StringBuilder();
			sbWhereCondition.append("(owner =='");
			sbWhereCondition.append(context.getUser());
			sbWhereCondition.append("' || ");
			sbWhereCondition.append(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITAUDITEES)));
			sbWhereCondition.append(" ~~ '*");
			sbWhereCondition.append(strCurrentUserName);
			sbWhereCondition.append("*' || ");
			sbWhereCondition.append(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_LEADAUDITOR)));
			sbWhereCondition.append("== '");
			sbWhereCondition.append(strCurrentUserName);
			sbWhereCondition.append("*' || ");
			sbWhereCondition.append(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITORS)));
			sbWhereCondition.append(" ~~ '*");
			sbWhereCondition.append(strCurrentUserName);
			sbWhereCondition.append("*')");

			StringBuilder sbStateCondition = new StringBuilder();
			sbStateCondition.append("(");
			sbStateCondition.append(DomainConstants.SELECT_CURRENT);
			sbStateCondition.append(" != ");
			sbStateCondition.append(STATE_CLOSED);
			sbStateCondition.append(" )");
			sbStateCondition.append(whereExpression);

			if (currUser.hasRole(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ROLE_AUDITADMIN))) {
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null,
						sbStateCondition.toString(), objSelects);
			}
			else {
				objList = DomainObject.findObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDIT), null,
						sbWhereCondition.append(" && ").append(sbStateCondition).toString(), objSelects);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}
		return objList;
	}

	/**
	 * displays the roles for the user for that particular audit, finding, Audit
	 * Report object
	 * 
	 * @param context
	 * @param args
	 * @return StringList
	 * @throws Exception
	 */
	public StringList getAuditRole(Context context, String[] args) throws Exception {
		final String SELECT_TYPE_KIND_OF_AUDIT = AuditUtil.getTypeKindOfSelectable(context, AuditConstants.SYM_TYPE_AUDIT);
		final String SELECT_TYPE_KIND_OF_AUDIT_FINDING = AuditUtil.getTypeKindOfSelectable(context, AuditConstants.SYM_TYPE_AUDITFINDING);
		final String SELECT_TYPE_KIND_OF_AUDIT_REPORT_SUMMARY = AuditUtil.getTypeKindOfSelectable(context,
				AuditConstants.SYM_TYPE_AUDIT_REPORT_SUMMARY);
		final String SELECT_ATTRIBUTE_AUDIT_LEAD_AUDITOR = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_LEADAUDITOR);
		final String SELECT_ATTRIBUTE_AUDIT_AUDITORS = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_AUDITORS);
		final String SELECT_ATTRIBUTE_AUDIT_FINDING_AUDITOR = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_AUDITOR);
		final String SELECT_ATTRIBUTE_AUDIT_AUDITEES = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_AUDITAUDITEES);
		final String SELECT_ATTRIBUTE_AUDIT_VERIFIED_BY = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_AUDITVERIFIEDBY);
		final String SELECT_ATTRIBUTE_AUDIT_RESPONDER = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_AUDITRESPONDER);
		final String SELECT_ATTRIBUTE_AUDIT_RESOLUTION_ASSIGNED_TO = AuditUtil.getObjectAttributeSelectable(context,
				AuditConstants.SYM_ATTR_AUDITRESOLUTIONASSIGNEDTO);
		try {
			StringList slFinalOutput = new StringList();
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			MapList objectList = (MapList) programMap.get(AuditConstants.OBJECT_LIST);

			String currentUserName = context.getUser();
			String currentUserFullName = PersonUtil.getFullName(context, currentUserName);

			for (int i = 0; i < objectList.size(); i++) {
				StringList slAuditRoles = new StringList();
				String strObjectId = (String) ((Map) objectList.get(i)).get(DomainConstants.SELECT_ID);

				List<Map<?, ?>> lmObjectInfo = QueryUtil.getInfo(context, new String[] { strObjectId },
						Helper.stringList(DomainConstants.SELECT_OWNER, DomainConstants.SELECT_ORIGINATOR, SELECT_TYPE_KIND_OF_AUDIT,
								SELECT_TYPE_KIND_OF_AUDIT_FINDING, SELECT_TYPE_KIND_OF_AUDIT_REPORT_SUMMARY, SELECT_ATTRIBUTE_AUDIT_LEAD_AUDITOR,
								SELECT_ATTRIBUTE_AUDIT_AUDITORS, SELECT_ATTRIBUTE_AUDIT_FINDING_AUDITOR, SELECT_ATTRIBUTE_AUDIT_AUDITEES,
								SELECT_ATTRIBUTE_AUDIT_VERIFIED_BY, SELECT_ATTRIBUTE_AUDIT_RESPONDER, SELECT_ATTRIBUTE_AUDIT_RESOLUTION_ASSIGNED_TO));

				if (!Helper.isNullOrEmpty(lmObjectInfo)) {
					Map<?, ?> mpObjectInfo = lmObjectInfo.get(0);
					if (!Helper.isNullOrEmpty(mpObjectInfo)) {
						String strTypeKindOfAudit = (String) mpObjectInfo.get(SELECT_TYPE_KIND_OF_AUDIT);
						String strTypeKindOfAuditFinding = (String) mpObjectInfo.get(SELECT_TYPE_KIND_OF_AUDIT_FINDING);
						String strTypeKindOfAuditReportSummary = (String) mpObjectInfo.get(SELECT_TYPE_KIND_OF_AUDIT_REPORT_SUMMARY);
						String strOwner = (String) mpObjectInfo.get(DomainConstants.SELECT_OWNER);

						if (!Helper.isNullOrEmpty(strOwner) && strOwner.equals(currentUserName)) {
							slAuditRoles.add(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Owner"));
						}

						// roles respective to audit will be displayed
						if (AuditConstants.STR_TRUE.equalsIgnoreCase(strTypeKindOfAudit)) {
							String strLeadAuditor = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDIT_LEAD_AUDITOR);
							String strAuditAuditors = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDIT_AUDITORS);
							String strAuditAuditees = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDIT_AUDITEES);

							if (!Helper.isNullOrEmpty(strLeadAuditor) && (strLeadAuditor.indexOf(currentUserName) != -1)
									|| strLeadAuditor.indexOf(currentUserFullName) != -1) {
								slAuditRoles.add(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Label.LeadAuditor"));
							}

							if (!Helper.isNullOrEmpty(strAuditAuditors) && (strAuditAuditors.indexOf(currentUserName) != -1)
									|| strAuditAuditors.indexOf(currentUserFullName) != -1) {
								slAuditRoles.add(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Label.Auditor"));
							}
							if (!Helper.isNullOrEmpty(strAuditAuditees) && (strAuditAuditees.indexOf(currentUserName) != -1)
									|| strAuditAuditees.indexOf(currentUserFullName) != -1) {
								slAuditRoles.add(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Label.AuditAuditee"));
							}
						} // roles respective to Audit finding will be displayed
						else if (AuditConstants.STR_TRUE.equalsIgnoreCase(strTypeKindOfAuditFinding)) {
							String strAuditFindingAuditor = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDIT_FINDING_AUDITOR);
							String strAuditVerifiedBy = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDIT_VERIFIED_BY);
							String strAuditResponder = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDIT_RESPONDER);
							String strAuditResolutionAssignedTo = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDIT_RESOLUTION_ASSIGNED_TO);

							if (!Helper.isNullOrEmpty(strAuditFindingAuditor) && (strAuditFindingAuditor.indexOf(currentUserName) != -1)
									|| strAuditFindingAuditor.indexOf(currentUserFullName) != -1) {
								slAuditRoles.add(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Label.Auditor"));
							}

							if (!Helper.isNullOrEmpty(strAuditVerifiedBy) && (strAuditVerifiedBy.indexOf(currentUserName) != -1)
									|| strAuditVerifiedBy.indexOf(currentUserFullName) != -1) {
								slAuditRoles.add(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Label.VerifiedBy"));
							}

							if (!Helper.isNullOrEmpty(strAuditResponder) && (strAuditResponder.indexOf(currentUserName) != -1)
									|| strAuditResponder.indexOf(currentUserFullName) != -1) {
								slAuditRoles.add(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Label.Responder"));
							}

							if (!Helper.isNullOrEmpty(strAuditResolutionAssignedTo) && (strAuditResolutionAssignedTo.indexOf(currentUserName) != -1)
									|| strAuditResolutionAssignedTo.indexOf(currentUserFullName) != -1) {
								slAuditRoles.add(
										Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Label.ResolutionAssignedTo"));
							}

						}
						else if (AuditConstants.STR_TRUE.equalsIgnoreCase(strTypeKindOfAuditReportSummary)) {
							String strOriginator = (String) mpObjectInfo.get(DomainConstants.SELECT_ORIGINATOR);

							if (!Helper.isNullOrEmpty(strOriginator) && (strOriginator.indexOf(currentUserName) != -1)
									|| strOriginator.indexOf(currentUserFullName) != -1) {
								slAuditRoles.add(Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.Label.Originator"));
							}

						}
					}
				}

				String roles = DomainConstants.EMPTY_STRING;

				for (Iterator iterator = slAuditRoles.iterator(); iterator.hasNext();) {
					String role = (String) iterator.next();
					if (DomainConstants.EMPTY_STRING.equals(roles)) {
						roles = role;
					}
					else {
						roles += ", " + role;
					}
				}

				slFinalOutput.addElement(roles == null ? DomainConstants.EMPTY_STRING : roles);
			}
			return slFinalOutput;
		}
		catch (Exception e) {
			System.err.println(e.getLocalizedMessage());
			e.printStackTrace();
			throw new AuditException(e);
		}
	} // end getAuditRole

	/**
	 * This is a generic method that will return Object Id of File Attchment
	 * object. This will retrieve File Attchemnt Object connected with Active
	 * Version Relationship.
	 * 
	 * @param fileObjectID
	 *            Containts Object Id
	 * @param context
	 *            contaings context
	 * @return String
	 * @throws Exception
	 */

	public static String returnFileVersionObjId(Context context, String fileObjectID) throws Exception {
		String strActiveVersionObjId = "";
		try {
			// Getting needed Values
			SelectList sListResultsSelects = new SelectList(1);
			sListResultsSelects.add(DomainObject.SELECT_ID);
			DomainObject fileDObject = DomainObject.newInstance(context, fileObjectID);

			// Getting the objects connected with Active Version Relationship
			MapList mListLVFileAttachments = fileDObject.getRelatedObjects(context,
					PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_ACTIVEVERSION),
					PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_FILEATTACHMENT), false, true, 1, sListResultsSelects, null, null,
					"", null, null, null);

			if ((null != mListLVFileAttachments) && (!mListLVFileAttachments.isEmpty())) {
				int nCnt = mListLVFileAttachments.size();
				// Getting the Id of the object
				for (int nCount = 0; nCount < nCnt; nCount++) {
					strActiveVersionObjId = (String) ((Map) mListLVFileAttachments.get(nCount)).get(DomainConstants.SELECT_ID);
				}
			}
		}
		catch (Exception objException) {
			objException.printStackTrace();
			throw objException;
		}
		return strActiveVersionObjId;
	}

	/**
	 * Get connected Audit Supplier type object for Deprecated Supplier field
	 * 
	 * @param context
	 * @param args
	 * @return String
	 * @throws Exception
	 */
	public static String getDeprecatedAuditSupplierField(Context context, String[] args) throws Exception {

		String returnHTML = "";
		String strAuditSupplierId = "";
		String strAuditSupplierName = "";
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap paramMap = (HashMap) programMap.get("paramMap");
			String objectId = (String) paramMap.get("objectId");
			StringList objSelects = new StringList(); // object select list.
			objSelects.addElement(DomainConstants.SELECT_ID);
			objSelects.addElement(DomainConstants.SELECT_NAME);
			objSelects.addElement(DomainConstants.SELECT_CURRENT);

			DomainObject domObj = DomainObject.newInstance(context, objectId);
			MapList mlResult = domObj.getRelatedObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSUPPLIER),
					PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_TYPE_AUDITSUPPLIER), objSelects, null, true, false, (short) 1, null,
					null, 1);

			if (mlResult.size() == 1) {
				strAuditSupplierId = (String) ((Map) mlResult.get(0)).get(DomainConstants.SELECT_ID);
				strAuditSupplierName = (String) ((Map) mlResult.get(0)).get(DomainConstants.SELECT_NAME);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}

		returnHTML = "<a class=\"object\" href=\"JavaScript:emxFormLinkClick(&quot;emxTree.jsp?objectId="
				+ XSSUtil.encodeForJavaScript(context, strAuditSupplierId)
				+ "&amp;relId=null&quot;, &quot;popup&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;"
				+ XSSUtil.encodeForJavaScript(context, strAuditSupplierName) + "&quot;)\">"
				+ XSSUtil.encodeForJavaScript(context, strAuditSupplierName) + "</a>";
		return returnHTML;
	}

	/**
	 * Get connected OOTB Supplier type object for Deprecated Supplier field
	 * 
	 * @param context
	 * @param args
	 * @return StringList
	 * @throws Exception
	 */
	public static StringList getSupplierOnEditForm(Context context, String[] args) throws Exception {

		StringList result = new StringList();
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap paramMap = (HashMap) programMap.get("paramMap");
			String objectId = (String) paramMap.get("objectId");
			StringList objSelects = new StringList(); // object select list.
			objSelects.addElement(DomainConstants.SELECT_ID);
			objSelects.addElement(DomainConstants.SELECT_NAME);
			objSelects.addElement(DomainConstants.SELECT_CURRENT);

			DomainObject domObj = DomainObject.newInstance(context, objectId);
			MapList mlResult = domObj.getRelatedObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSUPPLIER),
					DomainConstants.TYPE_COMPANY, objSelects, null, true, false, (short) 1, null, null, 1);

			if (mlResult.size() == 1) {
				result.add((String) ((Map) mlResult.get(0)).get(DomainConstants.SELECT_NAME));
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * This is Update Function which is required when Field Type is program.
	 * This method is for Supplier field. This method is doing nothing since the
	 * post process JPO does update for this field
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public static void doNothing(Context context, String[] args) throws Exception {
		// do nothing
	}

	/**
	 * Gets the Location supplier.
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the column Location
	 * 
	 * @throws Exception
	 *             the exception
	 */
	public Vector getColumnLocation(Context context, String[] args) throws Exception {

		HashMap programMap = (HashMap) JPO.unpackArgs(args);
		// System.err.println("-*GETTING OBJS*-\n" + programMap);
		MapList mlObjectList = (MapList) programMap.get("objectList");
		Vector<String> htmlVec = new Vector<String>();

		for (int x = 0; x < mlObjectList.size(); x++) {
			String strObjectId = (String) ((Map) mlObjectList.get(x)).get("id");
			StringList sListObjSelects = new StringList(); // object select
															// list.
			sListObjSelects.addElement(DomainConstants.SELECT_ID);
			StringList sListrelSelects = new StringList(); // relationship
															// selects
			sListrelSelects.addElement(DomainConstants.SELECT_RELATIONSHIP_ID);

			DomainObject doBaseObj = DomainObject.newInstance(context, strObjectId);

			MapList atList = doBaseObj.getRelatedObjects(context, PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITLOCATION), "*",
					sListObjSelects, sListrelSelects, true, // to
					true, // from
					(short) 1, "", "");

			String html = "";
			// for (int i = 0; i < atList.size(); i++) {
			if (atList.size() > 0) {
				DomainObject obj = DomainObject.newInstance(context, (String) ((Map) atList.get(0)).get(DomainConstants.SELECT_ID));
				html = obj.getInfo(context, DomainConstants.SELECT_NAME);
				StringBuilder associatedTo = new StringBuilder();
				associatedTo.append("<a href='../common/emxNavigator.jsp?targetLocation=popup&amp;objectId=");
				associatedTo.append(XSSUtil.encodeForHTML(context, obj.getInfo(context, DomainConstants.SELECT_ID)));
				associatedTo.append("'>");
				associatedTo.append("<img src=\"images/iconSmallLocation.gif\" width=\"16\" aloid=\"true\" />");
				associatedTo.append(XSSUtil.encodeForHTML(context, obj.getInfo(context, DomainConstants.SELECT_NAME)));
				associatedTo.append("</a>");
				htmlVec.add(associatedTo.toString());
			}
			else {
				html = "<script type=\"text/javascript\"> addStyleSheet(\"iwCommonStyles\"); </script> <p class=\"red\">"
						+ Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.NoLocation") + "</p>";
				htmlVec.add(html);
			}
		}
		return htmlVec;
	}

	public String getFormQICAUDAuditSummaryReportFieldOpeningMeetingHeldDate(Context context, String[] args) throws AuditException {
		String openMeetingDisplayDate = AuditConstants.STR_EMPTY;
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap requestMap = (HashMap) programMap.get(AuditConstants.REQUEST_MAP);
			String objectId = (String) requestMap.get(AuditConstants.OBJECT_ID);

			List<Map<?, ?>> meetingList = getAuditMeetings(context, objectId);

			if (!Helper.isNullOrEmpty(meetingList)) {
				String openMeetingDate = (String) meetingList.get(0)
						.get(DomainObject.getAttributeSelect(DomainConstants.ATTRIBUTE_MEETING_START_DATETIME));
				openMeetingDisplayDate = eMatrixDateFormat.getFormattedDisplayDate(openMeetingDate, 0);
			}

		}
		catch (Exception e) {
			e.printStackTrace();
			throw new AuditException(e);
		}

		return openMeetingDisplayDate;
	}

	public String getFormQICAUDAuditSummaryReportFieldOpeningMeetingAttendees(Context context, String[] args) throws AuditException {
		final String RELATIONSHIP_MEETING_CONTEXT = PropertyUtil.getSchemaProperty(context, DomainConstants.RELATIONSHIP_MEETING_CONTEXT);
		final String TYPE_MEETING = PropertyUtil.getSchemaProperty(context, DomainConstants.TYPE_MEETING);

		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap requestMap = (HashMap) programMap.get(AuditConstants.REQUEST_MAP);
			String objectId = (String) requestMap.get(AuditConstants.OBJECT_ID);

			List<Map<?, ?>> meetingList = getAuditMeetings(context, objectId);

			String openMeetingAttandees = AuditConstants.STR_EMPTY;
			if (!Helper.isNullOrEmpty(meetingList)) {
				String openMeetingId = (String) meetingList.get(0).get(DomainConstants.SELECT_ID);
				openMeetingAttandees = getMeetingAttandees(context, openMeetingId);

			}

			return openMeetingAttandees;
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new AuditException(e);
		}
	}

	public String getFormQICAUDAuditSummaryReportFieldOpeningMeetingDescription(Context context, String[] args) throws AuditException {
		final String RELATIONSHIP_MEETING_CONTEXT = PropertyUtil.getSchemaProperty(context, DomainConstants.RELATIONSHIP_MEETING_CONTEXT);
		final String TYPE_MEETING = PropertyUtil.getSchemaProperty(context, DomainConstants.TYPE_MEETING);
		String openMeetingDescription = AuditConstants.STR_EMPTY;
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap requestMap = (HashMap) programMap.get(AuditConstants.REQUEST_MAP);
			String objectId = (String) requestMap.get(AuditConstants.OBJECT_ID);

			List<Map<?, ?>> meetingList = getAuditMeetings(context, objectId);

			if (!Helper.isNullOrEmpty(meetingList)) {
				openMeetingDescription = (String) meetingList.get(0).get(DomainConstants.SELECT_DESCRIPTION);
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new AuditException(e);
		}

		return openMeetingDescription;
	}

	public String getFormQICAUDAuditSummaryReportFieldClosingMeetingHeldDate(Context context, String[] args) throws AuditException {
		String closeMeetingDisplayDate = AuditConstants.STR_EMPTY;
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap requestMap = (HashMap) programMap.get(AuditConstants.REQUEST_MAP);
			String objectId = (String) requestMap.get(AuditConstants.OBJECT_ID);

			List<Map<?, ?>> meetingList = getAuditMeetings(context, objectId);

			if (!Helper.isNullOrEmpty(meetingList) && meetingList.size() > 1) {
				String closeMeetingDate = (String) meetingList.get(meetingList.size() - 1)
						.get(DomainObject.getAttributeSelect(DomainConstants.ATTRIBUTE_MEETING_START_DATETIME));
				closeMeetingDisplayDate = eMatrixDateFormat.getFormattedDisplayDate(closeMeetingDate, 0);
			}

		}
		catch (Exception e) {
			e.printStackTrace();
			throw new AuditException(e);
		}

		return closeMeetingDisplayDate;

	}

	public String getFormQICAUDAuditSummaryReportFieldClosingMeetingAttendees(Context context, String[] args) throws AuditException {
		final String RELATIONSHIP_MEETING_CONTEXT = PropertyUtil.getSchemaProperty(context, DomainConstants.RELATIONSHIP_MEETING_CONTEXT);
		final String TYPE_MEETING = PropertyUtil.getSchemaProperty(context, DomainConstants.TYPE_MEETING);
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap requestMap = (HashMap) programMap.get(AuditConstants.REQUEST_MAP);
			String objectId = (String) requestMap.get(AuditConstants.OBJECT_ID);

			List<Map<?, ?>> meetingList = getAuditMeetings(context, objectId);

			String closeMeetingAttandees = AuditConstants.STR_EMPTY;
			if (!Helper.isNullOrEmpty(meetingList) && meetingList.size() > 1) {
				String latestMeetingId = (String) meetingList.get(meetingList.size() - 1).get(DomainConstants.SELECT_ID);
				closeMeetingAttandees = getMeetingAttandees(context, latestMeetingId);
			}

			return closeMeetingAttandees;

		}
		catch (Exception e) {
			e.printStackTrace();
			throw new AuditException(e);
		}
	}

	public String getFormQICAUDAuditSummaryReportFieldLatestMeetingDescription(Context context, String[] args) throws AuditException {
		final String RELATIONSHIP_MEETING_CONTEXT = PropertyUtil.getSchemaProperty(context, DomainConstants.RELATIONSHIP_MEETING_CONTEXT);
		final String TYPE_MEETING = PropertyUtil.getSchemaProperty(context, DomainConstants.TYPE_MEETING);
		String latestMeetingDescription = AuditConstants.STR_EMPTY;
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap requestMap = (HashMap) programMap.get(AuditConstants.REQUEST_MAP);
			String objectId = (String) requestMap.get(AuditConstants.OBJECT_ID);

			List<Map<?, ?>> meetingList = getAuditMeetings(context, objectId);

			if (!Helper.isNullOrEmpty(meetingList) && meetingList.size() > 1) {
				latestMeetingDescription = (String) meetingList.get(meetingList.size() - 1).get(DomainConstants.SELECT_DESCRIPTION);
			}

		}
		catch (Exception e) {
			e.printStackTrace();
			throw new AuditException(e);
		}

		return latestMeetingDescription;
	}

	private List<Map<?, ?>> getAuditMeetings(Context context, String objectId) throws AuditException {
		try {
			List<Map<?, ?>> meetingList = QueryUtil.getRelatedObjects(context, DomainObject.newInstance(context, objectId),
					DomainConstants.RELATIONSHIP_MEETING_CONTEXT, DomainConstants.TYPE_MEETING,
					Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_NAME, DomainConstants.SELECT_DESCRIPTION,
							DomainObject.getAttributeSelect(DomainConstants.ATTRIBUTE_MEETING_START_DATETIME)),
					Helper.stringList(DomainRelationship.SELECT_ID), true, true, (short) 0, null, null);

			class MeetingDateComparator implements Comparator {
				@Override
				public int compare(Object map1, Object map2) {
					HashMap meeting1 = (HashMap) map1;
					HashMap meeting2 = (HashMap) map2;

					Date date1 = eMatrixDateFormat
							.getJavaDate((String) meeting1.get(DomainObject.getAttributeSelect(DomainConstants.ATTRIBUTE_MEETING_START_DATETIME)));
					Date date2 = eMatrixDateFormat
							.getJavaDate((String) meeting2.get(DomainObject.getAttributeSelect(DomainConstants.ATTRIBUTE_MEETING_START_DATETIME)));
					return date1.compareTo(date2);
				}
			}

			if (!Helper.isNullOrEmpty(meetingList) && meetingList.size() > 1) {
				Collections.sort(meetingList, new MeetingDateComparator());
			}

			return meetingList;
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new AuditException(e);
		}
	}

	private String getMeetingAttandees(Context context, String meetingId) throws AuditException {
		try {
			List<Map<?, ?>> attendeesList = QueryUtil.getRelatedObjects(context, DomainObject.newInstance(context, meetingId),
					DomainConstants.RELATIONSHIP_ASSIGNED_MEETINGS, DomainConstants.TYPE_PERSON,
					Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_NAME), Helper.stringList(DomainRelationship.SELECT_ID), true,
					false, (short) 0, null, null);

			StringBuilder meetingAttandees = new StringBuilder();

			if (!Helper.isNullOrEmpty(attendeesList)) {
				for (Map<?, ?> attendee : attendeesList) {
					if (meetingAttandees.length() != 0) {
						meetingAttandees.append(AuditConstants.COMMA);
						meetingAttandees.append(AuditConstants.SPACE);
					}
					meetingAttandees.append(attendee.get(DomainConstants.SELECT_NAME));
				}
			}
			return meetingAttandees.toString();

		}
		catch (Exception e) {
			e.printStackTrace();
			throw new AuditException(e);
		}

	}

	/**
	 * Gets the column supplier.
	 * 
	 * @param context
	 *            the context
	 * @param args
	 *            the args
	 * 
	 * @return the column supplier
	 * 
	 * @throws AuditException
	 *             the exception
	 */
	public Vector getColumnSupplier(Context context, String[] args) throws AuditException {
		final String RELATIONSHIP_AUDIT_SUPPLIER = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITSUPPLIER);

		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			MapList mlObjectList = (MapList) programMap.get("objectList");
			Vector<String> htmlVec = new Vector<String>();

			for (int x = 0; x < mlObjectList.size(); x++) {
				String strObjectId = (String) ((Map) mlObjectList.get(x)).get("id");
				StringList sListObjSelects = new StringList(); // object select
																// list.
				sListObjSelects.addElement(DomainConstants.SELECT_ID);
				StringList sListrelSelects = new StringList(); // relationship
																// selects
				sListrelSelects.addElement(DomainConstants.SELECT_RELATIONSHIP_ID);

				DomainObject doBaseObj = DomainObject.newInstance(context, strObjectId);

				MapList atList = doBaseObj.getRelatedObjects(context, RELATIONSHIP_AUDIT_SUPPLIER, "*", sListObjSelects, sListrelSelects, true, // to
						true, // from
						(short) 1, "", "");

				String html = "";
				if (atList.size() > 0) {
					DomainObject obj = DomainObject.newInstance(context, (String) ((Map) atList.get(0)).get(DomainConstants.SELECT_ID));
					html = obj.getInfo(context, DomainConstants.SELECT_NAME);
					htmlVec.add(html);
				}
				else {
					html = "<script type=\"text/javascript\"> addStyleSheet(\"iwCommonStyles\"); </script> <p class=\"red\">"
							+ Helper.getI18NString(context, Helper.StringResource.AUDIT, "LQIAudit.Common.NoSupplier") + "</p>";
					htmlVec.add(html);
				}
			}
			return htmlVec;
		}
		catch (Exception e) {
			throw new AuditException(e);
		}
	}

	/**
	 * This method is used for displaying consolidated history of the object. It
	 * sets helpMarker and Registered Suite in "LSACommonHistory" command and
	 * call it as dynamic command.
	 * 
	 * @param context
	 * @param args
	 * @return MapList
	 * @throws AuditException
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getAuditConsolidatedHistory(Context context, String[] args) throws AuditException {
		try {
			MapList resultMapList = new MapList();
			Map<String, String> additionalSettings = new HashMap<String, String>();
			additionalSettings.put("href|HelpMarker", "emxHelpConsolidatedHistoryCAAU");
			additionalSettings.put("settings|Registered Suite", "LQIAudit");
			Map<String, Object> consolidatedHistoryCommand = Helper.getUICommandMapWithCustomSettings(context, "LSACommonHistory",
					additionalSettings);
			resultMapList.add(consolidatedHistoryCommand);
			return resultMapList;
		}
		catch (Exception e) {
			throw new AuditException(e);
		}

	}

	/**
	 * This method is used to format dates into input format by using a field
	 * picker. This method finds a field in the paramMap that ends with
	 * _msvalue, formats it into the default format of the eMatrixDateFormat
	 * class, and places it back into the corresponding field without a msvalue.
	 * Locale and TZ are not taken into consideration. This is used to adjust
	 * dates for input when entered by the calendar chooser.
	 * 
	 * @param context
	 *            - eMatrix context object
	 * @param paramMap
	 *            - contains the paramMap with date fields to fix.
	 * @return formatted date
	 * @throws ParseException
	 * @throws FrameworkException
	 */

	public void fixDateAttributeFormat(Context context, HashMap paramMap) {
		HashMap fixedMap = new HashMap();
		Iterator paramIter = paramMap.keySet().iterator();
		while (paramIter.hasNext()) {
			String paramKey = (String) paramIter.next();
			// Look for form fields with the specified prefix and suffix
			if (paramKey.endsWith("_msvalue")) {
				String paramValue = (String) paramMap.get(paramKey);
				if (paramValue.length() > 0) {
					String attrName = paramKey.substring(0, paramKey.indexOf("_msvalue"));
					Date dateObj = new Date(Long.parseLong(paramValue));
					// SimpleDateFormat dateFormat = new
					// SimpleDateFormat(eMatrixDateFormat.getInputDateFormat(),
					// context.getLocale());

					SimpleDateFormat formatter = new SimpleDateFormat(eMatrixDateFormat.getInputDateFormat(), Locale.US);
					String emxDate = formatter.format(dateObj); // add offset
																// time here
																// so
																// that date
																// will show
																// as
					// the same day around the world
					fixedMap.put(attrName, emxDate);
				}
			}
		}
		paramMap.putAll(fixedMap);
	}

	/**
	 * To connect the new Audited organization with the Audit.
	 * 
	 * @param context
	 *            ENOVIA Context object.
	 * @param args
	 *            Input arguments.
	 * @throws AuditException
	 *             If operation fails.
	 */
	public void updateAuditedOrganizationForAudit(Context context, String[] args) throws AuditException {
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap paramMap = (HashMap) programMap.get(AuditConstants.PARAM_MAP);
			String strAuditedOrganizationId = (String) paramMap.get(AuditConstants.NEW_OID);
			String strAuditId = (String) paramMap.get(AuditConstants.OBJECT_ID);
			if (!Helper.isNullOrEmpty(strAuditId)) {
				List<Map<?, ?>> lmAssociatedOrganization = QueryUtil.getRelatedObjects(context, DomainObject.newInstance(context, strAuditId),
						AuditConstants.SYM_REL_AUDITED_ORGANIZATION, DomainSymbolicConstants.SYMBOLIC_type_Organization,
						Helper.stringList(DomainConstants.SELECT_ID), Helper.stringList(DomainRelationship.SELECT_ID), true, false, (short) 1, null,
						null);

				if (!Helper.isNullOrEmpty(lmAssociatedOrganization)) {
					Map<?, ?> mpAssociatedOrganization = lmAssociatedOrganization.get(0);
					if (!Helper.isNullOrEmpty(mpAssociatedOrganization)) {
						String strAssociatedOrganizationId = (String) mpAssociatedOrganization.get(DomainConstants.SELECT_ID);
						String strAssociatedOrganizationRelId = (String) mpAssociatedOrganization.get(DomainRelationship.SELECT_ID);
						if (!Helper.isNullOrEmpty(strAssociatedOrganizationId)
								&& !strAssociatedOrganizationId.equalsIgnoreCase(strAuditedOrganizationId)
								&& !Helper.isNullOrEmpty(strAssociatedOrganizationRelId)) {
							DomainRelationship.disconnect(context, strAssociatedOrganizationRelId);
						}
					}

				}
				if (!Helper.isNullOrEmpty(strAuditedOrganizationId)) {
					DomainObject.newInstance(context, strAuditedOrganizationId).addToObject(context,
							new RelationshipType(PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITED_ORGANIZATION)), strAuditId);
				}

			}
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new AuditException(e);
		}

	}

	/**
	 * Shows search page for Audit Request object selection and than calls JPO
	 * method to associates selected Audit Requests to Parent Audit Object with
	 * Audit Request relationship.
	 * 
	 * @param context
	 *            ENOVIA Context object.
	 * @param args
	 *            Input arguments.
	 * @return Javascript function to be called to show search page.
	 * @throws AuditException
	 *             If operation fails.
	 */
	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionSelectAuditRequest(Context context, String[] args) throws AuditException {
		try {
			Map<?, ?> programMap = JPO.unpackArgs(args);
			String[] parentIds = (String[]) programMap.get(AuditConstants.OBJECT_ID);
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "showSearchPageForAuditRequests", parentIds[0]);
		}
		catch (Exception e) {
			throw new AuditException(e);
		}
	}

	/**
	 * This method returns the list of Audit Request Ids which are to be
	 * excluded from search result while adding Audit Requests to an audit
	 * 
	 * @param context
	 * @param args
	 * @return StringList
	 * @throws AuditException
	 */
	@com.matrixone.apps.framework.ui.ExcludeOIDProgramCallable
	public StringList getExcludedAuditRequestIds(Context context, String[] args) throws AuditException {
		try {
			StringList auditRequestIds = new StringList();
			final String RELATIONSHIP_AUDIT_REQUEST = PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_REL_AUDITREQUEST);
			final String STATE_RESULTS_READY = AuditUtil.getActualStateName(context, AuditConstants.SYM_POLICY_AUDITREQUEST,
					AuditConstants.SYM_STATE_RESULTSREADY);
			String strWhere = DomainObject.SELECT_CURRENT + "=='" + STATE_RESULTS_READY + "' && to[" + RELATIONSHIP_AUDIT_REQUEST
					+ "].from.exists==true";
			List<Map<?, ?>> auditRequests = QueryUtil.findObjects(context, AuditConstants.SYM_TYPE_AUDITREQUEST, strWhere,
					Helper.stringList(DomainObject.SELECT_ID));
			for (Map<?, ?> map : auditRequests) {
				String objectId = (String) map.get(DomainObject.SELECT_ID);
				auditRequestIds.add(objectId);
			}
			return auditRequestIds;
		}
		catch (Exception e) {
			throw new AuditException(e);
		}
	}

	/**
	 * Associates selected Audit Requests objects to Parent Audit Object with
	 * Audit Request relationship.
	 * 
	 * @param context
	 *            ENOVIA Context object.
	 * @param args
	 *            Input arguments.
	 * @return Javascript function to be called to refresh caller page.
	 * @throws AuditException
	 *             If operation fails.
	 */
	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionAddAuditRequests(Context context, String[] args) throws AuditException {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String[] parentIds = (String[]) programMap.get("parentId");
			String parentId = parentIds[0];
			DomainObject auditObject = null;
			if (!Helper.isNullOrEmpty(parentId)) {
				auditObject = DomainObject.newInstance(context, parentId);
			}

			AuditRequestService auditRequestService = getAuditRequestService(context);

			String[] emxTableRowIds = (String[]) programMap.get("emxTableRowId");
			List<EmxTableRowId> tableRowIdsList = EmxTableRowId.getTableRowIds(emxTableRowIds);
			String[] objectIds = new String[tableRowIdsList.size()];

			List lsAuditRequestIds = new ArrayList<>();
			for (EmxTableRowId emxTableRowId : tableRowIdsList) {
				lsAuditRequestIds.add(emxTableRowId.getObjectId());
			}
			String[] arrAuditRequestIds = (String[]) lsAuditRequestIds.toArray(new String[lsAuditRequestIds.size()]);
			if (!Helper.isNullOrEmpty(arrAuditRequestIds)) {
				auditRequestService.addAuditRequest(context, auditObject, arrAuditRequestIds);
			}
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "refreshAuditRequestPageAfterAdding");

		}
		catch (Exception e) {
			throw new AuditException(e);
		}
	}

	/**
	 * Removes the Audit Request association between selected Audit Request
	 * objects and Parent Audit Object.
	 * 
	 * @param context
	 *            ENOVIA Context object.
	 * @param args
	 *            hold input arguments.
	 * @return JavaScript function name to refresh Structure browser.
	 * @throws AuditException
	 *             if operation fails.
	 */
	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionRemoveAuditRequests(Context context, String[] args) throws AuditException {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String[] parentIds = (String[]) programMap.get(AuditConstants.OBJECT_ID);
			String parentId = parentIds[0];
			DomainObject auditObject = null;
			if (!Helper.isNullOrEmpty(parentId)) {
				auditObject = DomainObject.newInstance(context, parentId);
			}
			AuditRequestService auditRequestService = getAuditRequestService(context);
			String[] emxTableRowIds = (String[]) programMap.get("emxTableRowId");
			List<EmxTableRowId> tableRowIdsList = EmxTableRowId.getTableRowIds(emxTableRowIds);
			List lsAuditRequestIds = new ArrayList<>();
			for (EmxTableRowId emxTableRowId : tableRowIdsList) {
				lsAuditRequestIds.add(emxTableRowId.getObjectId());
			}
			String[] arrAuditRequestIds = (String[]) lsAuditRequestIds.toArray(new String[lsAuditRequestIds.size()]);
			if (!Helper.isNullOrEmpty(arrAuditRequestIds)) {
				auditRequestService.removeAuditRequests(context, auditObject, arrAuditRequestIds);
			}
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "refreshAuditRequestsSBAfterRemovingItem");

		}
		catch (Exception e) {
			throw new AuditException(e);
		}
	}
	
	/**
	 * It generates HTML text to display the field Audit Type in form
	 * 
	 * @param context
	 * @param args
	 * @return String
	 * @throws Exception
	 */
	 public String getFieldAuditType(Context context, String[] args) throws Exception {
		StringBuffer strBufferOutput = new StringBuffer();
		try {
			HashMap mapProgram = (HashMap) JPO.unpackArgs(args);
			HashMap mapRequest = (HashMap) mapProgram.get("requestMap");
			HashMap mapField = (HashMap) mapProgram.get("fieldMap");
			Map mapSettings = (Map) mapField.get("settings");
			String strAttrName = (String) mapSettings.get("Admin Type");
			String sAttrName = (String) mapSettings.get("IW_Attr_Name");
			String strActualName = PropertyUtil.getSchemaProperty(strAttrName);
			String strOptionRange = "", strOptionRangeI18 = "";
			
			// Getting the attribute Ranges
			StringList strRangesList = (StringList) FrameworkUtil.getRanges(context, strActualName);
			strRangesList.add(0, "");
			ArrayList alRange = (ArrayList) strRangesList.parallelStream().sorted().collect(Collectors.toList());
			strRangesList.clear();
			for (Object object : alRange) {
				strRangesList.add((String) object);
			}

			StringList strRangeListI18 = i18nNow.getAttrRangeI18NStringList(sAttrName, strRangesList, context.getSession().getLanguage());

			// Strip off the leading blank item in the list as the Audit Type
			// range values
			// already include a blank.
			if ("".equals(strRangesList.get(0)) && "".equals(strRangesList.get(1))) {
				strRangesList.remove(0);
				strRangeListI18.remove(0);
			}

			// Iterating the Range Values
			Iterator itr = strRangesList.iterator();
			Iterator itrI18 = strRangeListI18.iterator();
			
			strBufferOutput.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"../common/styles/iwCommonStyles.css\" />");
			strBufferOutput.append(" <table><tr><td>");

			strBufferOutput.append(" <select name='" + strActualName + "' id='" + strActualName + "Id" + "' onChange=\"javascript:checkAuditType()\">");
			while (itr.hasNext()) {
				strOptionRange = (String) itr.next();
				strOptionRangeI18 = (String) itrI18.next();
				strBufferOutput.append("<option value ='" + strOptionRange + "'");
				strBufferOutput.append(">" + strOptionRangeI18 + "</option>");
			}
			strBufferOutput.append(" </select></td>");
			strBufferOutput.append("<td>");
			strBufferOutput.append("<input type=\"text\" id='" + PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO) + "' ");
			strBufferOutput.append("name='" + PropertyUtil.getSchemaProperty(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO) + "' />");
		
			strBufferOutput.append("</td>");
			strBufferOutput.append(" </tr></table>");
		
			}
		catch (Exception objException) {
				objException.printStackTrace();
				throw objException;
		}
		
			return strBufferOutput.toString();
	}
	
	/**
		 * It returns Field Audit Type for Audit Summary form
		 * 
		 * @param context
		 * @param args
		 * @return String
		 * @throws Exception
		 */
	public String getFieldAuditTypeInAuditSummary(Context context, String[] args) throws AuditException {
		
		String strAuditExternalInfo = null;
		try {
			// Get form info
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap paramMap = (HashMap) programMap.get(AuditConstants.PARAM_MAP);
			String ObjectId = (String) paramMap.get(AuditConstants.OBJECT_ID);
			final String SELECT_ATTRIBUTE_AUDITTYPE = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_AUDITTYPE);
			final String SELECT_ATTRIBUTE_AUDITEXTERNALINFO = AuditUtil.getObjectAttributeSelectable(context, AuditConstants.SYM_ATTR_AUDITEXTERNALINFO);
			
			if(!Helper.isNullOrEmpty(ObjectId))
			{
			List<Map<?, ?>> ObjectInfo = QueryUtil.getInfo(context, new String[] { ObjectId },
					Helper.stringList(SELECT_ATTRIBUTE_AUDITTYPE,SELECT_ATTRIBUTE_AUDITEXTERNALINFO));
			
			if (!Helper.isNullOrEmpty(ObjectInfo)) {
				Map<?, ?> mpObjectInfo = ObjectInfo.get(0);
				if (!Helper.isNullOrEmpty(mpObjectInfo)) {
					String AuditType = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDITTYPE);
					strAuditExternalInfo = (String) mpObjectInfo.get(SELECT_ATTRIBUTE_AUDITEXTERNALINFO);
					if(AuditType.equals(AuditConstants.STR_OTHER))
					{
						if(Helper.isNullOrEmpty(strAuditExternalInfo))
						{
							return AuditConstants.STR_OTHER;
						}
					}
				}
		
			}
		}
	}
			catch (Exception objException) {
				throw new AuditException(objException);
			}
			
		return strAuditExternalInfo;
			
		}
	
	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionReviseAudit(Context context, String[] args) throws AuditException {
		try {
			HashMap<?, ?> programMap = (HashMap<?, ?>) JPO.unpackArgs(args);
			String[] sFindingId = (String[]) programMap.get(AuditConstants.OBJECT_ID);
			if(!Helper.isNullOrEmpty(sFindingId) && !Helper.isNullOrEmpty(sFindingId[0])) {
				DomainObject auditDomObj = DomainObject.newInstance(context, sFindingId[0]);
				auditDomObj.reviseObject(context, false);
			}
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, AuditConstants.REFRESH_OPENER_WINDOW);
		} catch (Exception e) {
			throw new AuditException(e);
		}
	}


}

