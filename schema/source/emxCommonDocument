/*
 **   emxCommonDocument.java
 **
 **   Copyright (c) 1992-2018 Dassault Systemes.
 **   All Rights Reserved.
 **   This program contains proprietary and trade secret information of MatrixOne,
 **   Inc.  Copyright notice is precautionary only
 **   and does not evidence any actual or intended publication of such program
 **
 */

import java.util.HashMap;
import java.util.Map;

import com.matrixone.apps.common.CommonDocument;
import com.matrixone.apps.common.util.ComponentsUtil;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.MqlUtil;

import matrix.db.*;
import matrix.util.StringList;

public class ${CLASSNAME} extends ${CLASS:emxCommonDocumentBase}
{
	private static final String PARAM_NULL = "null";
	private static final String PARAM_TRUE = "true";
	private static final String PARAM_FALSE = "false";
	private static final String EMXCOMPONENTS_STR_RESOURCE = "emxComponentsStringResource";
	/**
	 * Constructor.
	 *
	 * @param context the eMatrix <code>Context</code> object
	 * @param args holds no arguments
	 * @throws Exception if the operation fails
	 * @since Common 10.0.0.0
	 * @grade 0
	 */
	public ${CLASSNAME} (Context context, String[] args)
			throws Exception
	{
		super(context, args);
	}

	/**
	 * This method is executed if a specific method is not specified.
	 *
	 * @param context the eMatrix <code>Context</code> object
	 * @param args holds no arguments
	 * @returns int
	 * @throws Exception if the operation fails
	 * @since Common 10.0.0.0
	 */
	public int mxMain(Context context, String[] args)
			throws Exception
	{
		if (true)
		{
			throw new Exception(ComponentsUtil.i18nStringNow("emxComponents.Generic.MethodOnCommonFile", context.getLocale().getLanguage()));
		}
		return 0;
	}
	/**
	 * This method is executed if a specific method is not specified.
	 *
	 * @param context the eMatrix <code>Context</code> object
	 * @param args holds no arguments
	 *            args[0] is DOCUMENTS or its derived object - objectId to cehckin
	 *            args[1] is File Path where the file is located in the disk EX: c:\temp\
	 *            args[2] is File Name which need to be checked in given path EX:xyz.doc
	 *            args[3] is File Format in which this file need to be checked in EX:generic
	 *            args[4] is store Name where this file should be checked in EX:STORE
	 *            args[5] is unlock this should be 'true' or 'false' true to unlock the version object.
	 *            args[6] is server key word to checkin from from server
	 *                        this should be server when calling from thinck client
	 *                        this should be client when calling from powerweb
	 *            args[7] is Comments to the file getting checked in
	 *  Example to call this method through mql
	 *  execute program emxCommonDocument -method checkinBus objectId c:\temp\ tempFile.txt generic STORE false server 'New File Added';
	 *
	 * @returns nothing
	 * @throws Exception if the operation fails
	 */
	//*            args[8] is old File Name which need to be versiond by the new File getting checked in
	//*                        this is an optional parameter. This is required only to change an existing file with the new file
	//*                        and file name are different.

	public int checkinBus(Context context, String[] args) throws Exception
	{
		if(!context.isConnected())
		{
			throw new Exception(ComponentsUtil.i18nStringNow("emxComponents.Generic.NotSupportedOnDesktopClient", context.getLocale().getLanguage()));
		}
		try
		{
			String oid = null;
			String filePath = null;
			String fileName = null;
			String format = null;
			String store = null;
			String unlock = null;
			String server = null;
			String comments = null;
			String oldFileName = null;
			try
			{
				oid = args[0];
				filePath = args[1];
				fileName = args[2];
				format = args[3];
				store = args[4];
				unlock = args[5];
				server = args[6];
				comments = args[7];
			} catch(Exception ex) {
				//Ignore exception
			}
			if ( oid == null || "".equals(oid) )
			{
				throw new Exception(ComponentsUtil.i18nStringNow("emxComponents.CommonDocumentBase.ObjectIdNotEmpty", context.getLocale().getLanguage()));
			}
			if ( fileName == null || "".equals(fileName) )
			{
				throw new Exception(ComponentsUtil.i18nStringNow("emxComponents.CommonDocumentBase.FileNameNotEmpty", context.getLocale().getLanguage()));
			}
			if ( format == null || "".equals(format) )
			{
				throw new Exception(ComponentsUtil.i18nStringNow("emxComponents.CommonDocumentBase.FileFormateNotEmpty", context.getLocale().getLanguage()));
			}
			if ( store == null || "".equals(store) )
			{
				throw new Exception(ComponentsUtil.i18nStringNow("emxComponents.CommonDocumentBase.FileStoreNameNotEmpty", context.getLocale().getLanguage()));
			}

			if ( unlock != null && PARAM_TRUE.equalsIgnoreCase(unlock) )
			{
				unlock = "unlock";
			} else {
				unlock = "";
			}
			if ( server == null || "".equals(server) || PARAM_NULL.equals(server) )
			{
				server = "server";
			}
			server = server.toLowerCase();
			if(!"server".equals(server) && !"client".equals(server) )
			{
				server = "server";
			}
			if ( oldFileName == null || "".equals(oldFileName) || PARAM_NULL.equals(oldFileName) )
			{
				oldFileName = fileName;
			}
			Map attrMap = new HashMap();
			ContextUtil.startTransaction(context, true);
			CommonDocument object = (CommonDocument) DomainObject.newInstance(context, oid);
			StringList selectList = new StringList();
			selectList.add(CommonDocument.SELECT_FILE_NAMES_OF_ACTIVE_VERSION);
			selectList.add(CommonDocument.SELECT_ACTIVE_FILE_LOCKER);
			selectList.add(CommonDocument.SELECT_MOVE_FILES_TO_VERSION);
			Map selectMap = object.getInfo(context, selectList);
			StringList fileList = (StringList) selectMap.get(CommonDocument.SELECT_FILE_NAMES_OF_ACTIVE_VERSION);
			StringList fileLockerList = (StringList) selectMap.get(CommonDocument.SELECT_ACTIVE_FILE_LOCKER);
			boolean moveFilesToVersion = Boolean.valueOf((String) selectMap.get(CommonDocument.SELECT_MOVE_FILES_TO_VERSION)).booleanValue();
			if ( comments != null && !"".equals(comments) && !PARAM_NULL.equals(comments) )
			{
				attrMap.put(CommonDocument.ATTRIBUTE_CHECKIN_REASON, comments);
			}

			String objectId = object.reviseVersion(context, oldFileName, fileName, attrMap);
			if ( objectId == null )
			{
				String errorMessage = EnoviaResourceBundle.getProperty(context,EMXCOMPONENTS_STR_RESOURCE,context.getLocale(),"emxComponents.CommonDocument.DocumentsAreNotLockedByUser");
				throw new Exception(errorMessage + " \n" + oldFileName);
			}

			if ( !moveFilesToVersion )
			{
				objectId = oid;
			}
			//String cmd = "checkin bus $1 $2 $3 format $4 store $5 append $6 $7";	
			String cmd = "checkin bus $1 $2 $3 format $4 store $5 append $6";  			
			MqlUtil.mqlCommand(context, cmd, objectId, unlock, server, format, store, filePath+java.io.File.separatorChar+fileName);
			ContextUtil.commitTransaction(context);
			return 0;
		} catch (Exception ex) {
			ex.printStackTrace();
			ContextUtil.abortTransaction(context);
			throw ex;

		}
	}
}

