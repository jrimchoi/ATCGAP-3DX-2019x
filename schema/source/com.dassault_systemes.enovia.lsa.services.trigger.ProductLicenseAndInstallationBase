/*
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */


import java.util.List;

import matrix.db.Context;

import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.Helper.LSAProductAppVersion;
import com.dassault_systemes.enovia.lsa.Helper.LSARoleLicense;
import com.dassault_systemes.enovia.lsa.LSAException;
import com.matrixone.apps.domain.util.FrameworkUtil;

public class ${CLASSNAME} {

	/**
	 * Constructs a new JPO object.
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            This argument is ignored, only provided for allowing it to be
	 *            called from UI components.
	 * @throws LSAException
	 *             if the operation fails
	 */
	public ${CLASSNAME}(Context context, String[] args) throws LSAException {
		super();
	}

	/**
	 * Checks if particular role License is assigned and Product is installed.
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            holds input arguments.
	 * @return int 0 - success, 1 - failure
	 * @throws LSAException
	 */
	public int isLicenseAssignedAndProductInstalled(Context context, String[] args) throws LSAException {
		try {
			String strLSARoleLicenses = args[0];
			String strAppVersion = args[1];
			if (!Helper.isNullOrEmpty(strLSARoleLicenses)) {
				List<String> lsLSARoleLicenses = FrameworkUtil.split(strLSARoleLicenses, ",");
				if (!Helper.isNullOrEmpty(lsLSARoleLicenses)) {
					LSARoleLicense[] roleLicenses = new LSARoleLicense[lsLSARoleLicenses.size()];
					int index = 0;
					for (String strRoleLicense : lsLSARoleLicenses) {
						roleLicenses[index++] = LSARoleLicense.valueOf(strRoleLicense);
					}
					if (!Helper.isNullOrEmpty(roleLicenses)) {
						try {
							Helper.isLicenseAssigned(context, roleLicenses);
						}
						catch (Exception e) {
							StringBuilder sbErrorMessage = new StringBuilder();
							sbErrorMessage.append(Helper.getI18NString(context, Helper.StringResource.LSA,
									"LSACommonFramework.Message.LicenseNotAssigned"));
							sbErrorMessage.append("\n");
							sbErrorMessage.append(strLSARoleLicenses);
							Helper.mqlError(context, Helper.StringResource.LSA, sbErrorMessage.toString());
							return 1;
						}
					}
				}
			}
			if (!Helper.isNullOrEmpty(strAppVersion)) {
				if (!Helper.isProductInstalled(context, strAppVersion)) {
					StringBuilder sbErrorMessage = new StringBuilder();
					sbErrorMessage.append(Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Message.ProductNotInstalled"));
					sbErrorMessage.append("\n");
					sbErrorMessage.append(LSAProductAppVersion.valueOf(strAppVersion).getLSAProductAppVersion());
					Helper.mqlError(context, Helper.StringResource.LSA, sbErrorMessage.toString());
					return 1;
				}
			}
			return 0;
		}
		catch (Exception e) {
			throw new LSAException(e);
		}
	}
}

