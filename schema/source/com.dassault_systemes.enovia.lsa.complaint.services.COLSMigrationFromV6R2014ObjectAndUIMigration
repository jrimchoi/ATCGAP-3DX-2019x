
/**
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import matrix.db.Context;

import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.ticket.TicketConstants;
import com.dassault_systemes.enovia.lsa.ticket.TicketException;
import com.matrixone.apps.common.Person;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.framework.ui.UIUtil;

/**
 * @author v8l
 * 
 */
public class ${CLASSNAME}  {

	private static Logger		logger					= Logger.getLogger(${CLASS:com.dassault_systemes.enovia.lsa.complaint.services.COLSMigrationFromV6R2014ObjectAndUIMigration}.class
																.getName());
	// private static final String fileSeparator = java.io.File.separator;
	private static final String	TRACE_PQC_MIGRATION		= "LPQMigration";
	private static final String	FILE_PQC_MIGRATION_LOG	= "LPQMigration.log";

	public static void objectAndUIMigration(Context context, String[] args) throws TicketException {
		String strPath = new String();
		String strStartOfFile = new String();
		String strEndOfFile = new String();
		int startOfFile = 0;
		int endOfFile = 0;
		String firstArg = "";
		String secondArg = "";
		String strTypeOfMigration = "LPQ";
		boolean isValidFilePath = false;

		if (args.length == 0) {

			try {
				help(context, args);
				return;
			}
			catch (Exception e) {
				throw new TicketException(e.getLocalizedMessage());
			}
		}
		else {

			firstArg = args[0];
			if (firstArg.equals("help")) {
				try {
					help(context, args);
					return;
				}
				catch (Exception e) {
					throw new TicketException(e.getLocalizedMessage());
				}
			}

		}
		try {
			strPath = firstArg;
			isValidFilePath = validateFilePath(strPath);
			startOfFile = getStartOfFile(strStartOfFile);
			endOfFile = getEndOfFile(strEndOfFile, startOfFile, strPath);
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
		if (isValidFilePath) {
			FileHandler fileLogging = null;
			try {
				fileLogging = createLogFile(getLogFileName(strTypeOfMigration), strPath + File.separator);
			}
			catch (Exception e) {
				throw new TicketException(e);
			}
			firstArg = args[0];
			if (args.length > 1) {
				secondArg = args[1];
				if (secondArg.equals("UIandSchema")) {
					logger.log(Level.INFO, "Executing PQC UI And Schema Migration.");
					${CLASS:com.dassault_systemes.enovia.lsa.complaint.services.COLSMigrationFromV6R2014SchemaAndUIMigration} uiAndSchema = new ${CLASS:com.dassault_systemes.enovia.lsa.complaint.services.COLSMigrationFromV6R2014SchemaAndUIMigration}();
					uiAndSchema.migrateUIandSchema(context, logger);
					logger.log(Level.INFO, "PQC UI And Schema Migration Completed.");
				}
			}

			// Create log file

			try {

				if (isValidFilePath) {
					String strFileName = TRACE_PQC_MIGRATION;
					executePQCMigration(context, strPath, strFileName, startOfFile, endOfFile);
				}

			}
			catch (Exception e) {
				throw new TicketException(e.getLocalizedMessage());
			}

			fileLogging.close();
		}
	}

	private static void executePQCMigration(Context context, String strPath, String strFileName, int startOfFile, int endOfFile) throws TicketException {
		logger.log(Level.INFO, "Executing PQC Migration");
		try {
			List<Map<String, String>> complaintTickets = (List<Map<String, String>>) readObjectsFromFiles(strPath, strFileName, startOfFile,
					endOfFile);

			List<Map<String, String>> successMap = new ArrayList<>(complaintTickets.size());
			List<Map<String, String>> failureMap = new ArrayList<>(complaintTickets.size());
			try {
				for (Map<String, String> part : complaintTickets) {
					String complaintTicketId = (String) part.get(DomainConstants.SELECT_ID);
					DomainObject complaintTicketObj = DomainObject.newInstance(context);
					try {
						if (null == complaintTicketId || complaintTicketId.trim().isEmpty()) {
							throw new Exception("Complaint Ticket id passed for migration is not correct.");
						}
						complaintTicketObj = DomainObject.newInstance(context, complaintTicketId);
						complaintTicketObj.openObject(context);
						try {
							logger.log(Level.INFO,
									"Migrating " + complaintTicketObj.getName() + " object of type " + (String) part.get(DomainConstants.SELECT_TYPE));
							final String complaintTicketOwner = complaintTicketObj.getOwner(context).getName();

							context.setCustomData("validatedLicenses", "ENOCOLS_TP");
							Person.refreshPerson(context, complaintTicketOwner);

							boolean isQualityManager = (boolean) Helper.runWithUser(context, complaintTicketOwner, new Helper.Callable() {
								@Override
								public Object run(Context context, Object... args) throws TicketException {
									try {
										return Helper.hasRoles(context, TicketConstants.SYMBOLIC_ROLE_QUALITY_MANAGER);
									}
									catch (final Exception e) {
										throw new TicketException(e);
									}
								}
							}, complaintTicketObj);

							Vector<String> roles = PersonUtil.getAssignments(context, complaintTicketOwner);
							if (!isQualityManager) {
								roles.add("Quality Manager");
								PersonUtil.setAssignments(context, complaintTicketOwner, roles);
							}
							DomainObject newComplaintTicketObject = (DomainObject) Helper.runWithUser(context, complaintTicketOwner,
									new Helper.Callable() {
										@Override
										public Object run(Context context, Object... args) throws TicketException {
											final DomainObject complaintTicketObj = (DomainObject) args[0];
											try {

												${CLASS:com.dassault_systemes.enovia.lsa.complaint.services.COLSMigration} migration = new ${CLASS:com.dassault_systemes.enovia.lsa.complaint.services.COLSMigration}();
												DomainObject newComplaintTicketObject = migration.migrate(context, complaintTicketObj,false);
												return newComplaintTicketObject;
											}
											catch (final Exception e) {
												throw new TicketException(e);
											}
										}
									}, complaintTicketObj);

							if (!isQualityManager) {
								roles.remove("Quality Manager");
								PersonUtil.setAssignments(context, complaintTicketOwner, roles);
							}

							part.put("New Corresponding Object id", newComplaintTicketObject.getObjectId());
							part.put("New Corresponding Object Name", newComplaintTicketObject.getName());
							logger.log(Level.INFO, "Migration of " + complaintTicketObj.getName() + " completed and is mapped to new object "
									+ newComplaintTicketObject.getName() + " .");
							successMap.add(part);
						}
						catch (Exception e) {
							throw new TicketException(e);
						}
						finally {
							complaintTicketObj.closeObject(context, true);
						}
					}
					catch (Exception e) {
						part.put("Error while Migration", e.toString().trim());
						failureMap.add(part);
						logger.log(
								Level.SEVERE,
								"Error while migrating " + complaintTicketObj.getName() + " object of type "
										+ (String) part.get(DomainConstants.SELECT_TYPE));
						logger.log(Level.SEVERE, e.getLocalizedMessage());
					}

				}
				createCSVFile(context, strPath, "SuccessStatus", successMap, 0, true);
				createCSVFile(context, strPath, "FailureStatus", failureMap, 0, false);
				logger.log(Level.INFO, "PQC Migration Completed");
			}
			catch (final Exception e) {
				throw new TicketException(e);
			}

		}
		catch (FileNotFoundException e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());

		}
		catch (FrameworkException | IOException e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new TicketException(e);
		}
		catch (Exception e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new TicketException(e);
		}

	}
	
	protected static void createCSVFile(Context context, String strFullPath, String strFileName, List<Map<String, String>> objectListMap,
			int flagForFirstTime, boolean success) throws IOException, TicketException {
		int fileNumber = 1;
		File file = new File(strFullPath + File.separator + strFileName + "_" + fileNumber + ".xls");

		int strLimitPerFile = 100;
		boolean isFileCreated = file.createNewFile();
		if (isFileCreated || file.exists()) {
			FileWriter writer = new FileWriter(file);
			PrintWriter pw = new PrintWriter(writer);
			int count = 0;
			for (Map<?, ?> objectMap : objectListMap) {
				Map<?, ?> attributesList = objectMap;
				if (count != 0 && Math.IEEEremainder(count, strLimitPerFile) == 0) {
					pw.close();
					fileNumber++;
					file = new File(strFullPath + File.separator + strFileName + "_" + fileNumber + ".xls");
					writer = new FileWriter(file);
					pw = new PrintWriter(writer);
					flagForFirstTime = 0;
				}
				Set<?> setOfKeys = attributesList.keySet();
				Iterator<?> itrKeys = setOfKeys.iterator();
				if (flagForFirstTime == 0) {
					while (itrKeys.hasNext()) {
						String key = (String) itrKeys.next();
						attributesList.get(key).toString().trim().replace("\n", " ").replace("\t", " ");
						pw.print(key + "\t");
						flagForFirstTime = 1;
					}
					pw.print("Migration" + "\t");
					pw.print("Message" + "\t");
				}
				if (flagForFirstTime == 1) {
					pw.println();
					Iterator<?> itrValues = setOfKeys.iterator();
					while (itrValues.hasNext()) {
						String key = (String) itrValues.next();
						attributesList.get(key).toString().trim().replace("\n", " ").replace("\t", " ");
						pw.print(attributesList.get(key) + "\t");

					}
					if (success) {
						pw.print("Migration Done" + "\t");
						pw.print("-" + "\t");
					}
					else {
						pw.print("FAILURE" + "\t");
						pw.print(attributesList.get("Error while Migration") + "\t");
					}
				}
				pw.flush();
				count++;
			}
			pw.close();

		}
	}

	protected static FileHandler createLogFile(String strFileNameForLogs, String strFullPath) throws TicketException {
		DateFormat dateFormat = new SimpleDateFormat("yyyyddMMHHmmss");
		java.util.Date date = new java.util.Date();

		FileHandler fh;
		try {
			File logFolder = new File(strFullPath + File.separator + "Logs_ObjectMigration_" + dateFormat.format(date));
			logFolder.mkdir();
			logFolder.setWritable(true);
			logFolder.setExecutable(true);
			logger.log(Level.INFO, "Creating log file");
			File logFile = new File(logFolder.getAbsolutePath() + File.separator + strFileNameForLogs.trim().replace(" ", "_")
					+ "ObjectMigration.txt");
			logFile.setWritable(true);
			logFile.setExecutable(true);
			fh = new FileHandler(logFile.getAbsolutePath());
			fh.setFormatter(new SimpleFormatter());
			logger.addHandler(fh);
			return fh;
		}
		catch (SecurityException e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new TicketException(e);
		}
		catch (IOException e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new TicketException(e);
		}
	}

	protected static boolean validateFilePath(String strPath) throws TicketException {
		// Validate path
		logger.log(Level.INFO, "Validating File Path");
		boolean isPathNotNullOrNotEmpty = UIUtil.isNotNullAndNotEmpty(strPath);
		File filePath = new File(strPath);
		if (isPathNotNullOrNotEmpty && !filePath.isDirectory()) {
			logger.log(Level.SEVERE, "Invalid file path!!!");
			throw new TicketException("Invalid file path!!!");
		}
		else {
			logger.log(Level.INFO, "File Path Validated");
			return true;
		}
	}

	protected static List<Map<String, String>> readObjectsFromFiles(String strPath, String strfileName, int startOfFile, int endOfFile)
			throws FileNotFoundException, IOException, FrameworkException, TicketException {
		List<Map<String, String>> listOfObjects = new ArrayList<>();

		if (startOfFile > endOfFile) {
			throw new TicketException("File start " + startOfFile + "cannot be grater than end of file" + endOfFile);
		}

		for (int i = startOfFile; i <= endOfFile; i++) {
			String objectDetails = "";
			String fullFileName = strPath + File.separator + strfileName + "_" + i + ".xls";
			File f = new File(fullFileName);
			logger.log(Level.INFO, "Reading objects from file: " + fullFileName);
			BufferedReader fileReader = new BufferedReader(new FileReader(f));
			objectDetails = fileReader.readLine();
			String[] arr = objectDetails.split("\t");
			while ((objectDetails = fileReader.readLine()) != null) {
				String[] arrValues = objectDetails.split("\t");
				Map<String, String> mapOfObjectDetails = new HashMap<>();
				for (int k = 0; k < arrValues.length; k++) {
					mapOfObjectDetails.put(arr[k], arrValues[k]);
				}
				listOfObjects.add(mapOfObjectDetails);
			}
			fileReader.close();
			logger.log(Level.INFO, "Reading done from: " + fullFileName);
		}

		return listOfObjects;
	}

	protected static int getStartOfFile(String strStartOfFile) throws TicketException {
		try {
			if (UIUtil.isNotNullAndNotEmpty(strStartOfFile)) {
				int startOfFile = Integer.parseInt(strStartOfFile);
				return startOfFile;
			}
			else {
				return 1;
			}
		}
		catch (NumberFormatException e) {
			return 1;
		}
	}

	protected static int getEndOfFile(String strEndOfFile, int startOfFile, String strPath) throws TicketException {
		try {
			int endOfFile = 1;
			if (UIUtil.isNotNullAndNotEmpty(strEndOfFile)) {
				if (strEndOfFile.equalsIgnoreCase("n")) {
					int count = 0;
					File file = new File(strPath);
					if (file.isDirectory()) {
						File[] listOfFilesInDirectory = file.listFiles();
						for (int i = 0; i < listOfFilesInDirectory.length; i++) {
							String fileName = listOfFilesInDirectory[i].getName();
							if (fileName.endsWith(".xls")) {
								count++;
							}
						}
					}
					endOfFile = count;
				}
				else {
					endOfFile = Integer.parseInt(strEndOfFile);
				}
				return endOfFile;
			}
			else {
				return startOfFile;
			}
		}
		catch (NumberFormatException e) {
			return 1;
		}
	}

	protected static String getLogFileName(String strLogFileName) {
		boolean isLogFileNameGiven = UIUtil.isNotNullAndNotEmpty(strLogFileName);
		if (isLogFileNameGiven) {
			return strLogFileName + "_" + "ObjectsMigrated" + "_log";
		}
		else {
			return "ObjectsMigrated" + "_log";
		}
	}

	/**
	 * Print "End: <method name>" trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @throws TicketException
	 *             if operation fails
	 */
	protected static void traceBeginMethod(Context context) throws TicketException {
		String methodName = getTracedMethodName();
		traceBegin(context, methodName + "()");
	}

	/**
	 * Print "ERROR: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws TicketException
	 *             if operation fails
	 */
	protected static void traceError(Context context, String message) throws TicketException {
		trace(context, "ERROR: " + message);
	}

	/**
	 * Print "End: <method name>" trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @throws TicketException
	 *             if operation fails
	 */
	protected static void traceEndMethod(Context context) throws TicketException {
		final String methodName = getTracedMethodName();
		traceEnd(context, methodName + "()");
	}

	/**
	 * Print "End: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws TicketException
	 *             if operation fails
	 */
	protected static void traceEnd(Context context, String message) throws TicketException {
		trace(context, "End: " + message);
	}

	/**
	 * Prints trace message for trace type LPIMigration
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws TicketException
	 *             if operation fails
	 */
	protected static void trace(Context context, String message) throws TicketException {
		try {
			context.printTrace(TRACE_PQC_MIGRATION, message);
		}
		catch (Exception exp) {
			traceError(context, exp.getMessage());
			throw new TicketException(exp);
		}
	}

	/**
	 * Print "Begin: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws TicketException
	 *             if operation fails
	 */
	protected static void traceBegin(Context context, String message) throws TicketException {
		trace(context, "Begin: " + message);
	}

	/**
	 * Returns the name of the method being traced. This SHOULD NOT be called by
	 * any client other than traceBeginMethod and traceEndMethod methods.
	 * 
	 * @return the method name
	 */
	protected static String getTracedMethodName() {
		Exception exp = new Exception();
		StackTraceElement[] stes = exp.getStackTrace();
		StackTraceElement ste = stes[2];
		String methodName = ste.getMethodName();
		return methodName;
	}

	public static void mxMain(Context context, String[] args) throws TicketException {
		try {
			boolean traceON = true;
			boolean allSession = false; // false for only this session

			context.setTrace(FILE_PQC_MIGRATION_LOG, TRACE_PQC_MIGRATION, traceON, allSession);
			traceBeginMethod(context);

			System.out.println("================================================================================================\n");
			objectAndUIMigration(context, args);
			System.out.println("================================================================================================\n");
		}
		catch (Exception exp) {
			try {
				traceError(context, exp.getMessage());
			}
			catch (Exception e) {
				throw new TicketException(e);
			}
			throw new TicketException(exp);
		}
		finally {
			try {
				traceEndMethod(context);
			}
			catch (Exception e) {
				throw new TicketException(e);
			}
		}
	}

	public static void help(Context context, String[] args) throws Exception {
		if (!context.isConnected()) {
			throw new Exception("not supported on desktop client");
		}
		System.out.println("================================================================================================\n");
		System.out.println(" LPQ Migration is a two step process  \n");
		System.out.println(" Step1: Find objects for migration and write them into .csv file \n");
		System.out.println(" Example: \n");
		System.out.println(" execute com.dassault_systemes.enovia.lsa.complaint.services.LPQMigrationV62014xFindObjects F:\\Migration; \n");
		System.out.println(" First parameter  = the directory where files should be written \n");
		System.out
				.println(" This step creates two files - OidsForMigration.csv & OidsForMigration.txt - having the details about all the objects. \n");
		System.out.println(" These files are created at the location provided as the first parameter \n");
		System.out.println(" These files show which of the listed objects are migratable and which are not with appropriate reasons. \n");
		System.out.println(" NOTE : Please do not edit the \"id\" field of the file. Editing it will cause failure in Step2 of migration. \n");
		System.out.println(" \n");
		System.out.println(" Step2: Migrate the UI, schema and objects \n");
		System.out.println(" UI,schema and migratable objects found in Step1 can be migrated in 2 ways \n");
		System.out.println(" i) Migrating all three at once. \n");
		System.out.println(" Example: \n");
		System.out
				.println(" execute com.dassault_systemes.enovia.lsa.complaint.services.LPQMigrationV62014xObjectAndUIMigration F:\\Migration UIandSchema; \n");
		System.out.println(" First parameter  = the directory where files should be written \n");
		System.out.println(" Second Parameter = tells the program that UI and schema are to be migrated as well. \n");
		System.out.println(" ii) Migrating the objects only. \n");
		System.out.println(" Example: \n");
		System.out.println(" execute com.dassault_systemes.enovia.lsa.complaint.services.LPQMigrationV62014xObjectAndUIMigration F:\\Migration; \n");
		System.out.println(" First parameter  = the directory where the.csv file is present \n");
		System.out.println(" \n");
		System.out.println(" Both of these ways create 2 files int he path provided - SuccessStatus.csv & FailureStatus.csv \n");
		System.out
				.println(" SuccessStatus.csv - This file has the details about the objects which were migrated successfuly. It also contains the details about their corresponding newly created object.\n");
		System.out
				.println(" FailureStatus.csv - This file has the details about the objects which could not be migrated along with the reason for failure.\n");
		System.out.println("The objects which could not be migrated, user can rectify the reason and run the command in Step2(ii) again. \n");
		System.out.println("================================================================================================\n");
	}
}

