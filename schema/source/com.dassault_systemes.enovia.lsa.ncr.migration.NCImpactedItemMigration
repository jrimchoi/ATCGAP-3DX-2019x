/*
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import matrix.db.Context;
import matrix.util.MatrixException;

import com.dassault_systemes.enovia.lsa.ncr.NCRException;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.framework.ui.UIUtil;

public class ${CLASSNAME} {

	private static final String	TRACE_NC_MIGRATION		= "NCMigration";
	private static final String	FILE_NC_MIGRATION_LOG	= "NCMigration.log";
	private static final String	IMPACTED_ITEMS			= "Impacted Items";
	private static final String	DELIMETER_CHARACTER		= ",";
	private static final Logger	logger					= Logger.getLogger(${CLASSNAME}.class.getName());
	private static final String	FILE_SEPERATOR			= java.io.File.separator;
	private static final String	FILE_EXTENSION			= ".xls";
	private static final String	ERROR					= "error";
	private static String		MIGRATION_START_TIME	= DomainConstants.EMPTY_STRING;

	public ${CLASSNAME}() {

	}

	private static void executeNCMigration(Context context, String[] args) throws NCRException {
		String strDirPath = DomainConstants.EMPTY_STRING;
		String strStartOfFile = DomainConstants.EMPTY_STRING;
		String strEndOfFile = DomainConstants.EMPTY_STRING;
		int startOfFile = 1;
		int endOfFile = 1;

		if (args.length == 0 || "help".equalsIgnoreCase(args[0])) {
			try {
				help(context, args);
			}
			catch (Exception e) {
				throw new NCRException(e.getLocalizedMessage());
			}
		}
		else {
			if ((args.length == 1)) {
				strDirPath = args[0];
				strStartOfFile = "1";
				strEndOfFile = "n";
			}
			else if ((args.length == 2)) {
				strDirPath = args[0];
				strStartOfFile = args[1];
				strEndOfFile = "n";
			}
			else if ((args.length == 3)) {
				strDirPath = args[0];
				strStartOfFile = args[1];
				strEndOfFile = args[2];
			}
			else {
				throw new NCRException("Arguments passed incorrectly!!! To get help: Please pass only one argument: \"help\" to the program");
			}
			validateFilePath(strDirPath);
			startOfFile = getStartOfFile(strStartOfFile);
			endOfFile = getEndOfFile(strEndOfFile, startOfFile, strDirPath);

			LocalDateTime currentTime = LocalDateTime.now();
			DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MMddyyyy_HHmmss");
			MIGRATION_START_TIME = currentTime.format(dtf);
			FileHandler fileLogging = createLogFile(TRACE_NC_MIGRATION, strDirPath);

			try {
				executeNCImpactedItemMigration(context, strDirPath, startOfFile, endOfFile);
				fileLogging.close();
			}
			catch (Exception e) {
				fileLogging.close();
				throw new NCRException(e.getLocalizedMessage());
			}

		}
	}

	private static void executeNCImpactedItemMigration(Context context, String strPath, int startOfFile, int endOfFile) throws NCRException {
		logger.log(Level.INFO, "Executing NC Migration for Impacted items");
		try {
			final String RELATIONSHIP_IMPACTED_ITEM = PropertyUtil.getSchemaProperty(context, "relationship_ImpactedItem");
			List<Map<String, String>> mapListFailedNCObjects = new ArrayList<>();

			List<Map<String, String>> mapListNCObjects = readObjectsFromFiles(strPath, startOfFile, endOfFile);
			mapListNCObjects.stream().forEach(map -> {
				try {
					if (map.containsKey(DomainConstants.SELECT_ID)) {
						String strNCID = (String) map.get(DomainConstants.SELECT_ID);
						int count = Integer.valueOf(MqlUtil.mqlCommand(context, "evaluate expression $1 on expand bus $2 $3 rel $4 dump", true,
								"Count(true)", strNCID, "from", RELATIONSHIP_IMPACTED_ITEM));
						if (count == 0) {
							String impactedItems = (String) map.get(IMPACTED_ITEMS);
							String[] splitII = impactedItems.replaceAll("\"", "").split(DELIMETER_CHARACTER);
							ContextUtil.startTransaction(context, true);
							for (String impactedItem : splitII) {
								MqlUtil.mqlCommand(context, "add connection $1 from $2 to $3", true, RELATIONSHIP_IMPACTED_ITEM, strNCID,
										impactedItem);
							}
							ContextUtil.commitTransaction(context);
							logger.log(Level.INFO, strNCID + " migrated successfully.");
						}
						else {
							logger.log(Level.INFO, strNCID + " object is already inline with new data model");
						}
					}
				}
				catch (Exception e) {
					ContextUtil.abortTransaction(context);
					map.put(ERROR, e.getMessage());
					mapListFailedNCObjects.add(map);
					logger.log(Level.SEVERE, e.getLocalizedMessage());
				}
			});

			if (mapListFailedNCObjects.isEmpty()) {
				logger.log(Level.INFO, "NC Migration Completed");
			}
			else {
				createCSVForMigration(context, strPath, mapListFailedNCObjects);
				logger.log(Level.INFO, "NC Migration Completed with error. Please see the log file for more details.");
			}

		}
		catch (Exception e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new NCRException(e);
		}
	}

	private static File createCSVForMigration(Context context, String strFullPath, List<Map<String, String>> failedNCObjectList) throws NCRException {
		traceBeginMethod(context);
		try {
			if (!strFullPath.endsWith(File.separator)) {
				strFullPath += File.separator;
			}
			File file = new File(strFullPath + "NCMigration_FailedObjects" + FILE_EXTENSION);
			boolean isFileCreated = file.createNewFile();

			if (isFileCreated || file.exists()) {
				FileWriter writer = new FileWriter(file);
				PrintWriter pw = new PrintWriter(writer);
				logger.log(Level.INFO, "Writing objects to file");

				// Add keys as header for excel
				Set<String> keySet = failedNCObjectList.get(0).keySet();
				Iterator<?> itrKeys = keySet.iterator();
				while (itrKeys.hasNext()) {
					String key = (String) itrKeys.next();
					failedNCObjectList.get(0).get(key).toString().trim().replace("\n", " ").replace("\t", " ");
					pw.print(key + "\t");
				}

				for (Map<String, String> objectMap : failedNCObjectList) {
					Iterator<?> itrValues = keySet.iterator();
					pw.println();
					while (itrValues.hasNext()) {
						String key = (String) itrValues.next();
						String value = objectMap.get(key).toString().trim().replace("\n", " ").replace("\t", " ");
						pw.print(value + "\t");
					}
					logger.log(Level.INFO, "Object: " + objectMap.get(DomainConstants.SELECT_NAME) + " written");
					pw.flush();
				}

				pw.close();
				logger.log(Level.INFO, "Objects are written to file");
			}
			else {
				throw new NCRException("Please check if path " + strFullPath + " is correct");
			}
			return file;
		}
		catch (Exception e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new NCRException(e);
		}
		finally {
			traceEndMethod(context);
		}
	}

	/**
	 * Entry point of the migration program.
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param args
	 *            The command line arguments
	 * @throws NCRException
	 *             if operation fails
	 * @throws MatrixException
	 */
	public static void mxMain(Context context, String[] args) throws NCRException {
		try {
			boolean traceON = true;
			boolean allSession = false; // false for only this session

			context.setTrace(FILE_NC_MIGRATION_LOG, TRACE_NC_MIGRATION, traceON, allSession);
			traceBeginMethod(context);
			executeNCMigration(context, args);
		}
		catch (Exception exp) {
			ContextUtil.abortTransaction(context);
			traceError(context, exp.getMessage());
			throw new NCRException(exp);
		}
		finally {
			traceEndMethod(context);
		}
	}

	private static FileHandler createLogFile(String strFileNameForLogs, String strFullPath) throws NCRException {
		FileHandler fh;
		try {
			File logFolder = new File(strFullPath.toString());
			logFolder.mkdirs();
			logFolder.setWritable(true);
			logFolder.setExecutable(true);
			logger.log(Level.INFO, "Creating log file");
			File logFile = new File(logFolder.getAbsolutePath() + FILE_SEPERATOR + strFileNameForLogs.trim().replace(" ", "_") + "_MigrateObjects_"
					+ MIGRATION_START_TIME + ".log");
			logFile.setWritable(true);
			logFile.setExecutable(true);
			fh = new FileHandler(logFile.getAbsolutePath());
			fh.setFormatter(new SimpleFormatter());
			logger.addHandler(fh);
			fh.setFormatter(new SimpleFormatter());
			return fh;
		}
		catch (SecurityException e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new NCRException(e);
		}
		catch (IOException e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new NCRException(e);
		}
	}

	private static boolean validateFilePath(String strPath) throws NCRException {
		// Validate path
		logger.log(Level.INFO, "Validating File Path");
		boolean isPathNotNullOrNotEmpty = UIUtil.isNotNullAndNotEmpty(strPath);
		File filePath = new File(strPath);
		if (isPathNotNullOrNotEmpty && !filePath.isDirectory()) {
			logger.log(Level.SEVERE, "Invalid file path!!!");
			throw new NCRException("Invalid file path!!!");
		}
		else {
			logger.log(Level.INFO, "File Path Validated");
			return true;
		}
	}

	private static List<Map<String, String>> readObjectsFromFiles(String strPath, int startOfFile, int endOfFile) throws NCRException {
		try {
			List<Map<String, String>> listOfObjects = new ArrayList<>();

			if (startOfFile > endOfFile) {
				throw new NCRException("File start " + startOfFile + "cannot be greater than end of file" + endOfFile);
			}

			if (!strPath.endsWith(File.separator)) {
				strPath += File.separator;
			}

			for (int i = startOfFile; i <= endOfFile; i++) {
				String objectDetails = DomainConstants.EMPTY_STRING;
				String fullFileName = strPath + TRACE_NC_MIGRATION + "_" + i + ".xls";
				File f = new File(fullFileName);
				if (!f.exists()) {
					logger.log(Level.WARNING, "File with name " + fullFileName + " does not exist to read.");
				}
				else {
					logger.log(Level.INFO, "Reading objects from file: " + fullFileName);
					BufferedReader fileReader = new BufferedReader(new FileReader(f));
					objectDetails = fileReader.readLine();
					String[] arr = objectDetails.split("\t");

					while ((objectDetails = fileReader.readLine()) != null) {
						String[] arrValues = objectDetails.split("\t");
						Map<String, String> mapOfObjectDetails = new HashMap<String, String>();
						for (int k = 0; k < arrValues.length; k++) {
							mapOfObjectDetails.put(arr[k], arrValues[k]);
						}
						listOfObjects.add(mapOfObjectDetails);
					}
					fileReader.close();
					logger.log(Level.INFO, "Reading done from: " + fullFileName);
				}
			}
			return listOfObjects;
		}
		catch (Exception e) {
			throw new NCRException(e.getMessage());
		}
	}

	private static int getStartOfFile(String strStartOfFile) throws NCRException {
		try {
			if (UIUtil.isNotNullAndNotEmpty(strStartOfFile)) {
				int startOfFile = Integer.parseInt(strStartOfFile);
				return startOfFile;
			}
			else {
				return 1;
			}
		}
		catch (NumberFormatException e) {
			return 1;
		}
	}

	private static int getEndOfFile(String strEndOfFile, int startOfFile, String strPath) throws NCRException {
		try {
			int endOfFile = 1;
			if (UIUtil.isNotNullAndNotEmpty(strEndOfFile) && !strEndOfFile.equalsIgnoreCase("n")) {
				endOfFile = Integer.parseInt(strEndOfFile);
			}
			else {
				endOfFile = getNthEndOfFile(strPath);
			}
			return endOfFile;
		}
		catch (NumberFormatException e) {
			return 1;
		}
	}

	private static int getNthEndOfFile(String strPath) {
		int endOfFile;
		long l = 0;
		File fileDir = new File(strPath);
		if (fileDir.isDirectory()) {
			File[] listOfFilesInDirectory = fileDir.listFiles();
			l = Arrays.asList(listOfFilesInDirectory).stream().filter(file -> file.getName().endsWith(".xls")).count();
		}
		endOfFile = (int) l;
		return endOfFile;
	}

	/**
	 * Print "End: <method name>" trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @throws NCRException
	 *             if operation fails
	 */
	private static void traceBeginMethod(Context context) throws NCRException {
		String methodName = getTracedMethodName();
		traceBegin(context, methodName + "()");
	}

	/**
	 * Print "ERROR: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws NCRException
	 *             if operation fails
	 */
	private static void traceError(Context context, String message) throws NCRException {
		trace(context, "ERROR: " + message);
	}

	/**
	 * Print "End: <method name>" trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @throws NCRException
	 *             if operation fails
	 */
	private static void traceEndMethod(Context context) throws NCRException {
		String methodName = getTracedMethodName();
		traceEnd(context, methodName + "()");
	}

	/**
	 * Print "End: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws NCRException
	 *             if operation fails
	 */
	private static void traceEnd(Context context, String message) throws NCRException {
		trace(context, "End: " + message);
	}

	/**
	 * Prints trace message for trace type LPIMigration
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws NCRException
	 *             if operation fails
	 */
	private static void trace(Context context, String message) throws NCRException {
		try {
			context.printTrace(TRACE_NC_MIGRATION, message);
		}
		catch (Exception exp) {
			traceError(context, exp.getMessage());
			throw new NCRException(exp);
		}
	}

	/**
	 * Print "Begin: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws NCRException
	 *             if operation fails
	 */
	private static void traceBegin(Context context, String message) throws NCRException {
		trace(context, "Begin: " + message);
	}

	/**
	 * Returns the name of the method being traced. This SHOULD NOT be called by
	 * any client other than traceBeginMethod and traceEndMethod methods.
	 * 
	 * @return the method name
	 */
	private static String getTracedMethodName() {
		Exception exp = new Exception();
		StackTraceElement[] stes = exp.getStackTrace();
		StackTraceElement ste = stes[2];
		String methodName = ste.getMethodName();
		return methodName;
	}

	private static void help(Context context, String[] args) throws Exception {
		if (!context.isConnected()) {
			throw new Exception("Not supported on desktop client");
		}
		System.out.println("================================================================================================\n");
		System.out.println(" While running migration, ensure that the folder provided is empty else it overrides the existing files!!!");

		System.out.println(" NC Impacted item migration is a two step process  \n");

		System.out.println(" Step 1: Find objects of NC type and write them into .xls files \n");
		System.out.println(" Example: \n");
		System.out
				.println(" execute program com.dassault_systemes.enovia.lsa.ncr.migration.NCImpactedItemMigrationFindObjects F:\\Migration 1000; \n");
		System.out.println(" First parameter  = the directory where files should be written \n");
		System.out.println(" Second Parameter =  number of objects to be written to a file default 1000 \n");
		System.out.println(" \n");

		System.out.println(" Step 2: Migrate the NC objects  \n");
		System.out.println(" Example: \n");
		System.out.println(" execute program com.dassault_systemes.enovia.lsa.ncr.migration.NCImpactedItemMigration F:\\Migration 1 1000; \n");
		System.out.println(" First parameter	= the directory to read xls files from and dump the log files into \n");
		System.out.println(" Second Parameter	= minimum range of file to start migrating default 1 \n");
		System.out.println(" Third Parameter	= maximum range of file to end migrating default all files starting from minimum range \n");
		System.out.println("        - value 'n' can be provided for all files to migrate starting from mimimum range \n");
		System.out.println("================================================================================================\n");
	}

}

