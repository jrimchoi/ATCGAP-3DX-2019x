
/**
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Map;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import com.dassault_systemes.enovia.controlledprinting.ControlledPrintingConstants;
import com.dassault_systemes.enovia.dcl.DCLConstants;
import com.dassault_systemes.enovia.pdfrendering.services.PDFRenderingConstants;
import com.dassault_systemes.enovia.periodicreview.PeriodicReviewConstants;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.framework.ui.UIUtil;

import matrix.db.Context;
import matrix.util.StringList;


public class ${CLASSNAME} {
	public ${CLASSNAME}(Context context, String[] args) throws Exception {
		super();
	}

	private static Logger		logger	= Logger.getLogger(${CLASSNAME}.class
																.getName());
	// private static final String fileSeparator = java.io.File.separator;
	private static final String	TRACE_DocumentSchema_MIGRATION	= "DCLDocumentSchemaMigration";
	private static final String	FILE_DocumentSchema_MIGRATION_LOG	= "DCLDocumentSchemaMigration.log";

	public static void migrate(Context context, String[] args) throws Exception {
		String strPath = new String();
		String strStartOfFile = new String();
		String strEndOfFile = new String();
		int startOfFile = 0;
		int endOfFile = 0;
		String firstArg = "";
		boolean isValidFilePath = false;

		if (args.length == 0) {

			try {
				help(context, args);
				return;
			}
			catch (Exception e) {
				throw new Exception(e.getLocalizedMessage());
			}
		}
		else {

			firstArg = args[0];
			if (firstArg.equals("help")) {
				try {
					help(context, args);
					return;
				}
				catch (Exception e) {
					throw new Exception(e.getLocalizedMessage());
				}
			}

		}
		try {
			strPath = firstArg;
			isValidFilePath = validateFilePath(strPath);
			startOfFile = getStartOfFile(strStartOfFile);
			endOfFile = getEndOfFile(strEndOfFile, startOfFile, strPath);
		}
		catch (Exception e) {
			throw new Exception(e);
		}
		if (isValidFilePath) {
			FileHandler fileLogging = null;
			try {
				fileLogging = createLogFile(TRACE_DocumentSchema_MIGRATION, strPath + File.separator);
			}
			catch (Exception e) {
				throw new Exception(e);
			}
			firstArg = args[0];
			// Create log file
			try {
				if (isValidFilePath) {
					logger.log(Level.INFO, "Executing  Migration For Changing type of existing objects to New Type.");
					migrationToNewType(context, strPath, TRACE_DocumentSchema_MIGRATION, startOfFile, endOfFile);
					logger.log(Level.INFO, "Migration For Changing type of existing objects to New Type  Completed.");
					migrationOfRelationShip(context, strPath, TRACE_DocumentSchema_MIGRATION, startOfFile, endOfFile);
				}
			}
			catch (Exception e) {
				throw new Exception(e.getLocalizedMessage());
			}

			fileLogging.close();
		}
	}

	private static void migrationToNewType(Context context, String strPath, String strFileName, int startOfFile, int endOfFile) throws Exception {

		try {
			String strControlledDocument = PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_TYPE_CONTROLLED_DOCUMENTS);
			//String strControlledDocumentTemplateType = PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_TYPE_CONTROLLED_DOCUMENT_TEMPLATE);
			String strControlledDocumentTemplateType = "Controlled Document Template";
			String strControlledDocumentTemplatePolicy = PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_POLICY_CONTROLLED_DOCUMENT_TEMPLATE);
			String strImpactQuesTemplatePolicy = PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_POLICY_EFORM_TEMPLATE);
			//String strImpactQuesTemplateType = PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_TYPE_IMPACT_QUESTIONNAIRE_TEMPLATE);
			String strImpactQuesTemplateType ="Impact Questionnaire Template";
			String strImpactQuesType = PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_TYPE_EFORM);

			String isVersionObject = PropertyUtil.getSchemaProperty(context, PeriodicReviewConstants.SYMBOLIC_ATTRIBUTE_IS_VERSION_OBJECT);
			StringList slBusSelects = new StringList(DomainObject.SELECT_ID);
			slBusSelects.add(DomainObject.SELECT_TYPE);
			slBusSelects.add(DomainObject.SELECT_NAME);
			slBusSelects.add(DomainObject.SELECT_REVISION);
			slBusSelects.add("attribute["+isVersionObject+"]");
			StringBuilder sbWhere = new StringBuilder();
	        sbWhere.append("attribute["+isVersionObject+"]== 'False'");
	        sbWhere.append("&& policy =='"+strControlledDocumentTemplatePolicy+"'");

			
	    			logger.log(Level.INFO, "Searching All Controlled Document Template Objects");

			MapList findObjectMapList = DomainObject.findObjects(context, strControlledDocument, DomainConstants.QUERY_WILDCARD,
					DomainConstants.QUERY_WILDCARD, DomainConstants.QUERY_WILDCARD, null,sbWhere.toString(), true,
					slBusSelects);

			logger.log(Level.INFO, "Search complete for Controlled Document Template" );
			logger.log(Level.INFO, "Migration to new type 'Controlled Document Template'");
			for (Object object : findObjectMapList) {
				Map<?, ?> docListMap = (Map<?, ?>) object;
				String strDocumentId = (String) docListMap.get(DomainConstants.SELECT_ID);
				String strName = (String) docListMap.get(DomainConstants.SELECT_NAME);
				String strType = (String) docListMap.get(DomainConstants.SELECT_TYPE);
				String strRev = (String) docListMap.get(DomainConstants.SELECT_REVISION);
				logger.log(Level.INFO, "Migration of "+ strType + " "+ strName + " "+strRev);
				MqlUtil.mqlCommand(context, "mod bus $1 type $2",strDocumentId,strControlledDocumentTemplateType);
				DomainObject dObj=DomainObject.newInstance(context, strDocumentId);
				strType = (String) dObj.getInfo(context,DomainConstants.SELECT_TYPE);
				logger.log(Level.INFO, "Migrated to "+ strType + " "+ strName + " "+strRev);
				}
			logger.log(Level.INFO, "Migration to new type 'Controlled Document Template' completed");
 		
			logger.log(Level.INFO, "Searching All Impact Questionnaire Template Objects");

			String strSelect="policy=='"+strImpactQuesTemplatePolicy+"'";
			MapList ImpctQuestMapList = DomainObject.findObjects(context, strImpactQuesType, DomainConstants.QUERY_WILDCARD,
					DomainConstants.QUERY_WILDCARD, DomainConstants.QUERY_WILDCARD, null,strSelect, true,
					slBusSelects);

			logger.log(Level.INFO, "Search complete for Impact Questionnaire Template" );
			logger.log(Level.INFO, "Migration to new type 'Impact Questionnaire Template'");
			for (Object object : ImpctQuestMapList) {
				Map<?, ?> docListMap = (Map<?, ?>) object;
				String strDocumentId = (String) docListMap.get(DomainConstants.SELECT_ID);
				String strName = (String) docListMap.get(DomainConstants.SELECT_NAME);
				String strType = (String) docListMap.get(DomainConstants.SELECT_TYPE);
				String strRev = (String) docListMap.get(DomainConstants.SELECT_REVISION);
				logger.log(Level.INFO, "Migration of "+ strType + " "+ strName + " "+strRev);
				MqlUtil.mqlCommand(context, "mod bus $1 type $2",strDocumentId,strImpactQuesTemplateType);
				DomainObject dObj=DomainObject.newInstance(context, strDocumentId);
				strType = (String) dObj.getInfo(context,DomainConstants.SELECT_TYPE);
				logger.log(Level.INFO, "Migrated to "+ strType + " "+ strName + " "+strRev);
				}
			logger.log(Level.INFO, "Migration to new type 'Impact Questionnaire Template' completed");

		
		}
		catch (Exception e) {
			throw new Exception(e);
		}

	}

	private static void migrationOfRelationShip(Context context, String strPath, String strFileName, int startOfFile, int endOfFile) throws Exception {

		try {
			logger.log(Level.INFO, "Start of Migration Relationship Changes for Baseline");
			String strTraineeRel=PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_RELATIONSHIP_TRAINEE);
			String strPDFREnderingJobRel=PropertyUtil.getSchemaProperty(context, PDFRenderingConstants.SYMBOLIC_RELATIONSHIP_PDF_RENDERING_JOB);
			String strTemplateToDocument=PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_RELATIONSHIP_TEMPLATE_TO_DOCUMENT);
			String streFormTemplateRel=PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_RELATIONSHIP_EFORM_TEMPLATE);
			String strAssociateLibrary=PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_RELATIONSHIP_ASSOCIATE_LIBRARY);
			String strControlledPrint=PropertyUtil.getSchemaProperty(context, ControlledPrintingConstants.SYMBOLIC_RELATIONSHIP_CONTROLLED_PRINT);

			
			modifyConnections(context, strTraineeRel, strFileName, startOfFile, endOfFile);
			
			modifyConnections(context, strPDFREnderingJobRel, strFileName, startOfFile, endOfFile);
			
			modifyConnections(context, strTemplateToDocument, strFileName, startOfFile, endOfFile);
			
			modifyConnections(context, streFormTemplateRel, strFileName, startOfFile, endOfFile);
			
			modifyConnections(context, strAssociateLibrary, strFileName, startOfFile, endOfFile);
			
			modifyConnections(context, strControlledPrint, strFileName, startOfFile, endOfFile);


			logger.log(Level.INFO, "End of Migration Relationship Changes for Baseline");
	
		
		}
		catch (Exception e) {
			throw new Exception(e);
		}

	}
		
		private static void modifyConnections(Context context, String relName, String strFileName, int startOfFile, int endOfFile) throws Exception {

			try {
				String strCommand = "query connection type $1 select $2 $3 $4 dump $5";
	            String strResults = MqlUtil.mqlCommand(context, strCommand, relName, "id","from.id","to.id", "|");
				
				String[] resultsArray = strResults.split("\n");

				for(int i=0;i<resultsArray.length;i++)
				{
					String[] parsedResult = resultsArray[i].split("[|]");
					if(parsedResult.length==3){

						String relOID = parsedResult[1];
						String fromID=parsedResult[2];
						String toID=parsedResult[3];
						
						DomainObject controlledDocumentObj=DomainObject.newInstance(context, fromID);
						DomainRelationship.setToObject(context, relOID, controlledDocumentObj);
						
						DomainObject toSideObj=DomainObject.newInstance(context, toID);
						DomainRelationship.setFromObject(context, relOID, toSideObj);
					}
					}
			}
			catch (Exception e) {
				throw new Exception(e);
			}

		}

	private static FileHandler createLogFile(String strFileNameForLogs, String strFullPath) throws Exception {
		DateFormat dateFormat = new SimpleDateFormat("yyyyddMMHHmmss");
		java.util.Date date = new java.util.Date();

		FileHandler fh;
		try {
			File logFolder = new File(strFullPath + File.separator + "Logs_" + dateFormat.format(date));
			logFolder.mkdir();
			logFolder.setWritable(true);
			logFolder.setExecutable(true);
			logger.log(Level.INFO, "Creating log file");
			File logFile = new File(logFolder.getAbsolutePath() + File.separator + strFileNameForLogs.trim().replace(" ", "_")
					+ ".txt");
			logFile.setWritable(true);
			logFile.setExecutable(true);
			fh = new FileHandler(logFile.getAbsolutePath());
			fh.setFormatter(new SimpleFormatter());
			logger.addHandler(fh);
			return fh;
		}
		catch (SecurityException e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new Exception(e);
		}
		catch (IOException e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new Exception(e);
		}
	}

	private static boolean validateFilePath(String strPath) throws Exception {
		// Validate path
		logger.log(Level.INFO, "Validating File Path");
		boolean isPathNotNullOrNotEmpty = UIUtil.isNullOrEmpty(strPath);
		File filePath = new File(strPath);
		if (isPathNotNullOrNotEmpty && !filePath.isDirectory()) {
			logger.log(Level.SEVERE, "Invalid file path!!!");
			throw new Exception("Invalid file path!!!");
		}
		else {
			logger.log(Level.INFO, "File Path Validated");
			return true;
		}
	}
	private static int getStartOfFile(String strStartOfFile) throws Exception {
		try {
			if (UIUtil.isNotNullAndNotEmpty(strStartOfFile)) {
				int startOfFile = Integer.parseInt(strStartOfFile);
				return startOfFile;
			}
			else {
				return 1;
			}
		}
		catch (NumberFormatException e) {
			return 1;
		}
	}

	private static int getEndOfFile(String strEndOfFile, int startOfFile, String strPath) throws Exception {
		try {
			int endOfFile = 1;
			if (UIUtil.isNotNullAndNotEmpty(strEndOfFile)) {
				if (strEndOfFile.equalsIgnoreCase("n")) {
					int count = 0;
					File file = new File(strPath);
					if (file.isDirectory()) {
						File[] listOfFilesInDirectory = file.listFiles();
						for (int i = 0; i < listOfFilesInDirectory.length; i++) {
							String fileName = listOfFilesInDirectory[i].getName();
							if (fileName.endsWith(".xls")) {
								count++;
							}
						}
					}
					endOfFile = count;
				}
				else {
					endOfFile = Integer.parseInt(strEndOfFile);
				}
				return endOfFile;
			}
			else {
				return startOfFile;
			}
		}
		catch (NumberFormatException e) {
			return 1;
		}
	}

	

	/**
	 * Print "End: <method name>" trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @throws Exception
	 *             if operation fails
	 */
	private static void traceBeginMethod(Context context) throws Exception {
		String methodName = getTracedMethodName();
		traceBegin(context, methodName + "()");
	}

	/**
	 * Print "ERROR: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws Exception
	 *             if operation fails
	 */
	private static void traceError(Context context, String message) throws Exception {
		trace(context, "ERROR: " + message);
	}

	/**
	 * Print "End: <method name>" trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @throws Exception
	 *             if operation fails
	 */
	private static void traceEndMethod(Context context) throws Exception {
		final String methodName = getTracedMethodName();
		traceEnd(context, methodName + "()");
	}

	/**
	 * Print "End: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws Exception
	 *             if operation fails
	 */
	private static void traceEnd(Context context, String message) throws Exception {
		trace(context, "End: " + message);
	}

	/**
	 * Prints trace message for trace type LPIMigration
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws Exception
	 *             if operation fails
	 */
	private static void trace(Context context, String message) throws Exception {
		try {
			context.printTrace(TRACE_DocumentSchema_MIGRATION, message);
		}
		catch (Exception exp) {
			traceError(context, exp.getMessage());
			throw new Exception(exp);
		}
	}

	/**
	 * Print "Begin: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws Exception
	 *             if operation fails
	 */
	private static void traceBegin(Context context, String message) throws Exception {
		trace(context, "Begin: " + message);
	}

	/**
	 * Returns the name of the method being traced. This SHOULD NOT be called by
	 * any client other than traceBeginMethod and traceEndMethod methods.
	 * 
	 * @return the method name
	 */
	private static String getTracedMethodName() {
		Exception exp = new Exception();
		StackTraceElement[] stes = exp.getStackTrace();
		StackTraceElement ste = stes[2];
		String methodName = ste.getMethodName();
		return methodName;
	}


	public static void mxMain(Context context, String[] args) throws Exception {
		try {
			boolean traceON = true;
			boolean allSession = false; // false for only this session

			context.setTrace(FILE_DocumentSchema_MIGRATION_LOG, TRACE_DocumentSchema_MIGRATION, traceON, allSession);
			traceBeginMethod(context);

			System.out.println("================================================================================================\n");
			migrate(context, args);
			System.out.println("================================================================================================\n");
		}
		catch (Exception exp) {
			try {
				traceError(context, exp.getMessage());
			}
			catch (Exception e) {
				throw new Exception(e);
			}
			throw new Exception(exp);
		}
		finally {
			try {
				traceEndMethod(context);
			}
			catch (Exception e) {
				throw new Exception(e);
			}
		}
	}

	public static void help(Context context, String[] args) throws Exception {
		if (!context.isConnected()) {
			throw new Exception("not supported on desktop client");
		}
		System.out.println("================================================================================================\n");
		System.out.println(" Document Schema Migration  is a single step process.  \n");
		System.out.println(" This will migrate all the CONTROLLED DOCUMENTS template objects to latest schema type i.e. \"Controlled Document Template\". \n");
		System.out.println(" As well migrate all the Impact Questionnaire template objects to latest schema type i.e. \"Impact Questionnaire Template\". \n");
		System.out.println(" And also  migrate relationship data as per the new schema changes for Baseline. \n");
		System.out.println(" Example: \n");
		System.out.println(" execute prog  ENODCLDocumentSchemaMigration F:\\Migration; \n");
		System.out.println(" First parameter  = the directory where log file should be written. \n");
		System.out.println(" This step creates a file - ENODCLDocumentSchemaMigration.log having the details about all the migration. \n");
		System.out.println(" This file is created at the location provided as the first parameter. \n");
		System.out.println(" \n");
		System.out.println(" 	NOTE: DO NOT CLOSE THE MQL WINDOW UNTIL MIGRATION IS COMPLETE. \n");
		System.out.println(" \n");
		System.out.println("================================================================================================\n");
	}
}

