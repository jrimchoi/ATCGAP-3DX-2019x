/*
* Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
* contains proprietary and trade secret information of Dassault Systemes.
* Copyright notice is precautionary only and does not evidence any actual or
* intended publication of such program.
*/


import matrix.db.Context;
import matrix.util.StringList;

import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.LSAException;
import com.dassault_systemes.enovia.lsa.componentframework.Component;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentException;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentFactory;
import com.dassault_systemes.enovia.lsa.services.ContactService;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.i18nNow;

public class ${CLASSNAME} {

	final String STRING_RESOURCE = "RegulatoryStringResource";
	final i18nNow i18 = new i18nNow();

	/**
	 * Constructs a new JPO object.
	 * 
	 * @param context
	 *            the eMatrix <code>Context</code> object. This argument is
	 *            ignored, only provided for allowing it to be called from UI
	 *            components.
	 * @param args
	 *            This argument is ignored, only provided for allowing it to be
	 *            called from UI components.
	 * @throws LSAException
	 *             if the operation fails
	 */
	public ${CLASSNAME}(Context context, String[] args) {
		// Do Nothing
	}

	private ContactService getContactService(Context context) throws LSAException {
		try {
			Component component = ComponentFactory.getInstance(context, "LSACommonCoreComponent");
			ContactService contactService = (ContactService) component.getService(ContactService.class);
			return contactService;
		}
		catch (ComponentException exception) {
			throw new LSAException(exception);
		}
	}
	
	public int checkIfContactIsConnectedToAnyObject (Context context, String[] args) throws LSAException {	
		String strContactId = args[0];
	try {
		final String LANGUAGE = context.getSession().getLanguage();
		DomainObject dmoContact = DomainObject.newInstance(context, strContactId);
		StringList objSelects = new StringList(1);
		objSelects.add("id");
	    if(Helper.countConnectionsOnObject(context, dmoContact) == 0) {
			return 0;
		}
	     else{
	    	 String strMsg =Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Message.ContactCanNotBeDeleted");
	    	 throw new LSAException(strMsg);
	     }
		}
	catch (FrameworkException e) {
		throw new LSAException(e);
	}
	}
}

