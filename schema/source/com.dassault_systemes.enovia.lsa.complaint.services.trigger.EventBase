
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import matrix.db.AccessConstants;
import matrix.db.Context;
import matrix.util.MatrixException;
import matrix.util.Pattern;
import matrix.util.StringList;

import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.LSAException;
import com.dassault_systemes.enovia.lsa.QueryUtil;
import com.dassault_systemes.enovia.lsa.complaint.services.ComplaintException;
import com.dassault_systemes.enovia.lsa.componentframework.Component;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentException;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentFactory;
import com.dassault_systemes.enovia.lsa.ticket.TicketConstants;
import com.dassault_systemes.enovia.lsa.ticket.TicketUtil;
import com.dassault_systemes.enovia.lsa.ticket.services.EventService;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.DomainSymbolicConstants;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PropertyUtil;

public class ${CLASSNAME} {

	int	TRIGGER_SUCESS	= 0;

	public ${CLASSNAME}(Context context, String[] args) throws ComplaintException {
		super();
	}

	private EventService getParentEventService(Context context) throws ComponentException {
		Component component = ComponentFactory.getInstance(context, TicketConstants.TICKET_CORE_COMPONENT);
		EventService eventService = (EventService) component.getService(EventService.class);
		return eventService;
	}

	/**
	 * Set Event Confirmed Date attribute value on event confirmed
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            holds input arguments.
	 * @throws ComplaintException
	 *             if operation fails.
	 */
	public void setEventConfirmedDate(Context context, String[] args) throws ComplaintException {
		try {
			String strEventId = args[0];
			String strNewVal = args[1];

			Helper.ensureNotNull(strEventId, "strEventId");
			Helper.ensureNotNull(strNewVal, "strNewVal");

			DomainObject dmoDerivedEvent = DomainObject.newInstance(context, strEventId);

			String POLICY_COMPLAINT_RECORD = TicketUtil.getAliasForAdmin(context, TicketConstants.POLICY,
					PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_POLICY_COMPLAINT_RECORD));
			String strInProcessState = TicketUtil.getStateName(context, POLICY_COMPLAINT_RECORD, TicketConstants.SYMBOLIC_POLICY_STATE_INPROCESS);

			StringBuffer sbOwner = new StringBuffer("to[").append(
					PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT)).append("].from.owner");
			String strOwner = dmoDerivedEvent.getInfo(context, sbOwner.toString());
			StringBuffer sbCurrent = new StringBuffer("to[").append(
					PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT)).append("].from.current");
			StringBuffer sbCPTID = new StringBuffer("to[").append(
					PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT)).append("].from.id");
			String strCurrent = dmoDerivedEvent.getInfo(context, sbCurrent.toString());
			String strCPTID = dmoDerivedEvent.getInfo(context, sbCPTID.toString());
			DomainObject doCPT = DomainObject.newInstance(context,strCPTID);
			if (doCPT.checkAccess(context, (short) AccessConstants.cModify)) {

				if (strNewVal.equalsIgnoreCase("Yes")) {
					EventService parentEventService = getParentEventService(context);
					parentEventService.updateEvent(context, dmoDerivedEvent,
							PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_EVENT_CONFIRMED_DATE),
							TicketUtil.getTodaysDate(context));
				}
			}
			else
				throw new ComplaintException(Helper.getI18NString(context, Helper.StringResource.COLS,
						"LPQ.Complaint.Message.Error.NoQualityManagerRole"));
			
			
			
			//TODO
//			if (Helper.hasRoles(context, "role_QualityManager")
//					|| (Helper.hasRoles(context, "role_ComplaintInvestigator")
//							&& strOwner.equalsIgnoreCase(context.getUser()) && strCurrent.equalsIgnoreCase(strInProcessState))) {
//
//				if (strNewVal.equalsIgnoreCase("Yes")) {
//					EventService parentEventService = getParentEventService(context);
//					parentEventService.updateEvent(context, dmoDerivedEvent,
//							PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_EVENT_CONFIRMED_DATE),
//							TicketUtil.getTodaysDate(context));
//				}
//			}
//			else
//				throw new ComplaintException(Helper.getI18NString(context, Helper.StringResource.COLS,
//						"LPQ.Complaint.Message.Error.NoQualityManagerRole"));
		}
		catch (Exception e) {
			throw new ComplaintException(e);
		}
	}

	/**
	 * Set Reportable Status attribute value when Medical set to false
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            holds input arguments.
	 * @throws ComplaintException
	 *             if operation fails.
	 */
	public void setReportableStatus(Context context, String[] args) throws ComplaintException {
		try {
			String strEventId = args[0];
			String strNewVal = args[1];

			Helper.ensureNotNull(strEventId, "strEventId");
			Helper.ensureNotNull(strNewVal, "strNewVal");

			DomainObject dmoDerivedEvent = DomainObject.newInstance(context, strEventId);

			if (strNewVal.equalsIgnoreCase("No")) {
				Map<?, ?> mapReportableStatus = Helper.getAttributeRanges(context, TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_STATUS);
				StringList slReportableStatusRanges = (StringList) mapReportableStatus.get(TicketConstants.FIELD_CHOICES);

				if (slReportableStatusRanges.contains(TicketConstants.RANGE_NOT_APPLICABLE)) {
					EventService parentEventService = getParentEventService(context);
					parentEventService.updateEvent(context, dmoDerivedEvent,
							PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_STATUS),
							TicketConstants.RANGE_NOT_APPLICABLE);
				}
			}
		}
		catch (Exception e) {
			throw new ComplaintException(e);
		}
	}

	/**
	 * Update related details upon setting Reportable Status as "Reportable"
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            holds input arguments.
	 * @throws ComplaintException
	 *             if operation fails.
	 */
	public void updateUponReportable(Context context, String[] args) throws ComplaintException {
		try {
			String strEventId = args[0];
			String strNewVal = args[1];
			String strOldVal = args[2];

			Helper.ensureNotNull(strEventId, "strEventId");
			Helper.ensureNotNull(strNewVal, "strNewVal");
			Helper.ensureNotNull(strOldVal, "strOldVal");

			List<Map<?, ?>> lmconnectedEvents = null;
			final String STRTYPEDERIVEDEVENT = PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_TYPE_DERIVED_EVENT);
			final String STRATTRIBUTEREPORTABLESTATUS = PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_STATUS);
			final String STRREPORTABLESTATUSSELECT = DomainObject.getAttributeSelect(STRATTRIBUTEREPORTABLESTATUS);
			String strReportableStatus = TicketConstants.RANGE_NOT_APPLICABLE;

			StringBuffer sbAttributeSelect1 = new StringBuffer("to[")
					.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_DERIVED_EVENT)).append("].from.to[")
					.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT))
					.append("].from.attribute[")
					.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_REPORTABLE_STATUS)).append("]");

			StringBuffer sbAttributeSelect2 = new StringBuffer("to[")
					.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_DERIVED_EVENT)).append("].from.to[")
					.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT)).append("].from.id");

			StringList slBusSelect = Helper.stringList(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context,
					TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_STATUS)), DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context,
					TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_DECISION_DATE)), DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(
					context, TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_DECISION_MAKER)), sbAttributeSelect1.toString(), sbAttributeSelect2
					.toString());

			StringBuilder sbRelSelect = new StringBuilder()
					.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT)).append(",")
					.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_DERIVED_EVENT));

			StringBuilder sbBusSelect = new StringBuilder()
					.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_TYPE_COMPLAINT_EVENT)).append(",")
					.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_TYPE_DERIVED_EVENT));

			DomainObject dmoDerivedEvent = DomainObject.newInstance(context, strEventId);
			if (!TicketConstants.RANGE_NOT_REPORTABLE.equalsIgnoreCase(strNewVal)) {

			}

			List<Map<?, ?>> mlEvent = QueryUtil.getInfo(context, new String[] { strEventId }, slBusSelect);

			if (null != mlEvent && mlEvent.size() > 0) {
				for (Iterator<Map<?, ?>> iterator = mlEvent.iterator(); iterator.hasNext();) {
					Map<?, ?> mapEvent = iterator.next();
					String strRepDecisionDate = (String) mapEvent.get(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context,
							TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_DECISION_DATE)));
					String strRepDecisionMaker = (String) mapEvent.get(DomainObject.getAttributeSelect(PropertyUtil.getSchemaProperty(context,
							TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_DECISION_MAKER)));
					StringBuffer sbGetComplaintRepStatus = new StringBuffer("to[")
							.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_DERIVED_EVENT))
							.append("].from.to[")
							.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT))
							.append("].from.attribute[")
							.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_REPORTABLE_STATUS))
							.append("]");

					String strComplaintRepStatus = (String) mapEvent.get(sbGetComplaintRepStatus.toString());

					StringBuffer sbGetComplaintId = new StringBuffer("to[")
							.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_DERIVED_EVENT))
							.append("].from.to[")
							.append(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT))
							.append("].from.id");

					String strComplaintId = (String) mapEvent.get(sbGetComplaintId.toString());

					if (!Helper.isNullOrEmpty(strComplaintId)) {
						lmconnectedEvents = QueryUtil.getRelatedObjects(
								context,
								DomainObject.newInstance(context, strComplaintId),
								sbRelSelect.toString(),
								sbBusSelect.toString(),
								Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE,
										DomainObject.getAttributeSelect(STRATTRIBUTEREPORTABLESTATUS)),
								Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 0, null, null);
					}
					EventService parentEventService = getParentEventService(context);
					if (strNewVal.equalsIgnoreCase(TicketConstants.RANGE_REPORTABLE)) {
						if (!Helper.isNullOrEmpty(strRepDecisionDate)) {
							parentEventService.updateEvent(context, dmoDerivedEvent,
									PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_DECISION_DATE),
									TicketUtil.getTodaysDate(context));
						}
						if (!Helper.isNullOrEmpty(strRepDecisionMaker)) {
							parentEventService.updateEvent(context, dmoDerivedEvent,
									PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_DECISION_MAKER),
									context.getUser());
						}
						if (!Helper.isNullOrEmpty(strComplaintId) && !Helper.isNullOrEmpty(strComplaintRepStatus)) {
							parentEventService.updateEvent(context, DomainObject.newInstance(context, strComplaintId),
									PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_REPORTABLE_STATUS),
									TicketConstants.RANGE_REPORTABLE);
						}
					}
					else if (strNewVal.equalsIgnoreCase(TicketConstants.RANGE_NOT_REPORTABLE)) {
						for (Object obj : lmconnectedEvents) {
							Map mapDerivedEvent = (Map) obj;
							if (STRTYPEDERIVEDEVENT.equalsIgnoreCase(mapDerivedEvent.get(DomainConstants.SELECT_TYPE).toString())) {
								if (TicketConstants.RANGE_REPORTABLE.equals(mapDerivedEvent.get(STRREPORTABLESTATUSSELECT))) {
									strReportableStatus = TicketConstants.RANGE_REPORTABLE;
									break;
								}
								else
									strReportableStatus = TicketConstants.RANGE_NOT_REPORTABLE;
							}
						}
						parentEventService.updateEvent(context, DomainObject.newInstance(context, strComplaintId),
								PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_REPORTABLE_STATUS),
								strReportableStatus);
					}
					else if (strNewVal.equalsIgnoreCase(TicketConstants.RANGE_PENDING)) {
						for (Object obj : lmconnectedEvents) {
							Map mapDerivedEvent = (Map) obj;
							if (STRTYPEDERIVEDEVENT.equalsIgnoreCase(mapDerivedEvent.get(DomainConstants.SELECT_TYPE).toString())) {
								if (TicketConstants.RANGE_REPORTABLE.equals(mapDerivedEvent.get(STRREPORTABLESTATUSSELECT))) {
									strReportableStatus = TicketConstants.RANGE_REPORTABLE;
									break;
								}
								else if (TicketConstants.RANGE_NOT_REPORTABLE.equals(mapDerivedEvent.get(STRREPORTABLESTATUSSELECT))) {
									strReportableStatus = TicketConstants.RANGE_NOT_REPORTABLE;
								}
								else
									strReportableStatus = TicketConstants.RANGE_PENDING;
							}
						}
						parentEventService.updateEvent(context, DomainObject.newInstance(context, strComplaintId),
								PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_REPORTABLE_STATUS),
								strReportableStatus);
					}
					else {
						for (Object obj : lmconnectedEvents) {
							Map mapDerivedEvent = (Map) obj;
							if (STRTYPEDERIVEDEVENT.equalsIgnoreCase(mapDerivedEvent.get(DomainConstants.SELECT_TYPE).toString())) {
								if (TicketConstants.RANGE_REPORTABLE.equals(mapDerivedEvent.get(STRREPORTABLESTATUSSELECT))) {
									strReportableStatus = TicketConstants.RANGE_REPORTABLE;
									break;
								}
								else if (TicketConstants.RANGE_NOT_REPORTABLE.equals(mapDerivedEvent.get(STRREPORTABLESTATUSSELECT))) {
									strReportableStatus = TicketConstants.RANGE_NOT_REPORTABLE;
								}
								else if (TicketConstants.RANGE_PENDING.equals(mapDerivedEvent.get(STRREPORTABLESTATUSSELECT))) {
									strReportableStatus = TicketConstants.RANGE_PENDING;
								}
							}
						}
						parentEventService.updateEvent(context, DomainObject.newInstance(context, strComplaintId),
								PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_REPORTABLE_STATUS),
								strReportableStatus);
					}
				}
			}
		}
		catch (Exception e) {
			throw new ComplaintException(e);
		}
	}

	/**
	 * To make sure Reportable Status' value being changed from "Reportable"
	 * when AER is already attached.
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            holds input arguments.
	 * @throws ComplaintException
	 *             if operation fails.
	 */
	public void checkReportableStatus(Context context, String[] args) throws ComplaintException {
		try {
			String strEventId = args[0];
			String strNewVal = args[1];
			String strOldVal = args[2];

			Helper.ensureNotNull(strEventId, "strEventId");
			Helper.ensureNotNull(strNewVal, "strNewVal");
			Helper.ensureNotNull(strOldVal, "strOldVal");

			if (TicketConstants.RANGE_REPORTABLE.equalsIgnoreCase(strOldVal)) {
				List<Map<?, ?>> mapConnectedAER = QueryUtil.getRelatedObjects(context, DomainObject.newInstance(context, strEventId),
						(new StringBuffer()).append(TicketConstants.SYMBOLIC_RELATIONSHIP_ADVERSE_REPORT).toString(),
						(new StringBuffer()).append(TicketConstants.SYMBOLIC_TYPE_ADVERSE_EVENT_REPORT).toString(),
						Helper.stringList(DomainConstants.SELECT_ID), Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 0, null,
						null);
				if (mapConnectedAER.size() > 0)
					throw new ComplaintException(Helper.getI18NString(context, Helper.StringResource.COLS,
							"LPQ.DerivedEvent.UnableToChangeReportableStatus.Error"));
			}
		}
		catch (Exception e) {
			throw new ComplaintException(e);
		}
	}

	/**
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws ComplaintException
	 */
	public int checkAccessForEventModification(Context context, String[] args) throws ComplaintException {
		try {
			String strObjectId = args[0];
			String strContextUser = args[1];
			String strAttributeName = args[2];
			String strAttributeValue = args[3];
			String strNewAttributeValue = args[4];

			boolean isQualityManager = Helper.hasRoles(context, TicketConstants.SYMBOLIC_ROLE_QUALITY_MANAGER);
			boolean isComplaintInvestigator = Helper.hasRoles(context, TicketConstants.SYMBOLIC_ROLE_COMPLAINT_INVESTIGATOR);
			boolean isProjectLeader = Helper.hasRoles(context, TicketConstants.SYMBOLIC_ROLE_VPLMProjectLeader);
			boolean isDesiredState = false;
			boolean isDesiredUser = false;
			StringList selects = new StringList();
			DomainObject dmoEvent = DomainObject.newInstance(context, strObjectId);
			String strComplaintOwner = dmoEvent.getInfo(context,
					"to[" + PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT) + "].from.owner");
			selects.add("to[" + TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT + "].from.current");
			selects.add("to[" + TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT + "].from.attribute["
					+ DomainSymbolicConstants.SYMBOLIC_attribute_Originator + "]");
			String strEventOriginator = dmoEvent.getAttributeValue(context,
					PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_attribute_Originator));

			if (!Helper.isNullOrEmpty(strObjectId)) {
				List<Map<?, ?>> infoList = QueryUtil.getInfo(context, new String[] { strObjectId }, selects);
				for (Iterator iterator = infoList.iterator(); iterator.hasNext();) {
					Map<?, ?> map = (Map<?, ?>) iterator.next();
					if (!map.isEmpty()) {
						String strCurrent = (String) map.get("to[" + TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT + "].from.current");
						if (!Helper.isNullOrEmpty(strCurrent)) {
							String strComplaintOriginator = (String) map.get("to[" + TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT
									+ "].from.attribute[" + DomainSymbolicConstants.SYMBOLIC_attribute_Originator + "]");

							String POLICY_COMPLAINT_RECORD = TicketUtil.getAliasForAdmin(context, TicketConstants.POLICY,
									PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_POLICY_COMPLAINT_RECORD));

							String strCreateState = TicketUtil.getStateName(context, POLICY_COMPLAINT_RECORD,
									TicketConstants.SYMBOLIC_POLICY_STATE_CREATE);
							String strInProcessState = TicketUtil.getStateName(context, POLICY_COMPLAINT_RECORD,
									TicketConstants.SYMBOLIC_POLICY_STATE_INPROCESS);

							if (strCurrent.equalsIgnoreCase(strCreateState) || strCurrent.equalsIgnoreCase(strInProcessState)) {
								isDesiredState = true;
							}
							if(dmoEvent.checkAccess(context, (short) AccessConstants.cModify) && (!isQualityManager || !isComplaintInvestigator || !isProjectLeader) && !(strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context,
									TicketConstants.SYMBOLIC_ATTRIBUTE_EVENT_CONFIRMED))) || (strAttributeName.equalsIgnoreCase(PropertyUtil
									.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_DATE_OF_OCCURRENCE))))
							{
								isDesiredUser = true;
							}else if(dmoEvent.checkAccess(context, (short) AccessConstants.cModify) && (isQualityManager || isComplaintInvestigator || isProjectLeader || (strComplaintOwner.equals(strContextUser))))
							{
								isDesiredUser = true;
							}
							
							
							//TODO
//							if (isQualityManager)
//								isDesiredUser = true;
//
//							else if ((strEventOriginator.equals(strContextUser))
//									&& (!(strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context,
//											TicketConstants.SYMBOLIC_ATTRIBUTE_EVENT_CONFIRMED))) || (strAttributeName.equalsIgnoreCase(PropertyUtil
//											.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_DATE_OF_OCCURRENCE))))) {
//								isDesiredUser = true;
//							}
//							else if ((strComplaintOwner.equals(strContextUser))
//									&& ((strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context,
//											TicketConstants.SYMBOLIC_ATTRIBUTE_EVENT_CONFIRMED))) || (strAttributeName.equalsIgnoreCase(PropertyUtil
//											.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_DATE_OF_OCCURRENCE))))) {
//								isDesiredUser = true;
//							}
//							else if ((isComplaintInvestigator && strComplaintOwner.equals(strContextUser))
//									&& ((strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context,
//											TicketConstants.SYMBOLIC_ATTRIBUTE_EVENT_CONFIRMED))) || (strAttributeName.equalsIgnoreCase(PropertyUtil
//											.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_DATE_OF_OCCURRENCE))))) {
//								isDesiredUser = true;
//							}
//							else if ((isComplaintInvestigator && strComplaintOwner.equals(strContextUser))
//									&& (strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context,
//											TicketConstants.SYMBOLIC_ATTRIBUTE_PRIMARY_EVENT)))) {
//								isDesiredUser = true;
//							}
//							else if ((isComplaintInvestigator && strComplaintOwner.equals(strContextUser))
//									&& (strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context,
//											TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_EVENT_DETAIL)))) {
//								isDesiredUser = true;
//							}

							if (strAttributeName.equalsIgnoreCase(PropertyUtil.getSchemaProperty(context,
									TicketConstants.SYMBOLIC_ATTRIBUTE_EVENT_CONFIRMED)) && strNewAttributeValue.equalsIgnoreCase("Yes")) {
								String strConfirmedDate = PropertyUtil.getSchemaProperty(context,
										TicketConstants.SYMBOLIC_ATTRIBUTE_EVENT_CONFIRMED_DATE);
								dmoEvent.setAttributeValue(context, strConfirmedDate, TicketUtil.getFormattedTodaysInputDate(context));
							}
						}

						if (isDesiredState && isDesiredUser) {
							TRIGGER_SUCESS = 0;
						}
						else {
							TRIGGER_SUCESS = 1;
							String strErrorMessage = Helper.getI18NString(context, Helper.StringResource.COLS,
									"PQCComplaints.Message.AllConditionNotSatisfied");
							MqlUtil.mqlCommand(context, "notice $1", strErrorMessage);
						}
					}
				}
			}
			return TRIGGER_SUCESS;
		}
		catch (LSAException exception) {
			throw new ComplaintException(exception);
		}
		catch (FrameworkException exception) {
			throw new ComplaintException(exception);
		} catch (MatrixException exception) {
			// TODO Auto-generated catch block
			throw new ComplaintException(exception);
		}
	}

	public int modifyProductAttributeRelationshipComplaintEventProduct(Context context, String[] args) throws ComplaintException {
		try {

			String strEventId = args[0];
			String strComplaintState = new String();
			String strComplaintOwner = new String();

			DomainObject eventObj = DomainObject.newInstance(context, strEventId);

			List<Map<?, ?>> retMap = QueryUtil.getRelatedObjects(
					context,
					eventObj,
					(new StringBuffer()).append(TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT).append(",")
							.append(TicketConstants.SYMBOLIC_RELATIONSHIP_DERIVED_EVENT).toString(),
					(new StringBuffer()).append(TicketConstants.SYMBOLIC_TYPE_COMPLAINT_EVENT).append(",")
							.append(TicketConstants.SYMBOLIC_TYPE_DERIVED_EVENT).append(",").append(TicketConstants.SYMBOLIC_TYPE_COMPLAINT)
							.toString(), Helper.stringList(DomainObject.SELECT_NAME, DomainObject.SELECT_TYPE, DomainObject.SELECT_ID),
					Helper.stringList(DomainRelationship.SELECT_NAME), true, true, null, null, false, true,
					new Pattern(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_TYPE_COMPLAINT)), null, null);
			// below condition is added due to IR-364654-3DEXPERIENCER201, user
			// is trying to add Serial Number but the object is not created.
			if (retMap.size() < 1) {
				return 0;
			}
			DomainObject complaintObj = DomainObject.newInstance(context);
			for (Map<?, ?> map : retMap) {
				String id = (String) map.get(DomainConstants.SELECT_ID);
				complaintObj = DomainObject.newInstance(context, id);
				strComplaintState = complaintObj.getInfo(context, DomainConstants.SELECT_CURRENT);
				strComplaintOwner = complaintObj.getInfo(context, DomainConstants.SELECT_OWNER);
			}
			//TODO
			if (strComplaintState.equalsIgnoreCase("Closed") || strComplaintState.equalsIgnoreCase("Invalid")) {
				Helper.mqlError(context, Helper.StringResource.COLS, "FTComplaints.Product.ProductAttributeCannotModify");
				return 1;
			}

			else if (complaintObj.checkAccess(context, (short) AccessConstants.cModify)) {
				return 0;
			}
			else {
				Helper.mqlError(context, Helper.StringResource.COLS, "FTComplaints.Product.NotProductOwner");
				return 1;
			}

//			if (strComplaintState.equalsIgnoreCase("Closed") || strComplaintState.equalsIgnoreCase("Invalid")) {
//				Helper.mqlError(context, Helper.StringResource.COLS, "FTComplaints.Product.ProductAttributeCannotModify");
//				return 1;
//			}
//
//			else if ((strComplaintOwner.equalsIgnoreCase(context.getUser()))
//					|| Helper.hasRoles(context, TicketConstants.SYMBOLIC_ROLE_QUALITY_MANAGER)) {
//				return 0;
//			}
//			else {
//				Helper.mqlError(context, Helper.StringResource.COLS, "FTComplaints.Product.NotProductOwner");
//				return 1;
//			}
		}
		catch (Exception e) {
			throw new ComplaintException(e);
		}
	}

	public void addComplaintSecondaryOrganizationOwnership(Context context, String[] args) throws ComplaintException {
		try {
			String strRelId = args[0];
			String strToTypes = args[2];

			if (!Helper.isNullOrEmpty(strRelId)
					&& strToTypes.contains(PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Model))) {
				StringList slRelSelect = new StringList();
				slRelSelect.add("to.organization");
				slRelSelect.add("from.to[" + PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT) + "]");
				slRelSelect.add("from.to[" + PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT)
						+ "].from.id");
				List<Map<?, ?>> mlRelInfo = DomainRelationship.getInfo(context, new String[] { strRelId }, slRelSelect);
				for (Iterator iterator = mlRelInfo.iterator(); iterator.hasNext();) {
					Map object = (Map) iterator.next();
					String strIfComplaint = (String) object.get("from.to["
							+ PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT) + "]");
					if (Boolean.valueOf(strIfComplaint)) {
						String strComplaintId = (String) object.get("from.to["
								+ PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT) + "].from.id");
						String strModelOrganization = (String) object.get("to.organization");
						EventService eventService = getParentEventService(context);
						eventService.addComplaintSecondaryOrganizationOwnership(context, DomainObject.newInstance(context, strComplaintId),
								strModelOrganization);
					}
				}
			}
		}
		catch (Exception e) {
			throw new ComplaintException(e);
		}
	}

	public int checkDerivedEventForModel(Context context, String[] args) throws ComplaintException {
		try {
			String strObjectId = args[0];
			String strObjectIdTo = args[1];
			StringList slBusSelect = new StringList();
			slBusSelect.add(DomainConstants.SELECT_TYPE);
			String modelType = null, dEventType = null;
			DomainObject derivedEvent = DomainObject.newInstance(context, strObjectId);

			List<Map<?, ?>> mlRelInfo = QueryUtil.getInfo(context, new String[] { strObjectIdTo }, slBusSelect);
			for (Iterator iterator = mlRelInfo.iterator(); iterator.hasNext();) {
				Map<?, ?> map = (Map<?, ?>) iterator.next();
				modelType = (String) map.get(DomainConstants.SELECT_TYPE);
			}
			mlRelInfo = QueryUtil.getInfo(context, new String[] { strObjectId }, slBusSelect);
			for (Iterator iterator = mlRelInfo.iterator(); iterator.hasNext();) {
				Map<?, ?> map = (Map<?, ?>) iterator.next();
				dEventType = (String) map.get(DomainConstants.SELECT_TYPE);
			}
			if (modelType.equals(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_type_Model))) {
				if (dEventType.equals(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_TYPE_DERIVED_EVENT))) {
					int noOfConnections = Helper.countConnectionsWithRel(context, derivedEvent,
							TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT_PRODUCT, "from");
					if (noOfConnections == 0) {
						return 0;
					}
					else {
						Helper.mqlError(context, Helper.StringResource.COLS, "Complaints.Product.EventModelConnectionExist");
						return 1;
					}
				}
			}
			return 0;

		}
		catch (Exception e) {
			throw new ComplaintException(e);
		}
	}

	public void removeComplaintSecondaryOrganizationOwnership(Context context, String[] args) throws ComplaintException {
		try {
			String strFromObjectId = args[1];
			String strToObjectId = args[2];
			if (!Helper.isNullOrEmpty(strFromObjectId) && !Helper.isNullOrEmpty(strToObjectId)) {
				String strModelOrganization = null;
				String strComplaintId = null;
				StringList slBusSelect = new StringList();
				slBusSelect.add(DomainConstants.SELECT_ORGANIZATION);
				slBusSelect.add(DomainConstants.SELECT_TYPE);
				slBusSelect.add("to[" + PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT) + "].from.id");
				List<Map<?, ?>> mlRelInfo = QueryUtil.getInfo(context, new String[] { strToObjectId, strFromObjectId }, slBusSelect);
				for (Iterator iterator = mlRelInfo.iterator(); iterator.hasNext();) {
					Map<?, ?> map = (Map<?, ?>) iterator.next();
					String strType = (String) map.get(DomainConstants.SELECT_TYPE);
					if (PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_TYPE_MODEL).equalsIgnoreCase(strType)) {
						strModelOrganization = (String) map.get(DomainConstants.SELECT_ORGANIZATION);
					}
					if (PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_TYPE_COMPLAINT_EVENT).equalsIgnoreCase(strType)) {
						strComplaintId = (String) map.get("to["
								+ PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT) + "].from.id");
					}
				}

				if (!Helper.isNullOrEmpty(strComplaintId) && !Helper.isNullOrEmpty(strModelOrganization)) {
					EventService eventService = getParentEventService(context);
					eventService.removeComplaintSecondaryOrganizationOwnership(context, DomainObject.newInstance(context, strComplaintId),
							strModelOrganization);
				}
			}

		}
		catch (Exception e) {
			// ContextUtil.abortTransaction(context);
			throw new ComplaintException(e);
		}
	}
	
	public int deleteDerivedEventcheckforproductevaluatioandAER(Context context, String[] args) throws ComplaintException {
		
		try {
			String derivedEventID = args[0];
			DomainObject doDerivedEvent = DomainObject.newInstance(context, derivedEventID);
			
			int connectionsProductEvaluation=Helper.countConnectionsOnObject(context, doDerivedEvent, TicketConstants.SYMBOLIC_RELATIONSHIP_PRODUCT_EVALUATION, "to", null);
			int connectionsAER = Helper.countConnectionsOnObject(context, doDerivedEvent, TicketConstants.SYMBOLIC_RELATIONSHIP_ADVERSE_REPORT, "from", null);
			
			if(connectionsProductEvaluation>0 && connectionsAER>0)
			{
				Helper.mqlError(context, Helper.StringResource.COLS, "COLS.DerivedEvent.Delete.Error.AERandProductEvaluationAssociated");
				return 1;
			}
			
			if(connectionsProductEvaluation>0)
			{
				Helper.mqlError(context, Helper.StringResource.COLS, "COLS.DerivedEvent.Delete.Error.ProductEvaluationAssociated");
				return 1;
			}
			
			if(connectionsAER > 0)
			{
				Helper.mqlError(context, Helper.StringResource.COLS, "COLS.DerivedEvent.Delete.Error.AERAssociated");
				return 1;
			}
			return 0;
		}
		catch (Exception e) {
			throw new ComplaintException(e);
		}
		
	}
}

