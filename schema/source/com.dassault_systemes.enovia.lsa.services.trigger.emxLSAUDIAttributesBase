
import matrix.db.BusinessInterface;
import matrix.db.Context;

import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.LSAException;
import com.dassault_systemes.enovia.lsa.componentframework.Component;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentException;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentFactory;
import com.dassault_systemes.enovia.lsa.services.InterfaceAttributesService;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.PropertyUtil;

public class ${CLASSNAME} {
	public ${CLASSNAME}(Context context, String[] args) throws Exception {
		// super(context, args);
	}

	private InterfaceAttributesService getInterfaceAttributesService(Context context) throws LSAException {
		try {
			Component component = ComponentFactory.getInstance(context, "LSACommonCoreComponent");
			InterfaceAttributesService interfaceAttributesService = (InterfaceAttributesService) component.getService(InterfaceAttributesService.class);
			return interfaceAttributesService;
		}
		catch (ComponentException exception) {
			throw new LSAException(exception);
		}
	}

	public int addInterfaceOnModelObjects(Context context, String[] args) throws LSAException {
		try {
			String objModelId = args[0];
			if (!Helper.isNullOrEmpty(objModelId)) {
				DomainObject domModel = DomainObject.newInstance(context, objModelId);
				InterfaceAttributesService service = getInterfaceAttributesService(context);
				final String INTERFACE_ILSA_ATTRIBUTES_ON_TYPE_MODEL = PropertyUtil
						.getSchemaProperty(context, "interface_ILSA_AttributesOnTypeModel");
				BusinessInterface busInterface = new BusinessInterface(INTERFACE_ILSA_ATTRIBUTES_ON_TYPE_MODEL, context.getVault());
				service.addBusinessInterface(context, domModel, busInterface);
			}
			return 0;
		}
		catch (Exception e) {
			throw new LSAException(e.getLocalizedMessage());
		}
	}
}

