
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import matrix.db.AccessConstants;

import com.dassault_systemes.enovia.lsa.EmxTableRowId;
import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.Helper.LSALicense;
import com.dassault_systemes.enovia.lsa.QueryUtil;
import com.dassault_systemes.enovia.lsa.componentframework.Component;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentException;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentFactory;
import com.dassault_systemes.enovia.lsa.ncr.NCRConstants;
import com.dassault_systemes.enovia.lsa.ncr.NCRConstants.NCRProductControlPolicyState;
import com.dassault_systemes.enovia.lsa.ncr.NCRException;
import com.dassault_systemes.enovia.lsa.ncr.NCRUtil;
import com.dassault_systemes.enovia.lsa.ncr.services.NCAllowedItems;
import com.dassault_systemes.enovia.lsa.ncr.services.NCRProductControlService;
import com.dassault_systemes.enovia.lsa.ncr.services.admin.impacteditems.ImpactedItems.ControlItem;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.XSSUtil;
import com.matrixone.apps.framework.ui.UINavigatorUtil;

import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.StringList;

public class ${CLASSNAME} {

	public ${CLASSNAME}(Context context, String[] args) throws Exception {
	}

	/**
	 * Gets NCRProductControlService implementation reference
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @return NCRProductControlService implementation reference
	 * @throws NCRException
	 *             if operation fails
	 */
	private NCRProductControlService getNCRProductControlService(Context context) throws NCRException {
		try {
			Component component = ComponentFactory.getInstance(context, "LSANCRCoreComponent");
			NCRProductControlService ncrProductControlService = (NCRProductControlService) component.getService(NCRProductControlService.class);
			return ncrProductControlService;
		}
		catch (ComponentException exception) {
			throw new NCRException(exception);
		}
	}

	/**
	 * Method to get the range for 'Entry Type' field in PQCNCRProductControlAdd
	 * form
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * 
	 * @param args
	 *            holds no arguments
	 * 
	 * @return range for 'Entry Type' field in the object type Map<?, ?>
	 * 
	 * @throws NCRException
	 *             if the operation fails
	 */
	public Map<?, ?> getRangeFormPQCNCRProductControlAddColumnEntryType(Context context, String args[]) throws NCRException {
		try {
			return Helper.getAttributeRanges(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_ENTRY_TYPE);
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	/**
	 * Method to get the range for 'Hold Location' field in
	 * PQCNCRProductControlAdd form
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * 
	 * @param args
	 *            holds no arguments
	 * 
	 * @return range for 'Hold Location' field in the object type Map<?, ?>
	 * 
	 * @throws NCRException
	 *             if the operation fails
	 */
	public Map<?, ?> getRangeFormPQCNCRProductControlAddColumnHoldLocation(Context context, String args[]) throws NCRException {
		try {
			return Helper.getAttributeRanges(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_HOLD_LOCATION);
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	/**
	 * Method to get the range for 'Total Qty UOM' field in
	 * PQCNCRProductControlAdd form
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * 
	 * @param args
	 *            holds no arguments
	 * 
	 * @return range for 'Total Qty UOM' field in the object type Map<?, ?>
	 * 
	 * @throws NCRException
	 *             if the operation fails
	 */
	public Map<?, ?> getRangeFormPQCNCRProductControlAddColumnTotalQtyUOM(Context context, String args[]) throws NCRException {
		try {
			return Helper.getAttributeRanges(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_TOTAL_QTY_UOM);
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	/**
	 * Method to get the range for 'Defective Qty UOM' field in
	 * PQCNCRProductControlAdd form
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * 
	 * @param args
	 *            holds no arguments
	 * 
	 * @return range for 'Defective Qty UOM' field in the object type Map<?, ?>
	 * 
	 * @throws NCRException
	 *             if the operation fails
	 */
	public Map<?, ?> getRangeFormPQCNCRProductControlAddColumnDefectiveQtyUOM(Context context, String args[]) throws NCRException {
		try {
			return Helper.getAttributeRanges(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_DEFECTIVE_QTY_UOM);
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	/**
	 * Method to get the range for 'Sample Qty UOM' field in
	 * PQCNCRProductControlAdd form
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * 
	 * @param args
	 *            holds no arguments
	 * 
	 * @return range for 'Sample Qty UOM' field in the object type Map<?, ?>
	 * 
	 * @throws NCRException
	 *             if the operation fails
	 */
	public Map<?, ?> getRangeFormPQCNCRProductControlViewColumnProposedDisposition(Context context, String args[]) throws NCRException {
		try {
			return Helper.getAttributeRanges(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_PROPOSED_DISPOSITION);
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	/**
	 * Method to get the range for 'Sample Qty UOM' field in
	 * PQCNCRProductControlAdd form
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * 
	 * @param args
	 *            holds no arguments
	 * 
	 * @return range for 'Sample Qty UOM' field in the object type Map<?, ?>
	 * 
	 * @throws NCRException
	 *             if the operation fails
	 */
	public Map<?, ?> getRangeFormPQCNCRProductControlAddColumnSampleQtyUOM(Context context, String args[]) throws NCRException {
		try {
			return Helper.getAttributeRanges(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_SAMPLE_QTY_UOM);
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	/**
	 * Connects the Product Control Object to selected Product with 'NCR Product
	 * Control Product' relationship and disconnects the existing Product.
	 * 
	 * @param context
	 *            ENOVIA Context object.
	 * @param args
	 *            holds input arguments.
	 * @throws NCRException
	 *             if operation fails.
	 */
	public void updateFormPQCNCRProductControlViewColumnProduct(Context context, String[] args) throws NCRException {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(NCRConstants.PARAMMAP);
			String objectId = (String) paramMap.get(NCRConstants.OBJECTID);
			String strNewProductId = (String) paramMap.get(NCRConstants.NEW_OID);
			if (!Helper.isNullOrEmpty(objectId)) {
				DomainObject dmoPC = DomainObject.newInstance(context, objectId);
				List<Map<?, ?>> returnMap = QueryUtil.getRelatedObjects(context, dmoPC,
						NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL_PRODUCT, NCRConstants.SYMBOLIC_TYPE_PRODUCTS,
						Helper.stringList(DomainConstants.SELECT_ID), Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 0, null,
						null);
				StringList slRelIds = Helper.stringList();
				for (Object obj : returnMap) {
					Map productMap = (Map) obj;
					String strOldRelId = (String) productMap.get(DomainRelationship.SELECT_ID);
					slRelIds.add(strOldRelId);
				}

				if (!Helper.isNullOrEmpty(strNewProductId)) {
					DomainObject dmoNewProduct = DomainObject.newInstance(context, strNewProductId);
					QueryUtil.connectObjects(context, dmoPC, NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL_PRODUCT, dmoNewProduct, slRelIds);
				}
				else {
					QueryUtil.disconnectObjects(context, slRelIds);
				}
			}
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	/**
	 * Gets all the Product Controls related to the NCR
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * @param args
	 *            holds no arguments
	 * @return list of all the Product Control in the form of object type
	 *         Map<?,?>
	 * @throws NCRException
	 *             if the operation fails
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyNCRProductControls(Context context, String[] args) throws NCRException {
		try {
			Map<?, ?> mapProgram = (Map<?, ?>) JPO.unpackArgs(args);
			final String STRPARENTOID = (String) mapProgram.get(NCRConstants.PARENT_OID);
			final StringBuilder SB_REL_PATTERN = new StringBuilder();
			SB_REL_PATTERN.append(NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL);
			final StringBuilder SB_TYPE_PATTERN = new StringBuilder();
			SB_TYPE_PATTERN.append(DomainConstants.QUERY_WILDCARD);

			NCRProductControlService service = getNCRProductControlService(context);
			List<Map<?, ?>> mlPCRs = service.getNCRProductControl(context, DomainObject.newInstance(context, STRPARENTOID),
					Helper.stringList(DomainObject.SELECT_ID), null);
			return new MapList(mlPCRs);
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	/**
	 * UI method for command 'PQCNCRProductControlAdd'. Create Product Control &
	 * refresh the Structured Browser with the new entry
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * 
	 * @param args
	 *            holds no arguments
	 * 
	 * @return object type Map<?, ?> containing the newly created object
	 * 
	 * @throws NCRException
	 *             if the operation fails
	 */
	@com.matrixone.apps.framework.ui.CreateProcessCallable
	public Map<?, ?> actionCreateProductControl(Context context, String args[]) throws NCRException {

		NCRProductControlService NCRProductControlService = getNCRProductControlService(context);
		Map<String, String> PCAttributeMap = new HashMap<String, String>();
		Map<String, String> returnMap = new HashMap<String, String>();
		String strDefectRate = "";
		DomainObject dmoProduct = null;
		try {
			final String STR_ATTRIBUTE_ENTRY_TYPE = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_ENTRY_TYPE);
			final String STR_ATTRIBUTE_WORK_ORDER = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_WORK_ORDER);
			final String STR_ATTRIBUTE_LOT_NUMBER = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_LOT_NUMBER);
			final String STR_ATTRIBUTE_HOLD_LOCATION = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_HOLD_LOCATION);
			final String STR_ATTRIBUTE_TOTAL_QTY = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_TOTAL_QTY);
			final String STR_ATTRIBUTE_TOTAL_QTY_UOM = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_TOTAL_QTY_UOM);
			final String STR_ATTRIBUTE_DEFECTIVE_QTY = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_DEFECTIVE_QTY);
			final String STR_ATTRIBUTE_DEFECTIVE_QTY_UOM = PropertyUtil.getSchemaProperty(context,
					NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_DEFECTIVE_QTY_UOM);
			final String STR_ATTRIBUTE_SAMPLE_QTY = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_SAMPLE_QTY);
			final String STR_ATTRIBUTE_SAMPLE_QTY_UOM = PropertyUtil.getSchemaProperty(context,
					NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_SAMPLE_QTY_UOM);
			final String STR_ATTRIBUTE_DEFECT_RATE = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_DEFECT_RATE);
			final String STR_ATTRIBUTE_ITEM_CODE = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_ITEM_CODE);
			final String STR_ATTRIBUTE_ITEM_DESCRIPTION = PropertyUtil.getSchemaProperty(context,
					NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_ITEM_DESCRIPTION);
			final String STR_ATTRIBUTE_ORIGINATOR = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_attribute_Originator);

			HashMap programMap = JPO.unpackArgs(args);

			String strParentOID = (String) programMap.get(NCRConstants.PARENT_OID);
			String strProductOID = (String) programMap.get(NCRConstants.PRODUCT_NAME_OID);
			String strEntryType = (String) programMap.get(NCRConstants.ENTRY_TYPE);
			String strWorkOrder = (String) programMap.get(NCRConstants.WORK_ORDER);
			String strLotNumber = (String) programMap.get(NCRConstants.LOT_NUMBER);
			String strHoldLocation = (String) programMap.get(NCRConstants.HOLD_LOCATION);
			String strTotalQty = (String) programMap.get(NCRConstants.TOTAL_QTY);
			String strTotalQtyUOM = (String) programMap.get(NCRConstants.TOTAL_QTY_UOM);
			String strDefectiveQty = (String) programMap.get(NCRConstants.DEFECTIVE_QTY);
			String strDefectiveQtyUOM = (String) programMap.get(NCRConstants.TOTAL_QTY_UOM);
			String strSampleQty = (String) programMap.get(NCRConstants.SAMPLE_QTY);
			String strSampleQtyUOM = (String) programMap.get(NCRConstants.TOTAL_QTY_UOM);
			String strItemCode = (String) programMap.get(NCRConstants.ITEM_CODE);
			String strItemDescription = (String) programMap.get(NCRConstants.ITEM_DESCRIPTION);

			if (strTotalQty != null && Integer.parseInt(strTotalQty) != 0 && strDefectiveQty != null) {
				float defectQty = Float.parseFloat(strDefectiveQty);
				float totalQty = Float.parseFloat(strTotalQty);
				float misc = defectQty / totalQty;
				float defectRate = misc * 100;
				strDefectRate = "" + defectRate;
			}

			PCAttributeMap.put(STR_ATTRIBUTE_ENTRY_TYPE, strEntryType);
			PCAttributeMap.put(STR_ATTRIBUTE_WORK_ORDER, strWorkOrder);
			PCAttributeMap.put(STR_ATTRIBUTE_LOT_NUMBER, strLotNumber);
			PCAttributeMap.put(STR_ATTRIBUTE_HOLD_LOCATION, strHoldLocation);
			PCAttributeMap.put(STR_ATTRIBUTE_TOTAL_QTY, strTotalQty);
			PCAttributeMap.put(STR_ATTRIBUTE_TOTAL_QTY_UOM, strTotalQtyUOM);
			PCAttributeMap.put(STR_ATTRIBUTE_DEFECTIVE_QTY, strDefectiveQty);
			PCAttributeMap.put(STR_ATTRIBUTE_DEFECTIVE_QTY_UOM, strDefectiveQtyUOM);
			PCAttributeMap.put(STR_ATTRIBUTE_SAMPLE_QTY, strSampleQty);
			PCAttributeMap.put(STR_ATTRIBUTE_SAMPLE_QTY_UOM, strSampleQtyUOM);
			PCAttributeMap.put(STR_ATTRIBUTE_ITEM_CODE, strItemCode);
			PCAttributeMap.put(STR_ATTRIBUTE_ITEM_DESCRIPTION, strItemDescription);
			PCAttributeMap.put(STR_ATTRIBUTE_DEFECT_RATE, strDefectRate);

			if (!Helper.isNullOrEmpty(strProductOID)) {
				dmoProduct = DomainObject.newInstance(context, strProductOID);
			}
			DomainObject dmoProductControl = NCRProductControlService.createNCRProductControl(context, dmoProduct, PCAttributeMap, true);
			DomainObject dmoNCR = DomainObject.newInstance(context, strParentOID);
			if (dmoProductControl != null) {
				NCRUtil.connectObjects(context, dmoNCR, NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL, dmoProductControl);
			}
			returnMap.put(DomainConstants.SELECT_ID, dmoProductControl.getObjectId());
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
		return returnMap;
	}

	/**
	 * UI method for command 'PQCNCRProductControlDelete'. Delete selected
	 * Product Control(s) & refresh the Structured browser.
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * @param args
	 *            holds packed arguments
	 * @return String containing ACTION_JAVASCRIPT
	 * @throws NCRException
	 *             if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionDeleteProductControl(Context context, String[] args) throws NCRException {
		try {
			Helper.isLicenseAssigned(context, LSALicense.COLS);
			Map<?, ?> mapProgram = (Map<?, ?>) JPO.unpackArgs(args);
			String[] strOrgTableRowIds = (String[]) mapProgram.get(NCRConstants.EMX_TABLE_ROW_ID);
			final String[] strParentOID = (String[]) mapProgram.get(NCRConstants.PARENT_OID);
			DomainObject dmoNCR = DomainObject.newInstance(context, strParentOID[0]);
			ArrayList<String> arrSuccessPCIds = new ArrayList<String>();
			ArrayList<String> arrFailureControlNames = new ArrayList<String>();
			String[] controlIDs = EmxTableRowId.getObjectIds(strOrgTableRowIds);
			final String HAS_DELETE_ACCESS = "current.access[delete]";
			final String REL_NCR_PRODUCT_CONTROL_PRODUCT = PropertyUtil.getSchemaProperty(context,
					NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL_PRODUCT);
			final String BASE_SELECT = "from[" + REL_NCR_PRODUCT_CONTROL_PRODUCT + "].to.";
			final String DELIMETER = ":";

			List<Map<?, ?>> mlControlsForDelete = QueryUtil.getInfo(context, controlIDs,
					Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_CURRENT, DomainConstants.SELECT_NAME,
							DomainConstants.SELECT_TYPE, DomainConstants.SELECT_POLICY, BASE_SELECT + "id", BASE_SELECT + "type",
							BASE_SELECT + "policy", BASE_SELECT + "current", HAS_DELETE_ACCESS));
			List<String> optionalControlItemIds = new ArrayList<>();
			Map<String, String> mandatoryControlItemIds = new HashMap<>();
			Map<String, String> controlToImpactedItemIds = new HashMap<>();
			for (Map<?, ?> control : mlControlsForDelete) {
				String strcontrolId = (String) control.get(DomainConstants.SELECT_ID);
				String impactedItemId = (String) control.get(BASE_SELECT + "id");
				String impactedItemType = (String) control.get(BASE_SELECT + "type");
				String impactedItemPolicy = (String) control.get(BASE_SELECT + "policy");
				String impactedItemState = (String) control.get(BASE_SELECT + "current");
				controlToImpactedItemIds.put(strcontrolId, impactedItemId);
				if (!optionalControlItemIds.contains(impactedItemId) && !mandatoryControlItemIds.containsKey(impactedItemId)) {
					boolean isControlItemRequired = false;
					Map<String, Map<String, Object>> allowedItems = NCAllowedItems.getInstance(context).getAllowedItems();
					ControlItem controlItem = NCAllowedItems.getInstance(context).getControlItem(context, impactedItemType, impactedItemPolicy,
							impactedItemState, true);
					Map<String, Object> value = allowedItems.get(controlItem.getUserType());
					isControlItemRequired = value.get("isControlItemRequired").toString().equalsIgnoreCase("yes") ? true : false;
					if (isControlItemRequired) {
						int totalControls = Helper.countConnectionsOnObject(context, dmoNCR, NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL,
								"from", BASE_SELECT + "id == " + impactedItemId);
						mandatoryControlItemIds.put(impactedItemId, totalControls + DELIMETER + 1);
					}
					else {
						optionalControlItemIds.add(impactedItemId);
					}
				}
				else if (mandatoryControlItemIds.containsKey(impactedItemId)) {
					String count = mandatoryControlItemIds.get(impactedItemId);
					String countIncrement = String.valueOf(Integer.parseInt(count.split(DELIMETER)[1]) + 1);
					mandatoryControlItemIds.put(impactedItemId, count.split(DELIMETER)[0] + DELIMETER + countIncrement);
				}
			}

			for (Map<?, ?> control : mlControlsForDelete) {
				String controlId = (String) control.get(DomainConstants.SELECT_ID);
				String controlName = (String) control.get(DomainConstants.SELECT_NAME);
				String impactedItemId = (String) control.get(BASE_SELECT + "id");
				if (mandatoryControlItemIds.containsKey(impactedItemId)) {
					String count = mandatoryControlItemIds.get(impactedItemId);
					int totalControls = Integer.parseInt(count.split(DELIMETER)[0]);
					int deleteControls = Integer.parseInt(count.split(DELIMETER)[1]);
					if (totalControls == deleteControls) {
						StringBuilder sbReturn = new StringBuilder();
						sbReturn.append(Helper.getI18NString(context, Helper.StringResource.NCR, "LQINCR.ProductControl.MinimumControlItemRequired"));
						return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "actionShowAlertMessage", sbReturn.toString());
					}
				}

				if (Boolean.parseBoolean((String) control.get(HAS_DELETE_ACCESS)))
					arrSuccessPCIds.add(controlId);
				else {
					arrFailureControlNames.add(controlName);
				}
			}

			if (!arrFailureControlNames.isEmpty()) {
				StringBuilder sbReturn = new StringBuilder();
				sbReturn.append(Helper.getI18NString(context, Helper.StringResource.NCR, "LQINCR.ProductControl.CanNotBeDeleted"));
				sbReturn.append("\n");
				sbReturn.append(arrFailureControlNames.toString());
				return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "actionShowAlertMessage", sbReturn.toString());
			}
			NCRUtil.deleteObjects(context, arrSuccessPCIds.toArray(new String[arrSuccessPCIds.size()]));
		}
		catch (Exception e) {
			throw new NCRException(e.getLocalizedMessage());
		}
		return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "refreshOpenerWindow");
	}

	/**
	 * UI method for command 'PQCNCRProductControlSBSubmitToReview'. Submit To
	 * Review for selected ProductControl(s).
	 * 
	 * @param context
	 *            ENOVIA Context object.
	 * @param args
	 *            holds input arguments.
	 * @throws NCRException
	 *             if operation fails.
	 */
	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionSBSubmitToReview(Context context, String[] args) throws NCRException {

		StringBuffer sbReturn = new StringBuffer();
		ArrayList<DomainObject> arrSuccessPCIds = new ArrayList<DomainObject>();
		ArrayList<Object> arrFailedPCs = new ArrayList<Object>();
		DomainObject doPC = null;
		String strPCName = new String();
		String strPCId = new String();

		try {

			Map<?, ?> mapProgram = JPO.unpackArgs(args);
			String[] strPCIds = (String[]) mapProgram.get(NCRConstants.EMX_TABLE_ROW_ID);
			NCRProductControlService NCRProductControlService = getNCRProductControlService(context);

			for (String strRowId : strPCIds) {
				EmxTableRowId tr = new EmxTableRowId(strRowId);
				strPCId = tr.getObjectId();
				doPC = DomainObject.newInstance(context, strPCId);
				strPCName = doPC.getInfo(context, DomainConstants.SELECT_NAME);
				final String STR_CURRENT_STATE = doPC.getInfo(context, DomainObject.SELECT_CURRENT);
				final String STR_REQD_CURRENT_STATE = PropertyUtil.getSchemaProperty(context, NCRConstants.POLICY,
						PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_POLICY_NCR_PRODUCT_CONTROL),
						NCRConstants.SYMBOLIC_POLICY_STATE_INPROCESS);
				boolean hasDeleteAccess = doPC.checkAccess(context, (short) AccessConstants.cPromote);
				if (!STR_REQD_CURRENT_STATE.equalsIgnoreCase(STR_CURRENT_STATE))
					arrFailedPCs.add(strPCName);
				else if (hasDeleteAccess) {
					arrSuccessPCIds.add(DomainObject.newInstance(context, strPCId));
				}
				else
					arrFailedPCs.add(strPCName);
			}
			if (!arrFailedPCs.isEmpty()) {
				sbReturn.append(Helper.getI18NString(context, Helper.StringResource.NCR, "LQINCR.ProductControl.CanNotSubmitToReview"));
				sbReturn.append("\n");
				sbReturn.append(arrFailedPCs.toString());

				MqlUtil.mqlCommand(context, "notice $1", sbReturn.toString());
			}
			else if (!arrSuccessPCIds.isEmpty()) {
				NCRProductControlService.promoteNCRProductControl(context, arrSuccessPCIds, NCRProductControlPolicyState.REVIEW);
			}
			sbReturn.append(Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "actionRefreshProductControlSB"));
		}
		catch (Exception e) {
			throw new NCRException(e.getLocalizedMessage());
		}

		return sbReturn.toString();
	}

	/**
	 * UI method for command 'PQCNCRProductControlSBVerify'. Submit To Review
	 * for selected ProductControl(s).
	 * 
	 * @param context
	 *            ENOVIA Context object.
	 * @param args
	 *            holds input arguments.
	 * @throws NCRException
	 *             if operation fails.
	 */
	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionSBVerify(Context context, String[] args) throws NCRException {

		StringBuffer sbReturn = new StringBuffer();
		ArrayList<DomainObject> arrSuccessPCIds = new ArrayList<DomainObject>();
		ArrayList<Object> arrFailedPCs1 = new ArrayList<Object>();
		ArrayList<Object> arrFailedPCs2 = new ArrayList<Object>();
		ArrayList<Object> arrFailedPCs3 = new ArrayList<Object>();
		DomainObject doPC = null;
		String strPCName = new String();
		String strPCId = new String();

		try {

			Map<?, ?> mapProgram = JPO.unpackArgs(args);
			String[] strPCIds = (String[]) mapProgram.get(NCRConstants.EMX_TABLE_ROW_ID);
			NCRProductControlService NCRProductControlService = getNCRProductControlService(context);

			for (String strRowId : strPCIds) {
				EmxTableRowId tr = new EmxTableRowId(strRowId);
				strPCId = tr.getObjectId();
				doPC = DomainObject.newInstance(context, strPCId);
				strPCName = doPC.getInfo(context, DomainConstants.SELECT_NAME);
				final String STR_PROPOSED_DISPOSITION = doPC.getAttributeValue(context,
						PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_PROPOSED_DISPOSITION));
				final String STR_RATIONALE = doPC.getAttributeValue(context,
						PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_AS_IS_RATIONALE));
				final String STR_CURRENT_STATE = doPC.getInfo(context, DomainObject.SELECT_CURRENT);
				final String STR_REQD_CURRENT_STATE = PropertyUtil.getSchemaProperty(context, NCRConstants.POLICY,
						PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_POLICY_NCR_PRODUCT_CONTROL),
						NCRConstants.SYMBOLIC_POLICY_STATE_REVIEW);
				boolean hasPromoteAccess = doPC.checkAccess(context, (short) AccessConstants.cPromote);
				if (!STR_REQD_CURRENT_STATE.equalsIgnoreCase(STR_CURRENT_STATE))
					arrFailedPCs1.add(strPCName);
				else if (hasPromoteAccess && (!Helper.isNullOrEmpty(STR_PROPOSED_DISPOSITION) && !Helper.isNullOrEmpty(STR_RATIONALE))) {
					arrSuccessPCIds.add(DomainObject.newInstance(context, strPCId));
				}
				else if (!hasPromoteAccess)
					arrFailedPCs2.add(strPCName);
				else if (Helper.isNullOrEmpty(STR_PROPOSED_DISPOSITION) && Helper.isNullOrEmpty(STR_RATIONALE))
					arrFailedPCs3.add(strPCName);
			}
			if (!arrFailedPCs1.isEmpty()) {
				sbReturn.append(
						Helper.getI18NString(context, Helper.StringResource.NCR, "LQINCR.ProductControl.PromoteToVerify.IncorrectSourceState"));
				sbReturn.append("\n");
				sbReturn.append(arrFailedPCs1.toString());

				MqlUtil.mqlCommand(context, "notice $1", sbReturn.toString());
			}
			else if (!arrFailedPCs2.isEmpty()) {
				sbReturn.append(Helper.getI18NString(context, Helper.StringResource.NCR, "LQINCR.ProductControl.PromoteToVerify.UnAuthorizedUser"));
				sbReturn.append("\n");
				sbReturn.append(arrFailedPCs2.toString());

				MqlUtil.mqlCommand(context, "notice $1", sbReturn.toString());
			}
			else if (!arrFailedPCs3.isEmpty()) {
				sbReturn.append(Helper.getI18NString(context, Helper.StringResource.NCR,
						"LQINCR.ProductControl.PromoteToVerify.ProposedDispositionOrRationaleEmpty"));
				sbReturn.append("\n");
				sbReturn.append(arrFailedPCs3.toString());

				MqlUtil.mqlCommand(context, "notice $1", sbReturn.toString());
			}
			else if (!arrSuccessPCIds.isEmpty()) {
				NCRProductControlService.promoteNCRProductControl(context, arrSuccessPCIds, NCRProductControlPolicyState.VERIFIED);
			}
			sbReturn.append(Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "actionRefreshProductControlSB"));
		}
		catch (Exception e) {
			throw new NCRException(e.getLocalizedMessage());
		}

		return sbReturn.toString();
	}

	/**
	 * UI method for command 'PQCNCRProductControlSBComplete'. Action for
	 * Completing selected Product Control(s)
	 * 
	 * @param context
	 *            ENOVIA Context object.
	 * @param args
	 *            holds input arguments.
	 * @throws NCRException
	 *             if operation fails.
	 */
	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionSBComplete(Context context, String[] args) throws NCRException {
		StringBuffer sbReturn = new StringBuffer();
		ArrayList<DomainObject> arrSuccessPCIds = new ArrayList<DomainObject>();
		ArrayList<Object> arrFailedPCs = new ArrayList<Object>();
		DomainObject doPC = null;
		String strPCName = new String();
		String strPCId = new String();

		try {

			Map<?, ?> mapProgram = JPO.unpackArgs(args);
			String[] strPCIds = (String[]) mapProgram.get(NCRConstants.EMX_TABLE_ROW_ID);
			NCRProductControlService NCRProductControlService = getNCRProductControlService(context);

			for (String strRowId : strPCIds) {
				EmxTableRowId tr = new EmxTableRowId(strRowId);
				strPCId = tr.getObjectId();
				doPC = DomainObject.newInstance(context, strPCId);
				strPCName = doPC.getInfo(context, DomainConstants.SELECT_NAME);
				final String STR_CURRENT_STATE = doPC.getInfo(context, DomainObject.SELECT_CURRENT);
				final String STR_REQD_CURRENT_STATE = PropertyUtil.getSchemaProperty(context, NCRConstants.POLICY,
						PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_POLICY_NCR_PRODUCT_CONTROL),
						NCRConstants.SYMBOLIC_POLICY_STATE_VERIFIED);
				boolean hasPromoteAccess = doPC.checkAccess(context, (short) AccessConstants.cPromote);
				if (!STR_REQD_CURRENT_STATE.equalsIgnoreCase(STR_CURRENT_STATE))
					arrFailedPCs.add(strPCName);
				else if (hasPromoteAccess) {
					arrSuccessPCIds.add(DomainObject.newInstance(context, strPCId));
				}
				else
					arrFailedPCs.add(strPCName);
			}
			if (!arrFailedPCs.isEmpty()) {
				sbReturn.append(Helper.getI18NString(context, Helper.StringResource.NCR, "LQINCR.ProductControl.CanNotBeCompleted"));
				sbReturn.append("\n");
				sbReturn.append(arrFailedPCs.toString());

				MqlUtil.mqlCommand(context, "notice $1", sbReturn.toString());
			}
			else if (!arrSuccessPCIds.isEmpty()) {
				NCRProductControlService.promoteNCRProductControl(context, arrSuccessPCIds, NCRProductControlPolicyState.COMPLETE);
			}
			sbReturn.append(Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "actionRefreshProductControlSB"));
		}
		catch (Exception e) {
			throw new NCRException(e.getLocalizedMessage());
		}

		return sbReturn.toString();
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionPropertiesSubmitToReview(Context context, String[] args) throws NCRException {
		final ArrayList<DomainObject> DMO_PC_LIST = new ArrayList<DomainObject>();
		try {
			Map<?, ?> programMap = JPO.unpackArgs(args);
			String strPCId = ((String[]) programMap.get(NCRConstants.PARENT_OID))[0];
			DMO_PC_LIST.add(DomainObject.newInstance(context, strPCId));
			NCRProductControlService NCRProductControlService = getNCRProductControlService(context);
			NCRProductControlService.promoteNCRProductControl(context, DMO_PC_LIST, NCRProductControlPolicyState.REVIEW);
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "actionRefreshProductControl");
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionPropertiesVerify(Context context, String[] args) throws NCRException {
		final ArrayList<DomainObject> DMO_PC_LIST = new ArrayList<DomainObject>();
		try {
			Map<?, ?> programMap = JPO.unpackArgs(args);
			String strPCId = ((String[]) programMap.get(NCRConstants.PARENT_OID))[0];
			DomainObject doPC = DomainObject.newInstance(context, strPCId);
			final String STR_PROPOSED_DISPOSITION = doPC.getAttributeValue(context,
					PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_PROPOSED_DISPOSITION));
			final String STR_RATIONALE = doPC.getAttributeValue(context,
					PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_AS_IS_RATIONALE));
			DMO_PC_LIST.add(doPC);
			if (!Helper.isNullOrEmpty(STR_PROPOSED_DISPOSITION) && !Helper.isNullOrEmpty(STR_RATIONALE)) {
				NCRProductControlService NCRProductControlService = getNCRProductControlService(context);
				NCRProductControlService.promoteNCRProductControl(context, DMO_PC_LIST, NCRProductControlPolicyState.VERIFIED);
			}
			else
				throw new NCRException(Helper.getI18NString(context, Helper.StringResource.NCR,
						"LQINCR.ProductControl.PromoteToVerify.ProposedDispositionOrRationaleEmpty"));
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "actionRefreshProductControl");
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionPropertiesComplete(Context context, String[] args) throws NCRException {
		final ArrayList<DomainObject> DMO_PC_LIST = new ArrayList<DomainObject>();
		try {
			Map<?, ?> programMap = JPO.unpackArgs(args);
			String strPCId = ((String[]) programMap.get(NCRConstants.PARENT_OID))[0];
			DMO_PC_LIST.add(DomainObject.newInstance(context, strPCId));
			NCRProductControlService NCRProductControlService = getNCRProductControlService(context);
			NCRProductControlService.promoteNCRProductControl(context, DMO_PC_LIST, NCRProductControlPolicyState.COMPLETE);
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "actionRefreshProductControl");
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	@com.matrixone.apps.framework.ui.PreProcessCallable
	public Map<?, ?> editAccessForProductControlEdit(Context context, String[] args) throws NCRException {
		HashMap<String, String> returnMap = new HashMap<String, String>();
		final String STR_POLICY_NCR_PRODUCT_CONTROL = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_POLICY_NCR_PRODUCT_CONTROL);
		final String STR_STATE_INPROCESS = PropertyUtil.getSchemaProperty(context, NCRConstants.POLICY, STR_POLICY_NCR_PRODUCT_CONTROL,
				NCRConstants.SYMBOLIC_POLICY_STATE_INPROCESS);
		final String STR_STATE_REVIEW = PropertyUtil.getSchemaProperty(context, NCRConstants.POLICY, STR_POLICY_NCR_PRODUCT_CONTROL,
				NCRConstants.SYMBOLIC_POLICY_STATE_REVIEW);
		final String STR_STATE_VERIFIED = PropertyUtil.getSchemaProperty(context, NCRConstants.POLICY, STR_POLICY_NCR_PRODUCT_CONTROL,
				NCRConstants.SYMBOLIC_POLICY_STATE_VERIFIED);
		final String STR_STATE_COMPLETE = PropertyUtil.getSchemaProperty(context, NCRConstants.POLICY, STR_POLICY_NCR_PRODUCT_CONTROL,
				NCRConstants.SYMBOLIC_POLICY_STATE_COMPLETE);
		try {
			Map<?, ?> programMap = JPO.unpackArgs(args);
			Map<?, ?> requestMap = (Map<?, ?>) programMap.get(NCRConstants.REQUESTMAP);

			final String STR_PRODUCT_CONTROL_ID = (String) requestMap.get(NCRConstants.OBJECTID);
			DomainObject dmoProductControl = DomainObject.newInstance(context, STR_PRODUCT_CONTROL_ID);

			Map<?, ?> formMap = (Map<?, ?>) programMap.get(NCRConstants.FORMMAP);
			MapList formFieldList = (MapList) formMap.get(NCRConstants.FIELDS);
			Map<?, ?> fieldMap = new HashMap<>();
			String fieldName = DomainConstants.EMPTY_STRING;
			Map<String, String> settingsMap = null;

			final String STR_STATE = dmoProductControl.getInfo(context, DomainConstants.SELECT_CURRENT);
			final Boolean BOOL_FLAG_IS_NCRUSER = Helper.hasRoles(context, NCRConstants.SYMBOLIC_ROLE_NCR_USER);
			final Boolean BOOL_FLAG_IS_CI = Helper.hasRoles(context, NCRConstants.SYMBOLIC_ROLE_COMPLAINT_INVESTIGATOR);
			final Boolean BOOL_FLAG_IS_VPLMProjLeader = Helper.hasRoles(context, NCRConstants.SYMBOLIC_ROLE_VPLMProjLeader);
			final Boolean BOOL_FLAG_IS_VPLMExperimenter = Helper.hasRoles(context, NCRConstants.SYMBOLIC_ROLE_VPLMExperimenter);

			for (Object object : formFieldList) {
				fieldMap = (Map<?, ?>) object;

				fieldName = (String) fieldMap.get(DomainConstants.SELECT_NAME);
				settingsMap = (Map<String, String>) fieldMap.get(NCRConstants.SETTINGS);
				if (STR_STATE.equalsIgnoreCase(STR_STATE_VERIFIED) || STR_STATE.equalsIgnoreCase(STR_STATE_COMPLETE)) {
					settingsMap.put(NCRConstants.EDITABLE, "false");
					continue;
				}
				else if (STR_STATE.equalsIgnoreCase(STR_STATE_INPROCESS) && (BOOL_FLAG_IS_NCRUSER || BOOL_FLAG_IS_VPLMExperimenter)
						&& fieldName.equalsIgnoreCase(NCRConstants.RUN_NUMBER)) {
					settingsMap.put(NCRConstants.EDITABLE, "false");
				}
				else if (fieldName.equalsIgnoreCase(NCRConstants.PROPOSED_DISPOSITION) || fieldName.equalsIgnoreCase(NCRConstants.REWORK_INSTRUCTIONS)
						|| fieldName.equalsIgnoreCase(NCRConstants.DISPOSITION_RATIONALE)) {
					if (STR_STATE.equalsIgnoreCase(STR_STATE_INPROCESS)) {
						settingsMap.put(NCRConstants.EDITABLE, "false");
					}
					else if (STR_STATE.equalsIgnoreCase(STR_STATE_REVIEW) && !(BOOL_FLAG_IS_CI || BOOL_FLAG_IS_VPLMProjLeader)) {
						settingsMap.put(NCRConstants.EDITABLE, "false");
					}
					else {
						settingsMap.put(NCRConstants.EDITABLE, "true");	
					}
				}
				else if ((BOOL_FLAG_IS_CI || BOOL_FLAG_IS_VPLMProjLeader)
						&& fieldName.equalsIgnoreCase(NCRConstants.RUN_NUMBER)) {
					settingsMap.put(NCRConstants.EDITABLE, "true");	
				}
			}
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
		return returnMap;
	}

	/**
	 * Update the Defective Percentage according to updated Total & Defective
	 * Quantity on Product Control edit
	 * 
	 * @param context
	 *            ENOVIA Context object.
	 * @param args
	 *            holds input arguments.
	 * @throws NCRException
	 *             if operation fails.
	 */
	@com.matrixone.apps.framework.ui.PostProcessCallable
	public void updatePQCNCRProductControlViewColumnDefectPercentage(Context context, String[] args) throws NCRException {
		Map<String, String> attributeMap = new HashMap<String, String>();
		final String STR_ATTRIBUTE_DEFECTIVE_QTY_UOM = PropertyUtil.getSchemaProperty(context,
				NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_DEFECTIVE_QTY_UOM);
		final String STR_ATTRIBUTE_SAMPLE_QTY_UOM = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_SAMPLE_QTY_UOM);
		final String STR_ATTRIBUTE_DEFECT_RATE = PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_ATTRIBUTE_NCR_PC_DEFECT_RATE);
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(NCRConstants.PARAMMAP);
			Map<?, ?> requestMap = (Map<?, ?>) programMap.get(NCRConstants.REQUESTMAP);
			String objectId = (String) paramMap.get(NCRConstants.OBJECTID);
			String strTotalQty = (String) requestMap.get(NCRConstants.TOTAL_QTY);
			String strDefectiveQty = (String) requestMap.get(NCRConstants.DEFECTIVE_QTY);
			String strTotalQtyUOM = (String) requestMap.get(NCRConstants.TOTAL_QTY_UOM);
			attributeMap.put(STR_ATTRIBUTE_DEFECTIVE_QTY_UOM, strTotalQtyUOM);
			attributeMap.put(STR_ATTRIBUTE_SAMPLE_QTY_UOM, strTotalQtyUOM);

			if (strTotalQty != null && Float.parseFloat(strTotalQty) != 0 && strDefectiveQty != null) {
				float defectQty = Float.parseFloat(strDefectiveQty);
				float totalQty = Float.parseFloat(strTotalQty);
				float misc = defectQty / totalQty;
				float defectRate = misc * 100;
				attributeMap.put(STR_ATTRIBUTE_DEFECT_RATE, "" + defectRate);
				NCRUtil.setAttributeValues(context, objectId, attributeMap);
			}
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String getRangeFormPQCNCRCreateFieldProduct(Context context, String[] args) throws NCRException {
		StringBuilder sbType = new StringBuilder();
		StringBuilder sbState = new StringBuilder();
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			final String[] parentOID = (String[]) programMap.get(NCRConstants.PARENT_OID);
			final String[] ncrToken = (String[]) programMap.get("ncrToken");
			Map<String, Map<String, Object>> allowedItems = NCAllowedItems.getInstance(context).getAllowedItems();
			allowedItems.forEach((k, v) -> {
				if (!sbType.toString().isEmpty()) {
					sbType.append(',');
					sbState.append(',');
				}
				sbType.append(v.get(NCAllowedItems.ORIGINAL_TYPE));
				sbState.append(v.get(NCAllowedItems.ORIGINAL_POLICY)).append('.').append(v.get(NCAllowedItems.ORIGINAL_RELEASE_STATE));
			});
			if (!sbType.toString().isEmpty()) {
				sbType.append(":CURRENT=").append(sbState.toString());
			}
			if (!Helper.isNullOrEmpty(ncrToken))
				switch (ncrToken[0]) {
				case "Add":
					return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "actionCommandPQCNCRImpactedItemsAdd", sbType.toString(),
							parentOID[0]);
				}
		}
		catch (Exception e) {
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "getRangeFormPQCNCRCreateFieldProductError", e.getLocalizedMessage());
		}

		return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "getRangeFormPQCNCRCreateFieldProduct", sbType.toString());
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String getRangeFormPQCNCRProductControlAddFieldProductName(Context context, String[] args) throws NCRException {
		StringBuilder sbType = new StringBuilder();
		StringBuilder sbState = new StringBuilder();
		try {
			Map<String, Map<String, Object>> allowedItems = NCAllowedItems.getInstance(context).getAllowedItems();
			allowedItems.forEach((k, v) -> {
				ControlItem controlItem = (ControlItem) v.get(NCAllowedItems.CONTROL_ITEM);
				if (controlItem.getType() != null) {
					if (!sbType.toString().isEmpty()) {
						sbType.append(',');
						sbState.append(',');
					}
					sbType.append(v.get(NCAllowedItems.ORIGINAL_TYPE));
					sbState.append(v.get(NCAllowedItems.ORIGINAL_POLICY)).append('.').append(v.get(NCAllowedItems.ORIGINAL_RELEASE_STATE));
				}
			});
			if (!sbType.toString().isEmpty()) {
				sbType.append(":CURRENT=").append(sbState.toString());
			}

		}
		catch (Exception e) {
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "getRangeFormPQCNCRCreateFieldProductError", e.getLocalizedMessage());
		}
		return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "getRangeFormPQCNCRProductControlAddFieldProductName", sbType.toString());
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionPQCNCRImpactedItemsAdd(Context context, String[] args) throws NCRException {
		StringBuilder sbType = new StringBuilder();
		StringBuilder sbState = new StringBuilder();
		try {
			Map<String, Map<String, Object>> allowedItems = NCAllowedItems.getInstance(context).getAllowedItems();
			allowedItems.forEach((k, v) -> {
				ControlItem controlItem = (ControlItem) v.get(NCAllowedItems.CONTROL_ITEM);
				if (controlItem.getType() != null) {
					if (!sbType.toString().isEmpty()) {
						sbType.append(',');
						sbState.append(',');
					}
					sbType.append(v.get(NCAllowedItems.ORIGINAL_TYPE));
					sbState.append(v.get(NCAllowedItems.ORIGINAL_POLICY)).append('.').append(v.get(NCAllowedItems.ORIGINAL_RELEASE_STATE));
				}
			});
			if (!sbType.toString().isEmpty()) {
				sbType.append(":CURRENT=").append(sbState.toString());
			}
		}
		catch (Exception e) {
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "getRangeFormPQCNCRCreateFieldProductError", e.getLocalizedMessage());
		}
		return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "getRangeFormPQCNCRProductControlAddFieldProductName", sbType.toString());
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionPQCNCRImpactedItemsCreate(Context context, String[] args) throws NCRException {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			final String[] strParentOID = (String[]) programMap.get(NCRConstants.PARENT_OID);
			final String[] emxTableRowId = (String[]) programMap.get("emxTableRowId");
			if (!Helper.isNullOrEmpty(emxTableRowId)) {
				List<EmxTableRowId> tableRowIds = EmxTableRowId.getTableRowIds(emxTableRowId);
				StringList slObjectIds = new StringList();
				for (EmxTableRowId emxTableRowId2 : tableRowIds) {
					slObjectIds.add(emxTableRowId2.getObjectId());
				}
				for (Object oId : slObjectIds) {
					String id = (String) oId;
					DomainObject impactedItem = DomainObject.newInstance(context, id);
					NCRProductControlService NCRProductControlService = getNCRProductControlService(context);
					DomainObject dmoProductControl = NCRProductControlService.createNCRProductControl(context, impactedItem,
							new HashMap<String, String>(), true);
					DomainObject dmoNCR = DomainObject.newInstance(context, strParentOID[0]);
					if (dmoProductControl != null) {
						NCRUtil.connectObjects(context, dmoNCR, NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL, dmoProductControl);
					}
				}
			}
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
		return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "refreshOpenerWindow");
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionPQCNCRImpactedItemsRemove(Context context, String[] args) throws NCRException {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			final String[] strParentOID = (String[]) programMap.get(NCRConstants.PARENT_OID);
			final String[] emxTableRowId = (String[]) programMap.get("emxTableRowId");
			List<String> relIds = new ArrayList<String>();

			DomainObject dmoNCR = DomainObject.newInstance(context, strParentOID[0]);
			int totalII = Helper.countConnectionsOnObject(context, dmoNCR, "relationship_ImpactedItem", "from", "");
			if (totalII == 1 || totalII == emxTableRowId.length) {
				throw new NCRException(
						Helper.getI18NString(context, Helper.StringResource.NCR, "LQINCR.ProductControl.MinimumImpactedlItemRequired"));
			}

			if (!Helper.isNullOrEmpty(emxTableRowId)) {
				List<EmxTableRowId> tableRowIds = EmxTableRowId.getTableRowIds(emxTableRowId);
				StringList slObjectIds = new StringList();
				for (EmxTableRowId emxTableRowId2 : tableRowIds) {
					slObjectIds.add(emxTableRowId2.getObjectId());
					relIds.add(emxTableRowId2.getRelationshipId());
				}
				for (Object oId : slObjectIds) {
					String id = (String) oId;
					List<Map<?, ?>> returnMap = QueryUtil.getRelatedObjects(context, dmoNCR, NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL,
							DomainConstants.QUERY_WILDCARD, Helper.stringList(DomainConstants.SELECT_ID),
							Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 1,
							"(from[" + PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL_PRODUCT)
									+ "].to.id==" + id + ")",
							null);

					returnMap.forEach(item -> {
						relIds.add((String) item.get(DomainRelationship.SELECT_ID));
					});
				}
				if (!relIds.isEmpty()) {
					DomainRelationship.disconnect(context, relIds.toArray(new String[relIds.size()]));
				}
			}
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
		return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "refreshOpenerWindow");
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionCommandPQCNCRImpactedItemsAdd(Context context, String[] args) throws NCRException {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			final String[] strParentOID = (String[]) programMap.get(NCRConstants.PARENT_OID);
			final String[] emxTableRowId = (String[]) programMap.get("emxTableRowId");
			if (!Helper.isNullOrEmpty(emxTableRowId)) {
				List<EmxTableRowId> tableRowIds = EmxTableRowId.getTableRowIds(emxTableRowId);
				StringList slObjectIds = new StringList();
				for (EmxTableRowId emxTableRowId2 : tableRowIds) {
					slObjectIds.add(emxTableRowId2.getObjectId());
				}
				for (Object oId : slObjectIds) {
					String id = (String) oId;
					DomainObject impactedItem = DomainObject.newInstance(context, id);
					NCRProductControlService NCRProductControlService = getNCRProductControlService(context);
					DomainObject dmoProductControl = NCRProductControlService.createNCRProductControl(context, impactedItem,
							new HashMap<String, String>(), false);
					DomainObject dmoNCR = DomainObject.newInstance(context, strParentOID[0]);
					if (dmoProductControl != null) {
						NCRUtil.connectObjects(context, dmoNCR, NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL, dmoProductControl);
					}
					NCRUtil.connectObjects(context, dmoNCR, "relationship_ImpactedItem", impactedItem, null);
				}
			}
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "refreshActionCommandPQCNCRImpactedItemsAdd2");
		}
		catch (Exception e) {
			throw new NCRException(e);
		}

	}

	@com.matrixone.apps.framework.ui.ExcludeOIDProgramCallable
	public StringList getCommandPQCNCRImpactedItemsAddExclude(Context context, String[] args) throws NCRException {
		try {
			final StringList slExcludeContacts = Helper.stringList();
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			final String strParentOID = (String) programMap.get(NCRConstants.PARENT_OID);
			DomainObject dmoNCR = DomainObject.newInstance(context, strParentOID);
			List<Map<?, ?>> returnMap = QueryUtil.getRelatedObjects(context, dmoNCR, "relationship_ImpactedItem", DomainConstants.QUERY_WILDCARD,
					Helper.stringList(DomainConstants.SELECT_ID), Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 1, null,
					null);
			returnMap.forEach(item -> {
				slExcludeContacts.add((String) item.get(DomainConstants.SELECT_ID));
			});
			return slExcludeContacts;
		}
		catch (Exception e) {
			throw new NCRException(e);
		}

	}

	public Vector getTablePQCNCRImpactedItemsColumnControlItem(Context context, String[] args) throws NCRException {
		try {
			Map<?, ?> programMap = (HashMap<?, ?>) JPO.unpackArgs(args);
			MapList objList = (MapList) programMap.get("objectList");
			Helper.ensureNotNull(objList, "objectList");
			ArrayList<String> columnVals = new ArrayList<String>(objList.size());
			Iterator objListItr = objList.iterator();
			while (objListItr.hasNext()) {
				try {
					StringBuffer sbHref = new StringBuffer();
					Map<?, ?> m = (Map<?, ?>) objListItr.next();
					DomainObject dmoNCR = DomainObject.newInstance(context, (String) m.get("id[parent]"));
					String impactedItemId = (String) m.get(DomainObject.SELECT_ID);
					List<Map<?, ?>> returnMap = QueryUtil.getRelatedObjects(context, dmoNCR, NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL,
							DomainConstants.QUERY_WILDCARD,
							Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE, DomainConstants.SELECT_NAME),
							Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 1,
							"(from[" + PropertyUtil.getSchemaProperty(context, NCRConstants.SYMBOLIC_RELATIONSHIP_NCR_PRODUCT_CONTROL_PRODUCT)
									+ "].to.id==" + impactedItemId + ")",
							null);
					returnMap.forEach(item -> {
						StringBuffer sbProductIcon = new StringBuffer();
						String strObjectIcon = UINavigatorUtil.getTypeIconProperty(context, (String) item.get(DomainConstants.SELECT_TYPE));
						sbProductIcon.append("<img src=\"../common/images/");
						sbProductIcon.append(XSSUtil.encodeForURL(context, strObjectIcon));
						sbProductIcon.append("\" border=\"0\"/>");
						StringBuffer sbHrefTemp = new StringBuffer();
						sbHrefTemp.append(sbProductIcon.toString());
						sbHrefTemp.append("<a href=\"javascript:emxTableColumnLinkClick('../common/emxTree.jsp?mode=insert");
						sbHrefTemp.append("&amp;objectId=");
						sbHrefTemp.append(XSSUtil.encodeForJavaScript(context, (String) item.get(DomainConstants.SELECT_ID)));
						sbHrefTemp.append("'");
						sbHrefTemp.append(", '800', '700', 'true', 'popup')\">");

						sbHrefTemp.append(XSSUtil.encodeForHTML(context, (String) item.get(DomainConstants.SELECT_NAME)));
						sbHrefTemp.append("</a>");
						sbHref.append(sbHrefTemp.toString());
						sbHref.append("<BR/>");
					});
					columnVals.add(sbHref.toString());
				}
				catch (Exception e) {
					return new Vector<String>(columnVals);
				}
			}
			return new Vector<String>(columnVals);
		}
		catch (Exception e) {
			throw new NCRException(e);
		}
	}

}

