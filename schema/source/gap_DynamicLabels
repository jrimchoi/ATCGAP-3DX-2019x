import java.util.HashMap;

import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.MapList;

import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.StringList;

public class ${CLASSNAME} {
	/**
	 * @author ENGMASA
	 * @description this method returns Dynamic label for the command
     * @param context
     * @param args
     * @return Value
     * @throws Exception
     */
    public static String getDrawingMarkupLabel(Context context, String[] args) throws Exception{
    	String strDrwMarkUpLabel = "Drawing Markup";
    	int iDrwMarkups = 0;
    	HashMap programMap = (HashMap) JPO.unpackArgs(args);
    	if (programMap!=null)
    	{
	    	HashMap paramMap = (HashMap) programMap.get("paramMap");
	    	if (paramMap!=null)
	    	{
	    		String strObjectId = (String) paramMap.get("objectId");
	    		DomainObject doObj = DomainObject.newInstance(context);
	    		doObj.setId(strObjectId);
	    		StringList objectSelects=new StringList(DomainObject.SELECT_ID);
	    		MapList mlMarkupList = doObj.getRelatedObjects(context,
	  				  DomainConstants.RELATIONSHIP_MARKUP,
					  DomainConstants.TYPE_MARKUP,
					  objectSelects,
					  new StringList(DomainRelationship.SELECT_ID),
					  false,
					  true,
					  (short) 2,
					  null, null, (short) 0);
	    		iDrwMarkups = mlMarkupList.size();
	    		
	    	}
    	}
    	if (iDrwMarkups>=0)
			strDrwMarkUpLabel = strDrwMarkUpLabel+" (" + Integer.toString(iDrwMarkups) +")";
        return strDrwMarkUpLabel;
    }
}

