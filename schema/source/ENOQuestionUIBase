import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Serializable;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import matrix.db.RelationshipType;

import matrix.db.AccessConstants;
import matrix.db.ClientTaskItr;
import matrix.db.ClientTaskList;
import matrix.db.Context;
import matrix.db.Environment;
import matrix.db.JPO;
import matrix.db.MQLCommand;
import matrix.db.State;
import matrix.db.StateList;
import matrix.util.ErrorMessage;
import matrix.util.MatrixException;
import matrix.util.StringList;

import com.dassault_systemes.enovia.questionnaire.QuestionService;
import com.dassault_systemes.enovia.questionnaire.QuestionServiceImpl;
import com.dassault_systemes.enovia.questionnaire.QuestionServiceImpl.Question;
import com.dassault_systemes.enovia.questionnaire.QuestionUtil;
import com.dassault_systemes.enovia.questionnaire.QuestionnaireConstants;
import com.dassault_systemes.enovia.questionnaire.TableRowId;
import com.matrixone.apps.common.CommonDocument;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.DomainSymbolicConstants;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MessageUtil;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.domain.util.PolicyUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.StringUtil;
import com.matrixone.apps.domain.util.XSSUtil;
import com.matrixone.apps.domain.util.i18nNow;
import com.matrixone.apps.framework.lifecycle.HtmlRenderable;
import com.matrixone.apps.framework.lifecycle.LifeCyclePolicyDetails;
import com.matrixone.apps.framework.lifecycle.LifeCycleTablePresentation;
import com.matrixone.apps.framework.lifecycle.LifeCycleUtil;
import com.matrixone.apps.framework.ui.UICache;
import com.matrixone.apps.framework.ui.UIComponent;
import com.matrixone.apps.framework.ui.UIExpression;
import com.matrixone.apps.framework.ui.UINavigatorUtil;
import com.matrixone.apps.framework.ui.UIUtil;
import com.matrixone.jdom.Document;
import com.matrixone.jdom.Element;
import com.matrixone.jdom.input.SAXBuilder;


public class ${CLASSNAME} {


	 
	
	/**
	 * This method is to create Questions in Response for Change Template and Questions 
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args ,contextData 
	 * @return Map of oid,pid,relId,rowId,markup,Action
	 * @throws Exception if operation fails
	 * @exclude
	 */
	 @com.matrixone.apps.framework.ui.ConnectionProgramCallable
	public Map createQuestions(Context context,String args[])throws Exception
	{

		try {
			Map<String, Object> mReturn = new HashMap<String, Object>();
			Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
			Map<?,?> paramMap=(Map<?,?>)programMap.get(QuestionnaireConstants.PARAMMAP);

			Object changeRowObj = programMap.get("contextData");
			MapList chgRowsMapList = com.matrixone.apps.framework.ui.UITableIndented.getChangedRowsMapFromElement(context, changeRowObj);

			String strObjectId=(String)programMap.get(QuestionnaireConstants.OBJECTID);
			String strAction = (String) paramMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strMode = (String) paramMap.get("mode");
			
			if(UIUtil.isNullOrEmpty(strMode))
				strMode=QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
			
			String strKeyProperty = "enoQuestionnaire.Component."+strAction+".";

			List<Map<String, String>> mlQuestionPropertyList=QuestionUtil.getQuestionnaireProperty(context,strAction);
			List<String> slType = new StringList();
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				String str= PropertyUtil.getSchemaProperty(context,dataMap.get(strKeyProperty+"Type"));
				slType.add("type.kindof["+str+"]");
			}
			String strParentObject=strObjectId;
			if(UIUtil.isNullOrEmpty(strParentObject))
					strParentObject=(String)paramMap.get(QuestionnaireConstants.OBJECTID);

			if(UIUtil.isNotNullAndNotEmpty(strAction)) {		
				Map mInfoInvalidType=QuestionUtil.getInfo(context, strParentObject,slType );
				for (Iterator iterator = mInfoInvalidType.keySet().iterator(); iterator.hasNext();) {
					String strKey = (String) iterator.
							next();
					if(mInfoInvalidType.get(strKey).toString().equalsIgnoreCase(QuestionnaireConstants.TRUE)) {
						String strMessage= EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"enoQuestionnaire.Alert.Msg.CannotCreateQuestion");
						throw new Exception(strMessage);
					}
				}
			}
			QuestionService questionService= new QuestionServiceImpl();
			List<Question> lQuestionObj = new ArrayList<Question>();
			for(Object mObjMap:chgRowsMapList) 
			{
				Map<?,?> mNewObj = (Map<?,?>)mObjMap;
				String strRowId=(String)mNewObj.get("rowId");
				Map mColumnMap= (Map)mNewObj.get("columns");
				String strQuestionDescription=(String)mColumnMap.get("Description");
				String strQuestionComment=(String)mColumnMap.get("Comment");
				String strName=(String)mColumnMap.get("Name");
				String strQuesResponse=(String)mColumnMap.get("Response");
				String strCategory=(String)mColumnMap.get("Category");
				if(UIUtil.isNullOrEmpty(strObjectId))
				{
					StringList sl=FrameworkUtil.split(strRowId, ",");
					if(sl.size()<2)
						strObjectId=(String)paramMap.get(QuestionnaireConstants.OBJECTID);
					else
					{
							String strMessage= EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"enoQuestionnaire.Alert.Msg.WrongQuestionPosition");
							throw new Exception(strMessage);
					}
				}
				TableRowId rowId = new TableRowId("","",strObjectId, strRowId);
				QuestionServiceImpl questionServiceImpl=new QuestionServiceImpl();
				Question question =questionServiceImpl.new Question(rowId, strQuestionDescription, strName, strQuesResponse,strQuestionComment,strCategory);
				lQuestionObj.add(question);
			}
			List<Question> lQuestion  = questionService.createQuestion(context,lQuestionObj,strAction,strMode);
			Map<?,?> mNewObj = (Map<?, ?>) chgRowsMapList.get(0);
			Map mColumnMap= (Map)mNewObj.get("columns");
			String desc=mColumnMap.get("Description").toString();
			mColumnMap.remove("Description");
			mColumnMap.put("Description",XSSUtil.encodeForHTML(context, desc));
			
			MapList mlChangedRows=new MapList();
			for(Question question:lQuestion){
				mReturn = new HashMap<String, Object>();
				mReturn.put("rowId",question.getRowId().getLevel());
				mReturn.put("oid",question.getRowId().getObjectId());
				mReturn.put("pid",question.getRowId().getParentObjectId());
				mReturn.put("markup","new");
				mReturn.put("columns",mColumnMap);
				mReturn.put("relid",question.getRowId().getRelationshipId());
				mlChangedRows.add(mReturn);
			}


			Map<String, Serializable> mReturnMap=new HashMap<String, Serializable>();
			mReturnMap.put("Action", "success"); 
			mReturnMap.put("changedRows", mlChangedRows);
			return mReturnMap;

		} catch (Exception e) {
			Map<String, Serializable> mReturn = new HashMap<String, Serializable>();
			mReturn.put("Action", QuestionnaireConstants.ERROR);
			mReturn.put("Message",e.getMessage());
			return mReturn;
		}

	}



     /**
     * Method to get list of Questions for the parent object on which questions are defined
     * @param context the ENOVIA <code>Context</code> object.
     * @param args holds packed arguments
     * @return MapList of Questions
     * @throws Exception if operation fails
     * @exclude
     */
	 @com.matrixone.apps.framework.ui.ProgramCallable
	public List<Map> getTemplateRelatedQuestions(Context context,String args[])throws Exception {
		try {
			QuestionService questionService = new QuestionServiceImpl();
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strAction = (String) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strMode = (String) programMap.get("mode");

			if(UIUtil.isNullOrEmpty(strMode))
				strMode=QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
			
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			String strExpandLevel = (String) programMap.get("expandLevel");
			strExpandLevel = UIUtil.isNotNullAndNotEmpty(strExpandLevel) ? strExpandLevel : "1";
			List<Map> lRelatedQuestionsMap = questionService.getQuestion(context, strObjectId, strAction, strExpandLevel, strMode);
			return lRelatedQuestionsMap;
		}
			catch (Exception ex) {
				throw new Exception(ex);
		}
	}
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getTableQuestionCopyExpand(Context context, String[] args) throws Exception {
		try {
			QuestionService questionService = new QuestionServiceImpl();
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strAction = (String) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			String strExpandLevel = (String) programMap.get("expandLevel");
			strExpandLevel = UIUtil.isNotNullAndNotEmpty(strExpandLevel) ? strExpandLevel : "1";
			String strMode = (String) programMap.get("mode");
			
			if(UIUtil.isNullOrEmpty(strMode))
				strMode=QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
			
			MapList lRelatedQuestionsMap = (MapList) questionService.getQuestion(context, strObjectId, strAction, strExpandLevel, strMode);

			String typeQuestion = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Question);
			for (Object objQuestion : lRelatedQuestionsMap) {
				Map mQuestion =(Map) objQuestion;
				String strType = (String) mQuestion.get(DomainConstants.SELECT_TYPE);
				if (!typeQuestion.equals(strType))
					mQuestion.put("disableSelection", "true");
			}


			Integer fullTextObjCount = new Integer(lRelatedQuestionsMap.size() - 1);
			if (lRelatedQuestionsMap.size() == 0)
				fullTextObjCount = new Integer(0);
			else {
				fullTextObjCount = new Integer(lRelatedQuestionsMap.size());

				int nLastElementIndex = fullTextObjCount - 1;
				Map mapLastElement = (Map) lRelatedQuestionsMap.get(nLastElementIndex);
				if (mapLastElement.containsKey("expandMultiLevelsJPO"))
					fullTextObjCount--;
			}
			//lRelatedQuestionsMap.add(0, fullTextObjCount);
			return lRelatedQuestionsMap;
		}
		catch (Exception ex) {
			throw new Exception(ex);
		}
	}
     /**
     * Method to get list of Questions for the object on which configuration is to be done
     * It gets the Question from its parent as defined in property files 
     * @param context the ENOVIA <code>Context</code> object.
     * @param args holds packed arguments
     * @return MapList of Questions
     * @throws Exception if operation fails
     * @exclude
     */
	 @com.matrixone.apps.framework.ui.ProgramCallable
	public List<Map> getConfigureQuestions(Context context,String args[])throws Exception {
		try {
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String mode = (String) programMap.get("mode");
			QuestionService questionService= new QuestionServiceImpl();
			String strObjectId= (String) programMap.get(QuestionnaireConstants.OBJECTID);
			String strAction=(String)programMap.get(QuestionnaireConstants.QUESTION_MODE);
			List<Map<?,?>> mListRelatedQuestions=new MapList();
			String attributeQuestionCategory = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_CATEGORY);
			
			String strTypeQuestion=PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Question);
			DomainObject dobj=DomainObject.newInstance(context,strObjectId);
			
			if (mode.equals(QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE))
				questionService.updateConditionalQuestions(context, strObjectId, strAction);

			if(!dobj.isKindOf(context, strTypeQuestion))
			{
				mListRelatedQuestions=questionService.expandForParentObject(context,strObjectId,strAction,true);

				List<String> slQuesId=new StringList();
				if(mListRelatedQuestions!=null&&mListRelatedQuestions.size()>0)
				{
					List<Map<?, ?>> mlTemp = new MapList();
					mlTemp.addAll(mListRelatedQuestions);
					for (Map m : mlTemp)
					{
						String strQuestionCategory = (String) m.get(DomainObject.getAttributeSelect(attributeQuestionCategory));
						if (mode.equals(QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE)
								&& !strQuestionCategory.equals(QuestionnaireConstants.QUESTION_CATEGORY_CONDITIONAL)) {
							mListRelatedQuestions.remove(m);
						}
						else if (mode.equals(QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE)
								&& strQuestionCategory.equals(QuestionnaireConstants.QUESTION_CATEGORY_CONDITIONAL)) {
							mListRelatedQuestions.remove(m);
						}
						String strId=(String) m.get(DomainConstants.SELECT_ID);
						slQuesId.add(strId);
					}
				}
				
				List<Map> lRelatedQuestionsMap = questionService.getConfigureQuestion(context, strObjectId, strAction, mode);
				if(lRelatedQuestionsMap!=null&&lRelatedQuestionsMap.size()>0)
				{
					for(Map m:lRelatedQuestionsMap)
					{
						String strId=(String) m.get(DomainConstants.SELECT_ID);
						if(!slQuesId.contains(strId))
						{
							m.put(DomainConstants.SELECT_LEVEL, "1");
							mListRelatedQuestions.add(m);
						}
					}
				}


				questionService.sortMapListOnSequenceOrder(context, mListRelatedQuestions);

				Map<String, String> map = new HashMap<String, String>();
				map.put("expandMultiLevelsJPO","true");
				mListRelatedQuestions.add(map);
			}			
			
			
			return (MapList)mListRelatedQuestions;
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	
	/**
	 * This is Range Function for Response Column of assign Question table
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return field_choices and field_display_choices as Key 
	 * 				List of Yes or No as values
	 * @throws Exception if operation fails
	 * @exclude
	 */
	public Map<String,List<String>> getRangeForResponseValue(Context context,String args[]) throws Exception {
		try {
			String strYes = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.Yes");
			String strNo = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.No");
			List<String> slResponseDisplay = new StringList();
			slResponseDisplay.add(strYes);
			slResponseDisplay.add(strNo);
			slResponseDisplay.add(QuestionnaireConstants.Unknown);
			List<String> slResponse = new StringList();
			slResponse.add(QuestionnaireConstants.YES);
			slResponse.add(QuestionnaireConstants.NO);
			slResponse.add(QuestionnaireConstants.Unknown);
			Map<String, List<String>> rangeMap = new HashMap<String, List<String>>();
			rangeMap.put(QuestionnaireConstants.FIELD_CHOICES, slResponse);
			rangeMap.put(QuestionnaireConstants.FIELD_DISPLAY_CHOICES, slResponseDisplay);
			return rangeMap;
		} catch (Exception e) {
			throw new Exception(e);
		}
	}

	public Map<String, List<String>> getQuestionRangeType(Context context, String args[]) throws Exception {
		try {
			return (Map<String, List<String>>) getAttributeRanges(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_TYPE);
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}

	/**
	 * This is method for Column Type program to show responses of Questions in Question Table
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param objectList 
	 * @return List of Response values as Yes or No
	 * @throws Exception if operation fails
	 * @exclude
	 */
	public List<String> getResponseColumnValues(Context context,String args[]) throws Exception
	{
		try {
			String strResponse=DomainConstants.EMPTY_STRING;
			String strYes = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.Yes");
			String strNo = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.No");

			String strAttrQuestionResponse = PropertyUtil.getSchemaProperty(context,QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RESPONSE);
			List<String> lResponseList=new StringList();
			Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
			List<Map> mlObjectList= (List<Map>)programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map<?,?>  mParamList= (Map<?,?> ) programMap.get(QuestionnaireConstants.PARAMLIST);
			String strParentOID = (String) mParamList.get(QuestionnaireConstants.PARENT_OID);
			QuestionService questionService= new QuestionServiceImpl();
			List<TableRowId> tableRowIdList = new ArrayList<TableRowId>();
			for (Map map : mlObjectList) {
				String strRelId = DomainConstants.EMPTY_STRING;
				String strParentId = DomainConstants.EMPTY_STRING;
				String strObjectId = (String)map.get(DomainConstants.SELECT_ID);
				if(null!=map.get(DomainRelationship.SELECT_ID))
					strRelId = (String) map.get(DomainRelationship.SELECT_ID);
				if(null!=map.get(DomainRelationship.SELECT_ID))
					strParentId = (String) map.get("id[parent]");
				TableRowId tr = new TableRowId(strObjectId,UIUtil.isNotNullAndNotEmpty(strRelId)?strRelId:DomainConstants.EMPTY_STRING,UIUtil.isNotNullAndNotEmpty(strParentId)?strParentId:DomainConstants.EMPTY_STRING,null);
				tableRowIdList.add(tr);
			}
			List<Map> mListQuestionResponseValue= questionService.getQuestionResponseValues(context,strParentOID,tableRowIdList);

			for(Object ObjMap:mListQuestionResponseValue)
			{
				Map<String,String> mapRelId = (Map<String,String>)ObjMap;
				String strQuestionResponse = mapRelId.get(DomainRelationship.getAttributeSelect(strAttrQuestionResponse));
				String toname = mapRelId.get(DomainRelationship.SELECT_TO_NAME);
				String fromname = mapRelId.get(DomainRelationship.SELECT_FROM_NAME);
				if (UIUtil.isNotNullAndNotEmpty(fromname)) {
					String strAttrName = PropertyUtil.getSchemaProperty(context, fromname);
					if (UIUtil.isNullOrEmpty(strAttrName))
						strAttrName = PropertyUtil.getSchemaProperty(context, toname);
					if (UIUtil.isNotNullAndNotEmpty(strAttrName) && UIUtil.isNotNullAndNotEmpty(strQuestionResponse)) {
						strQuestionResponse = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),
								"emxFramework.Range." + strAttrName.replaceAll(" ", "_") + "." + strQuestionResponse.replaceAll(" ", "_"));
					}
					// else if (!UIUtil.isNullOrEmpty(strQuestionResponse))
					// strQuestionResponse = strQuestionResponse;

				}

				lResponseList.add(strQuestionResponse);
			}
			return lResponseList;
		} catch (Exception e) {
			throw new Exception(e);
		}

	}

	/**
	 * This is edit access program for Description of Question 
	 * 			only Questions description is editable in Question table
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param ObjectList of Questions and EForms
	 * @return List of true and false
	 * @throws Exception if operation fails
	 * @exclude
	 */
	//public List<Boolean> checkEditAccessQuestionNameAndDescription(Context context,String[] args)throws Exception {
	public StringList checkEditAccessQuestionNameAndDescription(Context context,String[] args)throws Exception {
		try {
			List<String> list = new StringList();
			Map<?,?> paramMap = (Map<?,?>)JPO.unpackArgs(args);
			List<Map> mobjectList = (List<Map>)paramMap.get(QuestionnaireConstants.OBJECTLIST);
			String strTypeQuestion=PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_type_Question);
			boolean isEditActionReqd = false;
			for(Map mObjectMap:mobjectList)
			{
				isEditActionReqd = false;
				String strObjectId=(String)mObjectMap.get(DomainConstants.SELECT_ID);
				if(!UIUtil.isNullOrEmpty(strObjectId)) {
					DomainObject dobj = DomainObject.newInstance(context,strObjectId);		
					if(dobj.isKindOf(context, strTypeQuestion))
						isEditActionReqd = true;
					String strParentQuestionCategory = dobj.getAttributeValue(context,
							PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_CATEGORY));

					if (QuestionnaireConstants.QUESTION_CATEGORY_CONDITIONAL.equals(strParentQuestionCategory))
						isEditActionReqd = false;
				}
				list.add(String.valueOf(isEditActionReqd));
			}
			return (StringList)list;
		} catch (FrameworkException e) {
			throw new Exception(e);
		} catch (Exception e) {
			throw new Exception(e);
		}

	}
	/**
	 * This is edit access program for response column of Question table
	 * 				Response is not editable for root Questions
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args context
	 * @objectList objectIds of Questions
	 * @return List of true and false
	 * @throws Exception if operation fails
	 * @exclude
	 */
	//public List<Boolean> checkEditAccessQuestionResponse(Context context,String[] args)throws Exception {
	public StringList checkEditAccessQuestionResponse(Context context,String[] args)throws Exception {
		try {
			List<String> slRangeResponse = new StringList();
			Map<?,?> paramMap = (Map<?,?>)JPO.unpackArgs(args);
			List<Map> mobjectList = (List<Map>)paramMap.get(QuestionnaireConstants.OBJECTLIST);
			String strTypeQuestion=PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_type_Question);
			DomainObject dobj=null;
			boolean isEditActionReqd = false;
			for(Map mObjectMap:mobjectList)
			{
				isEditActionReqd = false;
				String strEdit=(String) mObjectMap.get(QuestionnaireConstants.EDIT);
				String strParentId= (String) mObjectMap.get("id[parent]");
				if(!UIUtil.isNullOrEmpty(strParentId)) {
					dobj=DomainObject.newInstance(context,strParentId);		
					if(dobj.isKindOf(context, strTypeQuestion))
						isEditActionReqd = true;

				}
				else if(!UIUtil.isNullOrEmpty(strEdit)&&strEdit.equalsIgnoreCase(QuestionnaireConstants.FALSE))
					isEditActionReqd = false;
				else
					isEditActionReqd = true;

				slRangeResponse.add(String.valueOf(isEditActionReqd));
			}
			return (StringList)slRangeResponse;
		} catch (Exception e) {
			throw new Exception(e);
		}

	}
	/**
	 * This method get all change templates Question with respect to eForm or route template
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args action 
	 * @return MapList of all Change Template related Questions
	 * @throws Exception if operation fails
	 * @exclude
	 */
	 @com.matrixone.apps.framework.ui.IncludeOIDProgramCallable
	public List<String> getAllRelatedQuestion(Context context,String args[])throws Exception {
		try {
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strAction = (String)programMap.get(QuestionnaireConstants.QUESTION_MODE);
			List<String> sListQuestions =new StringList();
			QuestionService questionService = new QuestionServiceImpl();
			MapList mlQuestions = questionService.getAllRelatedQuestion(context,strAction);
			for(Object oQuestion:mlQuestions)
			{
				Map mQues=(Map) oQuestion;
				String strQuesId=(String) mQues.get(DomainConstants.SELECT_ID);
				sListQuestions.add(strQuesId);
			}
			return sListQuestions;
		} catch (Exception e) {
			throw new Exception(e);
		}

	}

	@com.matrixone.apps.framework.ui.IncludeOIDProgramCallable
	public List<String> getAllImpactTemplateRelatedQuestion(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			List<String> sListQuestions = new StringList();
			QuestionService questionService = new QuestionServiceImpl();
			MapList mlQuestions = questionService.getAllImpactTemplateRelatedQuestion(context);
			for (Object oQuestion : mlQuestions) {
				Map mQues = (Map) oQuestion;
				String strQuesId = (String) mQues.get(DomainConstants.SELECT_ID);
				sListQuestions.add(strQuesId);
			}
			return sListQuestions;
		}
		catch (Exception e) {
			throw new Exception(e);
		}

	}

	/**
	 * This is pre process method to collect Question Ids to which new Questions has to be copied
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return Map return the map to execute JSP to call JavaScript
	 * @throws Exception if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String preProcessCopyExistingQuestions(Context context, String args[]) throws Exception
	{

		try {
			StringBuilder sbURL=new StringBuilder();
			String strQuesId = DomainConstants.EMPTY_STRING;
			Map<String,String> mReturn= new HashMap<String, String>(); 
			String strTypeQuestion=PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_type_Question);
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strTableRowIds[] =  (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			String[] strParentOID=(String[])programMap.get(QuestionnaireConstants.PARENT_OID);
			String strAction[] = (String[])programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strMode[] = (String[]) programMap.get("mode");
		String sMode="";
			if(null==strMode||(strMode!=null && strMode.length>0 && UIUtil.isNullOrEmpty(strMode[0])))
				sMode=QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
			else
				sMode=strMode[0];
			if (strAction == null && strTableRowIds != null) {
				String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
						"enoQuestionnaire.Alert.Msg.UnselectQuestionToCopy");
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);
			}
			StringBuilder sbLevelId=new StringBuilder();
			if(strTableRowIds!=null)
			{
				strQuesId=getTableRowIds(strTableRowIds);
				
				
				for(String strRowIds:strTableRowIds)
				{
					String strRowId=strRowIds;
					TableRowId tr=new TableRowId(strRowId);
					String strLevelId=tr.getLevel();
					sbLevelId.append(strLevelId);
					sbLevelId.append("|");
				}
				if(sbLevelId!=null&&sbLevelId.length()>0)
					sbLevelId.deleteCharAt(sbLevelId.length()-1);
						
				
				List<String> sListFromQuestions=FrameworkUtil.split(strQuesId, ",");
				for(String objFromId:sListFromQuestions)
				{
					String strFromID = (String) objFromId;
					DomainObject dobj =DomainObject.newInstance(context,strFromID);
					if(!dobj.isKindOf(context, strTypeQuestion))
					{
						String strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotCopyQuestion",
								new String[] {strAction[0]}, null, context.getLocale(),
								QuestionnaireConstants.QUESTION_STRING_RESOURCE);	
						String str = QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);
						return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);
					}
				}
			}
			else if (strTableRowIds == null || strTableRowIds.length <= 0)
				strQuesId=strParentOID[0];

			// sbURL.append("var submitURL=\"../common/emxFullSearch.jsp?field=TYPES=").append(strTypeQuestion);
			// sbURL.append("&table=QuestionCopyTable&selection=multiple&includeOIDprogram=ENOQuestionUI:getAllRelatedQuestion");
			// sbURL.append("&relationship=relationship_Question&type=type_Question&direction=from&submitURL=../questionnaire/enoQuestionnaireExecute.jsp?questionAction=ENOQuestionUI:copyExistingQuestions");
			// sbURL.append("&emxSuiteDirectory=questionnaire&suiteKey=Questionnaire&SuiteDirectory=questionnaire&StringResourceFileId=enoQuestionnaireStringResource");
			// sbURL.append("&header=enoQuestionnaire.Header.CopyExistingQuestions").append("&").append(QuestionnaireConstants.QUESTIONSIDS).append("=");
			// sbURL.append(strQuesId).append("&").append(QuestionnaireConstants.QUESTION_MODE).append("=").append(strAction[0]);
			// sbURL.append("\";\n showModalDialog(submitURL,250,250,true);");
			// mReturn.put(QuestionnaireConstants.ACTION_JAVASCRIPT,sbURL.toString());
			if (strAction != null)
 {
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "preProcessCopyExistingQuestions", strTypeQuestion, strQuesId,
						strAction[0], sMode,sbLevelId.toString());
			}
			else
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "preProcessCopyImpactTemplateExistingQuestions", strTypeQuestion,
						strQuesId, strQuesId);


		} catch (Exception e) {
			throw new Exception(e);
		}
	}

	/**
	 * This method copy the selected questions to the parent Questions
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args String [] of emxTableRowIds,Change Template QuestionIds
	 * @return Map return the map to execute JSP to call JavaScript
	 * @throws Exception if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String copyExistingQuestions(Context context, String args[]) throws Exception
	{
		try {
			Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
			String strAction[]=(String[]) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strKeyProperty = "enoQuestionnaire.Component."+strAction[0]+".";

			List<Map<String, String>> mlQuestionPropertyList=QuestionUtil.getQuestionnaireProperty(context,strAction[0]);
			String strCopyValue=DomainConstants.EMPTY_STRING;
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				strCopyValue= dataMap.get(strKeyProperty+"CopyQuestionStructure");
		 	 if(UIUtil.isNullOrEmpty(strCopyValue))
					strCopyValue= dataMap.get("enoQuestionnaire.Component.All.CopyQuestionStructure");
			}
			if(QuestionnaireConstants.TRUE.equals(strCopyValue))
				return new ${CLASS:ENOQuestionUI}().copyExistingQuestionStructure(context, args);
			else
				return new ${CLASS:ENOQuestionUI}().copyExistingQuestionWithoutStructure(context, args);
		} catch (Exception e) {
			throw new Exception(e);
		}

		
	}
	
	
	
	/**
	 * This method copy the selected questions to the parent Questions without copying sub questions
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args String [] of emxTableRowIds,Change Template QuestionIds
	 * @return Map return the map to execute JSP to call JavaScript
	 * @throws Exception if operation fails
	 * @exclude
	 */
	 @com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String copyExistingQuestionWithoutStructure(Context context, String args[]) throws Exception
	{

		try {
			QuestionService questionService= new QuestionServiceImpl();
			Map<String,String> mReturn= new HashMap<String,String>();
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strTableRowIds[] =  (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			String strQuesObjectIds[] = (String[])programMap.get(QuestionnaireConstants.QUESTIONSIDS);
			String strRowLevels[] = (String[])programMap.get("rowLevels");
			
			String strAction[] = (String[])programMap.get(QuestionnaireConstants.QUESTION_MODE);
			List<String> sListFromQuestions=FrameworkUtil.split(strQuesObjectIds[0], ",");
			StringBuilder sbJavascript= new StringBuilder();
			Map<String,String> mObjectIdResonse=new HashMap<String,String>();

			if(strTableRowIds!=null&&strTableRowIds.length>0) {	
				for(String strRowIds:strTableRowIds) {
					String strRowId=strRowIds;
					TableRowId tableRowId=new TableRowId(strRowId);
					String strObjId=tableRowId.getObjectId();
					String strResponse[]=(String[]) programMap.get(strObjId);
					mObjectIdResonse.put(strObjId, strResponse[0]);
				}
				if(strRowLevels==null)
					strRowLevels=new String[0];
				return QuestionUtil.encodeFunctionForJavaScript(context, true, "closeAndRefreshWindowWithMarkup",strRowLevels[0]);
			}
			else {
				String strMessage= EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"enoQuestionnaire.Alert.Msg.SelectQuestion");
				sbJavascript.append("alert(\"").append(strMessage).append("\");");
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);
			}
		} catch (FrameworkException e) {
			throw new Exception(e.getMessage());
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}

	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String copyExistingImpactTemplateQuestionnaire(Context context, String args[]) throws Exception {

		try {
			QuestionService questionService = new QuestionServiceImpl();
			Map<String, String> mReturn = new HashMap<String, String>();
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strTableRowIds[] = (String[]) programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			String strQuesObjectIds[] = (String[]) programMap.get(QuestionnaireConstants.QUESTIONSIDS);
			List<String> sListFromQuestions = FrameworkUtil.split(strQuesObjectIds[0], ",");
			StringBuilder sbJavascript = new StringBuilder();

			List<String> sListToQuestions = new StringList();
			if (strTableRowIds != null && strTableRowIds.length > 0) {
				for (String strRowIds : strTableRowIds) {
					String strRowId = strRowIds;
					TableRowId tableRowId = new TableRowId(strRowId);
					String strObjId = tableRowId.getObjectId();
					sListToQuestions.add(strObjId);
				}

				StringBuffer sbOut = new StringBuffer();
				sbOut.append("<mxRoot>").append("<action><![CDATA[refresh]]></action>").append("<data status=\"committed\">");
				List<TableRowId> lRowIds = questionService.copyImpactTemplateQuestionnaire(context, sListFromQuestions, sListToQuestions);
				for (TableRowId tableRowId : lRowIds)
					sbOut.append("<item oid=\"").append(tableRowId.getObjectId()).append("\" pid=\"").append(tableRowId.getParentObjectId())
							.append("\"  relId=\"").append(tableRowId.getRelationshipId()).append("\"  pasteBelowToRow=\"0\">").append("</item>");
				sbOut.append("</data>").append("</mxRoot>");
				String strMarkupString = FrameworkUtil.findAndReplace(sbOut.toString(), "\"", "\\\"");
				// sbJavascript.append("var callback=eval(getTopWindow().parent.opener.parent.emxEditableTable.addToSelected);\n");
				// sbJavascript.append("var oxmlstatus = callback(\""+strMarkupString+"\");\n");
				// sbJavascript.append("getTopWindow().location.href = \"../common/emxCloseWindow.jsp\";\n");
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "closeAndRefreshWindow");
			}
			else {
				String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
						"enoQuestionnaire.Alert.Msg.SelectQuestion");
				sbJavascript.append("alert(\"").append(strMessage).append("\");");
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);
			}
		}
		catch (FrameworkException e) {
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		}

	}
	/**
	 * This method copy the selected questions to the parent Questions with sub questions
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args String [] of emxTableRowIds,Change Template QuestionIds
	 * @return Map return the map to execute JSP to call JavaScript
	 * @throws Exception if operation fails
	 * @exclude
	 */
	 @com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String copyExistingQuestionStructure(Context context, String args[]) throws Exception
	{

		try {
			QuestionService questionService= new QuestionServiceImpl();
			Map<String,String> mReturn= new HashMap<String,String>();
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strTableRowIds[] =  (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			String strQuesObjectIds[] = (String[])programMap.get(QuestionnaireConstants.QUESTIONSIDS);
			String strRowLevels[] = (String[])programMap.get("rowLevels");
			
			String strAction[] = (String[])programMap.get(QuestionnaireConstants.QUESTION_MODE);
			List<String> sListFromQuestions=FrameworkUtil.split(strQuesObjectIds[0], ",");
			StringBuilder sbJavascript= new StringBuilder();
			Map<String,String> mObjectIdResonse=new HashMap<String,String>();

			List<String> sListToQuestions =new StringList();
			
			if(strTableRowIds!=null&&strTableRowIds.length>0) {	
				for(String strRowIds:strTableRowIds) {
					String strRowId=strRowIds;
					TableRowId tableRowId=new TableRowId(strRowId);
					String strObjId=tableRowId.getObjectId();
					String strResponse[]=(String[]) programMap.get(strObjId);
					mObjectIdResonse.put(strObjId, strResponse[0]);
					sListToQuestions.add(strObjId);
				}

				questionService.createAndCopyQuestions(context, sListFromQuestions, mObjectIdResonse,strAction[0]);
				if(strRowLevels==null ||strRowLevels.length==0)
				{
					strRowLevels=new String[1];
					strRowLevels[0]="0";
				}
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "closeAndRefreshWindowWithMarkup",strRowLevels);
			}
			else {
				String strMessage= EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"enoQuestionnaire.Alert.Msg.SelectQuestion");
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);
			}

		} catch (FrameworkException e) {
			throw new Exception(e.getMessage());
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}

	}
	/**
	 * This method delete the selected questions and all the Questions connected to it.
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args String [] of emxTableRowIds of Questions
	 * @return Map return the map to execute JSP to call JavaScript 
	 * @throws Exception if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String deleteQuestions(Context context, String args[]) throws Exception
	{
		try {
			QuestionService questionService= new QuestionServiceImpl();
			Map<String,String> mReturn= new HashMap<String,String>();
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strObjectId[] = (String[])programMap.get(QuestionnaireConstants.OBJECTID);
			String strTableRowIds[] =  (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			String[] strAction= (String[]) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strTypeQuestion=PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Question);
			StringBuilder sbJavascript=new StringBuilder();
			String strQuestionIds=getTableRowIds(strTableRowIds);
			List<String> slQuestionIDs=FrameworkUtil.split(strQuestionIds, ",");
			String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"enoQuestionnaire.Alert.Msg.CannotDeleteItems");
			List<String> sListQuestion=new StringList();
			sListQuestion.addAll(slQuestionIDs);
			StringBuilder sbCheckTypeSelect = new StringBuilder().append("type.kindof["+strTypeQuestion+"]");
			List<String> slObjectSelectList = new StringList();
			slObjectSelectList.add(sbCheckTypeSelect.toString());
			slObjectSelectList.add(DomainConstants.SELECT_ID);
			List<Map> objDataList = QuestionUtil.getInfo(context, slQuestionIDs.toArray(new String[slQuestionIDs.size()]),(StringList)slObjectSelectList);
			for(Map objMap:objDataList) {
				String strValidType = (String)objMap.get(sbCheckTypeSelect.toString());
				String strObjId =  (String)objMap.get(DomainConstants.SELECT_ID);
				if(!strValidType.equalsIgnoreCase(QuestionnaireConstants.TRUE))
				{
					sListQuestion.remove(strObjId);
					// sbJavascript.append("alert(\"").append(strMessage).append("\");");
					return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);
				}
			}
			questionService.deleteQuestions(context, strObjectId[0],sListQuestion);
			String strEmxTableRowIds=StringUtil.join(strTableRowIds, ";");
			sbJavascript.append("var emxTableRowIds = ").append("\'").append(strEmxTableRowIds).append("\'").append(";\n");
			sbJavascript.append("var TableRowIds = emxTableRowIds.split(\";\")").append(";");
			sbJavascript.append("this.parent.emxEditableTable.removeRowsSelected(TableRowIds);");
			sbJavascript.append("frameObject.refreshStructureWithOutSort();");
			return QuestionUtil.encodeFunctionForJavaScript(context, true, "removeSelectedRows", strEmxTableRowIds);
		} catch (Exception e) {
			throw new Exception(e);
		}
	}

	/**
	 * Method to active and Inactive question vice-versa
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 * @return Map return the map to execute JSP to call JavaScript 
	 * @throws Exception if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String activeInactiveQuestion(Context context, String args[]) throws Exception {
		try {
			QuestionService questionService= new QuestionServiceImpl();
			String strTypeQuestion=PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_type_Question);
			Map<String,String> mReturnMap= new HashMap<String, String>();
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strTableRowIds[] =  (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			List<String> slQuestionId= new StringList();
			DomainObject dobj=null;
			for(String strRowIds:strTableRowIds) {
				String strRowId=strRowIds;
				TableRowId tr=new TableRowId(strRowId);
				String strObjectId=tr.getObjectId();
				dobj=DomainObject.newInstance(context,strObjectId);
				if(dobj.isKindOf(context, strTypeQuestion))
					slQuestionId.add(strObjectId);
			}
			questionService.activeInactiveQuestions(context, (StringList)slQuestionId);
			StringBuffer sbJavascript=new StringBuffer();
			if(strTableRowIds.length!=slQuestionId.size())
			{
				String strMessage =EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"enoQuestionnaire.Alert.Msg.CannotActiveQuestion");
				// sbJavascript.append("alert(\""+strMessage+"\");");
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);

			}
			// sbJavascript.append("this.parent.emxEditableTable.refreshStructure();");

			return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshStructureBrowser");
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}
	/**
	 * PreProcess to be done before assigning objects to Questions 
	 * and then form assign objects link passing required parameters
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 * @return Map return the map to execute JSP to call JavaScript 
	 * @throws Exception if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String preProcessAssignRelatedObjects(Context context, String args[]) throws Exception {
		try {
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strTableRowIds[] =  (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			String[] strAction = (String[]) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strMode[] = (String[]) programMap.get("mode");
			
String mode="";
			if(null==strMode||(strMode!=null && strMode.length>0 && UIUtil.isNullOrEmpty(strMode[0])))
				mode=QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
			else
				mode=strMode[0];
			String strTypeQuestion=PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_type_Question);
			StringBuilder sbURL=new StringBuilder();
			List<String> slStates=null;
			StringBuilder sbQuesId=new StringBuilder();
			Map<String,String> mReturn= new HashMap<String, String>(); 
			StringBuilder sbType = new StringBuilder(64);
			StringBuilder sbPolicy  = new StringBuilder(64);
			String strKeyProperty = "enoQuestionnaire.Component."+strAction[0]+".";
			List<Map<String, String>> mlQuestionPropertyList=QuestionUtil.getQuestionnaireProperty(context, strAction[0]);
			String strParentTemplateType= DomainConstants.EMPTY_STRING;
			String strIncludeOIDProgram= DomainConstants.EMPTY_STRING;
			String strExcludeOIDProgram= DomainConstants.EMPTY_STRING;
			if (strTableRowIds != null && strTableRowIds.length > 1
					&& mode.equals(QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE)) {
				String msg = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
						"enoQuestionnaire.Alert.Msg.SelectSingleQuestion");

				return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", msg);

			}
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				sbType.append(dataMap.get(strKeyProperty+"Type")).append(",");
				
				String state = dataMap.get(strKeyProperty+"ValidState");
				if(state.contains(":"))
				{
					slStates =FrameworkUtil.split(state, ":");
					for(String strState:slStates)
						sbPolicy.append(dataMap.get(strKeyProperty+"Policy")).append(".").append(strState).append(",");
				}
				else
					sbPolicy.append(dataMap.get(strKeyProperty+"Policy")).append(".").append(dataMap.get(strKeyProperty+"ValidState")).append(",");

				strIncludeOIDProgram = dataMap.get(strKeyProperty+"SearchIncludeOIDProgram");
				strExcludeOIDProgram = dataMap.get(strKeyProperty+"SearchExcludeOIDProgram");
				strParentTemplateType=  PropertyUtil.getSchemaProperty(context,dataMap.get(strKeyProperty+"ParentTemplateType"));
			}
			sbType.deleteCharAt(sbType.length()-1);
			sbPolicy.deleteCharAt(sbPolicy.length()-1);
			String strErrorMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotAssignItems",
					new String[] {strAction[0]}, null, context.getLocale(),
					QuestionnaireConstants.QUESTION_STRING_RESOURCE);			

			StringBuilder rowLevel=new StringBuilder();
			for(String strRowIds:strTableRowIds) {
				String strRowId=strRowIds;
				TableRowId tr=new TableRowId(strRowId);
				String strQuesId=tr.getObjectId();
				rowLevel.append(tr.getLevel()).append("|");
				
				Map mTypeInfo=QuestionUtil.getInfo(context, strQuesId, new StringList(DomainConstants.SELECT_TYPE));
				if(!mTypeInfo.get(DomainConstants.SELECT_TYPE).toString().equals(strTypeQuestion)&&!mTypeInfo.get(DomainConstants.SELECT_TYPE).toString().equals(strParentTemplateType)) 
				{				
					// sbURL.append("alert(\"").append(strErrorMessage).append("\");");
					return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strErrorMessage);
				}
				sbQuesId.append(strQuesId);
				sbQuesId.append(",");
			}			
			if(sbQuesId!=null&&sbQuesId.length()>0)
			{
				sbQuesId.deleteCharAt(sbQuesId.length()-1);
				rowLevel.deleteCharAt(rowLevel.length()-1);
			}
			

			if (UIUtil.isNullOrEmpty(strExcludeOIDProgram))
				strExcludeOIDProgram = DomainConstants.EMPTY_STRING;
			if (UIUtil.isNullOrEmpty(strIncludeOIDProgram))
				strIncludeOIDProgram = DomainConstants.EMPTY_STRING;

			return QuestionUtil.encodeFunctionForJavaScript(context, false, "preProcessAssignRelatedObjects", sbType.toString(), sbPolicy.toString(),
					sbQuesId.toString(), strAction[0], strIncludeOIDProgram, strExcludeOIDProgram, mode,rowLevel.toString());
		} catch (Exception e) {
			throw new Exception(e);
		}
	}


	/**
	 * This method assign selected eFormTemplates or Route Templates to Questions
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args emxTableRowIds of Selected  eFormTemplates or Route Templates
	 * @return Map return the map to execute JSP to call JavaScript 
	 * @throws Exception if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String assignObjectsToQuestions(Context context, String args[]) throws Exception {
		try {
			Map programMap=(Map) JPO.unpackArgs(args);
			String arrTableRowIds[] =  (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			String strQuesObjectIds[] = (String[])programMap.get(QuestionnaireConstants.QUESTIONSIDS);
			String strRowLevels[] = (String[])programMap.get("rowLevel");
			
			String strAction[] = (String[])programMap.get("QuestionAction");
			QuestionService questionService= new QuestionServiceImpl();
			List<String> slQuesIds =FrameworkUtil.split(strQuesObjectIds[0],",");
			StringBuilder sbJavascript =new StringBuilder();
			Map<String, String> mObjectIdResponse =new HashMap<String,String>();
			String[] mode = (String[]) programMap.get("mode");

			for(String strRowIds:arrTableRowIds)
			{
				String strRowId=strRowIds;
				TableRowId tableRowId=new TableRowId(strRowId);
				String strObjId=tableRowId.getObjectId();
				String strResponse[]=(String[]) programMap.get(strObjId);
				mObjectIdResponse.put(strObjId, strResponse[0]);
			}
			
			Map mAssignObject=checkObjectState(context,mObjectIdResponse,strAction[0]);
			mObjectIdResponse=(Map) mAssignObject.get(QuestionnaireConstants.RESPONSE);
			List<TableRowId> connectList = questionService.assignRelatedItemsToQuestions(context, mObjectIdResponse, slQuesIds);
			
			StringList slInavlid=(StringList) mAssignObject.get(QuestionnaireConstants.QUESTIONSIDS);
			if(null!=slInavlid&&slInavlid.size()>0)
			{
				String strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.CannotAssignNotValidObject",
						new String[] {slInavlid.toString()}, null, context.getLocale(),
						QuestionnaireConstants.QUESTION_STRING_RESOURCE);	
				sbJavascript.append("alert(\"").append(strMessage).append("\");\n");
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);
			}

			StringBuffer newItemsXML = new StringBuffer(1024);
			for (TableRowId emxTableRowId : connectList) {
				String objectId = emxTableRowId.getObjectId();
				String parentId = emxTableRowId.getParentObjectId();
				String relId = emxTableRowId.getRelationshipId();
				newItemsXML.append("<item oid=\"").append(objectId).append("\" relId=\"").append(relId).append("\" pid=\"").append(parentId)
						.append("\" pasteBelowToRow=\"").append(1).append("\" />");
			}
			StringBuffer newRowXML = new StringBuffer(1024);
			newRowXML.append("<mxRoot>");
			newRowXML.append("<action><![CDATA[refresh]]></action>");
			newRowXML.append("<data status=\"committed\" pasteBelowOrAbove=\"false\">");
			newRowXML.append(newItemsXML.toString());
			newRowXML.append("</data>");
			newRowXML.append("</mxRoot>");
			final String findAndReplace = FrameworkUtil.findAndReplace(newRowXML.toString(), "\"", "\\\"");

			String framename = "Questionnaire";
			if (mode != null && mode.length > 0 && "ConfigureConditionalQuestionnaire".equals(mode[0])) {
				framename = "QuestionConditionalAttribute";
			}

			return QuestionUtil.encodeFunctionForJavaScript(context, true, "addRowsDynamicallyInSB", findAndReplace, framename);
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	private Map checkObjectState(Context context,
			Map<String, String> mObjectIdResponse,String strAction) throws FrameworkException {
		
		try {
			Map mInvalid=new HashMap();
			String strObject[]=new String[mObjectIdResponse.size()];
			int i=0;
			for (Iterator iterator = mObjectIdResponse.keySet().iterator(); iterator.hasNext();) 
			{
				
				strObject[i]=(String) iterator.next();
				i++;
			}
			List<String> slSelect =new StringList();
			slSelect.add(DomainConstants.SELECT_POLICY);
			slSelect.add(DomainConstants.SELECT_CURRENT);
			slSelect.add(DomainConstants.SELECT_ID);
			slSelect.add(DomainConstants.SELECT_REVISION);
			slSelect.add(DomainConstants.SELECT_NAME);
			List<Map<String,String>> mlObjectInfo=DomainObject.getInfo(context, strObject, (StringList)slSelect);
			
			String strKeyProperty = "enoQuestionnaire.Component."+strAction+".";
			List<Map<String, String>> mlQuestionPropertyList=QuestionUtil.getQuestionnaireProperty(context, strAction);
			Map<String,List<String>> mPolicyState=new HashMap();
			List<String> slStates=new StringList();
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				String state = dataMap.get(strKeyProperty+"ValidState");
				List<String> slState=new StringList();
				String strPolicy=PropertyUtil.getSchemaProperty(context,dataMap.get(strKeyProperty+"Policy"));
				if(state.contains(":"))
				{
					slStates =FrameworkUtil.split(state, ":");
					for(String strState:slStates)
					{
						String strPropertyState = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicy, strState);
						slState.add(strPropertyState);
					}
					mPolicyState.put(strPolicy,slState);
				}
				else
				{
					slState.add(PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicy, state));
					mPolicyState.put(strPolicy,slState);
				}
			}
			
			List<String> slInvalidObject=new StringList();
			for(Map<String,String> mObj:mlObjectInfo)
			{
				String strPolicy=mObj.get(DomainConstants.SELECT_POLICY);
				String strState=mObj.get(DomainConstants.SELECT_CURRENT);
				String strObjectId=mObj.get(DomainConstants.SELECT_ID);
				String strName=mObj.get(DomainConstants.SELECT_NAME);
				String strRev=mObj.get(DomainConstants.SELECT_REVISION);
				List<String>  slValidState=mPolicyState.get(strPolicy);
				if(!slValidState.contains(strState))
				{
					mObjectIdResponse.remove(strObjectId);
					slInvalidObject.add(strName+" "+strRev);
				}
			}
			mInvalid.put(QuestionnaireConstants.RESPONSE,mObjectIdResponse);
			mInvalid.put(QuestionnaireConstants.QUESTIONSIDS,slInvalidObject);
			return mInvalid;
		} catch (FrameworkException e) {
			throw new FrameworkException(e.getLocalizedMessage());
		}
	}
	/**
	 * This method is to get the Yes,No values in drop down menu 
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args 
	 * @return List<String> of Yes,No values in HTML format 
	 * @throws Exception if operation fails
	 * @exclude
	 */
	public List<String> getAssignResponseColumnValues(Context context,String args[]) throws Exception
	{
		try {
			Map programMap=(Map) JPO.unpackArgs(args);
			Map paramList=(Map) programMap.get(QuestionnaireConstants.PARAMLIST);
			String mode = (String) paramList.get("mode");
			String questionIds = (String) paramList.get("questionIds");
			List<Map> objectList=(List<Map>) programMap.get(QuestionnaireConstants.OBJECTLIST);
			List<String> slResponse=new StringList();
			List<String> slAttributeRange = new StringList();

			// String strQuestionRange=programMap.get("")
			List<String> slDisplayeAttributeRange = new StringList();
			String strYes = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.Yes");
			String strNo = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.No");
			String strUnknown = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.Unknown");
			
			if (mode.equalsIgnoreCase(QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE)) {
				String strName = DomainObject.newInstance(context, questionIds).getInfo(context, DomainConstants.SELECT_NAME);
				Map mRanges = getAttributeRanges(context, strName);
				slAttributeRange = (StringList) mRanges.get("field_choices");
				slDisplayeAttributeRange = (StringList) mRanges.get("field_display_choices");
			}

			else if (mode.equalsIgnoreCase(QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE)) {
				slDisplayeAttributeRange.add(strYes);
				slDisplayeAttributeRange.add(strNo);
				slDisplayeAttributeRange.add(strUnknown);
				slAttributeRange.add(QuestionnaireConstants.YES);
				slAttributeRange.add(QuestionnaireConstants.NO);
				slAttributeRange.add(QuestionnaireConstants.Unknown);
			}

			for(Object objMap:objectList)
			{
				Map<String,String> mObjectMap=(Map<String, String>) objMap;
				String strobjectId= mObjectMap.get(DomainConstants.SELECT_ID);
				StringBuilder sBuff=new StringBuilder();
				sBuff.append("<select name='");
				sBuff.append(strobjectId);
				sBuff.append("'>");
				for(int i=0;i<slAttributeRange.size();i++){
				
					sBuff.append("'<option value=\'"+slAttributeRange.get(i)+"\'>"+slDisplayeAttributeRange.get(i)+"</option>");
	
				}
				sBuff.append("</select>");
				
				slResponse.add(sBuff.toString());
			}
			return slResponse;
		} catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * Disconnect the assigned objects from questions 
	 * and then form assign objects link passing required parameters
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 * @return Map return the map to execute JSP to call JavaScript 
	 * @throws Exception if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String disconnectObjects(Context context, String args[]) throws Exception
	{
		try {
			String strTypeQuestion=PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_type_Question);
			
			QuestionService questionService= new QuestionServiceImpl();
			Map<String,String> mReturn= new HashMap<String,String>();
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strTableRowIds[] = (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			StringBuilder sbJavascript=new StringBuilder();
			List<TableRowId> slTableRowIdList = new ArrayList<TableRowId>();
			
			String strRefreshRowIdsJoined="";
			String strRemoveRowIdsJoined="";
			List<String> lstRefreshList=new ArrayList<String>();
			List<String> lstRemoveList=new ArrayList<String>();
			
			boolean boolDiff=false;
			
			for(String strRowIds:strTableRowIds)
			{
				String strRowId=strRowIds;
				
				TableRowId tr=new TableRowId(strRowId);
				slTableRowIdList.add(tr);
				DomainObject dom=DomainObject.newInstance(context,tr.getObjectId());
				String type=dom.getInfo(context, "type");
				if(type.equals(strTypeQuestion))
				{
					strRefreshRowIdsJoined=strRefreshRowIdsJoined.concat(tr.getLevel())+"|";
				}
				else
					strRemoveRowIdsJoined=strRemoveRowIdsJoined.concat(strRowId)+";";
			}
		
			if(strRefreshRowIdsJoined.length()>0)
				strRefreshRowIdsJoined=strRefreshRowIdsJoined.substring(0, strRefreshRowIdsJoined.length()-1);
			
			if(strRemoveRowIdsJoined.length()>0)
				strRemoveRowIdsJoined=strRemoveRowIdsJoined.substring(0, strRemoveRowIdsJoined.length()-1);
			
			questionService.disconnectRelatedItem(context,slTableRowIdList);

			//String strEmxTableRowIds=StringUtil.join(strTableRowIds, ";");
			if(programMap.containsKey("quickAction"))
				return QuestionUtil.encodeFunctionForJavaScript(context, true, "removeSelectedRows", strRemoveRowIdsJoined);
			else
			{
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshAndRemoveSelectedRows",strRemoveRowIdsJoined,strRefreshRowIdsJoined);
			}


		} catch (Exception e) {

			throw new Exception(e);

		}

	}
	/**
	 * To get the list of all object assigned to different questions for particular parent object
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 * @return List<Map> of different objects 
	 * @throws Exception if operation fails
	 * @exclude
	 */

	@com.matrixone.apps.framework.ui.ProgramCallable
	public List<Map> getTemplateRelatedObjects(Context context,String args[])throws Exception {
		try {
			QuestionService questionService= new QuestionServiceImpl();
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strAction = (String) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strObjectId= (String) programMap.get(QuestionnaireConstants.OBJECTID);
			List<Map> mlTemplateItems = questionService.getItemsRelatedToTemplates(context,strObjectId,strAction);
			return mlTemplateItems;
		} catch (Exception e) {
			throw new Exception();
		}
	}
	/**
	 * To get the list of question for assigned object to which it is connected
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 * @return List<Map> of  questions
	 * @throws Exception if operation fails
	 * @exclude
	 */
    @com.matrixone.apps.framework.ui.ProgramCallable
	public List<Map> getObjectRelatedQuestions(Context context,String args[])throws Exception
	{
		try {
			QuestionService questionService= new QuestionServiceImpl();
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strObjectId= (String) programMap.get(QuestionnaireConstants.OBJECTID);
			String strParentId= (String) programMap.get(QuestionnaireConstants.PARENT_OID);
			List<Map> mlQuestions=questionService.getQuestionsRelatedToObjects(context,strParentId,strObjectId);	
			return mlQuestions;
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}
	/**
	 * On answering question get the list of question depending upon the response given
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 * @return Map of Ajax code to be executed to display the result for response given
	 * @throws Exception if operation fails
	 * @exclude
	 */

    @com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String findQuestionOnChange(Context context, String args[]) throws Exception {
		try {
			QuestionService questionService= new QuestionServiceImpl();
			String strAttrQuestionResponse =PropertyUtil.getSchemaProperty(context,QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RESPONSE);
			String strPolicyQuestion=PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_policy_Question);
			String strTypeQuestion=PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_type_Question);
			String strPolicyStateActive = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyQuestion, QuestionnaireConstants.SYMBOLIC_STATE_ACTIVE);
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			Map<String, String> mReturn =new HashMap<String, String>();
			String strObjectId = (String)programMap.get(QuestionnaireConstants.OBJECTID);
			String strObjectIds[] = (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			strObjectId=strObjectIds[0];
			String stronChangeValue[]=(String[])programMap.get("responseValue");

			List<Map<?,?>> mListRelatedQuestions=new MapList();
			if(!UIUtil.isNullOrEmpty(stronChangeValue[0])&&stronChangeValue[0].length()>1)
			{
				String strRelWhere ="attribute["+strAttrQuestionResponse+"].value==\""+stronChangeValue[0]+"\"";
				String strObjectwhere =DomainConstants.SELECT_CURRENT+"=="+strPolicyStateActive;
				mListRelatedQuestions=(MapList)questionService.getQuestionRelatedObjects(context, strObjectId, strTypeQuestion,(short )1,strObjectwhere, strRelWhere);
			}
			StringBuilder sbOut =new StringBuilder();
			sbOut.append("<mxRoot>").append("<action><![CDATA[refresh]]></action>").append("<data status=\"committed\">");
			mListRelatedQuestions=questionService.sortMapListOnSequenceOrder(context, mListRelatedQuestions);
			for(Object objQues:mListRelatedQuestions) 	{
				Map mQues=(Map)objQues;
				String strId=(String)mQues.get(DomainConstants.SELECT_ID);
				String strRelId=(String)mQues.get(DomainRelationship.SELECT_ID);
				sbOut.append("<item oid=\"").append(strId).append("\" pid=\"").append(strObjectIds[0]).append(
						"\"  relId=\"").append(strRelId).append("\" pasteBelowToRow=\"0\">").append("</item>");
			}
			sbOut.append("</data>").append("</mxRoot>");
			// mReturn.put(QuestionnaireConstants.ACTION_AJAX,sbOut.toString());
			return "Ajax$" + sbOut.toString();
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	/**
	 * Update the response given for the questions being configured
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 * @return
	 * @throws Exception if operation fails
	 * @exclude
	 */

	public void  updateConfigureQuestions(Context context,String args[])throws Exception {
		try {
			QuestionService questionService= new QuestionServiceImpl();
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			Map<?,?> paramMap = (Map<?,?> )programMap.get(QuestionnaireConstants.PARAMMAP);
			Map<?, ?> requestMap = (Map<?,?> )programMap.get(QuestionnaireConstants.REQUESTMAP);
			String strCOId=(String)requestMap.get(QuestionnaireConstants.OBJECTID);
			String strResponseValue = (String) paramMap.get(QuestionnaireConstants.NEW_VALUE);//value
			String strQuestionId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);//value
			String strRelId=	(String) paramMap.get("relId");
			ContextUtil.startTransaction(context, false);
			if(strResponseValue.length()!=1)
				questionService.saveQuestionResponse(context,strCOId,strQuestionId,strRelId,strResponseValue);
			ContextUtil.commitTransaction(context);
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	/**
	 * programHTMLOutput to check whether the answer of question is given or not
	 * 			show a tick icon if question already answered
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 * @return List<String> of image and empty String
	 * @throws Exception if operation fails
	 * @exclude
	 */
	public List<String> checkResponseGiven(Context context,String args[])throws Exception {
		try {
			List<String> lResponseList=new StringList();
			QuestionService questionService = new QuestionServiceImpl();
			Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
			
			
					
			MapList mlObjectList= (MapList) programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map mParamList = (Map)programMap.get(QuestionnaireConstants.PARAMLIST);
			
			String portalCmdName=(String)mParamList.get("portalCmdName");//QuestionSubmitResponse
			boolean cmdQuestionSubmitResponse=portalCmdName.equals("QuestionSubmitResponse");
			
			String strParentId= (String) mParamList.get(QuestionnaireConstants.OBJECTID);
			String strReportFormat = (String) mParamList.get(QuestionnaireConstants.REPORTFORMAT);
			String strResponseStatus=DomainObject.EMPTY_STRING;
			List<String> slCOcheckQuesId=new StringList();
			String strToolTipMsg = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(), "enoQuestionnaire.ToolTip.ResponseGiven");
			for(Object objQues:mlObjectList) {
				Map mQues= (Map) objQues;
				String strQuesId = (String) mQues.get(DomainConstants.SELECT_ID);
				slCOcheckQuesId.add(strQuesId);
			}
			Map mResponse  = questionService.checkQuestionResponseGiven(context, strParentId,(StringList) slCOcheckQuesId);
			for(Object objQues:mlObjectList) {
				Map mQues = (Map) objQues;
				String type_Question = PropertyUtil.getSchemaProperty(context, "type_Question");
				String type = (String) mQues.get("type");
				if (type_Question.equals(type)) {
				strResponseStatus=DomainObject.EMPTY_STRING;
				String strQuesId = (String) mQues.get(DomainConstants.SELECT_ID);
				String strValue = (String) mResponse.get(strQuesId);
				if(strValue.equalsIgnoreCase(QuestionnaireConstants.TRUE)&&UIUtil.isNullOrEmpty(strReportFormat))
					strResponseStatus="<img border=\"0\" src=\"../common/images/iconMPBCompliant.gif\" title=\""+strToolTipMsg+"\" ></img>";
				else if(strValue.equalsIgnoreCase(QuestionnaireConstants.TRUE)&&UIUtil.isNotNullAndNotEmpty(strReportFormat))
					strResponseStatus=strToolTipMsg;
				
				if(mQues.get("level").equals("0") && cmdQuestionSubmitResponse){
					strResponseStatus+="<img src=\"../common/images/iconActionEdit.gif\" name=\"magicalframe\" height=\"0\" width=\"0\" onload=\"javascript:modifyToolbar();\" style=\"visibility: hidden\"></img>";
				}
				}
				lResponseList.add(strResponseStatus);
				
				
			}
			
			return lResponseList;
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	/**
	 * reset the question been configured/answered on object
	 * 		It will remove all the answers been given on object
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 * @return Map of Javascript to execute javascript code
	 * @throws Exception if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String resetQuestionResponse(Context context, String args[]) throws Exception
	{
		try {

			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			QuestionService questionService= new QuestionServiceImpl();
			String strTableRowIds[] =  (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			String[] strObjectId= (String[]) programMap.get(QuestionnaireConstants.OBJECTID);
			StringBuilder sbQuesId=new StringBuilder();
			for(String strRowIds:strTableRowIds)
			{
				String strRowId=strRowIds;
				TableRowId tr=new TableRowId(strRowId);
				String strQuesId=tr.getObjectId();
				sbQuesId.append(strQuesId);
				sbQuesId.append(",");
			}
			if(sbQuesId!=null&&sbQuesId.length()>0)
				sbQuesId.deleteCharAt(sbQuesId.length()-1);
			List<String> sListQuesId=FrameworkUtil.split(sbQuesId.toString(), ",");
			questionService.resetConfigureQuestionResponse(context,strObjectId[0],(StringList)sListQuesId);
			Map<String, String> mReturn =new HashMap<String, String>();
			String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"enoQuestionnaire.Alert.Msg.ResponseReset");
			StringBuilder sBuffJavascript= new StringBuilder().append("alert(\"").append(strMessage).append("\");").append("\n");
			// sBuffJavascript.append("getTopWindow().location.href=getTopWindow().location.href;");
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshFrame", "detailsDisplay");
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	/**
	 * Invoke the JPO to be called for submitting the response after configuring question
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 *  @return Map of Javascript to execute javascript code
	 * @throws Exception if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String submitConfiguredResponse(Context context, String args[]) throws Exception
	{
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId[] = (String[]) programMap.get("objectId");

			String strAction[] = (String[]) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strKeyProperty = "enoQuestionnaire.Component." + strAction[0] + ".";

			List<Map<String, String>> mlQuestionPropertyList = QuestionUtil.getQuestionnaireProperty(context, strAction[0]);
			String strProgramName=DomainConstants.EMPTY_STRING;
			String strEntireDecisionMaking = DomainConstants.EMPTY_STRING;
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				strProgramName= dataMap.get(strKeyProperty+"SubmitResponseProgram");
				strEntireDecisionMaking = dataMap.get(strKeyProperty + "EntireDecisionTreeResponseMandatory");
			}

			QuestionService questionService = QuestionUtil.getQuestionService(context);
			Map<String, Map<String, String>> mQuesIdResponse = new HashMap<String, Map<String, String>>();
			mQuesIdResponse = questionService.getConfigureConnectedQuestions(context, strObjectId[0]);

			if (UIUtil.isNotNullAndNotEmpty(strEntireDecisionMaking) && "true".equalsIgnoreCase(strEntireDecisionMaking)) {
				boolean checkSubmitted = questionService.checkAllQuestionSaved(context, strObjectId[0], mQuesIdResponse, strAction[0]);
				if (!checkSubmitted) {
					String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE,
							context.getLocale(), "enoQuestionnaire.Alert.Msg.AllQuestionsNotConfigured");
					return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertErrorMessageSubmitQuestion", strMessage);
				}
			}

			StringList programInfo = FrameworkUtil.split(strProgramName, ":");
			String programName = (String) programInfo.get(0);
			String methodName = (String) programInfo.get(1);

			JPO.invoke(context, programName, null, methodName, args, null);

			String strAttrQuestionSubmit = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_SUBMIT);
			String attributeQuestionCategory = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_CATEGORY);
			String strKeepHistory = EnoviaResourceBundle.getProperty(context, "enoQuestionnaire.Component.Approval.QuestionResponse.History");

			Map<String, String> mQuestionResponse = new HashMap<String, String>();
			for (Iterator iterator = mQuesIdResponse.keySet().iterator(); iterator.hasNext();) {
				mQuestionResponse = new HashMap<String, String>();
				String strKey = (String) iterator.next();
				Map mQuestion = mQuesIdResponse.get(strKey);
				String strQuestionCategory = (String) mQuestion.get(DomainObject.getAttributeSelect(attributeQuestionCategory));
				if (!strQuestionCategory.equals(QuestionnaireConstants.QUESTION_CATEGORY_CONDITIONAL)) {
					String strRelId = (String) mQuestion.get(DomainRelationship.SELECT_ID);
					DomainRelationship dr = DomainRelationship.newInstance(context, strRelId);
					String strSubmittedValue = dr.getAttributeValue(context, strAttrQuestionSubmit);
					dr.setAttributeValue(context, strAttrQuestionSubmit, QuestionnaireConstants.YES);
					if ("true".equalsIgnoreCase(strKeepHistory))
						questionService.updateQuestionHistoryOnSubmit(context, mQuestion);
				}
			}
			

			
			
			String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Alert.Msg.ResponseSubmitted");
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessageAndRefreshAfterSubmit", strMessage);
		} catch (Exception e) {
			throw new Exception(e);
		}

	}


	public void submitConditionalQuestions(Context context, String args[]) throws Exception {
		try {
			String strObjectId = args[0];

			String strAction=args[1];
			String strKeyProperty = "enoQuestionnaire.Component." + strAction + ".";
			List<Map<String, String>> mlQuestionPropertyList = QuestionUtil.getQuestionnaireProperty(context,strAction );
			String strProgramName = DomainConstants.EMPTY_STRING;
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				strProgramName = dataMap.get(strKeyProperty + "SubmitConditionalResponseProgram");
				
			}

			QuestionService questionService = QuestionUtil.getQuestionService(context);

			StringList programInfo = FrameworkUtil.split(strProgramName, ":");
			String programName = (String) programInfo.get(0);
			String methodName = (String) programInfo.get(1);

			Map mArgs = new HashMap();
			mArgs.put("objectId", args[0]);
			mArgs.put("Action", args[1]);

			JPO.invoke(context, programName, null, methodName, JPO.packArgs(mArgs), null);

			String strKeepHistory = EnoviaResourceBundle.getProperty(context, "enoQuestionnaire.Component.Approval.QuestionResponse.History");

		}
		catch (Exception e) {
			throw new Exception(e);
		}

	}

	/**
	 * Get the Questions been configured with their response and response objects
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 *  @return List<Map> of Questions
	 * @throws Exception if operation fails
	 * @exclude
	 */
	 @com.matrixone.apps.framework.ui.ProgramCallable
	public List<Map> viewConfigureResponse(Context context,String args[])throws Exception {
		try {
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			QuestionService questionService= new QuestionServiceImpl();
			String strObjectId = (String)programMap.get(QuestionnaireConstants.OBJECTID);
			String strAction=(String)programMap.get(QuestionnaireConstants.QUESTION_MODE);
			List<Map> mListRelatedQuestions=questionService.expandForParentObject(context,strObjectId,strAction,false);
			for (Map m : mListRelatedQuestions) {
				String strQuestionSubmit = (String) m.get("Question Submit");
				if (UIUtil.isNotNullAndNotEmpty(strQuestionSubmit))
					m.put("styleRows", "BudgetGreenBackGroundColor");
			}
			questionService.sortMapListOnSequenceOrder(context,(MapList) mListRelatedQuestions);
			Map<String, String> map = new HashMap<String, String>();
			map.put("expandMultiLevelsJPO","true");
			mListRelatedQuestions.add(map);
			return mListRelatedQuestions;
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	/**
	 * columnType Program to get response objects of the configured questions
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments objectList of questions
	 * @return List<String> of response objects
	 * @throws Exception if operation fails
	 * @exclude
	 */
	public List<String> getConfiguredQuestionResponse(Context context,String args[])throws Exception 	{
		try {
			List<String> lResponseList=new StringList();
			String strYes = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.Yes");
			String strNo = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.No");

			Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);

			List<Map> mlObjectList= (List<Map>) programMap.get(QuestionnaireConstants.OBJECTLIST);
			String strAttrQuestionResponse = PropertyUtil.getSchemaProperty(context,QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RESPONSE);
			for(Object objMap:mlObjectList) {
				Map mQues =(Map) objMap;
				String strAttrName = (String) mQues.get(DomainConstants.SELECT_NAME);
				String strQuestionResponse = (String) mQues.get(QuestionnaireConstants.QUESTIONS_RESPONSE);

				if (UIUtil.isNotNullAndNotEmpty(strAttrName))
					strAttrName = PropertyUtil.getSchemaProperty(context, strAttrName);
				if (UIUtil.isNotNullAndNotEmpty(strAttrName) && UIUtil.isNotNullAndNotEmpty(strQuestionResponse)) {
					strQuestionResponse = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),
							"emxFramework.Range." + strAttrName.replaceAll(" ", "_") + "." + strQuestionResponse.replaceAll(" ", "_"));
				}
				// else if (!UIUtil.isNullOrEmpty(strQuestionResponse))
				// strQuestionResponse =
				// strQuestionResponse.equalsIgnoreCase(QuestionnaireConstants.TRUE)
				// ? strYes : strNo;
				//
				// else
				// strQuestionResponse = DomainObject.EMPTY_STRING;
				if(UIUtil.isNotNullAndNotEmpty(strQuestionResponse))
					lResponseList.add(strQuestionResponse);
				else
					lResponseList.add(DomainObject.EMPTY_STRING);
			}

			return lResponseList;
		} catch (Exception e) {
			throw new Exception(e);
		}

	}
	/**
	 * columnType Program to get response of the configured questions
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments 
	 * @return List<String> of Questions Response Yes/NO
	 * @throws Exception if operation fails
	 * @exclude
	 */
	public List<String> getConfiguredQuestionResponseObjects(Context context,String args[])throws Exception {
		try {
			List<String> lResponseList=new StringList();
			QuestionService questionService= new QuestionServiceImpl();
			Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
			Map<?,?> paramList =(Map<?,?> )programMap.get(QuestionnaireConstants.PARAMLIST);
			String strAction=(String) paramList.get(QuestionnaireConstants.QUESTION_MODE);
			
			String strReportFormat = (String) paramList.get(QuestionnaireConstants.REPORTFORMAT);
			
			List<Map<String, String>> mlObjectList= (List<Map<String, String>>) programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map mQuesEForms  = questionService.getQuestionsResponseObjects(context,mlObjectList,strAction);
			for(Object objMap:mlObjectList)  {
				Map mQues =(Map) objMap;
				String strQuesId= (String) mQues.get(DomainConstants.SELECT_ID);
				Map mEFormName = (Map) mQuesEForms.get(strQuesId);
				if(mEFormName!=null)  {
					StringList sListEFormName =(StringList) mEFormName.get(DomainConstants.SELECT_NAME);
					StringList sListEFormId =(StringList) mEFormName.get(DomainConstants.SELECT_ID);
					StringList sListEFormRevision =(StringList) mEFormName.get(DomainConstants.SELECT_REVISION);
					if(sListEFormName!=null) {
						StringBuilder sBuff = new StringBuilder();
						for(int j=0;j<sListEFormName.size();j++)
						{
							DomainObject domObj = DomainObject.newInstance(context, sListEFormId.get(j).toString());
							String strTypeSymName = FrameworkUtil.getAliasForAdmin(context, "type", domObj.getInfo(context, DomainConstants.SELECT_TYPE), true);
							String typeIcon;
							try
							{
								typeIcon = EnoviaResourceBundle.getProperty(context,"emxFramework.smallIcon." + strTypeSymName);
							}catch(FrameworkException e){
								typeIcon = EnoviaResourceBundle.getProperty(context,"emxFramework.smallIcon.defaultType");
							}
							
							if(UIUtil.isNullOrEmpty(strReportFormat)){
							sBuff.append("<img src = \"images/").append(typeIcon).append("\"/>&#160;");
							sBuff.append("<a class=\"object\" href=\"JavaScript:showNonModalDialog('emxTree.jsp?objectId=");
							sBuff.append(sListEFormId.get(j).toString());
							sBuff.append("', '930', '650', 'true')\" >");
													sBuff.append(XSSUtil.encodeForHTML(context, sListEFormName.get(j).toString()));
							sBuff.append("  ").append(sListEFormRevision.get(j).toString());
							sBuff.append("</a>");
								sBuff.append("<br></br>");

							}
							else
							{
								sBuff.append(sListEFormName.get(j).toString());
								sBuff.append("  ").append(sListEFormRevision.get(j).toString());
							}
						
						}
						
						lResponseList.add(sBuff.toString());
					}
					else
						lResponseList.add(DomainConstants.EMPTY_STRING);
				}
				else
					lResponseList.add(DomainConstants.EMPTY_STRING);
			}
			return lResponseList;
		} catch (Exception e) {
			throw new Exception(e);
		}
	}

	/**
	 * This method is to get the objectIds from emxTableRowIds
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args String [] of emxTableRowIds
	 * @return String of all objectIds with comma(,) separated
	 * @throws Exception if operation fails
	 * @exclude
	 */
	private String getTableRowIds(String[] emxTableRowIds)throws Exception 
	{
		try {
			StringBuilder sbQuesId=new StringBuilder();
			for(String strRowIds:emxTableRowIds)
			{
				String strRowId=strRowIds;
				TableRowId tr=new TableRowId(strRowId);
				String strQuesId=tr.getObjectId();
				sbQuesId.append(strQuesId);
				sbQuesId.append(",");
			}
			if(sbQuesId!=null&&sbQuesId.length()>0)
				sbQuesId.deleteCharAt(sbQuesId.length()-1);
			return sbQuesId.toString();
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	
	/**
	 * Access Program to hide related menu if no type to be connected is define in Questionnaire property file
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments 
	 * @return true if type defined in property file
	 * 		false if type not  defined in property file
	 * @throws Exception if operation fails
	 * @exclude
	 */
	public boolean hideQuestionRelatedTemplate (Context context,String args[])throws Exception
	{
		Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
		String strAction = (String) programMap.get(QuestionnaireConstants.QUESTION_MODE);
		String strKeyProperty = "enoQuestionnaire.Component."+strAction+".Type";
		List<Map<String, String>> mlQuestionPropertyList=QuestionUtil.getQuestionnaireProperty(context,strAction);
		List<String> slType = new StringList();
		for (Map<String, String> dataMap : mlQuestionPropertyList) {
			String str=dataMap.get(strKeyProperty);
			if(UIUtil.isNotNullAndNotEmpty(str))
				slType.add(str);
		}
		if(slType==null||slType.size()==0)
			return false;
		return true;
		
	}
	/**
	  *Method to refresh row on update
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments 
	 * @return Refesh map
	 * @throws Exception if operation fails
	 * @exclude
	 */

	public Map postProcessRefreshTable(Context context, String[] args) throws Exception 
	{
		try{
			Map mapReturn = new HashMap();
			mapReturn.put("Action","refresh");
			return mapReturn;
		}
		catch(Exception ex){
			throw new Exception(ex.getLocalizedMessage());
		}
	}
	/**
	  *Method to get Question Description values for Question Configure table
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments 
	 * @return List<String> of Description 
	 * @throws Exception if operation fails
	 * @exclude
	 */	
	public static List<String> getColumnQuestionDescriptionValues(Context context, String[] args) throws Exception 
	{
		
		List<String> lDescritionList=new StringList();
		Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
		List<Map> mlObjectList= (List<Map>)programMap.get(QuestionnaireConstants.OBJECTLIST);
		Map<?,?>  paramList= (Map<?,?> ) programMap.get(QuestionnaireConstants.PARAMLIST);
		String strReportFormat = (String) paramList.get(QuestionnaireConstants.REPORTFORMAT);
		QuestionService questionService= new QuestionServiceImpl();
		StringBuffer sbLink=new StringBuffer();
		String strTypeIcon = EnoviaResourceBundle.getProperty(context,"emxFramework.smallIcon." + DomainSymbolicConstants.SYMBOLIC_type_Question);
		
		List<String> slSelects=new StringList();
		slSelects.add(DomainConstants.SELECT_TYPE);
		slSelects.add(DomainConstants.SELECT_NAME);
		slSelects.add(DomainConstants.SELECT_DESCRIPTION);
		String strTreeMenu="treeMenu=type_Questionnaire&amp;";
		for (Map<String,String> map : mlObjectList) {
		
			String strRelId = DomainConstants.EMPTY_STRING;
			String strTypeDescription=map.get(DomainConstants.SELECT_DESCRIPTION);
			String strId=map.get(DomainConstants.SELECT_ID);
			sbLink=new StringBuffer();
			if(UIUtil.isNullOrEmpty(strTypeDescription))
			{
				Map<String,String> mObjInfo=QuestionUtil.getInfo(context, strId, slSelects);
				
				String strType=mObjInfo.get(DomainConstants.SELECT_TYPE);
				String strTypeSymName = FrameworkUtil.getAliasForAdmin(context, "type", strType, true);
				if(DomainSymbolicConstants.SYMBOLIC_type_Question.equals(strTypeSymName))
 {
					strTypeDescription=mObjInfo.get(DomainConstants.SELECT_DESCRIPTION);

				}
				else
				{
					strTypeIcon=EnoviaResourceBundle.getProperty(context,"emxFramework.smallIcon." + strTypeSymName);
					strTypeDescription=mObjInfo.get(DomainConstants.SELECT_NAME);
					strTreeMenu=DomainConstants.EMPTY_STRING;
				}
			}
			String strQuesAttrName = map.get(DomainConstants.SELECT_NAME);
			if (UIUtil.isNotNullAndNotEmpty(strQuesAttrName))
				strQuesAttrName = PropertyUtil.getSchemaProperty(context, strQuesAttrName);
			if (UIUtil.isNotNullAndNotEmpty(strQuesAttrName)) {
				strTypeDescription = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),
						"emxFramework.Attribute." + strQuesAttrName.replaceAll(" ", "_"));
			}
			if(UIUtil.isNullOrEmpty(strReportFormat)){
			sbLink.append("<img src = \"images/").append(strTypeIcon).append("\"/>&#160;");
			sbLink.append("<a href=\"JavaScript:showNonModalDialog('emxTree.jsp?").append(strTreeMenu).append("objectId=");
			sbLink.append(strId);
			sbLink.append("', '930', '650', 'true')\" >");
				sbLink.append(XSSUtil.encodeForHTML(context, strTypeDescription));

			sbLink.append("</a>");
			}
			else
				sbLink.append(strTypeDescription);
			lDescritionList.add(sbLink.toString());
		}
		return lDescritionList;
	}
	/**
	  *Method to get Question table object Name values
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments 
	 * @return List<String> of Names
	 * @throws Exception if operation fails
	 * @exclude
	 */	
	public static List<String> getColumnQuestionNameValues(Context context, String[] args) throws Exception 
	{
		
		List<String> lDescritionList=new StringList();
		Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
		List<Map> mlObjectList= (List<Map>)programMap.get(QuestionnaireConstants.OBJECTLIST);
		Map<?,?>  paramList= (Map<?,?> ) programMap.get(QuestionnaireConstants.PARAMLIST);
		String strReportFormat = (String) paramList.get(QuestionnaireConstants.REPORTFORMAT);
		QuestionService questionService= new QuestionServiceImpl();
		StringBuffer sbLink=new StringBuffer();
		String strTypeIcon = EnoviaResourceBundle.getProperty(context,"emxFramework.smallIcon." + DomainSymbolicConstants.SYMBOLIC_type_Question);
		
		List<String> slSelects=new StringList();
		slSelects.add(DomainConstants.SELECT_TYPE);
		slSelects.add(DomainConstants.SELECT_NAME);
		slSelects.add(DomainConstants.SELECT_DESCRIPTION);
		for (Map<String,String> map : mlObjectList) {
		
			String strId=map.get(DomainConstants.SELECT_ID);
			sbLink=new StringBuffer();
			if(UIUtil.isNotNullAndNotEmpty(strId))
			{
				Map<String,String> mObjInfo=QuestionUtil.getInfo(context, strId,slSelects );
				String strType=mObjInfo.get(DomainConstants.SELECT_TYPE);
				String strName = mObjInfo.get(DomainConstants.SELECT_NAME);
				String strDescription = mObjInfo.get(DomainConstants.SELECT_DESCRIPTION);
				String strTypeSymName = FrameworkUtil.getAliasForAdmin(context, "type", strType, true);
				if (!DomainSymbolicConstants.SYMBOLIC_type_Question.equals(strTypeSymName))
					strDescription = mObjInfo.get(DomainConstants.SELECT_NAME);

				String strI18NName = PropertyUtil.getSchemaProperty(context, strName);
				String descI18N="";
				
				if (UIUtil.isNotNullAndNotEmpty(strI18NName)) {
					
					strI18NName = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),
							"emxFramework.Attribute."
 + strI18NName.replaceAll(" ", "_"));
					strDescription = strI18NName;
				}
				else
					strDescription=XSSUtil.encodeForHTML(context, strDescription);

				if(UIUtil.isNullOrEmpty(strReportFormat)){
						sbLink.append("<a href=\"JavaScript:showNonModalDialog('emxTree.jsp?").append("objectId=");
				sbLink.append(strId);

				if(DomainSymbolicConstants.SYMBOLIC_type_Question.equals(strTypeSymName))
					sbLink.append("&amp;treeMenu=type_Questionnaire");
				sbLink.append("', '930', '650', 'true')\" >");
					sbLink.append(strDescription);
				sbLink.append("</a>");
				}
				else
					sbLink.append(strName);
			}
		/* if(map.get("level").equals("0")&&UIUtil.isNullOrEmpty(strReportFormat)){
				sbLink.append("<img src=\"../common/images/iconActionEdit.gif\" name=\"magicalframe\" height=\"0\" width=\"0\" onload=\"javascript:modifyPromoteDemoteHeader();\" style=\"visibility: hidden\"></img>");
			} */
			lDescritionList.add(sbLink.toString());
		}
		return lDescritionList;
	}

	/**
	 * Update the Name of the question
	 * @param context the ENOVIA <code>Context</code> object.
	 * @param args holds packed arguments
	 * @return
	 * @throws Exception if operation fails
	 * @exclude
	 */

	public void updateQuestionDescriptionValue(Context context, String args[]) throws Exception {
		try {
			QuestionService questionService= new QuestionServiceImpl();
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			Map<?,?> paramMap = (Map<?,?> )programMap.get(QuestionnaireConstants.PARAMMAP);
			Map<?, ?> requestMap = (Map<?,?> )programMap.get(QuestionnaireConstants.REQUESTMAP);
			String strName= (String) paramMap.get(QuestionnaireConstants.NEW_VALUE);
			String strQuestionId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);
			DomainObject dobjQues=DomainObject.newInstance(context,strQuestionId);
			dobjQues.setDescription(context, strName);
			
		} catch (Exception e) {
			throw new Exception(e);
		}
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String actionMoveUp(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strTypeQuestion = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Question);
			String strAction[] = (String[]) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String[] sTableRowIds = (String[]) programMap.get("emxTableRowId");
			List<TableRowId> rowIds = TableRowId.getTableRowIds(sTableRowIds);
			String strMode[] = (String[]) programMap.get("mode");
String Smode="";
			if(null==strMode||(strMode!=null && strMode.length>0 && UIUtil.isNullOrEmpty(strMode[0])))
				Smode=QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
			else
				Smode=strMode[0];
			QuestionService service = new QuestionServiceImpl();
			;
			String mode = "";
			String strErrorMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.CannotSequence", new String[] {}, null,
					context.getLocale(), QuestionnaireConstants.QUESTION_STRING_RESOURCE);
			for (String strRowIds : sTableRowIds) {
				String strRowId = strRowIds;
				TableRowId tr = new TableRowId(strRowId);
				String strQuesId = tr.getObjectId();
				Map mTypeInfo = QuestionUtil.getInfo(context, strQuesId, new StringList(DomainConstants.SELECT_TYPE));
				if (!mTypeInfo.get(DomainConstants.SELECT_TYPE).toString().equals(strTypeQuestion)) {
					return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strErrorMessage);
				}
			}
			String framename = "detailsDisplay";
			String action = DomainObject.EMPTY_STRING;
			if (strAction != null) {
				action = strAction[0];
				if (Smode.equals(QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE)) {
					mode = QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
					framename = "Questionnaire";
				}
				else if (Smode.equals(QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE)) {
					mode = QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE;
					framename = "QuestionConditionalAttribute";
				}
			}
			for (int i = 0; i < rowIds.size(); i++) {

				service.moveUp(context, DomainObject.newInstance(context, rowIds.get(i).getObjectId()),
						DomainObject.newInstance(context, rowIds.get(i).getParentObjectId()), action, mode);
			}
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshQuestionnaireView", FrameworkUtil.join(sTableRowIds, "::"),
					framename);
		}
		catch (Exception e) {
			String strErrorMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.CannotSequenceOutOfparent", new String[] {}, null,
					context.getLocale(), QuestionnaireConstants.QUESTION_STRING_RESOURCE);
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strErrorMessage);
		}
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String actionMoveDown(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strTypeQuestion=PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_type_Question);
			String strAction[]=(String[]) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String[] sTableRowIds = (String[]) programMap.get("emxTableRowId");
			String strMode[] = (String[]) programMap.get("mode");
			
String sMode="";
			if(null==strMode||(strMode!=null && strMode.length>0 && UIUtil.isNullOrEmpty(strMode[0])))
				sMode=QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
			else
				sMode=strMode[0];
			
			List<TableRowId> rowIds = TableRowId.getTableRowIds(sTableRowIds);
			QuestionService service =new QuestionServiceImpl();;
			String strErrorMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.CannotSequence",
					new String[] {}, null, context.getLocale(),
 QuestionnaireConstants.QUESTION_STRING_RESOURCE);
			String mode = "";
			for(String strRowIds:sTableRowIds) {
				String strRowId=strRowIds;
				TableRowId tr=new TableRowId(strRowId);
				String strQuesId=tr.getObjectId();
				Map mTypeInfo=QuestionUtil.getInfo(context, strQuesId, new StringList(DomainConstants.SELECT_TYPE));
				if(!mTypeInfo.get(DomainConstants.SELECT_TYPE).toString().equals(strTypeQuestion)) 
				{				
					return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strErrorMessage);
				}
			}	
			String framename = "detailsDisplay";
			String action = DomainObject.EMPTY_STRING;
			if (strAction != null) {
				action = strAction[0];
				if (sMode.equals(QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE)) {
					mode = QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
					framename = "Questionnaire";
				}
				else if (sMode.equals(QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE)) {
					mode = QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE;
					framename = "QuestionConditionalAttribute";
				}
			}
			for (int i = rowIds.size() - 1; i >= 0; i--) {

				service.moveDown(
						context,
						DomainObject.newInstance(context, rowIds.get(i).getObjectId()),
						DomainObject.newInstance(context, rowIds.get(i).getParentObjectId()), action, mode);
			}
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshQuestionnaireView", FrameworkUtil.join(sTableRowIds, "::"),
					framename);
		}
		catch (Exception e) {
			String strErrorMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.CannotSequenceOutOfparent",
					new String[] {}, null, context.getLocale(),
					QuestionnaireConstants.QUESTION_STRING_RESOURCE);
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strErrorMessage);
		}
	}

	public List<String> getParentObjectForQuestion(Context context,String args[])throws Exception {
		try {
			List<String> lResponseList=new StringList();
			QuestionService questionService= new QuestionServiceImpl();
			Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
			Map<?,?> paramList =(Map<?,?> )programMap.get(QuestionnaireConstants.PARAMLIST);
			String strAction=(String) paramList.get(QuestionnaireConstants.QUESTION_MODE);
			String strReportFormat = (String) paramList.get(QuestionnaireConstants.REPORTFORMAT);
			List<Map<String, String>> mlObjectList= (List<Map<String, String>>) programMap.get(QuestionnaireConstants.OBJECTLIST);
			QuestionService service =new QuestionServiceImpl();;
			for(Object objMap:mlObjectList)  {
				Map mQues =(Map) objMap;
				String strQuesId= (String) mQues.get(DomainConstants.SELECT_ID);
				StringBuilder sBuff = new StringBuilder();
				
				Map mParent=service.getParentTempateForQuestion(context,strQuesId,strAction);
				String strParentId=(String) mParent.get(DomainObject.SELECT_ID);
				String strParentTYPE=(String) mParent.get(DomainObject.SELECT_TYPE);
				String strParentNAME=(String) mParent.get(DomainObject.SELECT_NAME);
				String strTypeSymName = FrameworkUtil.getAliasForAdmin(context, "type",strParentTYPE, true);
				String typeIcon;
				try
				{
					typeIcon = EnoviaResourceBundle.getProperty(context,"emxFramework.smallIcon." + strTypeSymName);
				}catch(FrameworkException e){
					typeIcon = EnoviaResourceBundle.getProperty(context,"emxFramework.smallIcon.defaultType");
				}
				if(UIUtil.isNotNullAndNotEmpty(strParentId)&&UIUtil.isNullOrEmpty(strReportFormat)){
				sBuff.append("<img src = \"images/").append(typeIcon).append("\"/>&#160;");
				sBuff.append("<a class=\"object\" href=\"JavaScript:showNonModalDialog('emxTree.jsp?objectId=");
				sBuff.append(strParentId);
				sBuff.append("', '930', '650', 'true')\" >");
				sBuff.append(strParentNAME);
				sBuff.append("</a>");
				}
				else if(UIUtil.isNotNullAndNotEmpty(strParentId))
				{
					sBuff.append(strParentNAME);
				}
				else
					sBuff.append(DomainObject.EMPTY_STRING);
				lResponseList.add(sBuff.toString());
			}
			return lResponseList;
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	private static Map<?, ?> getAttributeRanges(Context context, String strAttribute) throws Exception {
		Map<String, StringList> attributeRangeMap = new HashMap<String, StringList>();
		try {
			QuestionUtil.ensureNotNull(context, "context");
			QuestionUtil.ensureNotEmpty(strAttribute, "Attribute is Empty");

			strAttribute = PropertyUtil.getSchemaProperty(context, strAttribute);
			StringList slAttributeRange = FrameworkUtil.getRanges(context, strAttribute);

			if (!QuestionUtil.isNullOrEmpty(slAttributeRange)) {
				attributeRangeMap.put("field_choices", slAttributeRange);
				attributeRangeMap.put("field_display_choices",
										i18nNow.getAttrRangeI18NStringList(strAttribute, slAttributeRange, context.getSession().getLanguage()));
			}
		}
		catch (Exception e) {
			throw new Exception(e);
		}
		return attributeRangeMap;
	}
	//public List<Boolean> checkQuestionDescriptive(Context context,String[] args)throws Exception {
	public StringList checkQuestionDescriptive(Context context,String[] args)throws Exception {
		try {
			List<String> slRangeResponse = new StringList();
			Map<?,?> paramMap = (Map<?,?>)JPO.unpackArgs(args);
			List<Map> mobjectList = (List<Map>)paramMap.get(QuestionnaireConstants.OBJECTLIST);
			String attributeQuestionType = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_CATEGORY);
			DomainObject dobj=null;
			boolean isEditActionReqd = false;
			for(Map mObjectMap:mobjectList)
			{
				isEditActionReqd = false;
				DomainObject dobjQues=DomainObject.newInstance(context,(String)mObjectMap.get(DomainObject.SELECT_ID));
				String strQuestionCategory=dobjQues.getAttributeValue(context, attributeQuestionType);
				if (strQuestionCategory.equals(QuestionnaireConstants.DESCRIPTIVE))
					isEditActionReqd=true;
				slRangeResponse.add(String.valueOf(isEditActionReqd));
			}
			return (StringList)slRangeResponse;
		} catch (Exception e) {
			throw new Exception(e);
		}

	}
	public void  updateQuestionText(Context context,String args[])throws Exception {
		try {
			String attributeQuestionText = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_COMMENT);
			String strRelChangeOrderQuestionnaire = PropertyUtil.getSchemaProperty(context,
					QuestionnaireConstants.SYMBOLIC_RELATIONSHIP_RELATED_ITEM_QUESTIONNAIRE);
			QuestionService questionService= new QuestionServiceImpl();
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			Map<?,?> paramMap = (Map<?,?> )programMap.get(QuestionnaireConstants.PARAMMAP);
			Map<?, ?> requestMap = (Map<?,?> )programMap.get(QuestionnaireConstants.REQUESTMAP);
			String strCOId=(String)requestMap.get(QuestionnaireConstants.OBJECTID);
			String strQuestionText = (String) paramMap.get(QuestionnaireConstants.NEW_VALUE);//value
			String strQuestionId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);//value
			String strRelId=	(String) paramMap.get("relId");
			DomainRelationship dRelQuestion = DomainRelationship.newInstance(context, strRelId);
			List<String> slSelects = new StringList();
			slSelects.add("tomid[" + strRelChangeOrderQuestionnaire + "].id");
			slSelects.add("tomid[" + strRelChangeOrderQuestionnaire + "].from.id");

			MapList mInfo = dRelQuestion.getInfo(context, new String[] { strRelId },
 (StringList)slSelects);
			Map mRel = (Map) mInfo.get(0);
			Object objCOId = (Object) mRel.get("tomid[" + strRelChangeOrderQuestionnaire + "].from.id");
			Object objRelId = (Object) mRel.get("tomid[" + strRelChangeOrderQuestionnaire + "].id");
			String relId = DomainConstants.EMPTY_STRING;
			if (objRelId instanceof String)
 {

				if (objCOId.toString().equals(strCOId))
					relId = (String) objRelId;
			}
			else if (objRelId instanceof StringList) {
				Object objCOIds = (Object) mRel.get("tomid[" + strRelChangeOrderQuestionnaire + "].from.id");
				List<String> parentObject = (List<String>) objCOIds;
				List<String> parentRelId = (List<String>) objRelId;
				for (int i = 0; i < parentObject.size(); i++) {
					String strId = parentObject.get(i);
					if (strId.equals(strCOId))
						relId = parentRelId.get(i);
				}
			}

		
			if (UIUtil.isNullOrEmpty(relId)) {
				relId = questionService.saveQuestionResponse(context, strCOId, strQuestionId, strRelId, "");
			}
			if(UIUtil.isNotNullAndNotEmpty(relId))
			{	
				DomainRelationship dRel = DomainRelationship.newInstance(context, relId);
				dRel.setAttributeValue(context, attributeQuestionText, strQuestionText);
			}
		} catch (Exception e) {
			throw new Exception(e);
		}
	}

	public List<String> getConfiguredQuestionAnswerDescription(Context context, String args[]) throws Exception {
		try {
			List<String> lResponseList = new StringList();
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			List<Map> mlObjectList = (List<Map>) programMap.get(QuestionnaireConstants.OBJECTLIST);
			String attributeQuestionText = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_COMMENT);
			String strRelChangeOrderQuestionnaire = PropertyUtil.getSchemaProperty(context,
					QuestionnaireConstants.SYMBOLIC_RELATIONSHIP_RELATED_ITEM_QUESTIONNAIRE);
			List<String> slSelects=new StringList();
			slSelects.add("tomid[" + strRelChangeOrderQuestionnaire
					+ "].id");
			slSelects.add("tomid[" + strRelChangeOrderQuestionnaire
					+ "].from.id");
			Map mlParamList = (Map) programMap.get("paramList");
			String strObjectId = (String) mlParamList.get("objectId");
			for (Object objMap : mlObjectList) {
				String strAnswerDescription = DomainConstants.EMPTY_STRING;
				Map mQues = (Map) objMap;
				String strRelId = (String) mQues.get(DomainRelationship.SELECT_ID);
				DomainRelationship dRelQuestion = DomainRelationship.newInstance(context, strRelId);
				MapList mInfo = dRelQuestion.getInfo(context, new String[] { strRelId }, (StringList)slSelects);
				if (mInfo != null) {
					Map mRel = (Map) mInfo.get(0);
					Object objCOId = (Object) mRel.get("tomid[" + strRelChangeOrderQuestionnaire + "].from.id");
					Object objRelId = (Object) mRel.get("tomid[" + strRelChangeOrderQuestionnaire + "].id");
					String relId = DomainConstants.EMPTY_STRING;
					if (objRelId instanceof String)
 {

						if (objCOId.toString().equals(strObjectId))
							relId = (String) objRelId;
					}
					else if (objRelId instanceof StringList) {
						Object objCOIds = (Object) mRel.get("tomid[" + strRelChangeOrderQuestionnaire + "].from.id");
						List<String> parentObject = (List<String>) objCOIds;
						List<String> parentRelId = (List<String>) objRelId;
						for (int i = 0; i < parentObject.size(); i++) {
							String strId = parentObject.get(i);
							if (strId.equals(strObjectId))
								relId = parentRelId.get(i);
						}
					}

					if (UIUtil.isNotNullAndNotEmpty(relId)) {
						DomainRelationship dRel = DomainRelationship.newInstance(context, relId);
						strAnswerDescription = dRel.getAttributeValue(context, attributeQuestionText);
					}
				}
				if (UIUtil.isNullOrEmpty(strAnswerDescription))
					strAnswerDescription = DomainObject.EMPTY_STRING;
				lResponseList.add(strAnswerDescription);
			}
			return lResponseList;
		}
		catch (Exception e) {
			throw new Exception(e);
		}

	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String actionCopyChangeTemplate(Context context, String args[]) throws Exception {
		Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
		String strTableRowIds[] = (String[]) programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
		String[] strAction = (String[]) programMap.get(QuestionnaireConstants.QUESTION_MODE);
		String strRowID = strTableRowIds[0];
		TableRowId tr = new TableRowId(strRowID);
		String strChangeTemplateId = tr.getObjectId();
		QuestionService questionService = new QuestionServiceImpl();
		questionService.copyChangeTemplate(context, strChangeTemplateId);
		return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshChangeTemplateFrame");

	}

	public static Map getAllChangeTemplatesSearch(Context context, String args[]) throws Exception {

		try {
			Map argMap = (HashMap) JPO.unpackArgs(args);
			Map requestMap = (Map) argMap.get("requestMap");
			String action = (String) requestMap.get(QuestionnaireConstants.QUESTION_MODE);

			String user = context.getUser();
			String userId = PersonUtil.getPersonObjectID(context);

			String selectable = "";

			List<String> strList = new StringList();
			strList.add(DomainConstants.SELECT_NAME);
			strList.add(DomainConstants.SELECT_TYPE);
			strList.add(DomainConstants.SELECT_ID);
			strList.add(selectable);

			String sWhere = "from[Root Questionnaire].attribute[Responsible Question Type]=='" + action + "'";

			MapList mlOrganization = DomainObject.findObjects(context, "Change Template", null, sWhere, (StringList)strList);

			Map returnMap = new HashMap();
			Iterator itrPersons = mlOrganization.iterator();
			while (itrPersons.hasNext()) {
				Map mapPerson = (HashMap) itrPersons.next();
				String person = (String) mapPerson.get(DomainConstants.SELECT_NAME);
				returnMap.put(person, person);
			}

			return returnMap;
		}
		catch (Exception ex) {
			throw new MatrixException(ex);
		}
	}// end of method

	public String getQuestionBasedOnChangeTemplate(Context context, String[] args) throws Exception {

		try {
			String objId = args[0];
			String strCO = "";
			StringBuffer select = new StringBuffer("to[");
			select.append("Change Instance");
			select.append("].from.name");

			DomainObject dmObj = DomainObject.newInstance(context);
			dmObj.setId(objId);

			strCO = dmObj.getInfo(context, select.substring(0));
			return strCO;

		}
		catch (Exception e) {
			throw new FrameworkException(e);
		}

	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String preProcessGetConfigureQuestion(Context context, String args[]) throws FrameworkException {
		try {
			Map programMap = (HashMap) JPO.unpackArgs(args);
			String action[] = (String[]) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strObjectId[] = (String[]) programMap.get(QuestionnaireConstants.OBJECTID);
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "preProcessGetConfigureQuestion", action[0], strObjectId[0]);
		}
		catch (Exception e) {
			throw new FrameworkException(e);
		}
	}

	public Map<String, List<String>> getRangeForCategoryValue(Context context, String args[]) throws Exception {
		try {
			String strYes = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.Yes");
			String strNo = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
					"enoQuestionnaire.Range.No");
			Map mAttRanges = getAttributeRanges(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_CATEGORY);
			StringList fieldRangeValues = (StringList) mAttRanges.get("field_choices");
			StringList fieldDisplayRangeValues = (StringList) mAttRanges.get("field_display_choices");

			fieldRangeValues.remove("Conditional");
			fieldDisplayRangeValues.remove("Conditional");
			// List<String> slResponseDisplay = new StringList();
			// slResponseDisplay.add("Decision");
			// slResponseDisplay.add("Descriptive");
			// List<String> slResponse = new StringList();
			// slResponse.add("Decision");
			// slResponse.add("Descriptive");
			Map<String, List<String>> rangeMap = new HashMap<String, List<String>>();
			rangeMap.put(QuestionnaireConstants.FIELD_CHOICES, fieldRangeValues);
			rangeMap.put(QuestionnaireConstants.FIELD_DISPLAY_CHOICES, fieldDisplayRangeValues);

			return rangeMap;
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String refresh(Context context, String args[]) throws FrameworkException {
		try {
			Map programMap = (HashMap) JPO.unpackArgs(args);
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshPageAndClose");
		}
		catch (Exception e) {
			throw new FrameworkException(e);
		}
	}



	public List<String> getQuestionRangeColumnValues(Context context, String args[]) throws Exception {
		try {
			String strResponse = DomainConstants.EMPTY_STRING;
			String strAttrQuestionRangeValues = PropertyUtil.getSchemaProperty(context,
					QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_VALUES);
			List<String> lRangeList = new StringList();
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			List<Map> mlObjectList = (List<Map>) programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map<?, ?> mParamList = (Map<?, ?>) programMap.get(QuestionnaireConstants.PARAMLIST);
			String strParentOID = (String) mParamList.get(QuestionnaireConstants.PARENT_OID);
			QuestionService questionService = new QuestionServiceImpl();
			List<TableRowId> tableRowIdList = new ArrayList<TableRowId>();
			for (Map map : mlObjectList) {
				String strObjectId = (String) map.get(DomainConstants.SELECT_ID);
				DomainObject dobj=DomainObject.newInstance(context,strObjectId);
				if(dobj.isKindOf(context, "Question"))
				{
					lRangeList.add(dobj.getAttributeValue(context, strAttrQuestionRangeValues));
				}
				else{
					lRangeList.add(DomainConstants.EMPTY_STRING);
				}
			}

			return lRangeList;
		}
		catch (Exception e) {
			throw new Exception(e);
		}

	}

	//public List<Boolean> checkEditAccessForQuestionRangeValues(Context context, String[] args) throws Exception {
	public StringList checkEditAccessForQuestionRangeValues(Context context, String[] args) throws Exception {
		try {
			List<String> list = new StringList();
			Map<?, ?> paramMap = (Map<?, ?>) JPO.unpackArgs(args);
			List<Map> mobjectList = (List<Map>) paramMap.get(QuestionnaireConstants.OBJECTLIST);
			String strTypeQuestion = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Question);
			String strAttrQuestionRangeType = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_TYPE);
			boolean isEditActionReqd = false;
			for (Map mObjectMap : mobjectList) {
				isEditActionReqd = false;
				String strObjectId = (String) mObjectMap.get(DomainConstants.SELECT_ID);
				if (!UIUtil.isNullOrEmpty(strObjectId)) {
					DomainObject dobj = DomainObject.newInstance(context, strObjectId);
					if (dobj.isKindOf(context, strTypeQuestion)) {
						String strRangeType = dobj.getAttributeValue(context, strAttrQuestionRangeType);
						if (strRangeType.equals("Textbox") || strRangeType.equals("TextArea"))
							isEditActionReqd = false;
						else
							isEditActionReqd = true;
					}
				}
				list.add(String.valueOf(isEditActionReqd));
			}
			return (StringList)list;
		}
		catch (FrameworkException e) {
			throw new Exception(e);
		}
		catch (Exception e) {
			throw new Exception(e);
		}

	}

	public void updateQuestionInputType(Context context, String args[]) throws Exception {
		try {
			String strAttrQuestionRangeType = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_TYPE);
			String strAttrQuestionRangeValue = PropertyUtil.getSchemaProperty(context,
					QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_VALUES);
			QuestionService questionService = new QuestionServiceImpl();
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.PARAMMAP);
			Map<?, ?> requestMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.REQUESTMAP);
			String strInputType = (String) paramMap.get(QuestionnaireConstants.NEW_VALUE);
			String strQuestionId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);
			DomainObject dobjQues = DomainObject.newInstance(context, strQuestionId);
			dobjQues.setAttributeValue(context, strAttrQuestionRangeType, strInputType);
			if (strInputType.equals("Textbox") || strInputType.equals("TextArea"))
				dobjQues.setAttributeValue(context, strAttrQuestionRangeValue, "");

		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}

	public void updateQuestionInputValue(Context context, String args[]) throws Exception {
		try {
			QuestionService questionService = new QuestionServiceImpl();
			String strAttrQuestionRangeType = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_TYPE);
			String strAttrQuestionRangeValue = PropertyUtil.getSchemaProperty(context,
					QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_VALUES);
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.PARAMMAP);
			Map<?, ?> requestMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.REQUESTMAP);
			String strName = (String) paramMap.get(QuestionnaireConstants.NEW_VALUE);
			String strQuestionId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);
			DomainObject dobjQues = DomainObject.newInstance(context, strQuestionId);
			String ResponseRangeType = dobjQues.getAttributeValue(context, strAttrQuestionRangeType);
			if (!ResponseRangeType.equals("Textbox") && !ResponseRangeType.equals("TextArea") && UIUtil.isNullOrEmpty(strName)) {
				String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
						"enoQuestionnaire.Alert.Msg.RangeValueRequired");
				throw new Exception(strMessage);
			}
			String arrValues[];
			if(strName.contains("|"))
			{
				int count = strName.length() - strName.replace("|", "").length()+1;
				arrValues= strName.split("\\|");
				
				if(arrValues.length<count)
					arrValues= Arrays.copyOf(arrValues, count);
				
				boolean boolFlag=false;
				
				for(int i=0;i<arrValues.length;i++)
				{
					if(UIUtil.isNullOrEmpty(arrValues[i]))
					{
						boolFlag=true;
						break;
					}
				}
				if(arrValues.length==0 || boolFlag)
				{
					String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
							"enoQuestionnaire.Alert.Msg.RangeValueCannotBeBlank");
					throw new Exception(strMessage);
				}
			}
			dobjQues.setAttributeValue(context, strAttrQuestionRangeValue, strName);

		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String doPromoteDemote(Context context, String args[]) throws Exception
	{
		Map<?, ?> programMap = JPO.unpackArgs(args);
		String[] objectId=(String[])programMap.get("objectId");
		String[] action=(String[])programMap.get("action");
		return QuestionUtil.encodeFunctionForJavaScript(context, false, "doPromoteDemote",objectId[0],action[0]);

	}

	public HashMap preProcessCheckForEdit(Context context, String[] args) throws Exception {
		try {
			HashMap returnMap = new HashMap();
			HashMap inputMap = (HashMap) JPO.unpackArgs(args);
			HashMap paramMap = (HashMap) inputMap.get("paramMap");
			HashMap tableData = (HashMap) inputMap.get("tableData");
			MapList objectList = (MapList) tableData.get("ObjectList");
			String strObjectId = (String) paramMap.get("objectId");
			HashMap requestMap = (HashMap) tableData.get("RequestMap");
			String strAction = (String) requestMap.get(QuestionnaireConstants.QUESTION_MODE);
			boolean bEdit = checkConfigureAccess(context, strObjectId, strAction);

			if (bEdit) {
				returnMap = new HashMap(2);
				returnMap.put("Action", "Continue");
				returnMap.put("ObjectList", objectList);
			}
			else {
					returnMap = new HashMap(3);
					returnMap.put("Action", "Stop");
					returnMap.put("Message", "enoQuestionnaire.Message.UserNotAuthorised");
					returnMap.put("ObjectList", objectList);
				}

			return returnMap;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public boolean checkChangeOrderConfigureAccess(Context context, String[] args) throws Exception {
		try {
			HashMap inputMap = (HashMap) JPO.unpackArgs(args);
			String strObjectId = (String) inputMap.get("objectId");
			String strAction = (String) inputMap.get(QuestionnaireConstants.QUESTION_MODE);
			boolean bEdit = checkConfigureAccess(context, strObjectId, strAction);
			return bEdit;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	private boolean checkConfigureAccess(Context context, String strObjectId, String strAction) throws Exception {
		try {
			QuestionService questionService = new QuestionServiceImpl();
			String strPolicyFormalChange = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_FORMAL_CHANGE);
			String strPolicyChangeRequest = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_CHANGE_REQUEST);
			String relChangeOrder = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_ORDER);
			String typeChangeRequest = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_REQUEST);
			String strPolicyStateInApproval = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyFormalChange,
					QuestionnaireConstants.SYMBOLIC_STATE_IN_APPROVAL);
			String strPolicyStateEvaluate = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, typeChangeRequest,
					QuestionnaireConstants.SYMBOLIC_STATE_EVALUATE);
			DomainObject dobj = new DomainObject(strObjectId);
			boolean bEdit = true;
			String state = dobj.getInfo(context, DomainConstants.SELECT_CURRENT);
			if (dobj.isKindOf(context, PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_ORDER))) {

				List<String> slObjectSelect = new StringList();
				slObjectSelect.add("to[" + relChangeOrder + "].from[" + typeChangeRequest + "].id");
				MapList mlCOInfo = DomainObject.getInfo(context, new String[] { strObjectId }, (StringList)slObjectSelect);
				Map mCOInfo = (Map) mlCOInfo.get(0);
				String changeRequest = (String) mCOInfo.get("to[" + relChangeOrder + "].from[" + typeChangeRequest + "].id");
				if (PolicyUtil.checkState(context, strObjectId, strPolicyStateInApproval, PolicyUtil.GE)
						|| UIUtil.isNotNullAndNotEmpty(changeRequest))
					bEdit = false;
			}
			if (dobj.isKindOf(context, PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_REQUEST))) {
				if (!state.equalsIgnoreCase(strPolicyStateEvaluate)) {
					bEdit = false;
				}
			}
			String strKeyProperty = "enoQuestionnaire.Component." + strAction + ".";

			List<Map<String, String>> mlQuestionPropertyList = QuestionUtil.getQuestionnaireProperty(context, strAction);
			String strEntireDecisionMaking = DomainConstants.EMPTY_STRING;
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				strEntireDecisionMaking = dataMap.get(strKeyProperty + "SubmitOnce");
			}
			if (UIUtil.isNotNullAndNotEmpty(strEntireDecisionMaking) && "true".equalsIgnoreCase(strEntireDecisionMaking)) {
				if (questionService.checkAllQuestionSubmitted(context, strObjectId, strAction)) {
					bEdit = false;
				}
			}

			return bEdit;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public boolean checkAccessOnSubmitQuestionToolbar(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get("objectId");

			String strAction = (String) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strKeyProperty = "enoQuestionnaire.Component." + strAction + ".";
			List<Map<String, String>> mlQuestionPropertyList = QuestionUtil.getQuestionnaireProperty(context, strAction);
			String strProgramName = DomainConstants.EMPTY_STRING;
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				strProgramName = dataMap.get(strKeyProperty + "checkAccessProgramForSubmitQuestion");
			}

			if (!UIUtil.isNotNullAndNotEmpty(strProgramName))
				return true;

			StringList programInfo = FrameworkUtil.split(strProgramName, ":");
			String programName = (String) programInfo.get(0);
			String methodName = (String) programInfo.get(1);
			boolean show = JPO.invoke(context, programName, null, methodName, args, Boolean.class);

			return show;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public boolean checkAccessOnQuestionToolbar(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get("objectId");

			String strAction = (String) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strKeyProperty = "enoQuestionnaire.Component." + strAction + ".";
			List<Map<String, String>> mlQuestionPropertyList = QuestionUtil.getQuestionnaireProperty(context, strAction);
			String strProgramName = DomainConstants.EMPTY_STRING;
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				strProgramName = dataMap.get(strKeyProperty + "CheckAccessProgram");
			}

			if (!UIUtil.isNotNullAndNotEmpty(strProgramName))
				return true;

			StringList programInfo = FrameworkUtil.split(strProgramName, ":");
			String programName = (String) programInfo.get(0);
			String methodName = (String) programInfo.get(1);
			boolean show = JPO.invoke(context, programName, null, methodName, args, Boolean.class);

			return show;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public boolean accessOnQuestionToolbarForChangeTemplate(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get("objectId");
			String strTypeImpactQuesTemplate = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_IMPACT_QUESTIONNAIRE_TEMPLATE);
			String strChangeTempType = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_TEMPLATE);
			String strChangeTempPolicy = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_CHANGE_TEMPLATE);
			String strStateInactive = PropertyUtil.getSchemaProperty(context, "policy", strChangeTempPolicy, "state_Inactive");

			DomainObject domObj = DomainObject.newInstance(context, strObjectId);
			String strType = domObj.getInfo(context, DomainObject.SELECT_TYPE);
			String strCurrent = domObj.getInfo(context, DomainObject.SELECT_CURRENT);

			if ((strType.equals(strChangeTempType) && strCurrent.equals(strStateInactive))
					|| (strType.equals(strTypeImpactQuesTemplate) && strCurrent.equals(strStateInactive)))
				return true;
			else
				return false;

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public boolean checkEditAccessOnQuestion(Context context, String args[]) throws Exception {
		try {
			Map programMap = JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get("objectId");
			QuestionService questionService = new QuestionServiceImpl();
			String strTypeChnageTemplate=PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_TEMPLATE);
			String strTypeImpactQuestionnaireTemplate=PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_IMPACT_QUESTIONNAIRE_TEMPLATE);
			List<String> slType = new StringList();
			slType.add(strTypeImpactQuestionnaireTemplate);
			slType.add(strTypeChnageTemplate);
			Map mParentObject = questionService.getTempatesForQuestion(context, strObjectId, (StringList)slType);
			String strType=(String) mParentObject.get(DomainConstants.SELECT_TYPE);
			String strCurrentState = (String) mParentObject.get(DomainConstants.SELECT_CURRENT);
			if (strTypeChnageTemplate.equals(strType) || strTypeImpactQuestionnaireTemplate.equals(strType)) {
				if (!strCurrentState.equals("Inactive")) {
					return false;
				}
				else
					return true;
			}
			else
				return true;
			
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public boolean checkCOConnectedToCROrCT(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get("objectId");
			String strRelChgangeInstance = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_RELATIONSHIP_CHANGE_INSTANCE);
			String relChangeOrder = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_ORDER);
			String typeChangeRequest = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_REQUEST);

			List<String> slObjectSelect = new StringList();
			slObjectSelect.add(DomainConstants.SELECT_CURRENT);
			slObjectSelect.add("to[" + strRelChgangeInstance + "].from.id");
			slObjectSelect.add("to[" + relChangeOrder + "].from[" + typeChangeRequest + "].id");

			MapList mlCOInfo = DomainObject.getInfo(context, new String[] { strObjectId }, (StringList)slObjectSelect);
			Map mCOInfo = (Map) mlCOInfo.get(0);
			String strChangeTemplateId = (String) mCOInfo.get("to[" + strRelChgangeInstance + "].from.id");
			String changeRequest = (String) mCOInfo.get("to[" + relChangeOrder + "].from[" + typeChangeRequest + "].id");
			// Not required 
			//if (UIUtil.isNotNullAndNotEmpty(changeRequest))
			//	return false;
			if (UIUtil.isNotNullAndNotEmpty(strChangeTemplateId))
				return true;

			return false;
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}

	public boolean checkCRConnected(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			String relChangeOrder = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_ORDER);
			String typeChangeRequest = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_REQUEST);

			List<String> slObjectSelect = new StringList();
			slObjectSelect.add(DomainConstants.SELECT_CURRENT);
			slObjectSelect.add("to[" + relChangeOrder + "].from[" + typeChangeRequest + "].id");

			MapList mlCOInfo = DomainObject.getInfo(context, new String[] { strObjectId }, (StringList)slObjectSelect);
			String changeRequest="";
			if(mlCOInfo!=null && mlCOInfo.size()>0)
			{
			Map mCOInfo = (Map) mlCOInfo.get(0);
			 changeRequest = (String) mCOInfo.get("to[" + relChangeOrder + "].from[" + typeChangeRequest + "].id");
			}
			if (UIUtil.isNotNullAndNotEmpty(changeRequest))
				return true;
			return false;
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}

	public boolean checkAccessForQuestionnaire(Context context, String[] args) throws Exception {
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			DomainObject dObj = DomainObject.newInstance(context, strObjectId);
			String strImpQuestPolicy = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM);
			String strPolicy = dObj.getInfo(context, DomainObject.SELECT_POLICY);
			if (strImpQuestPolicy.equals(strPolicy)) {
			QuestionService questionService = new QuestionServiceImpl();
			String eFormTemplateId = DomainObject.newInstance(context, strObjectId).getInfo(context, "from[eForm Template].to.id");
			List<Map> mListRelatedQuestions = questionService.getQuestionRelatedObjects(context, eFormTemplateId, "Question", (short) 1, "", "");
				if (mListRelatedQuestions == null || mListRelatedQuestions.isEmpty())
				return false;
			else
				return true;
			}
			else
				return false;

		}

		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String submitQuestionResponseMediator(Context context, String[] args) throws Exception {
		Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
		String strObjectId[] = (String[]) programMap.get("objectId");
		String strAction[] = (String[]) programMap.get(QuestionnaireConstants.QUESTION_MODE);
		
		return QuestionUtil.encodeFunctionForJavaScript(context, false, "redirectSubmitConfiguredQuestions",strObjectId[0],strAction[0]);
	}
	
	public StringList getCategoryValue(Context context, String[] args) throws Exception {
		List<String> retList=new StringList();
		Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
		List<Map> mobjectList = (MapList) programMap.get(QuestionnaireConstants.OBJECTLIST);
		
		String ATTRIBUTE_QUESTION_CATEGORY=PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_CATEGORY);
		StringList slAttributeRange = FrameworkUtil.getRanges(context, ATTRIBUTE_QUESTION_CATEGORY);
		StringList slI18Val=i18nNow.getAttrRangeI18NStringList(ATTRIBUTE_QUESTION_CATEGORY, slAttributeRange, context.getSession().getLanguage());
		
		for (Map mEForm : mobjectList) {
			DomainObject obj=DomainObject.newInstance(context,(String)mEForm.get("id"));
			String strVal=obj.getAttributeValue(context, ATTRIBUTE_QUESTION_CATEGORY);
			if (UIUtil.isNotNullAndNotEmpty(strVal))
				retList.add((String) slI18Val.get(slAttributeRange.indexOf(strVal)));
			else
				retList.add("");

		}
		
		return (StringList)retList;
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String preProcessImportQuestions(Context context, String[] args) throws Exception 
	{
		
		Map programMap = JPO.unpackArgs(args);
		
		String objectId=(String)programMap.get("objectId");
		
		DomainObject dObj=DomainObject.newInstance(context,objectId);
		String parentType=dObj.getInfo(context, DomainConstants.SELECT_TYPE);
		
		if(parentType.equals(PropertyUtil.getSchemaProperty(context,QuestionnaireConstants.SYMBOLIC_TYPE_EFORM)))
		{
			return JPO.invoke(context, "ENOImpactQuestionnaireBase", args,"preProcessImportQuestions", args, String.class);
		}
		
		final String QUESTION_RESPONSE_YES="Yes";
		final String QUESTION_RESPONSE_NO="No";
		final String QUESTION_RESPONSE_UNKNOWN="Unknown";
		
		final String QUESTION_TYPE="Question";
		
		final String QUESTION_CATEGORY_DESCRIPTIVE="Decision";
		final String QUESTION_CATEGORY_DECISION="Descriptive";
		
		final String QUESTION_STATE_ACTIVE="Active";
		final String QUESTION_STATE_INACTIVE="Inactive";
		String strTypeQuestion = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Question);
		
		com.matrixone.apps.common.Person person = (com.matrixone.apps.common.Person) DomainObject.newInstance(context,
				DomainConstants.TYPE_PERSON);
		
		String invalidCharactersStr = EnoviaResourceBundle.getProperty(context, "emxFramework.Javascript.NameBadChars");
		invalidCharactersStr = invalidCharactersStr.replaceAll("\\s+", "");
		StringBuffer invalidCharacters = new StringBuffer(invalidCharactersStr);
		
		List<String> slErrorList = new StringList();

		
		boolean headerCorrected = false;
		
		String header = "yes";
		
		String delimiterName = "comma";
		char delimiter;
		String blankLine = null;
		if (delimiterName.equals("comma")) {
			delimiter = ',';
			blankLine = ",,,,,,,";
		}
		else {
			delimiter = '\t';
			blankLine = "\t\t\t\t\t\t\t";
		}

		boolean errors = false;
		
		File inputFile = (File) programMap.get("FilePath");
															
		String fileName = null;
		List<Map> mlImportQuestions = new MapList();
		HashMap validUserMap = new HashMap();
		MapList errorList = null;
		if (inputFile == null) {
			fileName = (String) programMap.get("fileName");
			mlImportQuestions = (MapList) programMap.get("importList");
			errorList = new MapList();
		}
		else {
			fileName = inputFile.getName();
			if (!fileName.endsWith(".csv")) {
				
			}
			if (inputFile.length() == 0) {

			}

			String AcceptLanguage = context.getLocale().toString();
		}
		
		String curLine="";
		
		String fileEncodeType = "iso-8859-1";
		FileInputStream fis = new FileInputStream(inputFile);
		int lineCount = fis.read();
		if (lineCount == -1) {
			String message = "Invalid File";
			throw new Exception(message);
		}
		InputStreamReader isr = new InputStreamReader(fis, fileEncodeType);
		BufferedReader myInput = new BufferedReader(isr);

		if (header.equals("yes")) {
			curLine = myInput.readLine();
		}

		int curLineCount=1;
		while ((curLine = myInput.readLine()) != null) 
		{
			curLineCount++;
			
			HashMap mpQuestion = new HashMap();
			
			if (curLine.equals(blankLine) || "".equals(curLine.trim())) {
			
				mpQuestion.put("DESCRIPTION", "");
				mpQuestion.put("RESPONSE", "");
				mpQuestion.put("SEQUENCE ORDER","");
				mpQuestion.put("COMMENT", "");
				mpQuestion.put("STATE", "");
				mpQuestion.put("CATEGORY", "");
				continue;
			}
			
			
			String arrColumns[]=curLine.split(",");
			
			String strMessage="";
			
			if(arrColumns.length<6)
			{
				strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotImportQuestions.InvalidType",
						new String[] {curLineCount+""}, null, context.getLocale(),
						QuestionnaireConstants.QUESTION_STRING_RESOURCE);
				return "alert(\""+strMessage+"\");top.close()";
			}
			
			
			mpQuestion.put("DESCRIPTION", arrColumns[0]);
			
			
			
			String quesResponse=arrColumns[1];
			if("".equals(quesResponse) || QUESTION_RESPONSE_YES.equals(quesResponse) || QUESTION_RESPONSE_NO.equals(quesResponse) || QUESTION_RESPONSE_UNKNOWN.equals(quesResponse))
			{
				mpQuestion.put("RESPONSE",quesResponse);
			}
			else
			{
				strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotImportQuestions.InvalidQuestionResponse",
						new String[] {curLineCount+""}, null, context.getLocale(),
						QuestionnaireConstants.QUESTION_STRING_RESOURCE);
				return "alert(\""+strMessage+"\");top.close()";
			}
			
			int level;
			
			String strLevel=arrColumns[2];
			strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotImportQuestions.InvalidQuestionLevel",
					new String[] {curLineCount+""}, null, context.getLocale(),
					QuestionnaireConstants.QUESTION_STRING_RESOURCE);
			
			if(!"".equals(strLevel))
			{
				if(strLevel.contains("."))
				{
					mpQuestion.put("SEQUENCE ORDER", strLevel);
				}
				else
				{
					try
					{
						level=Integer.parseInt(arrColumns[2]);
						mpQuestion.put("SEQUENCE ORDER", level+"" );
					}
					catch(Exception ex)
					{
						return "alert(\""+strMessage+"\");top.close()";
					}
				}
			}
			else
			{
				return "alert(\""+strMessage+"\");top.close()";
			}
			
			mpQuestion.put("COMMENT", arrColumns[3]);
			String quesState=arrColumns[4];
			if("".equals(quesState) || !QUESTION_STATE_ACTIVE.equalsIgnoreCase(quesState) && !QUESTION_STATE_INACTIVE.equalsIgnoreCase(quesState))
			{
				strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotImportQuestions.InvalidQuestionState",
						new String[] {curLineCount+""}, null, context.getLocale(),
						QuestionnaireConstants.QUESTION_STRING_RESOURCE);
				return "alert(\""+strMessage+"\");top.close()";
			}
			mpQuestion.put("STATE",quesState );
			
			String quesCategory;
			if(arrColumns.length<6)
				quesCategory="";
			else
				quesCategory=arrColumns[5];
			
			if(!"".equals(quesCategory) && (!QUESTION_CATEGORY_DECISION.equalsIgnoreCase(quesCategory) && !QUESTION_CATEGORY_DESCRIPTIVE.equalsIgnoreCase(quesCategory)))
			{
				strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotImportQuestions.InvalidQuestionCategory",
						new String[] {curLineCount+""}, null, context.getLocale(),
						QuestionnaireConstants.QUESTION_STRING_RESOURCE);
				return "alert(\""+strMessage+"\");top.close()";
			}
			mpQuestion.put("CATEGORY",quesCategory );
			mpQuestion.put("TYPE",strTypeQuestion );
			mlImportQuestions.add(mpQuestion);
		}
		return importQuestions(context,objectId, mlImportQuestions);
	}
	
	
	private String importQuestions(Context context, String objectid, List<Map> mlImport) throws Exception
	{
		String strTypeRouteTemplate = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_RouteTemplate);
		String strTypePerson = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Person);
		
		QuestionService questionService= new QuestionServiceImpl();
	
		DomainObject domObj=DomainObject.newInstance(context,objectid);
		
		List lsQuestions=new ArrayList();
		Iterator itr=mlImport.iterator();
		
		String prevQuesId="";
		for(Map mpQuestion : mlImport)
		{
			Map<?,?> mNewObj = (Map<?,?>)mpQuestion;
			
			String strQuestionDescription=(String)mpQuestion.get("DESCRIPTION");
			String strQuestionComment=(String)mpQuestion.get("COMMENT");
			//String strName=(String)mpQuestion.get("NAME");
			String strQuesResponse=(String)mpQuestion.get("RESPONSE");
			String strCategory=(String)mpQuestion.get("CATEGORY");
			String strLevel=(String)mpQuestion.get("SEQUENCE ORDER");
			
			String strType=(String)mpQuestion.get("TYPE");
			
			if(strTypePerson.equals(strType) || strTypeRouteTemplate.equals(strType))
				lsQuestions.add(strType+"|"+strQuesResponse+"|"+strLevel+"|"+strQuestionDescription);
			else
			{
				TableRowId rowId = new TableRowId("", "" ,objectid, strLevel);
				
				QuestionServiceImpl questionServiceImpl=new QuestionServiceImpl();
				Question question =questionServiceImpl.new Question(rowId, strQuestionDescription, "", strQuesResponse,strQuestionComment,strCategory);
				lsQuestions.add(question);
			}
		}
		try
		{
			questionService.createImportQuestion(context,objectid, lsQuestions,"Approval");
		}
		catch(Exception ex)
		{
			//String alertMsg=EnoviaResourceBundle.getProperty(context, "enoQuestionnaireStringResource", context.getLocale(),ex.getMessage());
			return "alert(\""+ex.getMessage()+"\");top.close()";
		}
		
		return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshFrameAfterImport");
		
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String exportQuestions(Context context,String[] args) throws Exception
	{
		Map programMap = JPO.unpackArgs(args);
		String objectid=((String[])programMap.get("objectId"))[0];
		String csrfTokenName=((String[])programMap.get("csrfTokenName"))[0];
		String csrfToken=((String[])programMap.get(csrfTokenName))[0];
		
		DomainObject dObj=DomainObject.newInstance(context,objectid);
		String parentType=dObj.getInfo(context, DomainConstants.SELECT_TYPE);
		
		if(parentType.equals(PropertyUtil.getSchemaProperty(context,QuestionnaireConstants.SYMBOLIC_TYPE_EFORM)))
		{
			return JPO.invoke(context, "ENOImpactQuestionnaireBase", args,"exportQuestions", args, String.class);
		}
		
		QuestionService questionService= new QuestionServiceImpl();
		MapList mlQuestion = questionService.getQuestion(context, objectid, "Approval", "All", "Questionnaire");
		
		ArrayList arrLevels=new ArrayList();
		
		processQuestionMapList(context,mlQuestion,arrLevels);
		String timestamp=writeExportQuestionFile(context,getWellFormedQuestionMapList(mlQuestion,arrLevels));
		
		return QuestionUtil.encodeFunctionForJavaScript(context, false, "redirectExportToDownloadServlet",timestamp,csrfTokenName,csrfToken);
	}
	
	private MapList getWellFormedQuestionMapList(MapList mlQuestion,ArrayList arrLevel)
	{
		MapList retMapList=new MapList();
		Iterator itr=mlQuestion.iterator();
		int i=0;
		while(itr.hasNext())
		{
			Map<?,?> mpQuestion=(Map<?,?>)itr.next();
			
			Map<String,String> mpPut=new HashMap<String,String>();
			
			mpPut.put("DESCRIPTION", (String)mpQuestion.get("description"));
			mpPut.put("QUESTION RESPONSE", (String)mpQuestion.get("attribute[Question Response].value"));
			mpPut.put("COMMENT", (String)mpQuestion.get("attribute[Comment]"));
			mpPut.put("CATEGORY", (String)mpQuestion.get("attribute[Question Category]"));
			mpPut.put("STATE", (String)mpQuestion.get("current"));
			mpPut.put("SEQUENCE ORDER", (String)arrLevel.get(i++));
			retMapList.add(mpPut);
		}
		return retMapList;
		
	}
	
	
	private List<Map<?, ?>> processQuestionMapList(Context context, List<Map<?, ?>> mlQuestion,ArrayList arrLevels) {
		Iterator itr=mlQuestion.iterator();
		
		int prevLevel=0,curLevel=0;
		MapList mlQuestionToRemove=new MapList();
		boolean flag=false;
		
		for(Map<?,?> mpObj:mlQuestion)
		{
			curLevel=Integer.parseInt(mpObj.get("level").toString());
			if((!mpObj.get("type").equals("Question")&& !flag )|| (!mpObj.get("type").equals("Question") && prevLevel==curLevel))
			{
				prevLevel=curLevel;
				flag=true;
				//continue;
			}
			if(flag )//&& curLevel>prevLevel)
			{
				mlQuestionToRemove.add(mpObj);
			}
			if(curLevel<=prevLevel)
				flag=false;
		}
		for(int i=0;i<mlQuestionToRemove.size();i++)
		{
			mlQuestion.remove(mlQuestionToRemove.get(i));
		}
		
		
		getHierarchyLevelFromMapList(context, mlQuestion, 0,arrLevels,"");

		return mlQuestion;
	}

	private int getHierarchyLevelFromMapList(Context context,List<Map<?, ?>> mlQuestion ,int startIndex,ArrayList outLevels,String strLevel)
	{
		ArrayList<Integer> arrIndex=new ArrayList<Integer>();
		int i=0;
		
		for(i=startIndex;i<mlQuestion.size();i++)
		{
			Map<?,?> mpElem=mlQuestion.get(i);
			Map<?,?> mpNextElem;
			while(!mpElem.get("type").equals("Question") && i<mlQuestion.size()-1){
				mpElem=mlQuestion.get(++i);
			}
			int curLevel=Integer.parseInt((String)mpElem.get("level"));
			int nextLevel=curLevel;
			
			int j=i+1;
			if(j<=mlQuestion.size()-1)
			{
				mpNextElem=mlQuestion.get(j);
				
				while(!mpNextElem.get("type").equals("Question") && j<mlQuestion.size()-1){
					mpNextElem=mlQuestion.get(++j);
				}
				nextLevel=Integer.parseInt((String)mpNextElem.get("level"));
			}
			/*else
				nextLevel=curLevel-1;			//setting nextLevel less than curlevel so that sorting will happen on current set.
			*/
			
			
			//arrIndex.add(i);
			outLevels.add(strLevel+("".equals(strLevel)?"":".")+(String)mlQuestion.get(i).get("attribute[Sequence Order].value"));
			String tmpLevel=strLevel+("".equals(strLevel)?"":".")+(String)mlQuestion.get(i).get("attribute[Sequence Order].value");
			if(curLevel<nextLevel)		//Current Element has children
			{
				int temp=i;
				i=getHierarchyLevelFromMapList(context, mlQuestion, i+1,outLevels,tmpLevel);
				
				if(i<=mlQuestion.size()-1)
				{
					j=i+1;
					mpElem=mlQuestion.get(temp);
					mpNextElem=mlQuestion.get(j);
					
					while(!mpNextElem.get("type").equals("Question") && j<mlQuestion.size()){
						mpNextElem=mlQuestion.get(++j);
					}
					
					curLevel=Integer.parseInt((String)mpElem.get("level"));
					nextLevel=Integer.parseInt((String)mpNextElem.get("level"));
				}
				
			}
			
			if(curLevel>nextLevel)
				return i;
				
		}
		
		return i;
	}
	
	private String writeExportQuestionFile(Context context, MapList questions) throws Exception
	{
		
		String serverFolder = Environment.getValue(context, "MATRIXINSTALL");
		String strPath = serverFolder+File.separator+context.getWorkspacePath();
		
		String fileName=EnoviaResourceBundle.getProperty(context, "enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Export.QuestionExportFileName");

		File outFile=null;

		String timestamp=""+new Date().getTime();
		String tempFileName=fileName;
		
		outFile=new File(strPath,fileName+"-"+timestamp+".csv");
		if(outFile.exists())
			outFile.delete();
		
		PrintWriter out = new PrintWriter(new FileOutputStream(outFile));
		try
		{

			Iterator itr=questions.iterator();
			StringBuilder line=new StringBuilder("Description,Response,Sequence Order,Comment,State,Category");
			out.println(line);

			while(itr.hasNext())
			{
				Map<?,?> mpQuestion=(Map<?,?>)itr.next();
				line=new StringBuilder("");
				line.append(mpQuestion.get("DESCRIPTION"));
				line.append(",");
				line.append(mpQuestion.get("QUESTION RESPONSE"));
				line.append(",");
				line.append(mpQuestion.get("SEQUENCE ORDER"));
				line.append(",");
				line.append(mpQuestion.get("COMMENT"));
				line.append(",");
				line.append(mpQuestion.get("STATE"));
				line.append(",");
				line.append(mpQuestion.get("CATEGORY"));
				
				out.println(line);
			}
		}
		catch(Exception ex)
		{
			throw ex;
		}
		finally
		{
			out.close();
		}
		return timestamp;
	}

	
/*
 * 
 * J&J UI Enhancements
 * 
 */
	
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public StringList getLifeCycleColumnIndentedTable(Context context, String[] args) throws Exception
	{
		List<String> retList=new StringList();
		Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
		List<Map> mobjectList = (MapList) programMap.get("objectList");
		
		for(Map mp:mobjectList)
		{
			String objectId=(String)mp.get("id");
			DomainObject dom=DomainObject.newInstance(context,objectId);
			String currentState=dom.getInfo(context, DomainConstants.SELECT_CURRENT);
			
			String buttonStyle=	"background-color: #3c98cf;"+
								"background-image: linear-gradient(to bottom, #3c98cf, #42a2da); "+
								"border-color: #3d6680; "+
								"color: #ffffff;"+
								"margin-left: 5px; "+
								"padding: 0 12px;";
			retList.add("<div><button style=\""+buttonStyle+"\" type=\"button\" onmouseover=\"javascript:showLifeCycleDiv('"+objectId+
					"',event)\" onmouseout=\"javascript:hideLifeCycleDiv(event)\">"+currentState+"</button></div>");
		}
		return (StringList)retList;
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String getFieldLifecycleGraph(final Context context, String[] args) throws Exception {
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			Map fieldMap;
			
			String floatView="false";
			String objId; 
			String parentId="";
			if(programMap.containsKey("floatView"))
			{
				floatView=((String[]) programMap.get("floatView"))[0];
				objId = ((String[]) programMap.get("objectId"))[0];
			}
			else
			{
				Map paramMap = (HashMap) programMap.get("paramMap");
				objId = (String) paramMap.get("objectId");
			}
			parentId=objId;
			
			String hiddenFrame="";
			
			if("true".equals(floatView))
				hiddenFrame="hiddenFrame";
			else
				hiddenFrame="formViewHidden";
			
			List<String> strListSelects=new StringList();
			
			strListSelects.add(DomainConstants.SELECT_NAME);
			strListSelects.add(DomainConstants.SELECT_ID);
			
			String showBlockingCondtions="false";
			String promoteBlockingConditionField="";
			String demoteBlockingConditionField="";
			String fieldName="";
			
			boolean includeJS=true;
			
			if(programMap.containsKey("fieldMap"))
			{
				fieldMap=(HashMap)programMap.get("fieldMap");
				HashMap mpSettings=((HashMap) fieldMap.get("settings"));
				
				if(mpSettings.containsKey("objectId"))
				{
					objId = mpSettings.get("objectId").toString();
				}
				if(mpSettings.containsKey("IncludeJS"))
				{
					includeJS = mpSettings.get("IncludeJS").toString().equals("true")?true:false;
				}
				if(mpSettings.containsKey("Show Blocking Conditions"))
				{
					showBlockingCondtions=mpSettings.get("Show Blocking Conditions").toString();
					promoteBlockingConditionField=(String)fieldMap.get("name")+"_PromoteConditions";
					demoteBlockingConditionField=(String)fieldMap.get("name")+"_DemoteConditions";
					fieldName=(String)fieldMap.get("name");
				}
			}
			
			final LifeCyclePolicyDetails lifecycleDetails = new LifeCyclePolicyDetails();
			final String sAdHocRouteName = EnoviaResourceBundle.getProperty(context, "emxFramework.Lifecycle.AdHocRouteName");

			HashMap policyDetails;
			try {
			  policyDetails = lifecycleDetails.getPolicyDetails(context, objId, sAdHocRouteName, context.getLocale().getLanguage());
			}
			catch (Exception e) {
			  throw new MatrixException(e);
			}
			policyDetails.put("PFmode", "false");
			final LifeCycleTablePresentation tblPres = new LifeCycleTablePresentation();
			final ArrayList<?>[] htmlTableCells = tblPres.generateTableForPresentation(policyDetails, objId);
			StringBuilder htmlField =new StringBuilder();
			
			htmlField.append("<center><table class=\"lifecycle\">");
			
			if (htmlTableCells != null) {
			  ArrayList<?> eachRow = null;

				DomainObject dobj = DomainObject.newInstance(context, objId);
				String state = dobj.getInfo(context, DomainConstants.SELECT_CURRENT);
				String policy = dobj.getInfo(context, DomainConstants.SELECT_POLICY);
				StateList stateList = dobj.getStates(context);
				ArrayList listStates = new ArrayList();
				ArrayList listStatesI18 = new ArrayList();
				State stState = null;
				for (Iterator itrStates = stateList.iterator(); itrStates.hasNext();) {
					stState = (State) itrStates.next();
					listStates.add(stState.getName());
					String strKey="emxFramework.State."+policy.replace(" ", "_")+"."+stState.getName().replace(" ", "_");
					
					String i18State=EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource",context.getLocale(),strKey);
					if(UIUtil.isNotNullAndNotEmpty(i18State) && !strKey.equals(i18State))
						listStatesI18.add(i18State);
					else
						listStatesI18.add(stState.getName());
				}
				
				int nIndexOfState = listStates.indexOf(state);
				String strPreviousStateName = "";
				String strNextStateName = "";
				if (nIndexOfState < listStates.size()-1)
					strNextStateName = (String) listStates.get(nIndexOfState + 1);

				if (nIndexOfState > 0)
					strPreviousStateName = (String) listStates.get(nIndexOfState - 1);

				String background = "#e6e7e8 ";
				
			  for (int i = 0; i < htmlTableCells.length; i++) {
			    eachRow = htmlTableCells[i];
			    htmlField.append("<tr>");

			    for (int j = 0; j < eachRow.size(); j += 3) {
						String image1 = ((HtmlRenderable) eachRow.get(j)).renderImage(38, 30);
						String image2 = ((HtmlRenderable) eachRow.get(j + 1)).renderImage(90, 26);
						String image3 = ((HtmlRenderable) eachRow.get(j + 2)).renderImage(22, 26);
						
						String padding="<td style=\"padding: 0; margin: 0;\"";
						image1=image1.replace("<td",padding);
						image2=image2.replace("<td", padding);
						image3=image3.replace("<td", padding);
						
						htmlField.append(image1);
						String S1 = "";
						
						if (image2.contains("title")) {
							S1 = image2.substring(0, image2.indexOf(">") + 1);
							String stateNameDisplay = image2.substring(image2.indexOf(">") + 1, image2.indexOf("</"));
							String strTemp=image2.substring(image2.indexOf("title=\"")+7);
							String stateNameActual = strTemp.substring(0, strTemp.indexOf("\""));
							
							stateNameActual=listStates.get(listStatesI18.indexOf(stateNameActual)).toString();
							
							stateNameDisplay=XSSUtil.encodeForHTML(context, stateNameDisplay);
							
							StringBuilder sb = new StringBuilder();
							
							String action="";
							boolean hasAccess=false;
							
							if(UIUtil.isNotNullAndNotEmpty(strPreviousStateName) && stateNameActual.contains(strPreviousStateName))
							{
								action="demote";
								hasAccess=dobj.checkAccess(context, (short) AccessConstants.cDemote);
							}
							else if(UIUtil.isNotNullAndNotEmpty(strNextStateName) && stateNameActual.contains(strNextStateName))
							{
								action="promote";

								hasAccess=dobj.checkAccess(context, (short) AccessConstants.cPromote);
							}
							
							sb.append("<a href='../questionnaire/enoQuestionnaireExecute.jsp?questionAction=ENOQuestionUI:actionPromoteDemote&objectId="+objId+"&action="+action+"&validateToken=false&floatView="+floatView+"&parentId="+parentId+"' target=\""+hiddenFrame+"\">");
							
							if (hasAccess && ((UIUtil.isNotNullAndNotEmpty(strPreviousStateName) && stateNameActual.contains(strPreviousStateName))
									|| UIUtil.isNotNullAndNotEmpty(strNextStateName) && stateNameActual.contains(strNextStateName))) {
								S1 += sb.toString()+"<div id=\'" + stateNameActual + "\' style=\"border:none; color: #288fd1; background : "+ background + "\" >";
								S1 += stateNameDisplay+"</div>";
							}
							else
								S1 += stateNameDisplay;
							String S3 = image2.substring(image2.indexOf("</"), image2.indexOf("d>") + 2);
							S1 += S3;
							image2 = S1;
						}
						htmlField.append(image2);
						htmlField.append(image3);
			    }
			    htmlField.append("</tr>");

			  }
			}

			htmlField.append("</table></center>");
			
			if((UIUtil.isNullOrEmpty(floatView) || floatView.equals("false")) && showBlockingCondtions.equals("true"))
			{
				String hideCondition=EnoviaResourceBundle.getProperty(context, "enoQuestionnaireStringResource", context.getLocale(),"Questionnaire.ChangeView.Label.HideConditions");
				String showCondition=EnoviaResourceBundle.getProperty(context, "enoQuestionnaireStringResource", context.getLocale(),"Questionnaire.ChangeView.Label.ShowBlockingConditions");
				
				//Map blockCond=getPromoteBlockingConditions(context,args);
				//showCondition=showCondition.concat("("+blockCond.get("count").toString()+")");
				
				htmlField.append("<center>");
				htmlField.append("<div id='lifecycleWrapperDiv' style='margin-top: 8px;'>");
				String jsFunctionCall="toggleBlockingView(this,'"+promoteBlockingConditionField+"','"+demoteBlockingConditionField+"','"+XSSUtil.encodeForJavaScript(context, hideCondition)+"','"+XSSUtil.encodeForJavaScript(context, showCondition)+"');";
			    htmlField.append("<a id='lifecycleWrapperShowHide_"+fieldName+"' toggle=\"false\" onclick=\"javascript:"+jsFunctionCall+"\" label=\""+showCondition+"\">"+showCondition+"</a>");
			    
			    if(includeJS)
			    {
			    	htmlField.append("<script type=\"text/javascript\" language=\"javascript\" src=\"../questionnaire/enoQuestionnaireChangeView.js\">\n</script>");
			    }
			    
			    htmlField.append("</div>");
			    htmlField.append("</center>");
			    
			    htmlField.append("<tr id=\"calc_"+promoteBlockingConditionField+"\" style=\"display: none\">");
			    htmlField.append("<td class=\"label\" width=\"150\">Promote Conditions</td>");
			    htmlField.append("<td class=\"field\" colspan=\"4\" id=\"calc_td_"+promoteBlockingConditionField+"\">");
			    
			    //htmlField.append(blockCond.get("html"));
			    htmlField.append("<script type=\"text/javascript\" language=\"javascript\">getPromoteConditions('"+objId+"','calc_td_"+promoteBlockingConditionField+"','lifecycleWrapperShowHide_"+fieldName+"');</script>");
			    htmlField.append("</td>");
			    htmlField.append("</tr>");
			    
			    htmlField.append("<tr id=\"calc_"+demoteBlockingConditionField+"\" style=\"display: none\">");
			    htmlField.append("<td class=\"label\" width=\"150\">Demote Conditions</td>");
			    htmlField.append("<td class=\"field\" colspan=\"4\" id=\"calc_td_"+demoteBlockingConditionField+"\">");
			    //blockCond=getDemoteBlockingConditions(context,args);
			    //htmlField.append(blockCond.get("html"));
			    htmlField.append("<script type=\"text/javascript\" language=\"javascript\">getDemoteConditions('"+objId+"','calc_td_"+demoteBlockingConditionField+"');</script>");
			    htmlField.append("</td>");
			    htmlField.append("</tr>");
			    
			}
			if(UIUtil.isNotNullAndNotEmpty(floatView) && floatView.equals("true"))
				htmlField.insert(0, "Ajax$");
			
			return htmlField.toString();
		}
		catch (Exception e) {
			ClientTaskList listNotices = context.getClientTasks();
			ClientTaskItr itrNotices = new ClientTaskItr(listNotices);
			throw new Exception(e);
		}

	  }
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public MapList renderFormForRelatedItems(Context context, String args[]) throws Exception { 
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			
			Map requestMap = (Map) programMap.get("requestMap");
			String strObjectId = (String) requestMap.get(QuestionnaireConstants.OBJECTID);
			String suiteKey=(String) requestMap.get("suiteKey");
			
			if (UIUtil.isNullOrEmpty(strObjectId)) {
				strObjectId = (String) requestMap.get(QuestionnaireConstants.OBJECTID);
			}
			DomainObject dom=DomainObject.newInstance(context,strObjectId);
			
			String strConnectedRel = (String) requestMap.get("connectedRelationship");
			String strConnectedSectionHeaders = (String) requestMap.get("connectedSectionHeader");
			
			StringList slRelationships=null;
			StringList slTypes=null;
			StringList slHeaders=null;
			
			if(strConnectedRel!=null && !strConnectedRel.isEmpty())
				slRelationships=FrameworkUtil.split(strConnectedRel, "|");
			
			if(strConnectedSectionHeaders!=null && !strConnectedSectionHeaders.isEmpty())
				slHeaders=FrameworkUtil.split(strConnectedSectionHeaders, "|");
			
			boolean blnNoHeaders=false;
			
			if(slHeaders==null || slHeaders.isEmpty())
				blnNoHeaders=true;
			
			List<String> strListSelects=new StringList();
			
			strListSelects.add(DomainConstants.SELECT_NAME);
			strListSelects.add(DomainConstants.SELECT_ID);
			strListSelects.add(DomainConstants.SELECT_TYPE);
			
			StringBuilder sBuff=new StringBuilder();
			
			MapList customerAttFields = new MapList();
			HashMap fieldMap;
			
			if(slRelationships==null || slRelationships.isEmpty())
				return customerAttFields;
			
			int cnt=0;
			
			for(Object strRel:slRelationships)
			{
				StringList relInfo=FrameworkUtil.split(strRel.toString(), ":");
				
				String strRelName=PropertyUtil.getSchemaProperty(context,relInfo.get(0).toString());
				String strRelWithoutUS=relInfo.get(0).toString().replace("_", "");
				
				boolean relTo=relInfo.get(1).toString().equals("to");
				boolean relFrom=relInfo.get(1).toString().equals("from");
				
				String typePattern=PropertyUtil.getSchemaProperty(context,relInfo.get(2).toString());
				
				MapList relatedObjects=dom.getRelatedObjects(context, strRelName.toString(), // relPattern
						typePattern, // String typePattern
						(StringList)strListSelects, // List<String> objectSelects,
						null, // List<String> relationShipselect,
						relTo, // boolean getTo,
						relFrom, // boolean getFrom,
						(short) 1, // short recurseToLevel,
						null, // String objectWhere,
						null, // String relationshipWhere,
						0); // int limit
				
				sBuff=new StringBuilder();
				
				String header="";
				
				if(!blnNoHeaders)
					header=slHeaders.get(cnt++).toString();
				else
					header=strRelName.toString();
					
				fieldMap = new HashMap<>();
				fieldMap.put("expression_businessobject", "empty");
				fieldMap.put(UICache.LABEL,header);
				fieldMap.put(UICache.NAME, "SectionHeader6");
				UIComponent.modifySetting(fieldMap, "Field Type", "Section Header");
				UIComponent.modifySetting(fieldMap, "Registered Suite", suiteKey);
				UIComponent.modifySetting(fieldMap, "Section Level", "1");
				customerAttFields.add(fieldMap);
				
				if(relatedObjects==null || relatedObjects.size()==0)
				{
					fieldMap = new HashMap<>();
					fieldMap.put("expression_businessobject", "empty");
					fieldMap.put(UICache.NAME, "NoObjects");
					UIComponent.modifySetting(fieldMap, "Hide Label", "true");
					UIComponent.modifySetting(fieldMap, "Field Type", "programHTMLOutput");
					UIComponent.modifySetting(fieldMap, "function","getConsolidatedViewLabels");
					UIComponent.modifySetting(fieldMap, "program","ENOQuestionUI");
					UIComponent.modifySetting(fieldMap, "Registered Suite", suiteKey);
					customerAttFields.add(fieldMap);
				}
				else
				{
					for(int i=0;i<relatedObjects.size();i++)
					{
						String relObjId=((Map)relatedObjects.get(i)).get(DomainConstants.SELECT_ID).toString();
						
						fieldMap = new HashMap<>();
						fieldMap.put("expression_businessobject", "empty");
						fieldMap.put(UICache.NAME, strRelWithoutUS+"_Label_"+i);
						UIComponent.modifySetting(fieldMap, "Hide Label", "true");
						UIComponent.modifySetting(fieldMap, "Field Type", "programHTMLOutput");
						UIComponent.modifySetting(fieldMap, "function","getConsolidatedViewLabels");
						UIComponent.modifySetting(fieldMap, "program","ENOQuestionUI");
						UIComponent.modifySetting(fieldMap, "Registered Suite", suiteKey);
						UIComponent.modifySetting(fieldMap, "objectId",relObjId);
						customerAttFields.add(fieldMap);
						
						fieldMap = new HashMap<>();
						fieldMap.put("expression_businessobject", "current");
						fieldMap.put(UICache.LABEL,"");
						fieldMap.put(UICache.NAME, strRelWithoutUS+"_LifeCycle_"+i);
						UIComponent.modifySetting(fieldMap, "Hide Label", "true");
						UIComponent.modifySetting(fieldMap, "Field Type", "programHTMLOutput");
						UIComponent.modifySetting(fieldMap, "Registered Suite", suiteKey);
						UIComponent.modifySetting(fieldMap, "function","getFieldLifecycleGraph");
						UIComponent.modifySetting(fieldMap, "program","ENOQuestionUI");
						UIComponent.modifySetting(fieldMap, "Show Blocking Conditions","true");
						UIComponent.modifySetting(fieldMap, "IncludeJS","false");
						UIComponent.modifySetting(fieldMap, "objectId",relObjId);
						customerAttFields.add(fieldMap);
						
						if(hasApprovalTasksOnCurrentState(context, relObjId))
						{
							fieldMap = new HashMap<>();
							fieldMap.put("expression_businessobject", "empty");
							fieldMap.put(UICache.LABEL,"Questionnaire.Label.Messages");
							fieldMap.put(UICache.NAME, strRelWithoutUS+"_RelatedItems_"+i);
							UIComponent.modifySetting(fieldMap, "Field Type", "programHTMLOutput");
							UIComponent.modifySetting(fieldMap, "Registered Suite", suiteKey);
							UIComponent.modifySetting(fieldMap, "function","getApprovalTasks");
							UIComponent.modifySetting(fieldMap, "program","ENOQuestionUI");
							UIComponent.modifySetting(fieldMap, "objectId",((Map)relatedObjects.get(i)).get(DomainConstants.SELECT_ID).toString());
							customerAttFields.add(fieldMap);
						}
					}
				}
			}

			return customerAttFields;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public boolean hasApprovalTasksOnCurrentState(Context context, String args[]) throws Exception
	{	
		HashMap programMap = (HashMap) JPO.unpackArgs(args);
		String objectId=(String)programMap.get("objectId");
		
		return hasApprovalTasksOnCurrentState(context, objectId);
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String getApprovalTasksOnChange(Context context, String args[]) throws Exception
	{
		HashMap programMap = (HashMap) JPO.unpackArgs(args);
		
		Map requestMap=(HashMap)programMap.get("requestMap");
		Map fieldMap=(HashMap)programMap.get("fieldMap");
		
		String objectId=(String)requestMap.get("objectId");
		
		Map settings=(HashMap)fieldMap.get("settings");
		if(settings.containsKey("objectId"))
		{
			objectId=(String)settings.get("objectId");
			requestMap.put("objectId",(String)settings.get("objectId"));
		}
		return JPO.invoke(context, "enoECMChangeOrder", args,"getApprovalTasksOnChange", args, String.class);
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String getConsolidatedViewLabels(Context context, String args[]) throws Exception
	{
		HashMap programMap = (HashMap) JPO.unpackArgs(args);
		Map fieldMap=(HashMap)programMap.get("fieldMap");
		
		Map paramMap = (HashMap) programMap.get("paramMap");
		String objId = (String) paramMap.get("objectId");
		String strNoObj=EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"Questionnaire.ChangeView.Message.NoObjectsFound");
		
		List<String> strListSelects=new StringList();
		
		strListSelects.add(DomainConstants.SELECT_NAME);
		strListSelects.add(DomainConstants.SELECT_ID);
		
		StringBuilder sBuff=new StringBuilder();
		if(fieldMap.get("name").equals("NoObjects"))
		{
			return "<center><i>"+strNoObj+"</i></center>";
		}
		else if(fieldMap.get("name").equals("JS_Includes"))
		{
			return "<td id=\"JS_Includes\" style=\"display: none\" ><script type=\"text/javascript\" language=\"javascript\" src=\"../questionnaire/enoQuestionnaireChangeView.js\">\n</script>\n<script language=\"javascript\">hideThis();</script></td>";
		}
		else
		{
			String fieldName=fieldMap.get("name").toString();
			StringList slNames=FrameworkUtil.split(fieldName, "_");
			HashMap mpSettings=(HashMap) fieldMap.get("settings");
			
			objId =mpSettings.get("objectId").toString();
			
			StringBuilder sbScript=new StringBuilder();
			DomainObject dom=DomainObject.newInstance(context,objId);
			
			sBuff.append("<img onclick=\"javascript:toggleSectionExpand(this,'"+slNames.get(0)+"','"+slNames.get(2)+"');\" toggle=\"open\" id=\"sectionExpand_"+fieldName+"\" src=\"images/utilTreeLineNodeOpenSB.gif\" border=\"0\" align=\"top\" alt=\"\"/>&#160;");
			sBuff.append("<a href=\"javascript:showNonModalDialog('../common/emxTree.jsp?objectId=");
			sBuff.append(objId);
			sBuff.append("', '930', '650', 'true')\" >");
			sBuff.append("<b><u>");
			sBuff.append(dom.getInfo(context,DomainConstants.SELECT_NAME));
			sBuff.append("</u></b>");
			sBuff.append("</a>");
		}
		return sBuff.toString();
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String actionPromoteDemote(Context context, String args[]) throws Exception
	{
		Map<Object,Object> programMap = (Map<Object,Object>) JPO.unpackArgs(args);
		String strObjectId[] = (String[])programMap.get("objectId");
		String strParentId[] = (String[])programMap.get("parentId");
		String strAction[] = (String[])programMap.get("action");
		String strFloatView[] = (String[])programMap.get("floatView");
		
		DomainObject dom=DomainObject.newInstance(context,strObjectId[0]);
		
		String strType=dom.getInfo(context, "type");
		String frameName="";
		
		if(strType.equals("Change Order"))
			frameName="ECMMyChangeOrders";
		else if(strType.equals("Change Request"))
			frameName="ECMMyChangeRequests";
		else if(strType.equals("Change Template"))
			frameName="ECMMyChangeTemplates";
		try
		{
			if(strAction[0].equals("promote"))
			{
				LifeCycleUtil.checksToPromoteObject(context, dom);
				dom.promote(context);
			}
			else if(strAction[0].equals("demote"))
				dom.demote(context);
		
			if(strFloatView[0].equals("true"))
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshAfterPromoteDemoteForFloatView",frameName,strObjectId[0]);
			else
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshAfterPromoteDemote", "true","",strParentId[0]);
				
		}
		catch(MatrixException ex)
		{
			int errCode=0;
			String msg=ex.getMessage();
			
			Vector meMessages = ex.getMessages();
            if (meMessages != null)
            {
                ErrorMessage mxErrMsg = (ErrorMessage)meMessages.get(0);
                
                if (mxErrMsg != null)
                    errCode = mxErrMsg.getErrorCode();
            }
            
			if(errCode==1500167)			//Checked Trigger blocked the action
			{
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshAfterPromoteDemote", "false");
			}
			else
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshAfterPromoteDemote", "false",ex.getLocalizedMessage());
		}
		catch(Exception ex)
		{
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshAfterPromoteDemote", "false",ex.getLocalizedMessage());
		}
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public Map getPromoteBlockingConditionsHTML(Context context, String args[])throws Exception
	{
		Map<Object,Object> programMap = (Map<Object,Object>) JPO.unpackArgs(args);
		String strObjectId[] = (String[])programMap.get("objectId");
		
		return getPromoteDemoteBlockingConditionsHTML(context, strObjectId[0],true);
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public Map getDemoteBlockingConditionsHTML(Context context, String args[])throws Exception
	{
		Map<Object,Object> programMap = (Map<Object,Object>) JPO.unpackArgs(args);
		String strObjectId[] = (String[])programMap.get("objectId");
		
		return getPromoteDemoteBlockingConditionsHTML(context, strObjectId[0],false);
	}
	
	private Map getPromoteDemoteBlockingConditionsHTML(Context context, String strObjectId,boolean isPromote)throws Exception
	{
		final String MSG_RELATED_OBJECT_NOT_CONNECTED=EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"Questionnaire.ChangeView.Message.RelatedObjectsNotConnected");
		final String MSG_NO_BLOCKING_CONDITION=EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"Questionnaire.ChangeView.Message.NoBlockingCondition");
		final String MSG_NO_ACTION_ASSOCIATED=EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),"Questionnaire.ChangeView.Message.NoActionAssociated");
		
		final String KEY_HREF="href";
		final String KEY_PARAMS="params";
		final String KEY_LABEL="label";
		final String KEY_COMMAND_LABEL="commandLabel";
		final String KEY_SUITE_KEY="suiteKey";
		final String KEY_OBJECT_ID="objectId";
		final String KEY_TARGET="target";
		
		Map retMap=new HashMap();
		
		List<Map> slPromoteConditions= getFailedTriggerOnPromoteDemoteCheck(context,DomainObject.newInstance(context,strObjectId),isPromote);
		
		retMap.put("count", Integer.toString(slPromoteConditions.size()));
		Map mpTriggerMapping=getTriggerActionsMappingFromPageObject(context,slPromoteConditions);
		
		Iterator itrCond=slPromoteConditions.iterator();
		StringBuilder strBRet=new StringBuilder();
		strBRet.append("<table>");
		
		while(itrCond.hasNext())
		{
			strBRet.append("<tr>");
			Map mpTriggerInfo=(Map)itrCond.next();
			
			String strTriggerName=(String)mpTriggerInfo.get(DomainConstants.SELECT_NAME);
			String strTriggerRevision=(String)mpTriggerInfo.get(DomainConstants.SELECT_REVISION);
			String strTriggerDesc=(String)mpTriggerInfo.get(DomainConstants.SELECT_DESCRIPTION);;
			
			String strTriggerAction;
			String triggerKey=strTriggerName+"-"+strTriggerRevision;
			
			if(mpTriggerMapping.containsKey(triggerKey))
			{
				Map mpTriggerAction=(Map)mpTriggerMapping.get(triggerKey);
				
				String labelToDisplay="";
				Map mpParams=(Map)mpTriggerAction.get(KEY_PARAMS);
				
				if(mpParams.containsKey(KEY_LABEL))
					labelToDisplay=(String)mpParams.get(KEY_LABEL);
				else if(mpParams.containsKey(KEY_COMMAND_LABEL))
					labelToDisplay=(String)mpParams.get(KEY_COMMAND_LABEL);
				else
					labelToDisplay=triggerKey;
				
				if(mpParams.containsKey(DomainConstants.SELECT_DESCRIPTION))
					strTriggerDesc=(String)mpParams.get(DomainConstants.SELECT_DESCRIPTION);
				
				String suiteKey="";
				
				if(mpParams.containsKey(KEY_SUITE_KEY))
				{
					suiteKey=(String)mpParams.get(KEY_SUITE_KEY);
					String stringResourceFileId=EnoviaResourceBundle.getProperty(context, "eServiceSuite"+suiteKey+".StringResourceFileId");
					
					if(mpParams.containsKey("label_suiteKey"))
					{
						String labelSuiteKey=(String)mpParams.get("label_suiteKey");
						String stringResourceFileIdForLabel=EnoviaResourceBundle.getProperty(context, "eServiceSuite"+labelSuiteKey+".StringResourceFileId");
						labelToDisplay= EnoviaResourceBundle.getProperty(context, stringResourceFileIdForLabel, context.getLocale(),labelToDisplay);
					}
					else
						labelToDisplay= EnoviaResourceBundle.getProperty(context, stringResourceFileId, context.getLocale(),labelToDisplay);
					
					strTriggerDesc= EnoviaResourceBundle.getProperty(context, stringResourceFileId, context.getLocale(),strTriggerDesc);
				}
				
				labelToDisplay=XSSUtil.encodeForHTML(context, labelToDisplay);
				if(!mpTriggerAction.containsKey(KEY_HREF))
				{
					strBRet.append("<td><i title=\"\"><img src=\"../common/images/iconPending.gif\"/>&nbsp;").append(labelToDisplay).append("</i></td>");
					continue;
				}
				
				String strExp="";
				strTriggerAction=UINavigatorUtil.parseHREF(mpTriggerAction.get(KEY_HREF).toString(), "");
				strTriggerAction=substituteValuesForURL(context, strTriggerAction, strObjectId);
				
				Iterator mpActionUrlParamItr=mpParams.keySet().iterator();
				StringBuilder strQuery=new StringBuilder();
				
				Map mpParamTemp=new HashMap();
				for(;mpActionUrlParamItr.hasNext();)
				{
					String paramName=mpActionUrlParamItr.next().toString();
					mpParamTemp.put(paramName, substituteValuesForURL(context, mpParams.get(paramName).toString(), strObjectId));
					strQuery.append(paramName+"="+mpParamTemp.get(paramName)).append("&");
				}
				mpParams=mpParamTemp;
				
				if(strQuery.length()>0)
					strQuery.deleteCharAt(strQuery.length()-1);
				
				boolean flagMultiple=false;
				
				if(mpParams.containsKey(KEY_OBJECT_ID))
				{
					String objIds=(String)mpParams.get(KEY_OBJECT_ID);
					if(objIds==null || objIds.isEmpty())
					{
						strBRet.append("<td><i title=\""+MSG_RELATED_OBJECT_NOT_CONNECTED+"\"><img src=\"../common/images/iconPending.gif\"/>&nbsp;").append(labelToDisplay).append("</i></td>");
						strBRet.append("</tr>");
						continue;
					}
					if(objIds.contains("|"))
					{
						String actionURL;
						if (strTriggerAction.contains("?"))
							actionURL = strTriggerAction + "&" + strQuery.toString();
						else
							actionURL = strTriggerAction + "?" + strQuery.toString();

						actionURL=XSSUtil.encodeForURL(actionURL);
						strTriggerAction="../common/emxIndentedTable.jsp?table=ChangeDashboardActionsTable&program=ENOQuestionUI:getChangeDashboardActionTableData&objectId="+strObjectId+"&objectIds="+objIds+"&actionLabel="+labelToDisplay.replace(" ", "+")+"&actionUrl="+actionURL;
						flagMultiple=true;
					}
				}
				
				if(!flagMultiple)
				{
					if (strTriggerAction.contains("?"))
						strTriggerAction = strTriggerAction + "&" + strQuery.toString();
					else
					strTriggerAction=strTriggerAction +"?"+ strQuery.toString();
				}
				
				strBRet.append("<td><i>");
				strBRet.append("<a ");

				if(mpParams.containsKey(KEY_TARGET))
				{
					String target=(String)mpParams.get(KEY_TARGET);
					strBRet.append("href=\""+strTriggerAction+"\" target='"+target+"' ");
				}
				else
					strBRet.append("onclick=\"javascript:openActionDialogandRefreshOnClose('"+strTriggerAction+"',this);\" ");

				strBRet.append("title=\""+strTriggerDesc+"\"><img src=\"../common/images/iconPending.gif\"/>&nbsp;"+labelToDisplay+"</a>" );
						
				strBRet.append("</i></td>");
				if(UIUtil.isNotNullAndNotEmpty(strTriggerDesc))
					strBRet.append("<td>: ").append(strTriggerDesc).append("</td>");
			}
			else
				strBRet.append("<td><i title=\""+MSG_NO_ACTION_ASSOCIATED+"\"><img src=\"../common/images/iconPending.gif\"/>&nbsp;").append(triggerKey).append("</i></td>");
			
			strBRet.append("</tr>");
		}
		strBRet.append("</table>");
		
		if(slPromoteConditions.size()==0)
			strBRet=new StringBuilder(MSG_NO_BLOCKING_CONDITION);
		
		//strBRet.append("<script language=\"javascript\">getMQLNotices();</script>");
		retMap.put("html", strBRet.toString());
		
		return retMap;
	}

	private String substituteValuesForURL(Context context,String strTriggerAction, String strObjectId) throws Exception 
	{
		String startOfExp="$<";
		String endOfExp=">";
		String expr="";
		
		if(strTriggerAction.indexOf(startOfExp)>=0)
		{
			int index=0;
			String partialString=strTriggerAction;
			
			try
			{
				DomainObject domObj=DomainObject.newInstance(context,strObjectId);
				
				while(strTriggerAction.indexOf(startOfExp)>=0)
				{
					index=partialString.indexOf(startOfExp)+2;
					partialString=partialString.substring(index);
					
					expr=partialString.substring(0,partialString.indexOf(endOfExp));
					
					String symExpr=UIExpression.replaceSymbolicTokens(context, expr);
					
					StringList slIds=domObj.getInfoList(context, symExpr);
					
					String strIds="";
					if(slIds!=null && slIds.size()>0)
					{
						for(int i=0;i<slIds.size();i++)
							strIds=strIds.concat(slIds.get(i).toString()+"|");
						
						if(strIds.length()>0)
							strIds=strIds.substring(0,strIds.length()-1);
					}
					
					strTriggerAction=strTriggerAction.replace(startOfExp+expr+endOfExp, strIds);
					
					partialString=strTriggerAction;
				}
			}
			catch(Exception ex)
			{
				throw ex;
			}
			
		}
		return strTriggerAction;
	}



	public Map getTriggerActionsMappingFromPageObject(Context context,List<Map> slTriggers) throws Exception
	{
		final String DEFAULT_FILE_DEFINITION="ChangeDashboardTriggerMapping";
	
		final String KEY_TRIGGER="trigger";
		final String KEY_TRIGGER_ID="triggerId";
		final String MSG_NO_TRIGGER_DEF="No Trigger Actions def";
		
		Map mpRetTriggersActions = new HashMap<String,Object>();
		MapList listImportRelationships=new MapList();
		
		try
		{
			MQLCommand mql = new MQLCommand();
			
			mql.executeCommand(context, "print page $1 select $2 dump",DEFAULT_FILE_DEFINITION,"content");
			
			if(mql.getResult()==null || mql.getResult().isEmpty())
			{
				throw new Exception(MSG_NO_TRIGGER_DEF);
			}
			
			SAXBuilder builder = new SAXBuilder();
			Document document = builder.build(new StringReader(mql.getResult()));
			
			Element root = document.getRootElement();
		
			Iterator itr=slTriggers.iterator();
			List lstTriggerDefinition = root.getChildren(KEY_TRIGGER);
			
			for(;itr.hasNext();)			//loop for input triggers
			{
				Map mpTrigger=(Map)itr.next();
				
				String strTriggerName=(String)mpTrigger.get(DomainConstants.SELECT_NAME);
				String strTriggerRevision=(String)mpTrigger.get(DomainConstants.SELECT_REVISION);
				String strTriggerId=(String)mpTrigger.get(DomainConstants.SELECT_ID);
				
				Iterator itrTriggerDef=lstTriggerDefinition.iterator();
				
				for(;itrTriggerDef.hasNext();)		//loop for all trigger defn in page
				{
					Element elemTrigger=(Element)itrTriggerDef.next();
					String nameOfTrigger=elemTrigger.getAttributeValue(DomainConstants.SELECT_NAME);
					
					
					if(strTriggerName.equals(nameOfTrigger))
					{
						List lstRevisionElements=elemTrigger.getChildren(DomainConstants.SELECT_REVISION);
						Iterator itrRevision=lstRevisionElements.iterator();
						
						for(;itrRevision.hasNext();)		//loop for revisions of a trigger
						{
							Element elemRevision=(Element)itrRevision.next();
							String revisionOfTrigger=elemRevision.getAttributeValue(DomainConstants.SELECT_NAME);
							if(strTriggerRevision.equals(revisionOfTrigger))
							{
								Map actionMap=getActionStringForTrigger(context,elemRevision);
								actionMap.put(KEY_TRIGGER_ID, strTriggerId);
								mpRetTriggersActions.put(strTriggerName+"-"+strTriggerRevision, actionMap);
							}
						}
					}
				}
			}
			return mpRetTriggersActions;
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			throw ex;
		}
	}

	private Map getActionStringForTrigger(Context context,Element elemRevision) 
	{
		final String KEY_TRIGGER_ACTION="action";
		final String KEY_TRIGGER_ACTION_TYPE="type";
		final String KEY_TRIGGER_ACTION_HREF="href";
		final String KEY_TRIGGER_ACTION_COMMAND="command";
		final String KEY_TRIGGER_PARAMS="params";
		final String KEY_TRIGGER_PARAM="param";
		final String KEY_TRIGGER_PARAM_NAME="name";
		
		Map retMap=new HashMap();
		
		Element elemAction=elemRevision.getChild(KEY_TRIGGER_ACTION);
		String actionType=elemAction.getAttributeValue(KEY_TRIGGER_ACTION_TYPE);
		StringBuilder sbUrl=new StringBuilder();
		
		switch(actionType)
		{
			case "url":
				Element elemHref=elemAction.getChild(KEY_TRIGGER_ACTION_HREF);
				if(elemHref!=null)
					retMap.put("href", elemHref.getTextTrim());
				break;
			case "command":
				Element elemCommand=elemAction.getChild(KEY_TRIGGER_ACTION_COMMAND);
				String commandName=elemCommand.getText().trim();
				Map commandInfo=getCommandInfo(context,commandName);
				retMap=commandInfo;
				
				break;
			case "menu":
				
				break;
		}
		
		Map paramMap=new HashMap();
		Element elemParams=elemAction.getChild(KEY_TRIGGER_PARAMS);
		if(elemParams!=null)
		{
			List<Element> lstParams=elemParams.getChildren(KEY_TRIGGER_PARAM);
			if(lstParams!=null && lstParams.size()>0)
			{
				Iterator itr=lstParams.iterator();
				if(lstParams!=null && lstParams.size()>0)
				{
					for(;itr.hasNext();)
					{
						Element elemParam=(Element)itr.next();
						String text=elemParam.getText().trim();
						
						String paramName=elemParam.getAttributeValue(KEY_TRIGGER_PARAM_NAME);
						paramMap.put(paramName, text);
						
						if("label".equals(paramName))
						{
							String paramLabelSuite=elemParam.getAttributeValue("suiteKey");
							if(UIUtil.isNotNullAndNotEmpty(paramLabelSuite))
								paramMap.put("label_suiteKey", paramLabelSuite);
						}
					}
				}
			}
		}
		retMap.put(KEY_TRIGGER_PARAMS,paramMap);
		return retMap;
	}



	private Map getCommandInfo(Context context, String commandName) 
	{
		Map commandInfo=new HashMap();
		try
		{
			String commandString=MqlUtil.mqlCommand(context, "print command $1 select $2 $3 $4 dump $5", commandName,"label","href","setting[Registered Suite].value","|");
			StringList slCommandInfo=FrameworkUtil.split(commandString, "|");
			commandInfo.put("comandLabel", slCommandInfo.get(0));
			commandInfo.put("href", slCommandInfo.get(1));
			commandInfo.put("Registered Suite", slCommandInfo.get(2));
			return commandInfo;
		}
		catch(Exception ex)
		{
			return null;
		}
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public MapList getChangeDashboardActionTableData(Context context,String[] args) throws Exception
	{
		MapList mlRet=new MapList();
		
		Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
		String objectId= (String) programMap.get("objectIds");
		
		StringList slObjects=FrameworkUtil.split(objectId,"|");
		
		for(int i=0;i<slObjects.size();i++)
		{
			Map mpObject=new HashMap();
			mpObject.put("id", slObjects.get(i));
			mlRet.add(mpObject);
		}
		return mlRet;
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public List<String> getActionColumnForChangeDashboardActionTable(Context context, String args[]) throws Exception
	{
		List<String> slRet=new StringList();
		Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
		Map<?,?> paramMap = (Map<?,?>) programMap.get("paramList");
		
		String actionUrl= (String) paramMap.get("actionUrl");
		String action= (String) paramMap.get("actionLabel");
		String objectIds= (String) paramMap.get("objectIds");
		MapList objectList= (MapList) programMap.get("objectList");
		
		actionUrl=actionUrl.replaceAll("objectId="+objectIds, "");
		actionUrl=actionUrl.replaceAll("\\|", "&");
		actionUrl=actionUrl.replaceAll(" ", "");
		
		StringList slObjects=FrameworkUtil.split(objectIds,"|");
		
		for(int i=0;i<slObjects.size();i++)
		{
			String actionWithObjId=XSSUtil.encodeForJavaScript(context, actionUrl.concat("objectId="+slObjects.get(i)));
			slRet.add("<a onclick=\"javascript:showModalDialog('"+actionWithObjId+"',250,250,true);\" ><img src=\"../common/images/iconPending.gif\"/>&#160;"+action+"</a>");
			
		}
		return slRet;
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public Map getPromoteBlockingConditions(Context context, String args[])throws Exception
	{
		Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
		Map<String,Object> paramMap= (Map<String,Object>) programMap.get("paramMap");
		Map fieldMap;
				
		String strObjectId= (String)paramMap.get("objectId");
		
		if(programMap.containsKey("fieldMap"))
		{
			paramMap=(HashMap)programMap.get("paramMap");
			strObjectId=(String)paramMap.get("objectId");
			fieldMap=(HashMap)programMap.get("fieldMap");
		}
		else
		{
			fieldMap=programMap;
			strObjectId = (String) fieldMap.get("objectId");
		}
		
		Map settingsMap=(Map)fieldMap.get("settings");
		if(settingsMap.containsKey("objectId"))
		{
			strObjectId = (String)settingsMap.get("objectId");
		}
		return getPromoteDemoteBlockingConditionsHTML(context,strObjectId,true);
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public Map getDemoteBlockingConditions(Context context, String args[])throws Exception
	{
		Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
		Map<String,Object> paramMap= (Map<String,Object>) programMap.get("paramMap");
		Map fieldMap;
				
		String strObjectId= (String)paramMap.get("objectId");
		
		if(programMap.containsKey("fieldMap"))
		{
			paramMap=(HashMap)programMap.get("paramMap");
			strObjectId=(String)paramMap.get("objectId");
			fieldMap=(HashMap)programMap.get("fieldMap");
		}
		else
		{
			fieldMap=programMap;
			strObjectId = (String) fieldMap.get("objectId");
		}
		
		Map settingsMap=(Map)fieldMap.get("settings");
		if(settingsMap.containsKey("objectId"))
		{
			strObjectId = (String)settingsMap.get("objectId");
		}
		return getPromoteDemoteBlockingConditionsHTML(context,strObjectId,false);
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	private List<Map> getFailedTriggerOnPromoteDemoteCheck(Context context,final DomainObject objDom, final boolean onPromote) throws Exception 
	{
		List<Map> retMapList=new MapList();
		
		String objectId=objDom.getId(context);
		MapList mpTriggers=getPromoteDemoteCheckTriggers(context,objectId,onPromote);//=JPO.invoke(context, "emxTriggerValidation", args,"getCheckTriggers", args, MapList.class);
		
		List<String> slSelects=new StringList();
		slSelects.add(DomainConstants.SELECT_NAME);
		slSelects.add(DomainConstants.SELECT_REVISION);
		slSelects.add(DomainConstants.SELECT_DESCRIPTION);
		slSelects.add(DomainConstants.SELECT_ID);
		
		Iterator itr=mpTriggers.iterator();
		while(itr.hasNext())
		{
			Map mpTrigger=(Map)itr.next();
			String id=objectId+"|"+(String)mpTrigger.get("id");
			String[] methodArgs = JPO.packArgs(id);
			
			String strJPOResults = (String) JPO.invoke(context,"emxTriggerValidationResults",new String[1],"executeTriggers",methodArgs,String.class);
						
			if(!strJPOResults.startsWith("Pass~"))
			{
				DomainObject domTrigger=DomainObject.newInstance(context,(String)mpTrigger.get("id"));
				
				Map triggerInfo=domTrigger.getInfo(context, (StringList)slSelects);
				
				retMapList.add(triggerInfo);
			}
		}	    
	    return retMapList;
	}

	public MapList getPromoteDemoteCheckTriggers(Context context, String objectId, boolean isPromote) throws Exception
    {
		String  triggerAction=isPromote?"PromoteCheck:":"DemoteCheck:";
		
        MapList mapTriggerObjects = new MapList();
        String strTrigger = "";
        String strNamePattern = "";
        String strTypePattern = FrameworkUtil.getAliasForAdmin(context,"type","type_eService_Trigger_Program_Parameters",true);
        List<String> strTriggerList = new StringList();
        List<String> objectSelect = new StringList();
        objectSelect.add(DomainConstants.SELECT_ID);
        objectSelect.add(DomainConstants.SELECT_TYPE);
        
        String strCurrent;
        String strPolicy;
        String strCommand = "";
        
        DomainObject domainObj = DomainObject.newInstance(context,objectId);

        List<String> infoSelect = new StringList();
        infoSelect.add(DomainConstants.SELECT_CURRENT);
        infoSelect.add(DomainConstants.SELECT_POLICY);
        
        Map objInfoMap = domainObj.getInfo(context,(StringList)infoSelect);
        
        strCurrent = (String) objInfoMap.get("current");
        strPolicy = (String) objInfoMap.get("policy");
 
        strCurrent = domainObj.getInfo(context,DomainConstants.SELECT_CURRENT);
        strPolicy = domainObj.getInfo(context,DomainConstants.SELECT_POLICY);

        String result = MqlUtil.mqlCommand(context, "print policy $1 select $2 dump $3",strPolicy,"state[" + strCurrent + "].trigger","|");
        if(UIUtil.isNotNullAndNotEmpty(result))
        {
            StringList triggerList = FrameworkUtil.split(result.trim(),"|");

            for(int j=0;j<triggerList.size();j++)
            {
                strTrigger =(String) triggerList.get(j);
                int index = strTrigger.indexOf(triggerAction);
                if(index!=-1)
                {
                    strTriggerList.add(strTrigger.substring(strTrigger.indexOf("(",index)+1,strTrigger.indexOf(")")));
                }
            }

            MapList mapTemp = new MapList();
            for(int j=0;j<strTriggerList.size();j++)
            {
                strNamePattern = (String)strTriggerList.get(j);
                if(strNamePattern.indexOf(" ")>0)
                {
                    strNamePattern = strNamePattern.replaceAll(" ",",");
                }
                mapTemp.addAll(DomainObject.findObjects(context,strTypePattern,strNamePattern,"*","*",null,DomainConstants.SELECT_CURRENT+"==Active",false,(StringList)objectSelect));
            }
            
            return mapTemp;
        }
        return mapTriggerObjects;
    }
	
	public Vector getChangeTemplateQuestionActionsColumn(Context context, String[] args) throws Exception
	{
		Vector vActions = new Vector();
        try
        {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            MapList objectList = (MapList)programMap.get("objectList");
            Map paramList      = (Map)programMap.get("paramList");

            String mode=(String)paramList.get("mode");
            StringBuffer strActionURL = null;
            String objectId    = (String)paramList.get("parentOID");
            Map objectMap      = null;

            String objectType = "";
            String oidsArray[] = new String[objectList.size()];
            for (int i = 0; i < objectList.size(); i++)
            {
               try
               {
                   oidsArray[i] = (String)((HashMap)objectList.get(i)).get("id");
               }
               catch (Exception ex)
               {
                   oidsArray[i] = (String)((Hashtable)objectList.get(i)).get("id");
               }
            }

            StringList selects = new StringList(10);
            selects.add(CommonDocument.SELECT_TYPE);
            selects.add(CommonDocument.SELECT_ID);

            List<Map> mlist = DomainObject.getInfo(context, oidsArray, selects);
           
            int i=0;
            for(Map mpObj: mlist)
            {
            	StringBuilder strBuf=new StringBuilder();
            	//Map mpObj=(Map)mItr.next();
            	
            	String relId="";//(String)((Hashtable)objectList.get(i)).get("id[connection]");
            	String levelId="";//(String)((Hashtable)objectList.get(i)).get("id[level]");
            	String parentId="";//(String)((Hashtable)objectList.get(i)).get("id[parent]");
            	
            	try
            	{
            		relId=(String)((Hashtable)objectList.get(i)).get("id[connection]");
                	levelId=(String)((Hashtable)objectList.get(i)).get("id[level]");
                	parentId=(String)((Hashtable)objectList.get(i)).get("id[parent]");
            	}
            	catch(Exception e)
            	{
            		relId=(String)((HashMap)objectList.get(i)).get("id[connection]");
                	levelId=(String)((HashMap)objectList.get(i)).get("id[level]");
                	parentId=(String)((HashMap)objectList.get(i)).get("id[parent]");
            	}
            	String emxTableRowId=relId+"|"+mpObj.get("id")+"|"+parentId+"|"+levelId;
            	String url="";
            	
                if(mpObj.get(DomainObject.SELECT_TYPE).equals(DomainConstants.TYPE_QUESTION))
                {
                	
                	strBuf.append("<a onclick=\"javascript:insertRowQuickAction('"+levelId  +"');\">");
                    strBuf.append("<img border='0' src='../common/images/iconActionCreateObject.gif' alt=\"Insert New Row Below\" title=\"Insert New Row Below\"/>");
                	strBuf.append("</a>&#160;");
                	
                	url="../questionnaire/enoQuestionnaireExecute.jsp?questionAction=ENOQuestionUI:preProcessCopyExistingQuestions&amp;validateToken=false&amp;configKey=Approval&amp;objectId="+objectId+"&amp;emxTableRowId="+emxTableRowId+"&amp;mode="+mode;
                	
                	strBuf.append("<a href=\"javascript:emxTableColumnLinkClick('");
                    strBuf.append(url);
                    strBuf.append("','730','450','true','listHidden')\">");
                    strBuf.append("<img border='0' src='../common/images/iconActionCopy.gif' alt=\"Copy\" title=\"Copy\"/>");
                	strBuf.append("</a>&#160;");
                	
                	url="../questionnaire/enoQuestionnaireExecute.jsp?questionAction=ENOQuestionUI:preProcessAssignRelatedObjects&amp;validateToken=false&amp;configKey=Approval&amp;objectId="+objectId+"&amp;emxTableRowId="+emxTableRowId+"&amp;mode="+mode;
                	
                	strBuf.append("<a href=\"javascript:emxTableColumnLinkClick('");
                    strBuf.append(url);
                    strBuf.append("','730','450','true','listHidden')\">");
                    strBuf.append("<img border='0' src='../common/images/iconSmallAssignee.gif' alt=\"Assign\" title=\"Assign\"/>");
                	strBuf.append("</a>&#160;");
                	
                	url="../questionnaire/enoQuestionnaireExecute.jsp?questionAction=ENOQuestionnaireAdminActions:deleteQuestions&amp;configKey=Approval&amp;validateToken=false&amp;objectId="+objectId+"&amp;emxTableRowId="+emxTableRowId+"&amp;mode="+mode;
                	
                	strBuf.append("<a href=\"javascript:emxTableColumnLinkClick('");
                    strBuf.append(url);
                    strBuf.append("','730','450','true','listHidden')\">");
                    strBuf.append("<img border='0' src='../common/images/iconActionDelete.gif' alt=\"Delete\" title=\"Delete\"/>");
                	strBuf.append("</a>&#160;");
                	
                }
                else if(!objectId.equals(mpObj.get("id")))
                {
                	url="../questionnaire/enoQuestionnaireExecute.jsp?questionAction=ENOQuestionUI:disconnectObjects&amp;quickAction=true&amp;validateToken=false&amp;configKey=Approval&amp;objectId="+objectId+"&amp;emxTableRowId="+emxTableRowId+"&amp;mode="+mode;
                	strBuf.append("<a href=\"javascript:emxTableColumnLinkClick('");
                    strBuf.append(url);
                    strBuf.append("','730','450','true','listHidden')\">");
                    strBuf.append("<img border='0' src='../common/images/iconActionRemove.gif' alt=\"Disconnect\" title=\"Disconnect\"/>");
                	strBuf.append("</a>&#160;");
                }
                vActions.add(strBuf.toString());
                i++;
            }
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            throw ex;
        }
        return(vActions);
	}
	
	public boolean showChangeRequestColumn(Context context, String[] args) throws Exception
	{
		Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
		
		String strShowChangeDashboard=EnoviaResourceBundle.getProperty(context,"enoQuestionnaire.Component.Approval.ChangeDashboard");
		
		if(programMap.containsKey("showType") && "true".equals(strShowChangeDashboard))
			return true;
		else
			return false;
	}
	
	public boolean	checkForEditModeForLifecycleView(Context context, String args[]) throws Exception
	{
		Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
		String mode=(String)programMap.get("mode");
		String strShowChangeDashboard=EnoviaResourceBundle.getProperty(context,"enoQuestionnaire.Component.Approval.ChangeDashboard");
		
		return ("view".equals(mode) && "true".equals(strShowChangeDashboard));
	}
		
	public boolean	checkIfChangeDashboardViewTrue(Context context, String args[]) throws Exception
	{
		String strShowChangeDashboard=EnoviaResourceBundle.getProperty(context,"enoQuestionnaire.Component.Approval.ChangeDashboard");
		return "true".equals(strShowChangeDashboard);
	}
	
	public boolean	checkIfFloatLifecycleViewTrue(Context context, String args[]) throws Exception
	{
		String strShowFloatingLifecycleView=EnoviaResourceBundle.getProperty(context,"enoQuestionnaire.Component.Approval.FloatingLifecycleView");
		return "true".equals(strShowFloatingLifecycleView);
	}
	
	public boolean	checkIfFloatLifecycleViewFalse(Context context, String args[]) throws Exception
	{
		String strShowFloatingLifecycleView=EnoviaResourceBundle.getProperty(context,"enoQuestionnaire.Component.Approval.FloatingLifecycleView");
		return "false".equals(strShowFloatingLifecycleView);
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getConditionalAttributeList(Context context, String args[]) throws Exception {
		try {

			String strTypeQuestion = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Question);
			String strRelQuestion = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_relationship_Question);
			
			Map programMap = (Map) JPO.unpackArgs(args);
			String strAction = (String) programMap.get(QuestionnaireConstants.QUESTION_ACTION);
			String questionIds=(String) programMap.get("questionIds");
			
			String strMode = (String) programMap.get("mode");
			
			if(UIUtil.isNullOrEmpty(strMode))
				strMode=QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
			
			DomainObject domObj=DomainObject.newInstance(context,questionIds);
			String strType=domObj.getInfo(context, DomainObject.SELECT_TYPE);
			
			MapList mlRelatedAttributes = new MapList();
			String strKeyProperty = "enoQuestionnaire.Component." + strAction + ".";
			List<Map<String, String>> mlQuestionPropertyList = QuestionUtil.getQuestionnaireProperty(context, strAction);
			String strParentTemplateType = DomainConstants.EMPTY_STRING;
			List<String> slChildType = new StringList();
			for (Map<String, String> dataMap : mlQuestionPropertyList) {

				String childType = dataMap.get(strKeyProperty + "TemplateParentType");

				if (childType.contains(":")) {
					slChildType = FrameworkUtil.split(childType, ":");
				}
				else if (UIUtil.isNotNullAndNotEmpty(childType))
					slChildType.add(childType);
			}
			StringBuilder sbAllAttrData = new StringBuilder();
			for (String childTypeSymbolicName : slChildType) {
				childTypeSymbolicName = PropertyUtil.getSchemaProperty(context, childTypeSymbolicName);
				String strAllAttrData = QuestionUtil.mqlCommand(context, "print type $1 select $2 dump", true, childTypeSymbolicName, "attribute");
				sbAllAttrData.append(strAllAttrData);
				sbAllAttrData.append(",");
			}
			sbAllAttrData.deleteCharAt(sbAllAttrData.length() - 1);
			List<String> slAllAttrRows = FrameworkUtil.split(sbAllAttrData.toString(), ",");

			Set<String> stAttributes=new HashSet<String>();
			stAttributes.addAll(slAllAttrRows);
			
			QuestionServiceImpl questionServiceImpl = new QuestionServiceImpl();

			if(strTypeQuestion.equals(strType))
			{
				List<String> slObjectSelect=new StringList();
				slObjectSelect.add(DomainObject.SELECT_NAME);
				slObjectSelect.add(DomainObject.SELECT_ID);
				
				MapList mlQuestions=new MapList();
				String objParentId=questionIds;
				
				MapList mlParentQuestions=domObj.getRelatedObjects(context, strRelQuestion,strTypeQuestion ,(StringList)slObjectSelect , null, true, false,(short) 0, "", "",0);
				
				mlQuestions.addAll(mlParentQuestions);
				MapList mlChildren=questionServiceImpl.getQuestion(context, questionIds, strAction, "0",strMode);
				mlQuestions.addAll(mlChildren);
				
				String attrSymName=domObj.getInfo(context, DomainObject.SELECT_NAME);
				String attributeName=PropertyUtil.getSchemaProperty(context, attrSymName);
				stAttributes.remove(attributeName);
				
				for(Object question:mlQuestions)
				{
					Map mpQuestion=(Map)question;
					attrSymName=(String)mpQuestion.get(DomainObject.SELECT_NAME);
					attributeName=PropertyUtil.getSchemaProperty(context, attrSymName);
					stAttributes.remove(attributeName);
				}
			}
			
			for (String attributeName : stAttributes) {

				String strAllAttrRangeData = QuestionUtil.mqlCommand(context, "print attribute $1 select $2  dump", true, attributeName, "range");
				if (UIUtil.isNotNullAndNotEmpty(strAllAttrRangeData)) {
				Map mAttribute = new HashMap();
					mAttribute.put(DomainConstants.SELECT_ID, attributeName);

				mAttribute.put("range", strAllAttrRangeData);
					if (!mlRelatedAttributes.contains(mAttribute))
						mlRelatedAttributes.add(mAttribute);
				}
			}

			return mlRelatedAttributes;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public List<String> getConditionalAttributeRangeValue(Context context, String[] args) throws Exception {

		try {
			List<String> slColumnValues = new StringList();
			Map programMap = (Map) JPO.unpackArgs(args);
			MapList mlObjList = (MapList) programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map map;
			for (Object objMap : mlObjList) {
				map = (Map) objMap;
				String strName = (String) map.get(DomainConstants.SELECT_ID);
				List<String> slAttributeRange = FrameworkUtil.getRanges(context, strName);
				StringBuilder sBuff = new StringBuilder();
				for (int i = 0; i < slAttributeRange.size(); i++) {

					String strRange = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),
							"emxFramework.Range." + strName.replaceAll(" ", "_") + "." + slAttributeRange.get(i).replaceAll(" ", "_"));
					sBuff.append(slAttributeRange.get(i) + " <br></br> ");
				}

				((StringList) slColumnValues).addElement(sBuff.toString());
			}
			return slColumnValues;
		}
		catch (Exception ex) {
			throw new Exception(ex.getLocalizedMessage());
		}

	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String createConditionalQuestions(Context context, String[] args) throws Exception {
		Map programMap = (Map) JPO.unpackArgs(args);
		String strTableRowIds[] = (String[]) programMap.get("emxTableRowId");
		String strAction[] = (String[]) programMap.get(QuestionnaireConstants.QUESTION_ACTION);
		
		String errMsg=EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(), "enoQuestionnaire.Alert.Msg.PleaseSelectItem");
		
		if(strTableRowIds==null || strTableRowIds.length==0)
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "setStructuredBrowserSubmitProgressVariable",errMsg);
			
		String strQuesId = getTableRowIds(strTableRowIds);
		List<String> slAttributeNames = FrameworkUtil.split(strQuesId, ",");

		String strObjectId[] = (String[]) programMap.get("questionIds");
		String strName = DomainObject.EMPTY_STRING;

		List<Question> lQuestionObj = new ArrayList<Question>();

		QuestionServiceImpl questionServiceImpl = new QuestionServiceImpl();
		List<String> slQuestionIds = FrameworkUtil.split(strObjectId[0], ",");
		for (String strQuestionId : slQuestionIds) {

			TableRowId rowId = new TableRowId("", "", strQuestionId, "");
			for (String strAttributeName : slAttributeNames) {
				String strQuesResponse[] = (String[]) programMap.get(strAttributeName);
				String response = DomainObject.EMPTY_STRING;
				;
				if (strQuesResponse != null)
					response = strQuesResponse[0];
				strName = FrameworkUtil.getAliasForAdmin(context, "attribute", strAttributeName, false);
				Question question = questionServiceImpl.new Question(rowId, strAttributeName, strName, response, "",
						QuestionnaireConstants.QUESTION_CATEGORY_CONDITIONAL);
				lQuestionObj.add(question);
			}
		}

		List<Question> lQuestion = questionServiceImpl.createQuestion(context, lQuestionObj, strAction[1],
				QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE);
		return QuestionUtil.encodeFunctionForJavaScript(context, false, "closeAndRefreshWindow");
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String preProcessAddConditionalAttribute(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String[] strparentOID = (String[]) programMap.get("parentOID");
			String strTableRowIds[] = (String[]) programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			String[] strAction = (String[]) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String strTypeQuestion = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Question);
			StringBuilder sbQuesId = new StringBuilder();

			StringBuilder sbType = new StringBuilder(64);
			String strKeyProperty = "enoQuestionnaire.Component." + strAction[0] + ".";
			List<Map<String, String>> mlQuestionPropertyList = QuestionUtil.getQuestionnaireProperty(context, strAction[0]);
			String strParentTemplateType = DomainConstants.EMPTY_STRING;
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				sbType.append(dataMap.get(strKeyProperty + "Type")).append(",");
				strParentTemplateType = PropertyUtil.getSchemaProperty(context, dataMap.get(strKeyProperty + "ParentTemplateType"));
			}
			sbType.deleteCharAt(sbType.length() - 1);
			String strErrorMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotAddAttributeQuestion",
					new String[] { strAction[0] }, null, context.getLocale(), QuestionnaireConstants.QUESTION_STRING_RESOURCE);
			String isFromParent = "false";
			if (strTableRowIds != null) {

				if (strTableRowIds.length > 1) {
					String msg = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
							"enoQuestionnaire.Alert.Msg.SelectSingleQuestion");

					return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", msg);

				}
				String strRowId = strTableRowIds[0];
				TableRowId tr = new TableRowId(strRowId);
				String strQuesId = tr.getObjectId();
				Map mTypeInfo = QuestionUtil.getInfo(context, strQuesId, new StringList(DomainConstants.SELECT_TYPE));
				if (!mTypeInfo.get(DomainConstants.SELECT_TYPE).toString().equals(strTypeQuestion)) {
					return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strErrorMessage);
				}
				sbQuesId.append(strQuesId);
			}
			else {
				isFromParent = "true";
				sbQuesId.append(strparentOID[0]);
			}

			String strMode[] = (String[]) programMap.get("mode");
			
			String mode="";
			if(null==strMode||(strMode!=null && strMode.length>0 && UIUtil.isNullOrEmpty(strMode[0])))
				mode=QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE;
			else
				mode=strMode[0];
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "preProcessAddConditionalAttribute", sbQuesId.toString(), strAction[0],
					mode, isFromParent);
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}
@com.matrixone.apps.framework.ui.ProgramCallable
	public Map<?, ?> reloadQuestionResponseRange(Context context, String[] args) throws Exception {
		try {
			Map resultMap = new HashMap();
			Map<?, ?> programMap = JPO.unpackArgs(args);
			Map rowValues = (Map) programMap.get("rowValues");
			Map requestMap = (Map) programMap.get("requestMap");
			String modeKey = (String) requestMap.get("mode");
			String strObjectId = (String) rowValues.get("objectId");
			if (UIUtil.isNullOrEmpty(strObjectId)) {
				strObjectId = (String) rowValues.get("parentId");
			}

			if (modeKey.equals(QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE)) {
				String relId = (String) rowValues.get("relId");
				DomainRelationship dr = DomainRelationship.newInstance(context, relId);
				MapList relInfo = dr.getInfo(context, new String[] { relId }, new StringList("from.id"));
				Map m = (Map) relInfo.get(0);
				String fromObject = (String) m.get("from.id");
				DomainObject dobj = DomainObject.newInstance(context, fromObject);
				String strParentQuestionCategory = dobj.getAttributeValue(context,
						PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_CATEGORY));
				String strName = dobj.getInfo(context, DomainObject.SELECT_NAME);
				Map mRange = getAttributeRanges(context, strName);

				StringList fieldRangeValues = (StringList) mRange.get(QuestionnaireConstants.FIELD_CHOICES);
				StringList fieldDisplayRangeValues = (StringList) mRange.get(QuestionnaireConstants.FIELD_DISPLAY_CHOICES);

				resultMap.put("RangeValues", fieldRangeValues);
				resultMap.put("RangeDisplayValue", fieldDisplayRangeValues);
			}
			else {
				String strYes = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
						"enoQuestionnaire.Range.Yes");
				String strNo = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
						"enoQuestionnaire.Range.No");
				String strUnknown = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
						"enoQuestionnaire.Range.Unknown");
				List<String> slResponseDisplay = new StringList();
				slResponseDisplay.add(strYes);
				slResponseDisplay.add(strNo);
				slResponseDisplay.add(strUnknown);
				List<String> slResponse = new StringList();
				slResponse.add(QuestionnaireConstants.YES);
				slResponse.add(QuestionnaireConstants.NO);
				slResponse.add(QuestionnaireConstants.Unknown);
				resultMap.put("RangeValues", slResponse);
				resultMap.put("RangeDisplayValue", slResponseDisplay);
			}
			return resultMap;
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}

	public boolean checkQuestionConditionalAttributeResponseColumn(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get("objectId");
			String isFromParent = (String) programMap.get("isFromParent");
			if (isFromParent.equals("true"))
				return false;
			return true;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public boolean checkAddCondionAttribute(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get("objectId");
			String mode = (String) programMap.get("mode");
			if (UIUtil.isNotNullAndNotEmpty(mode) && mode.equals(QuestionnaireConstants.MODE_CONFIGURE_CONDITIONAL_QUESTIONNAIRE))
				return true;
			return false;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public boolean checkNotCondionalAttribute(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get("objectId");
			String mode = (String) programMap.get("mode");
			if (UIUtil.isNotNullAndNotEmpty(mode) && mode.equals(QuestionnaireConstants.MODE_CONFIGURE_QUESTIONNAIRE))
				return true;
			return false;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public boolean checkViewConditionalQuestionnaire(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strAction = (String) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			MapList mlRelatedAttributes = new MapList();
			String strKeyProperty = "enoQuestionnaire.Component." + strAction + ".";
			List<Map<String, String>> mlQuestionPropertyList = QuestionUtil.getQuestionnaireProperty(context, strAction);
			List<String> slChildType = new StringList();
			for (Map<String, String> dataMap : mlQuestionPropertyList) {

				String childType = dataMap.get(strKeyProperty + "ConditionalQuestions");
				if (UIUtil.isNotNullAndNotEmpty(childType) && childType.equalsIgnoreCase("true")) {
					return true;
				}
			}
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
		return false;
	}


    private boolean hasApprovalTasksOnCurrentState(Context context,String objectId) throws Exception {
        try {
            MapList mlTableData 	= new MapList();
            DomainObject domObject  = null;
            DomainObject domRoute   = null;

            String strObjectStateName 	= null;
            String strObjectPolicyName 	= null;
            String strObjectSymbolicStateName = null;
            String strSymbolicPolicyName 	  = null;
            String strRelPattern 	= null;
            String strTypePattern 	= null;
            String strObjectWhere 	= null;
            String strRelWhere 		= null;
            List<String> slRelSelect 	= null;
            List<String> slBusSelect 	= null;
            short nRecurseToLevel 	= (short)1;
            boolean GET_TO 			= true;
            boolean GET_FROM 		= true;
            Map mapObjectInfo 		= null;
            MapList mlRoutes = null;

            final String POLICY_ROUTE_STATE_COMPLETE 		 = PropertyUtil.getSchemaProperty(context, "Policy", DomainObject.POLICY_ROUTE, "state_Complete");
            final String SELECT_ATTRIBUTE_CURRENT_ROUTE_NODE = "attribute[" + PropertyUtil.getSchemaProperty(context, "attribute_CurrentRouteNode") + "]";

            MapList mlAllObjectsInfo = new MapList();

            slBusSelect = new StringList();
            slBusSelect.add(DomainObject.SELECT_NAME);
            slBusSelect.add(DomainObject.SELECT_CURRENT);
            slBusSelect.add(DomainObject.SELECT_POLICY);
            domObject=DomainObject.newInstance(context,objectId);
            mapObjectInfo = domObject.getInfo(context,(StringList) slBusSelect);

            strObjectStateName  = (String)mapObjectInfo.get(DomainObject.SELECT_CURRENT);
            strObjectPolicyName = (String)mapObjectInfo.get(DomainObject.SELECT_POLICY);

            strObjectSymbolicStateName = FrameworkUtil.reverseLookupStateName(context, strObjectPolicyName, strObjectStateName);
            strSymbolicPolicyName = FrameworkUtil.getAliasForAdmin(context, "Policy", strObjectPolicyName, false);

            strRelPattern 	= DomainObject.RELATIONSHIP_OBJECT_ROUTE;
            strTypePattern  = DomainObject.TYPE_ROUTE;
            slRelSelect 	= new StringList();
            nRecurseToLevel = (short)1;

            slBusSelect = new StringList();
            slBusSelect.add(DomainObject.SELECT_ID);
            slBusSelect.add(DomainObject.SELECT_NAME);
            slBusSelect.add(DomainObject.SELECT_OWNER);
            slBusSelect.add(SELECT_ATTRIBUTE_CURRENT_ROUTE_NODE);
            strRelWhere    = "attribute[" + DomainObject.ATTRIBUTE_ROUTE_BASE_POLICY + "]=='" + strSymbolicPolicyName + "' && attribute[" + DomainObject.ATTRIBUTE_ROUTE_BASE_STATE + "]=='" + strObjectSymbolicStateName + "'";
            strObjectWhere = "current != '" + POLICY_ROUTE_STATE_COMPLETE + "'";

            mlRoutes = domObject.getRelatedObjects(context, strRelPattern, strTypePattern, (StringList)slBusSelect, (StringList)slRelSelect, !GET_TO, GET_FROM, nRecurseToLevel, strObjectWhere, strRelWhere);

            return !mlRoutes.isEmpty();
        }
        catch(Exception exp) {
            exp.printStackTrace();
            throw new FrameworkException(exp.getMessage());
        }
    }
    
    @com.dassault_systemes.enovia.questionnaire.ExecuteCallable
    public String getApprovalTasks(Context context, String []args) throws Exception 
    {
    	String ATTR_FIRST_NAME=PropertyUtil.getSchemaProperty(context, "attribute_FirstName");
		String ATTR_LAST_NAME=PropertyUtil.getSchemaProperty(context, "attribute_LastName");
		
		
    	HashMap programMap  = (HashMap)JPO.unpackArgs(args);
        HashMap paramMap    = (HashMap)programMap.get("paramMap");
        HashMap requestMap  = (HashMap)programMap.get("requestMap");
        String  objectId    = (String)requestMap.get("objectId");
        
        if(programMap.containsKey("fieldMap"))
        {
        	Map fieldMap=(HashMap)programMap.get("fieldMap");
        	if(fieldMap.containsKey("settings"))
        	{
        		Map settings=(HashMap)fieldMap.get("settings");
     		
        		if(settings.containsKey("objectId"))
        			objectId=(String)settings.get("objectId");
        	}
        }
		
        programMap.put("objectId", objectId);
        
        args=JPO.packArgs(programMap);
        
        //String RESOURCE_BUNDLE_ENTERPRISE_STR="emxEnterpriseChangeMgtStringResource";
        String RESOURCE_BUNDLE_QUESTIONNAIRE_STR="enoQuestionnaireStringResource";
        
        final String INFO_TYPE_ACTIVATED_TASK  = "activatedTask";
        final String INFO_STATE_COMPLETE  = PropertyUtil.getSchemaProperty(context, "policy", PropertyUtil.getSchemaProperty(context,"policy_InboxTask"), "state_Complete");
        
        MapList taskMapList = JPO.invoke(context, "emxLifecycle", args,"getCurrentTaskSignaturesOnObject", args, MapList.class);

        Map mpTaskLinksParam=new HashMap();
        mpTaskLinksParam.put("parentOID", requestMap.get("objectId"));
        mpTaskLinksParam.put("relId", requestMap.get("relId"));
        mpTaskLinksParam.put("jsTreeID", requestMap.get("jsTreeID"));
        
        String taskTreeTranslatedLink = "";
        String taskApprovalTranslatedLink = "";

        Map mapObjectInfo;String strName;String strInfoType; String taskObjectId;
        StringBuffer returnHTMLBuffer = new StringBuffer(100);
        if (taskMapList.size() > 0) {
            returnHTMLBuffer.append("<div><table><tr><td class=\"object\">");
            returnHTMLBuffer.append(EnoviaResourceBundle.getProperty(context,RESOURCE_BUNDLE_QUESTIONNAIRE_STR, context.getLocale(),"enoQuestionnaire.Label.ApprovalRequired"));
            returnHTMLBuffer.append("</td></tr><br/><tr><td>");
            returnHTMLBuffer.append(EnoviaResourceBundle.getProperty(context, RESOURCE_BUNDLE_QUESTIONNAIRE_STR, context.getLocale(),"enoQuestionnaire.Label.ApprovalMessage"));
            returnHTMLBuffer.append("</td></tr></table></div>");
        }

        String currentUser=context.getUser();
        
        boolean isExporting = (paramMap.get("reportFormat") != null);
        String taskTreeActualLink     = getTaskTreeHref(context, mpTaskLinksParam);
        String taskApprovalActualLink = getTaskApprovalHref(context);
        
        for (Iterator itrObjects = taskMapList.iterator(); itrObjects.hasNext();) {
            mapObjectInfo = (Map) itrObjects.next();
            strName = (String)mapObjectInfo.get("name");
            strInfoType = (String)mapObjectInfo.get("infoType");
            String strAssignee = (String)mapObjectInfo.get("assigneeName");
            String strAssigneeType = (String)mapObjectInfo.get("assigneeType");
            
            if (isExporting) {
                returnHTMLBuffer.append(strName);
            }
            else {
                if (INFO_TYPE_ACTIVATED_TASK.equals(strInfoType)) {
                    taskObjectId = (String)mapObjectInfo.get("taskId");
                    
                    boolean hasReadAccess=DomainObject.newInstance(context,taskObjectId).checkAccess(context, (short) AccessConstants.cRead);
                    String currentState=(String)mapObjectInfo.get("currentState");
                   if(INFO_STATE_COMPLETE.equals(currentState))
                    	continue;
                    
                    if(hasReadAccess)
                    {
	                    taskTreeTranslatedLink = FrameworkUtil.findAndReplace(taskTreeActualLink, "${OBJECT_ID}", taskObjectId);
	                    taskTreeTranslatedLink = FrameworkUtil.findAndReplace(taskTreeTranslatedLink,"${NAME}", strName);
                    }
                    else
                    	taskTreeTranslatedLink=strName;
                    
                    returnHTMLBuffer.append("</br><div><table><tr><td>");

                    returnHTMLBuffer.append(EnoviaResourceBundle.getProperty(context, RESOURCE_BUNDLE_QUESTIONNAIRE_STR, context.getLocale(),"enoQuestionnaire.Label.TaskAssigned"))
                                .append("</td><td>").append(taskTreeTranslatedLink);
                    returnHTMLBuffer.append("</td></tr><tr><td>");

                    if(strAssignee.equals(currentUser))
                    {
	                    taskApprovalTranslatedLink = FrameworkUtil.findAndReplace(taskApprovalActualLink, "${TASK_ID}", taskObjectId);
	                    taskApprovalTranslatedLink = FrameworkUtil.findAndReplace(taskApprovalTranslatedLink, "${OBJECT_ID}",(String)mapObjectInfo.get("parentObjectId"));
	                    taskApprovalTranslatedLink = FrameworkUtil.findAndReplace(taskApprovalTranslatedLink, "${STATE}",(String)mapObjectInfo.get("parentObjectState"));
	
	                    returnHTMLBuffer.append(EnoviaResourceBundle.getProperty(context, RESOURCE_BUNDLE_QUESTIONNAIRE_STR, context.getLocale(),"enoQuestionnaire.Label.ApprovalStatus"))
	                                    .append("</td><td>").append(taskApprovalTranslatedLink);
                    }
                    else
                    {
                    	String fullName="";
                    	String strTypePerson = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Person);
                    	if(strTypePerson.equals(strAssigneeType))
                    	{
                    	DomainObject assignee=PersonUtil.getPersonObject(context, strAssignee);
                    	String firstName=assignee.getInfo(context, "attribute["+ATTR_FIRST_NAME+"].value");
                    	String lastName=assignee.getInfo(context, "attribute["+ATTR_LAST_NAME+"].value");
									fullName=firstName+" "+lastName;
                    	}
                    	else
                    	{
                    		fullName=EnoviaResourceBundle.getProperty(context, "emxComponentsStringResource", context.getLocale(), "emxComponents.Task.Unassigned");
                    	}
                    	returnHTMLBuffer.append(EnoviaResourceBundle.getProperty(context, RESOURCE_BUNDLE_QUESTIONNAIRE_STR, context.getLocale(),"enoQuestionnaire.Label.Assignee"))
                        .append("</td><td>").append(fullName);
                    }
                    returnHTMLBuffer.append("</td></tr></table></div>");

                }
            }
        }
        return returnHTMLBuffer.toString();
    }

    private String getTaskTreeHref(Context context,Map paramMap)throws Exception {
        StringBuffer strTreeLink = new StringBuffer();
        strTreeLink.append("<a href=\"JavaScript:emxTableColumnLinkClick('../common/emxTree.jsp?relId=");
        strTreeLink.append((String)paramMap.get("relId"));
        strTreeLink.append("&parentOID=");
        strTreeLink.append((String)paramMap.get("parentOID"));
        strTreeLink.append("&jsTreeID=");
        strTreeLink.append((String)paramMap.get("jsTreeID"));
        strTreeLink.append("&suiteKey=Framework");
        strTreeLink.append("&emxSuiteDirectory=common");
        strTreeLink.append("&objectId=${OBJECT_ID}&taskName=${NAME}");
        strTreeLink.append("', '', '', 'true', 'popup', '')\"  class=\"object\">");
        strTreeLink.append("<img border=\"0\" src=\"images/iconSmallTask.gif\">${NAME}</a>");
        return strTreeLink.toString();
     }

    private String getTaskApprovalHref(Context context)throws Exception {
    	String RESOURCE_BUNDLE_QUESTIONNAIRE_STR="enoQuestionnaireStringResource";
        // Form the Approve link template
        StringBuffer strTaskApproveLink = new StringBuffer(64);
        strTaskApproveLink.append("<a target=\"hiddenFrame\" class=\"object\" href=\"../common/emxLifecycleApproveRejectPreProcess.jsp?emxTableRowId=${OBJECT_ID}^${STATE}^^${TASK_ID}&objectId=${OBJECT_ID}&suiteKey=Framework");
        strTaskApproveLink.append("\"><img border='0' src='../common/images/iconActionApprove.gif' />");

        strTaskApproveLink.append(EnoviaResourceBundle.getProperty(context, RESOURCE_BUNDLE_QUESTIONNAIRE_STR, context.getLocale(),"enoQuestionnaire.Label.AwaitingApproval"));
        strTaskApproveLink.append("</a>");

        return strTaskApproveLink.toString();

     }
    
 @com.dassault_systemes.enovia.questionnaire.ExecuteCallable
    public String refreshContentPage(Context context,String[] args) throws Exception
    {
    	Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
		String strOID[] = (String[]) programMap.get(QuestionnaireConstants.OBJECTID);
    	return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshContentPage",strOID[0]);
    }
 
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public Map getExportedFilePath(Context context,String[] args) throws Exception
	{
		Map<?, ?> paramMap = (Map<?, ?>) JPO.unpackArgs(args);
			
	 	String serverFolder = Environment.getValue(context, "MATRIXINSTALL");
		String workspacePath = serverFolder + File.separator + context.getWorkspacePath();
		
		String strTimeStamp =(String) paramMap.get("timestamp");
		String fileName=EnoviaResourceBundle.getProperty(context, "enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Export.QuestionExportFileName");
		fileName=new StringBuilder().append(fileName).append("-").append(strTimeStamp).append(".csv").toString();
		
		String filePath=new StringBuilder().append(workspacePath).append(File.separator).append(fileName).toString();
		
		Map retMap=new HashMap();
		retMap.put("filepath",filePath);
		retMap.put("filename",fileName);
		
	 	return retMap;
	}
 
	public boolean checkAccessCommandQuestionCreateEFormFromEFormTemplate(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get("objectId");

			String strAction = (String) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			if (null == strAction) {
				strAction = "eForm";
			}
			String strKeyProperty = "enoQuestionnaire.Component." + strAction + ".";
			List<Map<String, String>> mlQuestionPropertyList = QuestionUtil.getQuestionnaireProperty(context, strAction);
			String strProgramName = DomainConstants.EMPTY_STRING;
			for (Map<String, String> dataMap : mlQuestionPropertyList) {
				strProgramName = dataMap.get(strKeyProperty + "CreateFromTemplateAccessProgram");
}    
    
			if (!UIUtil.isNotNullAndNotEmpty(strProgramName))
				return true;

			StringList programInfo = FrameworkUtil.split(strProgramName, ":");
			String programName = (String) programInfo.get(0);
			String methodName = (String) programInfo.get(1);
			boolean show = JPO.invoke(context, programName, null, methodName, args, Boolean.class);

			return show;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
     * Method to remove Referenced Documents
     * @param context the ENOVIA <code>Context</code> object.
     * @param objectId of Document
     * @return Map of JavaScript to refresh Table
     * @throws Exception if operation fails
     * @exclude
     */
	public Map<String,String> removeReferenceDocuments(Context context, String args[]) throws Exception {
        try {
			Map<?,?> programMap = (Map<?,?>) JPO.unpackArgs(args);
            String strTableRowIds[] =  (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
            List<String> sListToRelIds = new StringList();
            for(String strRowIds:strTableRowIds)
            {
                String strRowId=strRowIds;

                TableRowId tableRowId= new TableRowId(strRowId);
                String strRelId=tableRowId.getRelationshipId();
                sListToRelIds.add(strRelId);
            }
            String strArrDocIds[]=new String[sListToRelIds.size()];
            for(int i=0;i<sListToRelIds.size();i++)
            {
                strArrDocIds[i]=(String) sListToRelIds.get(i);
            }
            DomainRelationship.disconnect(context,strArrDocIds);
			Map<String,String> mReturnMap = new HashMap<String,String>();
			QuestionUtil.encodeFunctionForJavaScript(context, false, "removeReferenceDocuments");
			mReturnMap.put(QuestionnaireConstants.ACTION_JAVASCRIPT,"removeReferenceDocuments()");
            return mReturnMap;
        } catch (Exception e) {
            throw new Exception(e.getLocalizedMessage());
        }

    }
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String preProcessAddReferenceDocuments(Context context,
			String[] args) throws Exception {
		try{
			Map mapProgram = (Map) JPO.unpackArgs(args);
			String[] strDocId = (String[]) mapProgram.get("objectId");
			String[] strSuiteKey = (String[]) mapProgram.get("suiteKey");
			//mapProgram.put(QuestionnaireConstants.ACTION_JAVASCRIPT, QuestionUtil.encodeFunctionForJavaScript(context, false, "preProcessAddReferenceDocuments", strSuiteKey[0],strDocId[0]));
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "preProcessAddReferenceDocuments", strSuiteKey[0],strDocId[0]);
		} catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}   
	}
	

	/**
     * Method to add reference document to existing document
     * @param context the ENOVIA <code>Context</code> object.
     * @param args object id of document
     * @return Map for JavaDcript to refresh table
     * @throws Exception if operation fails
     * @exclude
     * @exclude
     */
    public Map<String,String> addReferenceDocuments(Context context, String args[]) throws Exception
    {
        try {
            Map programMap = (Map) JPO.unpackArgs(args);
            String[] strObjectId=(String[])programMap.get("objectId");
            String strTableRowIds[] =  (String[])programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
            List<String> sListToDocIds=new StringList();
            Map<String,String> mReturnMap=new HashMap<String,String>();
            for(String strRowIds:strTableRowIds)
            {
                try {
                    String strRowId=strRowIds;
                    TableRowId tableRowId=new TableRowId(strRowId);
                    String strDocObjectId=tableRowId.getObjectId();
                    sListToDocIds.add(strDocObjectId);

                } catch (Exception e) {
                    throw new Exception(e.getMessage()); 
                }
            }
            String strArrDocIds[]=new String[sListToDocIds.size()];
            for(int i=0;i<sListToDocIds.size();i++)
            {
                strArrDocIds[i]=(String) sListToDocIds.get(i);
            }
            addReferenceDocuments(context,strObjectId[0],strArrDocIds);
			QuestionUtil.encodeFunctionForJavaScript(context, false, "addReferenceDocuments");
			mReturnMap.put(QuestionnaireConstants.ACTION_JAVASCRIPT,"addReferenceDocuments()");
            return mReturnMap;
        } catch (Exception e) {
            throw new Exception(e.getLocalizedMessage());
        }
    }
	
	 /**
     * Add Referenced Document to object
     * @param context the ENOVIA <code>Context</code> object.
     * @param dobjDoc domain object of Document 
     * @param sArrToDocIds objectIds of documents to be added
     * @throws FrameworkException if operation fails 
     */
    public static void addReferenceDocuments(Context context, String strDocId ,String[] sArrToDocIds) throws FrameworkException 
    {
        DomainObject dObjDoc = DomainObject.newInstance(context, strDocId);
        String strRelRefrenceDocument=PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_relationship_ReferenceDocument);
        DomainRelationship.connect(context,dObjDoc,new RelationshipType(strRelRefrenceDocument), true,sArrToDocIds);
	}
 @com.matrixone.apps.framework.ui.ProgramCallable
		public List<Map> getAllQuestions(Context context,String args[])throws Exception {
		 Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
		 List<String> slObjectSelects=new StringList();
			slObjectSelects.add(DomainConstants.SELECT_ID);
			slObjectSelects.add(DomainConstants.SELECT_NAME);
			slObjectSelects.add("last.id");
			List<Map> mlObjects = DomainObject.findObjects(context, "Question",DomainConstants.QUERY_WILDCARD, DomainConstants.QUERY_WILDCARD,
					DomainConstants.QUERY_WILDCARD, null, null, true,(StringList) slObjectSelects);
			
			return mlObjects;
		 
	 }
	 @com.matrixone.apps.framework.ui.ProgramCallable
		public List<Map> getObjectsToAssign(Context context,String args[])throws Exception {
		 Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
		 String strType=(String) programMap.get("type");
		 String strPolicy=(String) programMap.get("policy");
		 List<String> slPolicy=FrameworkUtil.split(strPolicy, ",");
		 StringBuffer sbWhere=new StringBuffer();
		 int counter=0;
		 for(String Policy:slPolicy)
		 {
			 List<String> slPolicyState=FrameworkUtil.split(Policy, ".");
			 String policyName=PropertyUtil.getSchemaProperty(context, slPolicyState.get(0));
			 String stateName=PropertyUtil.getSchemaProperty(context, DomainObject.SELECT_POLICY,policyName,slPolicyState.get(1));
			 sbWhere.append("( ");
			 sbWhere.append("policy==\"").append(policyName);
			 sbWhere.append("\" && ");
			 sbWhere.append("current==const\"").append(stateName);
			 sbWhere.append("\" )");
			 counter++;
			 if(slPolicy.size()!=counter)
				 sbWhere.append("||");
			 
			 
		 }
		 List<String> slObjectSelects=new StringList();
			slObjectSelects.add(DomainConstants.SELECT_ID);
			slObjectSelects.add(DomainConstants.SELECT_NAME);
			slObjectSelects.add(DomainConstants.SELECT_POLICY);
			slObjectSelects.add(DomainConstants.SELECT_CURRENT);
			slObjectSelects.add("last.id");
			List<Map> mlObjects=DomainObject.findObjects(context, strType, DomainObject.QUERY_WILDCARD, DomainObject.QUERY_WILDCARD,
					DomainObject.QUERY_WILDCARD, null, sbWhere.toString(), true, (StringList)slObjectSelects);
			
			return mlObjects;
		 
	 }
	 
 public static Map<String, String> getDefaultQuestionRangeType(Context context, String args[]) throws FrameworkException{
    	Map<String, String> languageType = new HashMap<String, String>();
    	String textbox=EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),"emxFramework.Range.Question_Range_Type.Textbox");
			languageType.put("Default_AddNewRow","Textbox");
		languageType.put("Default_AddNewRow_Display",textbox);
		return languageType;
    }	 
}

