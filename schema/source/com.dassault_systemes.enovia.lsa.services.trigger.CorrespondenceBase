/*
* Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
* contains proprietary and trade secret information of Dassault Systemes.
* Copyright notice is precautionary only and does not evidence any actual or
* intended publication of such program.
*/


import matrix.db.Context;
import matrix.db.Vault;

import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.LSAException;
import com.dassault_systemes.enovia.lsa.componentframework.Component;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentException;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentFactory;
import com.dassault_systemes.enovia.lsa.services.CorrespondenceService;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.PropertyUtil;

public class ${CLASSNAME} {

	/**
	 * Constructs a new JPO object.
	 * 
	 * @param context
	 *            the eMatrix <code>Context</code> object. This argument is
	 *            ignored, only provided for allowing it to be called from UI
	 *            components.
	 * @param args
	 *            This argument is ignored, only provided for allowing it to be
	 *            called from UI components.
	 * @throws LSAException
	 *             if the operation fails
	 */
	public ${CLASSNAME}(Context context, String[] args) {
		// Do Nothing
	}

	private static CorrespondenceService getCorrespondenceService(Context context) throws ComponentException {
		Component LSACommonCore = ComponentFactory.getInstance(context, "LSACommonCoreComponent");
		CorrespondenceService service = (CorrespondenceService) LSACommonCore.getService(CorrespondenceService.class);
		return service;
	}
	
	/*public int checkCorrespondenceAtLeastOneRelated(Context context, String[] args) throws Exception 
	{
		String typeProduct= PropertyUtil.getSchemaProperty(context, "type_Products");
		String typeCountry= PropertyUtil.getSchemaProperty(context, "type_Country");
		String typeSubmission= PropertyUtil.getSchemaProperty(context, "type_Submission");
		
		CorrespondenceService correspondenceService = getCorrespondenceService(context);
		
		DomainObject sCorrespondence = new DomainObject(args[1]);			//to id....Correspondence
		String fromObjectType=args[2];		//from.....Country or Product or Submission
		
		
		int nConnected=0;
		
		if(typeSubmission.equalsIgnoreCase(fromObjectType))	{
			return 0;
		}
		else if(typeCountry.equalsIgnoreCase(fromObjectType)){
			nConnected=(correspondenceService.getCountries(context,sCorrespondence,Helper.stringList(),"")).size();
		}
		else{
			fromObjectType=FrameworkUtil.getBaseType(context,fromObjectType ,new Vault(""));
			
			if(typeProduct.equalsIgnoreCase(fromObjectType)){
				nConnected=(correspondenceService.getProducts(context,sCorrespondence,Helper.stringList(),"")).size();
			}
		}
		
		if(nConnected>1)
			return 0;
		
		if(typeCountry.equalsIgnoreCase(fromObjectType))
			throw new LSAException(Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Trigger.ErrorDisconnectRelatedCountry"));
		
		throw new LSAException(Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Trigger.ErrorDisconnectRelatedProduct"));
	}*/
}

