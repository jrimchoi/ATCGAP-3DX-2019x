import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Scanner;

import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;

import matrix.db.BusinessObject;
import matrix.db.BusinessObjectProxy;
import matrix.db.BusinessObjectWithSelect;
import matrix.db.BusinessObjectWithSelectItr;
import matrix.db.BusinessObjectWithSelectList;
import matrix.db.Context;
import matrix.db.FileList;
import matrix.db.Format;
import matrix.db.FormatList;
import matrix.db.History;
import matrix.db.HistoryItr;
import matrix.db.HistoryList;
import matrix.db.NameValue;
import matrix.db.NameValueItr;
import matrix.db.NameValueList;
import matrix.db.Policy;
import matrix.db.TicketWrapper;
import matrix.util.MatrixException;
import matrix.util.StringList;
import com.matrixone.apps.domain.util.eMatrixDateFormat;
import com.matrixone.apps.framework.ui.UIUtil;
import com.matrixone.client.fcs.FcsClient;
import com.matrixone.fcs.mcs.Checkout;

import java.io.File;
import java.io.FileWriter;

public class ${CLASSNAME} {

	public int mxMain(Context context,String[] args) throws Exception {
		File file = null;
		FileWriter fw = null;
		HashMap locationMap = new HashMap();
		try{
			if(args.length>0)
			{
				file  = new File(args[0]);
				File writerFile = new File(args[1]);
				if(!writerFile.exists())
					writerFile.mkdir();
				fw = new FileWriter(writerFile);
				if(!file.exists())
				{
					System.out.println("please provide valid input file argument");
					return 1;
				}
			}
			else
			{
				System.out.println("please provide valid input file argument");
				return 1;
			}
			Scanner sc = new Scanner(file);
			String strMQLResult = "";
			if(fw!=null)
				fw.write("TNR,ID,File Name,Location,Format,FilePath\n");
			while (sc.hasNextLine())
			{
				String strNewLine = sc.nextLine();
				if(strNewLine.contains(":"))
				{
					String oid = strNewLine.split(" ID : ")[1];
					String tnr = strNewLine.split(" ID : ")[0];
					BusinessObject bo = new BusinessObject(oid);
					DomainObject dom = new DomainObject(bo);
					FormatList formats 	= bo.getFormats(context);
	
					for (int i= 0; i< formats.size(); i++)
					{
						String format				 = ((Format)formats.get(i)).getName();
						FileList list = bo.getFiles(context,format);
	
						for ( int j =0; j< list.size(); j++)
						{
							matrix.db.File file1		 = (matrix.db.File)list.get(j);
							String fileName			 = file1.getName();
							String hashLocation = "format[" + format + "].file[" + fileName + "].location";
							String strFileLoc = dom.getInfo(context,hashLocation);
							if(!locationMap.containsKey(strFileLoc)) {
								strMQLResult = MqlUtil.mqlCommand(context,"print location '"+strFileLoc+"' select host path dump ,");
								locationMap.put(strFileLoc,strMQLResult);
							}
							else
								strMQLResult = (String)locationMap.get(strFileLoc);
							
							String hashFileName = "format[" + format + "].file[" + fileName + "].locationfile["+strFileLoc+"]";
							String strFile = dom.getInfo(context,hashFileName);
							if(fw!=null)
							{
								fw.write(tnr.split("TNR : ")[1]+","+oid+","+fileName+","+strFileLoc+","+format+","+strFile+"\n");
							}
							System.out.println(strNewLine+" File Name  : "+fileName+" Host : "+strMQLResult.split(",")[0]+" Format : "+format+" File Path : "+strFile);
						}
					}				
				}
			}
		}
		catch(Exception exc)
		{
			exc.printStackTrace();
		}
		finally {
			if(fw!=null)
				fw.close();
		}
		return 0;
	}
}
