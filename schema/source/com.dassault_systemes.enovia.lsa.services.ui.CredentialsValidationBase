
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

import matrix.db.Context;
import matrix.db.JPO;

import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.LSAException;

public class ${CLASSNAME} {
	public ${CLASSNAME}(Context context, String[] args) throws LSAException {
		super();
	}

	public String getPasswordField(Context context, String args[]) throws LSAException {
		try {
			StringBuilder sbPassword = new StringBuilder();
			sbPassword.append("<input type = \"Password\" name =\"Password\" size=\"20\">");
			sbPassword
					.append("<script>var passwordField = document.getElementById('calc_Password');\npasswordField.children[0].className = 'labelRequired';</script>");
			return sbPassword.toString();
		}
		catch (Exception exception) {
			throw new LSAException(exception);
		}
	}

	public boolean showOrHideUserNameField(Context context, String args[]) throws LSAException {
		try {
			boolean bResult = false;
			String strFDASetting = Helper.getProperty(context, "emxFramework.Routes.EnableFDA");
			String strUserSetting = Helper.getProperty(context, "emxFramework.Routes.ShowUserNameForFDA");

			if (!Helper.isNullOrEmpty(strUserSetting) && !Helper.isNullOrEmpty(strFDASetting)) {
				if (Boolean.parseBoolean(strFDASetting) && Boolean.parseBoolean(strUserSetting)) {
					bResult = true;
				}
			}
			return bResult;
		}
		catch (Exception exception) {
			throw new LSAException(exception);
		}
	}

	public boolean showOrHidePasswordField(Context context, String args[]) throws LSAException {
		try {
			boolean bResult = false;
			String strPasswordSetting = Helper.getProperty(context, "emxFramework.Routes.EnableFDA");
			if (!Helper.isNullOrEmpty(strPasswordSetting)) {
				bResult = Boolean.parseBoolean(strPasswordSetting);
			}
			return bResult;
		}
		catch (Exception exception) {
			throw new LSAException(exception);
		}
	}

	public Map<?, ?> validateUserCredentials(Context context, String args[]) throws LSAException {
		try {

			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get("paramMap");
			String strUserName = (String) paramMap.get("UserName");
			String strPassword = (String) paramMap.get("Password");

			Map<String, String> returnMap = new TreeMap<String, String>();

			Boolean flag = Helper.validateAuthentication(context, strUserName, strPassword);
			returnMap.put("valid", flag.toString().toUpperCase());
			return returnMap;
		}
		catch (Exception exception) {
			throw new LSAException(exception);
		}
	}

}

