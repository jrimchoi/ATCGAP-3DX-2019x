/*
 ** ${CLASS:enoECMChangeOrder}
 **
 ** Copyright (c) 1993-2016 Dassault Systemes. All Rights Reserved.
 */

import matrix.db.Context;
import java.util.Map;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.framework.ui.UIUtil;
import matrix.util.StringList;

/**
 * The <code>enoECMChangeOrder</code> class contains code for the "Change Order" business type.
 *
 * @version ECM R215  - # Copyright (c) 1992-2016 Dassault Systemes.
 */
  public class ${CLASSNAME} extends ${CLASS:enoECMChangeOrderBase}
  {
      /**
       * Constructor.
       *
       * @param context the eMatrix <code>Context</code> object.
       * @param args holds no arguments.
       * @throws Exception if the operation fails.
       * @since ECM R215.
       */

      public ${CLASSNAME} (Context context, String[] args) throws Exception {
          super(context, args);
      }
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getApprovedChangeActions(Context context, String args[]) throws Exception {
		MapList listCA = new MapList();
		MapList listApprovedCA = new MapList();
		StringList slObjectIds = new StringList();
		StringList busSelects = new StringList(DomainConstants.SELECT_CURRENT);
		try {

			listCA = getAllChangeActions(context, args);
			if (listCA != null && listCA.size() > 0) {
				for (int i = 0; i < listCA.size(); i++) {
					Map tempMap = (Map) listCA.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "Approved".equals(sCurrent)) {
								listApprovedCA.add(tempMap);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			throw e;
		}
		return listApprovedCA;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getPrepareChangeActions(Context context, String args[]) throws Exception {
		MapList listCA = new MapList();
		MapList listPreparedStateCA = new MapList();
		StringList slObjectIds = new StringList();
		StringList busSelects = new StringList(DomainConstants.SELECT_CURRENT);
		try {

			listCA = getAllChangeActions(context, args);
			if (listCA != null && listCA.size() > 0) {
				for (int i = 0; i < listCA.size(); i++) {
					Map tempMap = (Map) listCA.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "Prepare".equals(sCurrent)) {
								listPreparedStateCA.add(tempMap);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			throw e;
		}
		return listPreparedStateCA;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getInWorkChangeActions(Context context, String args[]) throws Exception {
		MapList listCA = new MapList();
		MapList listInWorkCA = new MapList();
		StringList slObjectIds = new StringList();
		StringList busSelects = new StringList(DomainConstants.SELECT_CURRENT);
		try {

			listCA = getAllChangeActions(context, args);
			if (listCA != null && listCA.size() > 0) {
				for (int i = 0; i < listCA.size(); i++) {
					Map tempMap = (Map) listCA.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "In Work".equals(sCurrent)) {
								listInWorkCA.add(tempMap);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			throw e;
		}
		return listInWorkCA;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getInApprovalChangeActions(Context context, String args[]) throws Exception {
		MapList listCA = new MapList();
		MapList listInApprovalCA = new MapList();
		StringList slObjectIds = new StringList();
		StringList busSelects = new StringList(DomainConstants.SELECT_CURRENT);
		try {

			listCA = getAllChangeActions(context, args);
			if (listCA != null && listCA.size() > 0) {
				for (int i = 0; i < listCA.size(); i++) {
					Map tempMap = (Map) listCA.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "In Approval".equals(sCurrent)) {
								listInApprovalCA.add(tempMap);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			throw e;
		}
		return listInApprovalCA;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getCompletedChangeActions(Context context, String args[]) throws Exception {
		MapList listCA = new MapList();
		MapList listCompleteCA = new MapList();
		StringList slObjectIds = new StringList();
		StringList busSelects = new StringList(DomainConstants.SELECT_CURRENT);
		try {

			listCA = getAllChangeActions(context, args);
			if (listCA != null && listCA.size() > 0) {
				for (int i = 0; i < listCA.size(); i++) {
					Map tempMap = (Map) listCA.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "Complete".equals(sCurrent)) {
								listCompleteCA.add(tempMap);
							}
						}
					}
				}
			}

		} catch (Exception e) {
			throw e;
		}
		return listCompleteCA;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyPrepareChangeOrders(Context context, String args[]) throws Exception {
		MapList objList = new MapList();
		MapList objPrepareStateList = new MapList();
		try {
			objList = getMyChangeOrders(context, args);
			if (objList != null && objList.size() > 0) {
				for (int i = 0; i < objList.size(); i++) {
					Map tempMap = (Map) objList.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "Prepare".equals(sCurrent)) {
								objPrepareStateList.add(tempMap);
							}
						}
					}
				}
			}
		} catch (Exception e) {

			throw e;
		}
		return objPrepareStateList;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyInWorkChangeOrders(Context context, String args[]) throws Exception {
		MapList objList = new MapList();
		MapList objInWorkList = new MapList();
		try {
			objList = getMyChangeOrders(context, args);
			if (objList != null && objList.size() > 0) {
				for (int i = 0; i < objList.size(); i++) {
					Map tempMap = (Map) objList.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "In Work".equals(sCurrent)) {
								objInWorkList.add(tempMap);
							}
						}
					}
				}
			}
		} catch (Exception e) {

			throw e;
		}
		return objInWorkList;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyInApprovalChangeOrders(Context context, String args[]) throws Exception {
		MapList objList = new MapList();
		MapList objInApprovalList = new MapList();
		try {
			objList = getMyChangeOrders(context, args);
			if (objList != null && objList.size() > 0) {
				for (int i = 0; i < objList.size(); i++) {
					Map tempMap = (Map) objList.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "In Approval".equals(sCurrent)) {
								objInApprovalList.add(tempMap);
							}
						}
					}
				}
			}
		} catch (Exception e) {

			throw e;
		}
		return objInApprovalList;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyApprovedChangeOrders(Context context, String args[]) throws Exception {
		MapList objList = new MapList();
		MapList objApprovedList = new MapList();
		try {
			objList = getMyChangeOrders(context, args);
			if (objList != null && objList.size() > 0) {
				for (int i = 0; i < objList.size(); i++) {
					Map tempMap = (Map) objList.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "Approved".equals(sCurrent)) {
								objApprovedList.add(tempMap);
							}
						}
					}
				}
			}
		} catch (Exception e) {

			throw e;
		}
		return objApprovedList;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getMyCompleteChangeOrders(Context context, String args[]) throws Exception {
		MapList objList = new MapList();
		MapList objCompleteList = new MapList();
		try {
			objList = getMyChangeOrders(context, args);
			if (objList != null && objList.size() > 0) {
				for (int i = 0; i < objList.size(); i++) {
					Map tempMap = (Map) objList.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "Complete".equals(sCurrent)) {
								objCompleteList.add(tempMap);
							}
						}
					}
				}
			}
		} catch (Exception e) {

			throw e;
		}
		return objCompleteList;
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getImplementedChangeOrders(Context context, String args[]) throws Exception {
		MapList objList = new MapList();
		MapList objPrepareStateList = new MapList();
		try {
			objList = getMyChangeOrders(context, args);
			if (objList != null && objList.size() > 0) {
				for (int i = 0; i < objList.size(); i++) {
					Map tempMap = (Map) objList.get(i);
					if (tempMap.containsKey("id")) {
						String sId = (String) tempMap.get("id");
						if (UIUtil.isNotNullAndNotEmpty(sId)) {
							DomainObject domObjectId = DomainObject.newInstance(context, sId);
							String sCurrent = domObjectId.getInfo(context, DomainObject.SELECT_CURRENT);
							if (UIUtil.isNotNullAndNotEmpty(sCurrent) && "Implemented".equals(sCurrent)) {
								objPrepareStateList.add(tempMap);
							}
						}
					}
				}
			}
		} catch (Exception e) {

			throw e;
		}
		return objPrepareStateList;
	}	  
  }

