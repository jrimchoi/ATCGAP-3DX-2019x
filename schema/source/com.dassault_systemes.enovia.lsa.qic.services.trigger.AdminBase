/*
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */

import matrix.db.Context;

import com.dassault_systemes.enovia.lsa.qic.QICException;

public class ${CLASSNAME} {

	public ${CLASSNAME}(Context context, String[] args) {
		super();
	}

	public void grantAccessToCAPAMembersOnDuplicateRequests(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPA}(context, args)
				.grantAccessToCAPAMembersOnDuplicateRequests(context, args);
	}

	public void revokeAccessFromCAPAMembersOnDuplicateRequests(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPA}(context, args).revokeAccessFromCAPAMembersOnDuplicateRequests(context,
				args);
	}

	public void grantAccessToTeamMembers(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPA}(context, args).grantAccessToTeamMembers(context, args);
	}

	public void revokeAccessFromTeamMembers(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPA}(context, args).revokeAccessFromTeamMembers(context, args);
	}

	public void grantAccessForAssociatedCAPARequests(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPA}(context, args).grantAccessForAssociatedCAPARequests(context, args);
	}

	public void revokeAccessForAssociatedCAPARequests(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPA}(context, args).revokeAccessForAssociatedCAPARequests(context, args);
	}

	public void grantAccessToDataSourceOwner(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPARequest}(context, args).grantAccessToDataSourceOwner(context, args);
	}

	public void revokeAccessFromDataSourceOwner(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPARequest}(context, args).revokeAccessFromDataSourceOwner(context, args);
	}

	public void transferAccessToNewDataSourceOwner(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPARequest}(context, args).transferAccessToNewDataSourceOwner(context, args);
	}

	public void setCAPARequestAsNotApproved(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPARequest}(context, args).setCAPARequestAsNotApproved(context, args);
	}

	public void changeRouteTasksAssignee(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPARequest}(context, args).changeRouteTasksAssignee(context, args);
	}

	public void autoPromoteDefectCause(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPARootCauseAnalysisBase}(context, args)
				.autoPromoteDefectCause(context, args);
	}

	public void autoPromoteDefectCauseOnAllTaskCompletion(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPARootCauseAnalysisBase}(context, args)
				.autoPromoteDefectCauseOnAllTaskCompletion(context, args);
	}
	
	public void demoteAssociatedCAPARequests(Context context, String[] args) throws QICException 
	{
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPABase}(context, args).demoteAssociatedCAPARequests(context, args);
	}
	
	public void demoteCAPARequestsonDissociationWithCAPA(Context context,String[] args) throws QICException
	{
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPABase}(context, args).demoteCAPARequestsonDissociationWithCAPA(context, args);
	}
	
	public void disconnectoConnectedCauses(Context context,String[] args) throws QICException
	{
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPARootCauseAnalysisBase}(context,args).disconnectoConnectedCauses(context, args);
	}
	
	public void createApprovalRouteForCAPARequest(Context context,String[] args) throws QICException
	{
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.trigger.CAPARequestBase}(context, args).createApprovalRouteForCAPARequest(context,args);
	}
	
}

