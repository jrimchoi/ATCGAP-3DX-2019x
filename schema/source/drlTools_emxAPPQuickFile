/*
 **   emxAPPQuickFile.java
 ** Created on Jun 28, 2007
 ** Dassault Systemes, 1993  2007. All rights reserved.
 ** All Rights Reserved
 ** This program contains proprietary and trade secret information of
 ** Dassault Systemes.  Copyright notice is precautionary only and does
 ** not evidence any actual or intended publication of such program.
 */

/**
 * The <code>emxAPPQuickFile</code> class contains methods for the "Defualt RMB Menu" Common Component.
 *
 * @version AEF 10.0.Patch SP3 - Copyright (c) 2003, MatrixOne, Inc.
 */

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import com.designrule.drv6tools.jpointeraction.drDocumentActions;
import com.matrixone.apps.common.CommonDocument;
import com.matrixone.apps.common.util.ComponentsUtil;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;

import matrix.db.*;
import matrix.util.StringList;

public class ${CLASSNAME} extends ${CLASS:emxAPPQuickFileBase}
{
	/**
	 * Constructor.
	 *
	 * @param context the eMatrix <code>Context</code> object
	 * @param args holds no arguments
	 * @throws Exception if the operation fails
	 * @since Common 10.0.0.0
	 * @grade 0
	 */
	public ${CLASSNAME} (Context context, String[] args)
			throws Exception
	{
		super(context, args);
	}

	/**
	 * This method is executed if a specific method is not specified.
	 *
	 * @param context the eMatrix <code>Context</code> object
	 * @param args holds no arguments
	 * @returns int
	 * @throws Exception if the operation fails
	 * @since Common 10.0.0.0
	 */
	public int mxMain(Context context, String[] args)
			throws Exception
	{
		if (true)
		{
			throw new Exception(ComponentsUtil.i18nStringNow("emxComponents.Generic.MethodOnCommonFile", context.getLocale().getLanguage()));
		}
		return 0;
	}

	/**
	 * This method is used to get the display the checked in files
	 * @param context the eMatrix <code>Context</code> object
	 * @param args holds the following input arguments:
	 * @returns HashMap
	 * @throws Exception if the operation fails
	 * @since AEF 10.7 SP3
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable									
	public HashMap listQuickFiles(Context context ,
			String[] args )throws Exception
	{
		HashMap hmpInput  = (HashMap)JPO.unpackArgs(args);
		HashMap paramMap = (HashMap) hmpInput.get("paramMap");
		HashMap commandMap = (HashMap) hmpInput.get("commandMap");
		HashMap hmpSettings = (HashMap) commandMap.get("settings");
		HashMap requestMap = (HashMap) hmpInput.get("requestMap");
		String strlanguage = (String) requestMap.get("languageStr");
		String strAlwdFormat = (String) hmpSettings.get("Allowed formats");
		StringList strFormatList = FrameworkUtil.split(strAlwdFormat,",");
		paramMap.put("Allowed_Formats",strFormatList);
		String strObjId = "";
		String rmbTableRowId = (String) paramMap.get("rmbTableRowId");
		StringList sList = FrameworkUtil.split(rmbTableRowId,"|");
		if(sList.size() == 3){
			strObjId = (String)sList.get(0);
		}else if(sList.size() == 4){
			strObjId = (String)sList.get(1);
		}else if(sList.size() == 2){
			strObjId = (String)sList.get(1);
		}else{
			strObjId = rmbTableRowId;
		}
		paramMap.put("objectId",strObjId);
		String[] args1 = JPO.packArgs(paramMap);
		HashMap hmpDummy = new HashMap();
		hmpDummy.put("type","menu");
		hmpDummy.put("label","I am dummy map");
		hmpDummy.put("description","get all the files checked into the object");
		hmpDummy.put("roles",new StringList("all"));
		hmpDummy.put("settings",null);
		MapList mapContent = new MapList();
		//7256-Added to customise type_DOCUMENTSRMB menu
		drDocumentActions drDocActions = new drDocumentActions(context, hmpInput);
		MapList mapListChildren = getCheckedInFiles(context,args1,drDocActions);
		if (mapListChildren.size() == 0)
		{
			HashMap hmpDummyChild = new HashMap();
			hmpDummyChild.put("type","command");
			Locale strLocale = new Locale(strlanguage);
			hmpDummyChild.put("label",EnoviaResourceBundle.getProperty(context,"emxFrameworkStringResource",strLocale, "emxFramework.RMBMenu.NoItemFound"));
			//hmpDummyChild.put("href","javascript:showLabel()");
			hmpDummyChild.put("description","Incase there are no related files");
			hmpDummyChild.put("roles",new StringList("all"));
			hmpDummyChild.put("settings",null);
			mapListChildren.add(hmpDummyChild);

		}
		commandMap.remove("Children");
		commandMap.remove("type");
		hmpSettings.remove("Dynamic Command Function");
		hmpSettings.remove("Dynamic Command Program");
		commandMap.put("settings",hmpSettings);
		commandMap.put("Children",mapListChildren);
		commandMap.put("type","menu");
		mapContent.add(commandMap);
		hmpDummy.put("Children",mapContent);
		return hmpDummy;
	}

	
	/**
	 * This method is used to get the list of files and their
	 * versions in master (i.e. document holder) object
	 * @param context the eMatrix <code>Context</code> object
	 * @param args holds the following input arguments:
	 * @returns HashMap
	 * @throws Exception if the operation fails
	 * @since AEF 10.7 SP3
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable				
	public HashMap listFileVersion(Context context ,
			String[] args )throws Exception
	{
		HashMap hmpInput   = (HashMap)JPO.unpackArgs(args);
		HashMap paramMap   = (HashMap) hmpInput.get("paramMap");
		HashMap commandMap = (HashMap) hmpInput.get("commandMap");
		HashMap requestMap = (HashMap) hmpInput.get("requestMap");
		String strlanguage = (String) requestMap.get("languageStr");
		MapList mapListChildren = new MapList();
		HashMap hmpSetting = new HashMap();
		hmpSetting.put("Action Type","Separator");
		hmpSetting.put("Registered Suite","Framework");
		commandMap.remove("Children");
		commandMap.remove("type");
		String strName  = "";
		String strFormat = "";
		String strFileSize = "";
		String strID = "";
		long fileSizeKB =  0;
		int intdivFactor = 1024;
		String strObjId = "";
		String rmbTableRowId = (String) paramMap.get("rmbTableRowId");
		StringList sList = FrameworkUtil.split(rmbTableRowId,"|");
		if(sList.size() == 3){
			strObjId = (String)sList.get(0);
		}else if(sList.size() == 4){
			strObjId = (String)sList.get(1);
		}else if(sList.size() == 2){
			strObjId = (String)sList.get(1);
		}else{
			strObjId = rmbTableRowId;
		}
		//7256 Added to customise type_DOCUMENTSRMB menu
		drDocumentActions drDocActions = new drDocumentActions(context, hmpInput);
		drDocActions.setupForObject(getContentObjectMap(context, strObjId));
		
		paramMap.put("objectId",strObjId);
		String[] args1 = JPO.packArgs(paramMap);
		${CLASS:emxCommonFileUI} fileUI = new ${CLASS:emxCommonFileUI}(context, null);
		MapList fileListMap = (MapList)fileUI.getFileVersions(context, args1);
		for (int i = 0 ; i < fileListMap.size() ; i++)
		{
			HashMap fileMap  = (HashMap) fileListMap.get(i);
			if (!"".equals(strName) && !strName.equals(fileMap.get("attribute[Title]")))
			{
				HashMap hmpSep = new HashMap();
				hmpSep.put("type","command");
				hmpSep.put("label","AEFSeparator");
				hmpSep.put("type","command");
				hmpSep.put("settings",hmpSetting);
				mapListChildren.add(hmpSep);
			}
			strName = (String) fileMap.get("attribute[Title]");
			strFormat = (String) fileMap.get("format.file.format");
			strFileSize = (String) fileMap.get("format.file.size");
			fileSizeKB = 0;
			if(strFileSize !=null && !"".equals(strFileSize))
			{
				fileSizeKB = (Long.parseLong(strFileSize))/1024;
			}
			String lastVersionId = (String) fileMap.get(CommonDocument.SELECT_LAST_ID);
			String versionId = (String) fileMap.get("id");
			strID = versionId.equals(lastVersionId) ? strObjId : versionId;
			//7256 Added to customise type_DOCUMENTSRMB menu
			if(drDocActions.isShowActivity()==false){
				HashMap hmpDocument = new HashMap();
				hmpDocument.put("type","command");
				hmpDocument.put("label",fileMap.get("attribute[Title]")+" rev "+fileMap.get("revision")+"("+fileSizeKB+" KB)");
				hmpDocument.put("description","Documents");
				hmpDocument.put("roles",new StringList("all"));
				hmpDocument.put("href","javascript:callCheckout('"+strID+"','download','"+ strName+"', '"+strFormat+"', null, null, null, null, null,null)");
				hmpDocument.put("settings",null);
				mapListChildren.add(hmpDocument);
			}
		}
		if (mapListChildren.size() == 0)
		{
			HashMap hmpDummyChild = new HashMap();
			hmpDummyChild.put("type","command");
			//hmpDummyChild.put("href","javascript:showLabel()");
			Locale strLocale = new Locale(strlanguage);
			hmpDummyChild.put("label",EnoviaResourceBundle.getProperty(context,"emxFrameworkStringResource",strLocale, "emxFramework.RMBMenu.NoItemFound"));
			hmpDummyChild.put("description","Incase there are no related files");
			hmpDummyChild.put("roles",new StringList("all"));
			hmpDummyChild.put("settings",null);
			mapListChildren.add(hmpDummyChild);
		}
		commandMap.put("Children",mapListChildren);
		commandMap.put("type","menu");
		HashMap hmpSettings = (HashMap)commandMap.get("settings");
		hmpSettings.remove("Dynamic Command Function");
		hmpSettings.remove("Dynamic Command Program");
		commandMap.remove("settings");
		commandMap.put("settings",hmpSettings);
		HashMap hmpDummy = new HashMap();
		hmpDummy.put("type","menu");
		hmpDummy.put("label","I am dummy map");
		hmpDummy.put("description","get all the files checked into the object");
		hmpDummy.put("roles",new StringList("all"));
		hmpDummy.put("settings",null);
		MapList mapContent = new MapList();
		mapContent.add(commandMap);
		hmpDummy.put("Children",mapContent);
		return hmpDummy;

	}

	public Map getContentObjectMap(Context context ,String objectId)throws Exception
	{
		try
		{
			StringList selectTypeStmts = new StringList(20);
			selectTypeStmts.add(DomainConstants.SELECT_ID);
			selectTypeStmts.add(DomainConstants.SELECT_TYPE);
			selectTypeStmts.add(CommonDocument.SELECT_SUSPEND_VERSIONING);
			selectTypeStmts.add(CommonDocument.SELECT_HAS_CHECKOUT_ACCESS);
			selectTypeStmts.add(CommonDocument.SELECT_HAS_CHECKIN_ACCESS);
			selectTypeStmts.add(CommonDocument.SELECT_FILE_NAMES_OF_ACTIVE_VERSION);
			selectTypeStmts.add(CommonDocument.SELECT_FILE_NAME);
			selectTypeStmts.add(CommonDocument.SELECT_FILE_FORMAT);
			selectTypeStmts.add(CommonDocument.SELECT_MOVE_FILES_TO_VERSION);
			selectTypeStmts.add(CommonDocument.SELECT_IS_KIND_OF_VC_DOCUMENT);
			selectTypeStmts.add("vcfile");
			selectTypeStmts.add("vcmodule");
			selectTypeStmts.add(CommonDocument.SELECT_ACTIVE_FILE_LOCKED);
			selectTypeStmts.add(CommonDocument.SELECT_ACTIVE_FILE_LOCKER);
			selectTypeStmts.add(CommonDocument.SELECT_HAS_TOCONNECT_ACCESS);
			selectTypeStmts.add(CommonDocument.SELECT_ACTIVE_FILE_VERSION_ID);
			selectTypeStmts.add(CommonDocument.SELECT_OWNER);
			selectTypeStmts.add(CommonDocument.SELECT_LOCKED);
			selectTypeStmts.add(CommonDocument.SELECT_LOCKER);	
			DomainObject document=DomainObject.newInstance(context,objectId);
			Map contentObjectMap = document.getInfo(context,selectTypeStmts);
			return contentObjectMap;
		}catch(Exception ex){
			throw ex;
		}		
	}
	
	/**
	 * This method is used to get the checked in files for the  given object
	 * @param context the eMatrix <code>Context</code> object
	 * @param args holds the following input arguments:
	 * @returns MapList
	 * @throws Exception if the operation fails
	 * @since AEF 10.7 SP3
	 */

	@com.matrixone.apps.framework.ui.ProgramCallable
    public MapList getCheckedInFiles(Context context ,String[] args,drDocumentActions drDocActions)throws Exception
	{
		HashMap paramMap = (HashMap)JPO.unpackArgs(args);
		String partId = (String) paramMap.get("objectId");
		StringList strFormatList = (StringList) paramMap.get("Allowed_Formats");
		boolean bolNoFormatchk  = false;
		if (strFormatList == null || strFormatList.size() == 0)
		{
			bolNoFormatchk = true;
		}
		DomainObject object = new DomainObject(partId);
		MapList CheckedInFiles = new MapList();

		StringList selectList = new StringList(3);
		selectList.add(CommonDocument.SELECT_FILE_NAME);
		selectList.add(CommonDocument.SELECT_FILE_FORMAT);
		selectList.add(CommonDocument.SELECT_FILE_SIZE);

		String file = "";
		String format = "";
		String fileSize   = "";
		int i  = 0 ;
		long fileSizeKB =  0;
		int intdivFactor = 1024;

		HashMap  settings  = new HashMap();
		settings.put("Registered Suite","Components");
		settings.put("Image","../common/images/iconSmallDocumentGray.gif");
		settings.put("Registered Suite","Framework");
		settings.put("Pull Right","false");

		boolean versionable = CommonDocument.allowFileVersioning(context, partId);
		MapList fileInDoc  = null;
		String[] args1 = JPO.packArgs(paramMap);
		// To get the Versioned file
		if(versionable)
		{
			${CLASS:emxCommonFileUI} fileUI = new ${CLASS:emxCommonFileUI}(context, null);
			fileInDoc = (MapList)fileUI.getFiles(context, args1);
		}
		else
		{
			// To get the non Versioned file
			${CLASS:emxCommonFileUI} fileUI = new ${CLASS:emxCommonFileUI}(context, null);
			fileInDoc = (MapList)fileUI.getNonVersionableFiles(context, args1);
		}
		if (fileInDoc != null && fileInDoc.size() > 0 )
		{
			Map fileMap = null;
			int noOfFiles  = fileInDoc.size();
			for(int j = 0; j < noOfFiles ; j++ )
			{
				fileMap = (Map) fileInDoc.get(j);
				drDocActions.setupForObject(fileMap);
				format = (String) fileMap.get("format.file.format");
				file  = (String) fileMap.get("format.file.name");
				if ((bolNoFormatchk || strFormatList.contains(format)) && !"".equals(file) && drDocActions.isShowActivity()==false)
				{
					HashMap hmpChildMap = new HashMap();
					fileSize = (String) fileMap.get("format.file.size");
					fileSizeKB = 0;
					if(fileSize != null && !"".equals(fileSize))
					{
						fileSizeKB = Long.parseLong(fileSize)/1024;
					}
					hmpChildMap.put("type","command");
					hmpChildMap.put("label",file+" ("+fileSizeKB+" KB)");
					hmpChildMap.put("description","file details");
					hmpChildMap.put("roles",new StringList("all"));
					hmpChildMap.put("href","javascript:callCheckout('"+partId+"','download','"+ file+"', '"+format+"', null, null, null, null, null,null)");
					hmpChildMap.put("settings",settings);
					CheckedInFiles.add(hmpChildMap);
				}
			}
			//7256 Added to customise type_DOCUMENTSRMB menu
			Map contentObjectMap=getContentObjectMap(context,partId);
			drDocActions.setupForObject(contentObjectMap);
			if(drDocActions.isShowActivity()) {				
				StringBuffer strBuf = new StringBuffer();
				drDocActions.addActivityHREF(contentObjectMap, strBuf);
				HashMap activityCommand = new HashMap();
				activityCommand.put("type","command");
				activityCommand.put("label",drDocActions.getActivityTooltip());
				activityCommand.put("description","file details");
				activityCommand.put("roles",new StringList("all"));
				activityCommand.put("href",strBuf.toString());
				settings.put("Target Location", "listHidden");
				activityCommand.put("settings",settings);
				CheckedInFiles.add(activityCommand);
			}
		}
		return CheckedInFiles;

	}
}




