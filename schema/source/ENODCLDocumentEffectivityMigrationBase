
/**
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Map;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import com.dassault_systemes.enovia.dcl.DCLConstants;
import com.dassault_systemes.enovia.dcl.DCLServiceUtil;
import com.dassault_systemes.enovia.dcl.DCLUtil;
import com.dassault_systemes.enovia.dcl.service.EffectivityImplementationService;
import com.dassault_systemes.enovia.periodicreview.PeriodicReviewConstants;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PolicyUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.framework.ui.UIUtil;

import matrix.db.Context;
import java.util.List;
import matrix.util.StringList;


public class ${CLASSNAME} {
	public ${CLASSNAME}(Context context, String[] args) throws Exception {
		super();
	}

	private static Logger		logger	= Logger.getLogger(${CLASSNAME}.class
																.getName());
	// private static final String fileSeparator = java.io.File.separator;
	private static final String	TRACE_DocumentEffectivity_MIGRATION	= "DCLDocumentEffectivityMigration";
	private static final String	FILE_DocumentEffectivity_MIGRATION_LOG	= "DCLDocumentEffectivityMigration.log";

	public static void migrate(Context context, String[] args) throws Exception {
		String strPath = new String();
		String strStartOfFile = new String();
		String strEndOfFile = new String();
		int startOfFile = 0;
		int endOfFile = 0;
		String firstArg = "";
		boolean isValidFilePath = false;

		if (args.length == 0) {

			try {
				help(context, args);
				return;
			}
			catch (Exception e) {
				throw new Exception(e.getLocalizedMessage());
			}
		}
		else {

			firstArg = args[0];
			if (firstArg.equals("help")) {
				try {
					help(context, args);
					return;
				}
				catch (Exception e) {
					throw new Exception(e.getLocalizedMessage());
				}
			}

		}
		try {
			strPath = firstArg;
			isValidFilePath = validateFilePath(strPath);
			startOfFile = getStartOfFile(strStartOfFile);
			endOfFile = getEndOfFile(strEndOfFile, startOfFile, strPath);
		}
		catch (Exception e) {
			throw new Exception(e);
		}
		if (isValidFilePath) {
			FileHandler fileLogging = null;
			try {
				fileLogging = createLogFile(TRACE_DocumentEffectivity_MIGRATION, strPath + File.separator);
			}
			catch (Exception e) {
				throw new Exception(e);
			}
			firstArg = args[0];
			// Create log file
			try {
				if (isValidFilePath) {
					logger.log(Level.INFO, "Executing  Migration For Document Effectivity.");
					migrateAttribute(context, strPath, TRACE_DocumentEffectivity_MIGRATION, startOfFile, endOfFile);
					logger.log(Level.INFO, "Migration For Document Effectivity Completed.");
				}
			}
			catch (Exception e) {
				throw new Exception(e.getLocalizedMessage());
			}

			fileLogging.close();
		}
	}

	private static void migrateAttribute(Context context, String strPath, String strFileName, int startOfFile, int endOfFile) throws Exception {

		try {
			logger.log(Level.INFO, "Searching All Controlled Document Objects");
			String strControlledDocument = PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_TYPE_CONTROLLED_DOCUMENTS);
			String strChangeOrder = PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_TYPE_CHANGE_ORDER);
			String isVersionObject = PropertyUtil.getSchemaProperty(context, PeriodicReviewConstants.SYMBOLIC_ATTRIBUTE_IS_VERSION_OBJECT);
			String strAttrEffectivityType=PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_ATTRIBUTE_EFFECTIVITY_OPTION);
			String strAttrImplType=PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_ATTRIBUTE_IMPLEMENTATION_PERIOD_OPTION);
			String strAttrImplDate=PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_ATTRIBUTE_IMPLEMENTATION_DATE);
			String strAttrImplPeriod=PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_ATTRIBUTE_IMPLEMENTATION_PERIOD);
			String strAttrEffectivityDate=PropertyUtil.getSchemaProperty(context, DCLConstants.SYMBOLIC_ATTRIBUTE_EFFECTIVEDATE);
			String StrAprovedState=DCLUtil.getStateName(context, DCLConstants.SYMBOLIC_POLICY_CONTROLLED_DOCUMENTS, DCLConstants.SYMBOLIC_STATE_APPROVED);
			String DocumentEffectivityInterface =  "Document Effectivity";
			EffectivityImplementationService service=DCLServiceUtil.getEffectivityImplementationService(context);
			StringList slBusSelects = new StringList(DomainObject.SELECT_ID);
			slBusSelects.add(DomainObject.SELECT_TYPE);
			slBusSelects.add(DomainObject.SELECT_NAME);
			slBusSelects.add(DomainObject.SELECT_REVISION);
			slBusSelects.add("attribute["+isVersionObject+"]");
			StringBuilder sbWhere = new StringBuilder();
	        sbWhere.append("attribute["+isVersionObject+"]== 'False'");
			
			
			MapList findObjectMapList = DomainObject.findObjects(context, strControlledDocument, DomainConstants.QUERY_WILDCARD,
					DomainConstants.QUERY_WILDCARD, DomainConstants.QUERY_WILDCARD, null,sbWhere.toString(), true,
					slBusSelects);

			logger.log(Level.INFO, "Search complete for Controlled Document" );
			logger.log(Level.INFO, "Migration of Interface 'Document Effectivity'");
			for (Object object : findObjectMapList) {
				Map<?, ?> docListMap = (Map<?, ?>) object;
				String strDocumentId = (String) docListMap.get(DomainConstants.SELECT_ID);
				String strName = (String) docListMap.get(DomainConstants.SELECT_NAME);
				String strType = (String) docListMap.get(DomainConstants.SELECT_TYPE);
				String strRev = (String) docListMap.get(DomainConstants.SELECT_REVISION);
				
				logger.log(Level.INFO, "Addition of Interface 'Document Effectivity' for "+ strType + " "+ strName + " "+strRev);
				String strInterface = MqlUtil.mqlCommand(context, "print bus $1 select  interface dump",strDocumentId).toString();
				if(!strInterface.contains(DocumentEffectivityInterface)){
				MqlUtil.mqlCommand(context, "modify bus $1 add interface $2",strDocumentId,DocumentEffectivityInterface);
					logger.log(Level.INFO, "Addition of Interface 'Document Effectivity' Successfully Completed for "+ strType + " "+ strName + " "+strRev);
				}else
					logger.log(Level.INFO, "Interface 'Document Effectivity' already added for "+ strType + " "+ strName + " "+strRev);
						
				}
			logger.log(Level.INFO, "Addition of Interface 'Document Effectivity' Completed");

			List<Map> mlCO = DomainObject.findObjects(context, strChangeOrder, DomainConstants.QUERY_WILDCARD,
					DomainConstants.QUERY_WILDCARD, DomainConstants.QUERY_WILDCARD, null,null, true,
					slBusSelects);
			

			StringList slAttributeSelect=new StringList();
			slAttributeSelect.add(DomainObject.getAttributeSelect(strAttrEffectivityType));
			slAttributeSelect.add(DomainObject.getAttributeSelect(strAttrImplType));
			slAttributeSelect.add(DomainObject.getAttributeSelect(strAttrImplPeriod));
			slAttributeSelect.add(DomainObject.getAttributeSelect(strAttrImplDate));
			for(Map map:mlCO){
				String strCOId=map.get(DomainObject.SELECT_ID).toString();
				String strInterfaceOnCO = MqlUtil.mqlCommand(context, "print bus $1 select  interface dump",strCOId);
				if(strInterfaceOnCO.contains("DCLEffectivity")){
					DomainObject dObj=DomainObject.newInstance(context, strCOId);
					Map mpCOInfo=	dObj.getInfo(context, slAttributeSelect);
					List<Map> mlProposedChanges=service.getControlledDocumentForConnectedCO(context, strCOId);
					for(Map mp:mlProposedChanges){
						StringList strCDObjectId=((StringList)mp.get(DomainObject.SELECT_ID));
						DomainObject dControlledDocument=DomainObject.newInstance(context,strCDObjectId.get(0).toString());
						dControlledDocument.setAttributeValue(context, strAttrEffectivityType,(String) mpCOInfo.get(DomainObject.getAttributeSelect(strAttrEffectivityType)));
						String strImplTypeVal=(String)mpCOInfo.get(DomainObject.getAttributeSelect(strAttrImplType));
						dControlledDocument.setAttributeValue(context, strAttrImplType, strImplTypeVal);
						if(strImplTypeVal.equals(DCLConstants.SPECIFY_IMPLEMENTATION_PERIOD)){
							dControlledDocument.setAttributeValue(context, strAttrImplPeriod,(String)mpCOInfo.get(DomainObject.getAttributeSelect(strAttrImplPeriod)));
						}
						if(PolicyUtil.checkState(context, strCDObjectId.get(0).toString(), StrAprovedState, PolicyUtil.LT)){
							if(strImplTypeVal.equals(DCLConstants.SPECIFY_IMPLEMENTATION_DATE))
							{
								dControlledDocument.setAttributeValue(context, strAttrEffectivityDate,(String)mpCOInfo.get(DomainObject.getAttributeSelect(strAttrImplDate)));
							}
						}
					}
			}
				}
		}
		catch (Exception e) {
			throw new Exception(e);
		}

	}

	private static FileHandler createLogFile(String strFileNameForLogs, String strFullPath) throws Exception {
		DateFormat dateFormat = new SimpleDateFormat("yyyyddMMHHmmss");
		java.util.Date date = new java.util.Date();

		FileHandler fh;
		try {
			File logFolder = new File(strFullPath + File.separator + "Logs_" + dateFormat.format(date));
			logFolder.mkdir();
			logFolder.setWritable(true);
			logFolder.setExecutable(true);
			logger.log(Level.INFO, "Creating log file");
			File logFile = new File(logFolder.getAbsolutePath() + File.separator + strFileNameForLogs.trim().replace(" ", "_")
					+ ".txt");
			logFile.setWritable(true);
			logFile.setExecutable(true);
			fh = new FileHandler(logFile.getAbsolutePath());
			fh.setFormatter(new SimpleFormatter());
			logger.addHandler(fh);
			return fh;
		}
		catch (SecurityException e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new Exception(e);
		}
		catch (IOException e) {
			logger.log(Level.SEVERE, e.getLocalizedMessage());
			throw new Exception(e);
		}
	}

	private static boolean validateFilePath(String strPath) throws Exception {
		// Validate path
		logger.log(Level.INFO, "Validating File Path");
		boolean isPathNotNullOrNotEmpty = UIUtil.isNullOrEmpty(strPath);
		File filePath = new File(strPath);
		if (isPathNotNullOrNotEmpty && !filePath.isDirectory()) {
			logger.log(Level.SEVERE, "Invalid file path!!!");
			throw new Exception("Invalid file path!!!");
		}
		else {
			logger.log(Level.INFO, "File Path Validated");
			return true;
		}
	}
	private static int getStartOfFile(String strStartOfFile) throws Exception {
		try {
			if (UIUtil.isNotNullAndNotEmpty(strStartOfFile)) {
				int startOfFile = Integer.parseInt(strStartOfFile);
				return startOfFile;
			}
			else {
				return 1;
			}
		}
		catch (NumberFormatException e) {
			return 1;
		}
	}

	private static int getEndOfFile(String strEndOfFile, int startOfFile, String strPath) throws Exception {
		try {
			int endOfFile = 1;
			if (UIUtil.isNotNullAndNotEmpty(strEndOfFile)) {
				if (strEndOfFile.equalsIgnoreCase("n")) {
					int count = 0;
					File file = new File(strPath);
					if (file.isDirectory()) {
						File[] listOfFilesInDirectory = file.listFiles();
						for (int i = 0; i < listOfFilesInDirectory.length; i++) {
							String fileName = listOfFilesInDirectory[i].getName();
							if (fileName.endsWith(".xls")) {
								count++;
							}
						}
					}
					endOfFile = count;
				}
				else {
					endOfFile = Integer.parseInt(strEndOfFile);
				}
				return endOfFile;
			}
			else {
				return startOfFile;
			}
		}
		catch (NumberFormatException e) {
			return 1;
		}
	}

	

	/**
	 * Print "End: <method name>" trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @throws Exception
	 *             if operation fails
	 */
	private static void traceBeginMethod(Context context) throws Exception {
		String methodName = getTracedMethodName();
		traceBegin(context, methodName + "()");
	}

	/**
	 * Print "ERROR: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws Exception
	 *             if operation fails
	 */
	private static void traceError(Context context, String message) throws Exception {
		trace(context, "ERROR: " + message);
	}

	/**
	 * Print "End: <method name>" trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @throws Exception
	 *             if operation fails
	 */
	private static void traceEndMethod(Context context) throws Exception {
		final String methodName = getTracedMethodName();
		traceEnd(context, methodName + "()");
	}

	/**
	 * Print "End: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws Exception
	 *             if operation fails
	 */
	private static void traceEnd(Context context, String message) throws Exception {
		trace(context, "End: " + message);
	}

	/**
	 * Prints trace message for trace type LPIMigration
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws Exception
	 *             if operation fails
	 */
	private static void trace(Context context, String message) throws Exception {
		try {
			context.printTrace(TRACE_DocumentEffectivity_MIGRATION, message);
		}
		catch (Exception exp) {
			traceError(context, exp.getMessage());
			throw new Exception(exp);
		}
	}

	/**
	 * Print "Begin: " token before trace message
	 * 
	 * @param context
	 *            ENOVIA Context object
	 * @param message
	 *            The message to be printed in trace
	 * @throws Exception
	 *             if operation fails
	 */
	private static void traceBegin(Context context, String message) throws Exception {
		trace(context, "Begin: " + message);
	}

	/**
	 * Returns the name of the method being traced. This SHOULD NOT be called by
	 * any client other than traceBeginMethod and traceEndMethod methods.
	 * 
	 * @return the method name
	 */
	private static String getTracedMethodName() {
		Exception exp = new Exception();
		StackTraceElement[] stes = exp.getStackTrace();
		StackTraceElement ste = stes[2];
		String methodName = ste.getMethodName();
		return methodName;
	}


	public static void mxMain(Context context, String[] args) throws Exception {
		try {
			boolean traceON = true;
			boolean allSession = false; // false for only this session

			context.setTrace(FILE_DocumentEffectivity_MIGRATION_LOG, TRACE_DocumentEffectivity_MIGRATION, traceON, allSession);
			traceBeginMethod(context);

			System.out.println("================================================================================================\n");
			migrate(context, args);
			System.out.println("================================================================================================\n");
		}
		catch (Exception exp) {
			try {
				traceError(context, exp.getMessage());
			}
			catch (Exception e) {
				throw new Exception(e);
			}
			throw new Exception(exp);
		}
		finally {
			try {
				traceEndMethod(context);
			}
			catch (Exception e) {
				throw new Exception(e);
			}
		}
	}

	public static void help(Context context, String[] args) throws Exception {
		if (!context.isConnected()) {
			throw new Exception("not supported on desktop client");
		}
		System.out.println("================================================================================================\n");
		System.out.println(" Document Effectivity  Migration  is a single step process.  \n");
		System.out.println(" This will migrate all the Controlled Documents objects to latest schema. \n");
		System.out.println(" Example: \n");
		System.out.println(" execute prog  ENODCLDocumentEffectivityMigration F:\\Migration; \n");
		System.out.println(" First parameter  = the directory where log file should be written. \n");
		System.out.println(" This step creates a file - DCLDocumentEffectivityMigration.log having the details about all the migration. \n");
		System.out.println(" This file is created at the location provided as the first parameter. \n");
		System.out.println(" \n");
		System.out.println(" 	NOTE: DO NOT CLOSE THE MQL WINDOW UNTIL MIGRATION IS COMPLETE. \n");
		System.out.println(" \n");
		System.out.println("================================================================================================\n");
	}
}

