
/*
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */

import java.util.Iterator;
import java.util.Map;

import com.dassault_systemes.enovia.lsa.Helper;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.PropertyUtil;

import matrix.db.Context;
import matrix.util.StringList;

@Deprecated
public class ${CLASSNAME} {

	/**
	 * Default Constructor
	 * 
	 * @param context
	 * @param args
	 */
	public ${CLASSNAME}(Context context, String[] args) {
	}

	/**
	 * Trigger to check for connected LSA objects when edit Location Attributes
	 * event.
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public int modifyLocationAttributeCheck(Context context, String[] args) throws Exception {
		// Location Id
		String objectId = args[0];

		// Attribute name
		String attributeName = args[1];

		// Get Relationships property
		String relList = Helper.getProperty(context, "LSACommonFramework.trigger.Location.Relationships");

		String attrList = Helper.getProperty(context, "LSACommonFramework.trigger.Location.BlockedAttributes");

		if (relList != null && !relList.equalsIgnoreCase("")) {

			if (attrList != null && !attrList.equalsIgnoreCase("")) {

				// Get Error message
				String strMessage = Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Trigger.ErrorCannotEditLocation");

				return modifyAttributeObjectCheck(context, objectId, attributeName, attrList, relList, strMessage);
			}
		}
		return 0;
	}

	/**
	 * Trigger to check for connected LSA objects when edit Location name event.
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public int modifyLocationNameCheck(Context context, String[] args) throws Exception {
		// Location Id
		String objectId = args[0];

		// Get Relationships property
		String relList = Helper.getProperty(context, "LSACommonFramework.trigger.Location.Relationships");

		if (relList != null && !relList.equalsIgnoreCase("")) {
			// Get Error message
			String strMessage = Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Trigger.ErrorCannotEditLocation");

			return modifyNameObjectCheck(context, objectId, relList, strMessage);
		}
		return 0;
	}

	/**
	 * Trigger to check for connected LSA objects when delete Location event.
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public int deleteLocationCheck(Context context, String[] args) throws Exception {
		// Location Id
		String objectId = args[0];

		// Get Relationships property
		String relList = Helper.getProperty(context, "LSACommonFramework.trigger.Location.Relationships");

		if (relList != null && !relList.equalsIgnoreCase("")) {
			// Get Error message
			String strMessage = Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Trigger.ErrorCannotDeleteLocation");

			return modifyNameObjectCheck(context, objectId, relList, strMessage);
		}
		return 0;
	}

	/**
	 * Trigger to check for connected LSA objects when edit Company Attributes
	 * event.
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public int modifyCompanyAttributeCheck(Context context, String[] args) throws Exception {
		// Location Id
		String objectId = args[0];

		// Attribute name
		String attributeName = args[1];

		// Get Relationships property
		String relList = Helper.getProperty(context, "LSACommonFramework.trigger.Company.Relationships");

		String attrList = Helper.getProperty(context, "LSACommonFramework.trigger.Company.BlockedAttributes");

		if (relList != null && !relList.equalsIgnoreCase("")) {

			if (attrList != null && !attrList.equalsIgnoreCase("")) {

				// Get Error message
				String strMessage = Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Trigger.ErrorCannotEditCompany");

				return modifyAttributeObjectCheck(context, objectId, attributeName, attrList, relList, strMessage);
			}
		}
		return 0;
	}

	/**
	 * Trigger to check for connected LSA objects when edit Company name event.
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public int modifyCompanyNameCheck(Context context, String[] args) throws Exception {
		// Location Id
		String objectId = args[0];

		// Get Relationships property
		String relList = Helper.getProperty(context, "LSACommonFramework.trigger.Company.Relationships");

		if (relList != null && !relList.equalsIgnoreCase("")) {
			// Get Error message
			String strMessage = Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Trigger.ErrorCannotEditCompany");

			return modifyNameObjectCheck(context, objectId, relList, strMessage);
		}
		return 0;
	}

	/**
	 * Trigger to check for connected LSA objects when delete Company event.
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public int deleteCompanyCheck(Context context, String[] args) throws Exception {
		// Location Id
		String objectId = args[0];

		// Get Relationships property
		String relList = Helper.getProperty(context, "LSACommonFramework.trigger.Company.Relationships");

		if (relList != null && !relList.equalsIgnoreCase("")) {
			// Get Error message
			String strMessage = Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Trigger.ErrorCannotDeleteCompany");

			return modifyNameObjectCheck(context, objectId, relList, strMessage);
		}
		return 0;
	}

	/**
	 * Trigger to check for connected LSA objects when edit Business Unit
	 * Attributes event.
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public int modifyBusinessUnitAttributeCheck(Context context, String[] args) throws Exception {
		// Location Id
		String objectId = args[0];

		// Attribute name
		String attributeName = args[1];

		// Get Relationships property
		String relList = Helper.getProperty(context, "LSACommonFramework.trigger.BusinessUnit.Relationships");

		String attrList = Helper.getProperty(context, "LSACommonFramework.trigger.BusinessUnit.BlockedAttributes");

		if (relList != null && !relList.equalsIgnoreCase("")) {

			if (attrList != null && !attrList.equalsIgnoreCase("")) {

				// Get Error message
				String strMessage = Helper.getI18NString(context, Helper.StringResource.LSA,
						"LSACommonFramework.Trigger.ErrorCannotEditBusinessUnit");

				return modifyAttributeObjectCheck(context, objectId, attributeName, attrList, relList, strMessage);
			}
		}
		return 0;
	}

	/**
	 * Trigger to check for connected LSA objects when edit Business Unit name
	 * event.
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public int modifyBusinessUnitNameCheck(Context context, String[] args) throws Exception {
		// Location Id
		String objectId = args[0];

		// Get Relationships property
		String relList = Helper.getProperty(context, "LSACommonFramework.trigger.BusinessUnit.Relationships");

		if (relList != null && !relList.equalsIgnoreCase("")) {
			// Get Error message
			String strMessage = Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Trigger.ErrorCannotEditBusinessUnit");

			return modifyNameObjectCheck(context, objectId, relList, strMessage);
		}
		return 0;
	}

	/**
	 * Trigger to check for connected LSA objects when delete Business Unit
	 * event.
	 * 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public int deleteBusinessUnitCheck(Context context, String[] args) throws Exception {
		// Location Id
		String objectId = args[0];

		// Get Relationships property
		String relList = Helper.getProperty(context, "LSACommonFramework.trigger.BusinessUnit.Relationships");

		if (relList != null && !relList.equalsIgnoreCase("")) {
			// Get Error message
			String strMessage = Helper.getI18NString(context, Helper.StringResource.LSA, "LSACommonFramework.Trigger.ErrorCannotDeleteBusinessUnit");

			return modifyNameObjectCheck(context, objectId, relList, strMessage);
		}
		return 0;
	}

	private int modifyNameObjectCheck(Context context, String objectId, String relList, String strMessage) throws Exception {

		// Get FDA Enable property
		String enableFDA = Helper.getProperty(context, "LSACommonFramework.trigger.EnableFDA");

		if (enableFDA != null && enableFDA.equalsIgnoreCase("true")) {

			MapList domObjList = getConnectedToObjectsFromRelList(context, objectId, relList);

			// if connected objects block edit
			if (domObjList.size() > 0) {

				StringBuffer errMessage = new StringBuffer();
				errMessage.append(strMessage);
				errMessage.append("\n");

				// Get the list of objects for error message
				Iterator domObjListItr = domObjList.iterator();

				while (domObjListItr.hasNext()) {
					Map objMap = (Map) domObjListItr.next();
					errMessage.append((String) objMap.get(DomainConstants.SELECT_NAME));
					errMessage.append("\n");
				}

				${CLASS:emxContextUtil}.mqlError(context, errMessage.toString());
				return 1;
			}
		}

		return 0;
	}

	private int modifyAttributeObjectCheck(Context context, String objectId, String attributeName, String attrList, String relList, String strMessage)
			throws Exception {

		// Get FDA Enable property
		String enableFDA = Helper.getProperty(context, "LSACommonFramework.trigger.EnableFDA");

		if (enableFDA != null && enableFDA.equalsIgnoreCase("true")) {

			// Is this attribute in attrList?
			StringList slAttrList = getAttrStringListFromPropertyString(context, attrList);

			if (slAttrList.contains(attributeName)) {

				MapList domObjList = getConnectedToObjectsFromRelList(context, objectId, relList);

				// if connected objects block edit
				if (domObjList.size() > 0) {

					StringBuffer errMessage = new StringBuffer();
					errMessage.append(strMessage);
					errMessage.append("\n");

					// Get the list of objects for error message
					Iterator domObjListItr = domObjList.iterator();

					while (domObjListItr.hasNext()) {
						Map objMap = (Map) domObjListItr.next();
						errMessage.append((String) objMap.get(DomainConstants.SELECT_NAME));
						errMessage.append("\n");
					}

					${CLASS:emxContextUtil}.mqlError(context, errMessage.toString());
					return 1;
				}

			}
		}

		return 0;
	}

	/**
	 * Private method to get actual attribute names from comma separated list in
	 * properties file. Results are added to StringList.
	 * 
	 * @param context
	 * @param str
	 * @return
	 * @throws Exception
	 */
	private StringList getAttrStringListFromPropertyString(Context context, String str) throws Exception {

		StringList slRetList = new StringList();
		String[] strArr = str.split("\\,");

		for (int i = 0; i < strArr.length; i++) {

			String tmp = PropertyUtil.getSchemaProperty(context, strArr[i]);

			if (tmp != null && !tmp.equalsIgnoreCase("")) {

				slRetList.addElement(tmp);

			}
		}

		return slRetList;
	}

	/**
	 * Private method to get connected objects based on property setting of
	 * relationships
	 * 
	 * @param context
	 * @param objectId
	 * @param relList
	 * @return
	 * @throws Exception
	 */
	private MapList getConnectedToObjectsFromRelList(Context context, String objectId, String relList) throws Exception {
		// Get object
		DomainObject domObj = new DomainObject(objectId);

		StringBuffer sbRelList = new StringBuffer();

		if (relList != null && !relList.equalsIgnoreCase("")) {
			String[] strArr = relList.split("\\,");

			// for each code in arr
			for (int i = 0; i < strArr.length; i++) {

				String tmp = PropertyUtil.getSchemaProperty(context, strArr[i]);

				if (tmp != null && !tmp.equalsIgnoreCase("")) {
					sbRelList.append(tmp);

					if (i != strArr.length - 1)
						sbRelList.append(",");
				}
			}
		}

		// Need to push User Agent to ensure that we are returning all objects

		ContextUtil.pushContext(context);

		MapList retMapList = domObj.getRelatedObjects(context, sbRelList.toString(), "*", new StringList(DomainConstants.SELECT_NAME),
				new StringList(), true, true, (short) 1, "", "", 0);

		ContextUtil.popContext(context);

		return retMapList;

	}

}

