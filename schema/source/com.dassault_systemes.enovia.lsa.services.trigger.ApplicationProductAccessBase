/*
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */


import java.util.Map;

import matrix.db.Context;

import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.Helper.StringResource;
import com.dassault_systemes.enovia.lsa.LSAException;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.MessageUtil;

public class ${CLASSNAME} {

	/**
	 * Constructs a new JPO object.
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            This argument is ignored, only provided for allowing it to be
	 *            called from UI components.
	 * @throws LSAException
	 *             if the operation fails
	 */
	public ${CLASSNAME}(Context context, String[] args) throws LSAException {
		super();
	}

	/**
	 * Blocks object type conversion from/to the type(or it's subtypes)
	 * mentioned in configuration property key value.
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            holds input arguments.
	 * @return int 0 - success, 1 - failure
	 * @throws LSAException
	 */
	public int blockTypeConversion(Context context, String[] args) throws LSAException {
		try {
			String objectId = args[0];
			String strBlockedTypes = Helper.getProperty(context, "LSACommon.Trigger.BlockTypeConversion.Types");
			if (!Helper.isNullOrEmpty(objectId) && !Helper.isNullOrEmpty(strBlockedTypes)) {
				Map<String, Boolean> blockedTypeMap = Helper.getTypeKindOf(context, DomainObject.newInstance(context, objectId),
						strBlockedTypes.split(","));
				final String CURRENT_TYPE = args[1];
				final String NEW_TYPE = args[2];
				if (!Helper.isNullOrEmpty(blockedTypeMap) && !Helper.isNullOrEmpty(CURRENT_TYPE) && !Helper.isNullOrEmpty(NEW_TYPE)
						&& ((blockedTypeMap.containsKey(CURRENT_TYPE) && blockedTypeMap.get(CURRENT_TYPE)) || blockedTypeMap.containsKey(NEW_TYPE))) {
					String strI18nCurrentType = Helper.getI18NString(context, Helper.StringResource.AEF,
							"emxFramework.Type." + CURRENT_TYPE.replaceAll(" ", "_"));
					String strI18nNewType = Helper.getI18NString(context, Helper.StringResource.AEF,
							"emxFramework.Type." + NEW_TYPE.replaceAll(" ", "_"));
					String strErrorMessage = MessageUtil.getMessage(context, null, "LSACommonFramework.Message.CanNotChange", new String[] {
							strI18nCurrentType, strI18nNewType }, null, context.getLocale(), Helper.StringResource.LSA.toString());
					Helper.mqlError(context, StringResource.LSA, strErrorMessage);
					return 1;
				}
			}
			return 0;
		}
		catch (Exception e) {
			throw new LSAException(e);
		}
	}
}

