
import java.util.List;
import java.util.Map;

import matrix.db.Context;

import com.dassault_systemes.enovia.riskmgmt.ManagedRisk;
import com.dassault_systemes.enovia.riskmgmt.RiskMgmtException;
import com.dassault_systemes.enovia.riskmgmt.RiskMgmtSymNames;
import com.dassault_systemes.enovia.riskmgmt.RiskMgmtUtil;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;

public class ${CLASSNAME} implements RiskMgmtSymNames {

	/**
	 * Constructs a new JPO object.
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            This argument is ignored, only provided for allowing it to be
	 *            called from UI components.
	 * @throws Exception
	 *             if the operation fails
	 */
	public ${CLASSNAME}(Context context, String[] args) throws RiskMgmtException {
		super();
	}

	public int validateAttributesForPromotion(Context context, String[] args) throws RiskMgmtException {
		final String STATE_IDENTIFIED = RiskMgmtUtil.getActualStateName(context, SYM_POLICY_MANAGED_RISK.toString(), SYMBOLIC_STATE_IDENTIFIED);
		final String STATE_EVALUATED = RiskMgmtUtil.getActualStateName(context, SYM_POLICY_MANAGED_RISK.toString(), SYMBOLIC_STATE_EVALUATED);
		final String STATE_COMPLETE = RiskMgmtUtil.getActualStateName(context, SYMBOLIC_policy_ProjectTask, SYMBOLIC_STATE_COMPLETE);
		try {
			String id = args[0];
			String currentState = args[1];
			if (!RiskMgmtUtil.isNullOrEmpty(id) && !RiskMgmtUtil.isNullOrEmpty(currentState)) {
				ManagedRisk risk = new ManagedRisk(id);
				if (currentState.equals(STATE_IDENTIFIED)) {
					String riskReductionNeeded = risk.getAttributeValue(context, SYM_ATTR_RISK_REDUCTION_NEEDED.get(context));
					if (riskReductionNeeded.equalsIgnoreCase(RANGE_UNDEFINED)) {
						StringBuilder errorMsg = new StringBuilder();
						errorMsg.append(RiskMgmtUtil
								.getI18NString(context, RISK_MGMT_STRING_RESOURCE, "RiskMgmt.Message.CannotPromoteRiskReductionUndefined"));
						errorMsg.append(RiskMgmtUtil.getStateI18NString(context, SYM_POLICY_MANAGED_RISK.get(context), STATE_EVALUATED));
						RiskMgmtUtil.mqlNotice(context, RISK_MGMT_STRING_RESOURCE, errorMsg.toString());
						return 1;
					}
				}
				else if (currentState.equals(STATE_EVALUATED)) {
					List<Map<?, ?>> attachedTasks = risk.getTasks(context, RiskMgmtUtil.stringList(DomainConstants.SELECT_ID),
							RiskMgmtUtil.stringList(DomainRelationship.SELECT_ID), STATE_COMPLETE);
					if (!(RiskMgmtUtil.getTypeKindOf(context, DomainObject.newInstance(context, id), SYMBOLIC_TYPE_HAZARD))
							.containsValue(Boolean.TRUE)) {
						String controlMeasures = risk.getAttributeValue(context, SYM_ATTR_NOTES.get(context));
						if (RiskMgmtUtil.isNullOrEmpty(controlMeasures) && !RiskMgmtUtil.isNullOrEmpty(attachedTasks)) {
							RiskMgmtUtil.mqlNotice(context, RISK_MGMT_STRING_RESOURCE,
									"RiskMgmt.Message.CannotPromoteNoControlMeasuresAndIncompleteTasks");
							return 1;
						}
						else if (RiskMgmtUtil.isNullOrEmpty(controlMeasures)) {
							RiskMgmtUtil.mqlNotice(context, RISK_MGMT_STRING_RESOURCE, "RiskMgmt.Message.CannotPromoteNoControlMeasures");
							return 1;
						}
					}
					if (!RiskMgmtUtil.isNullOrEmpty(attachedTasks)) {
						RiskMgmtUtil.mqlNotice(context, RISK_MGMT_STRING_RESOURCE, "RiskMgmt.Message.CannotPromoteIncompleteTasks");
						return 1;
					}
				}
			}
			return 0;
		}
		catch (Exception e) {
			throw new RiskMgmtException();
		}
	}

	public int validateReductionNotNeededRationale(Context context, String[] args) throws RiskMgmtException {
		try {
			// TODO this is not fullfilling the purpose as checking the current
			// attribute value instead new value.Changes
			// needed to be done for this correction.
			String id = args[0];
			if (!RiskMgmtUtil.isNullOrEmpty(id)) {
				ManagedRisk risk = new ManagedRisk(id);
				String riskReductionNeeded = risk.getAttributeValue(context, SYM_ATTR_RISK_REDUCTION_NEEDED.get(context));
				String riskReductionNotNeededRationale = risk.getAttributeValue(context, SYM_ATTR_RISK_REDUCTION_NOT_NEEDED_RATIONALE.get(context));
				if (RANGE_NO.equalsIgnoreCase(riskReductionNeeded) && RiskMgmtUtil.isNullOrEmpty(riskReductionNotNeededRationale)) {
					RiskMgmtUtil.mqlNotice(context, RISK_MGMT_STRING_RESOURCE, "RiskMgmt.Message.RationaleNotProvided");
					return 1;
				}
			}
			return 0;
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}

	}
}

