
/**
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.dassault_systemes.enovia.lsa.Helper;
import com.dassault_systemes.enovia.lsa.LSAException;
import com.dassault_systemes.enovia.lsa.QueryUtil;
import com.dassault_systemes.enovia.lsa.ReviewRoute.RouteCompletionAction;
import com.dassault_systemes.enovia.lsa.componentframework.Component;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentException;
import com.dassault_systemes.enovia.lsa.componentframework.ComponentFactory;
import com.dassault_systemes.enovia.lsa.services.ContactService;
import com.dassault_systemes.enovia.lsa.services.CorrespondenceService;
import com.dassault_systemes.enovia.lsa.services.ReviewRouteService;
import com.dassault_systemes.enovia.lsa.ticket.TicketConstants;
import com.dassault_systemes.enovia.lsa.ticket.TicketException;
import com.dassault_systemes.enovia.lsa.ticket.TicketUtil;
import com.dassault_systemes.enovia.lsa.ticket.TicketConstants.Action;
import com.dassault_systemes.enovia.lsa.ticket.services.ComplaintProductEvaluationService;
import com.dassault_systemes.enovia.lsa.ticket.services.ComplaintTicketService;
import com.dassault_systemes.enovia.lsa.ticket.services.ComplaintTicketService.ChangePolicyState;
import com.dassault_systemes.enovia.lsa.ticket.services.EventService;
import com.matrixone.apps.common.CommonDocument;
import com.matrixone.apps.common.Message;
import com.matrixone.apps.common.Person;
import com.matrixone.apps.common.Route;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.DomainSymbolicConstants;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.UOMUtil;
import com.matrixone.apps.framework.ui.UIUtil;

import matrix.db.BusinessInterface;
import matrix.db.Context;
import matrix.db.Group;
import matrix.db.JPO;
import matrix.db.UserList;
import matrix.db.Vault;
import matrix.util.Pattern;
import matrix.util.StringList;

/**
 * @author v8l
 * 
 */

public class ${CLASSNAME} {

	private boolean				initialisationDone																= false;

	protected String			TYPE_CONTACT																	= new String();
	protected String			TYPE_COMPLAINTEVENT																= new String();
	private String				TYPE_COMPLAINTTICKETS															= new String();
	protected String			TYPE_COMPLAINT																	= new String();
	protected String			TYPE_EQUIPMENTSERVIEREQUEST														= new String();
	protected String			TYPE_INQUIRY																	= new String();

	private String				POLICY_COMPLAINT																= new String();
	protected String			POLICY_COMPLAINTINVALID															= new String();
	protected String			POLICY_MODEL																	= new String();
	private String				POLICY_INQUIRY																	= new String();
	private String				POLICY_EQUIPMENTSERVICEREQUEST													= new String();

	protected String			RELATIONSHIP_COMPLAINTEVENTPRODUCT												= new String();
	protected String			RELATIONSHIP_COMPLAINTEVENT														= new String();
	protected String			RELATIONSHIP_RELATEDITEMS														= new String();
	private String				RELATIONSHIP_COMPLAINTREFERENCE													= new String();
	private String				RELATIONSHIP_COMPLAINTEQUIPMENTLOANER											= new String();
	private String				RELATIONSHIP_COMPLAINTEQUIPMENTREPLACEMENT										= new String();

	private String				INTERFACE_ASSIGNED																= new String();

	private String				ATTRIBUTE_COMPLAINTORIGINATOR													= new String();
	private String				ATTRIBUTE_COMPLAINTFORMALLYDESIGNATEDUNIT										= new String();
	private String				ATTRIBUTE_COMPLAINTSOURCE														= new String();
	private String				ATTRIBUTE_COMPLAINTEXTERNALREFERENCE											= new String();
	protected String			ATTRIBUTE_COMPLAINTLITIGATION													= new String();
	private String				ATTRIBUTE_COMPLAINTDATEOFAWARENESS												= new String();
	private String				ATTRIBUTE_COMPLAINTSUPPLEMENTALAWARENESSDATE									= new String();
	private String				ATTRIBUTE_COMPLAINTDISTRIBUTORAWARENESSDATE										= new String();
	private String				ATTRIBUTE_COMPLAINTDATECLOSED													= new String();
	private String				ATTRIBUTE_COMPLAINTINVALIDRATIONALE												= new String();
	private String				ATTRIBUTE_COMPLAINTINVALIDATOR													= new String();
	private String				ATTRIBUTE_COMPLAINTINVALIDATEDDATE												= new String();
	protected String			ATTRIBUTE_COMPLAINTCUSTOMERCOMPENSATIONMETHOD									= new String();
	protected String			ATTRIBUTE_COMPLAINTCOMPENSATIONDETAILS											= new String();
	protected String			ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT											= new String();

	// IW Complaint Product Rell attributes
	protected String			ATTRIBUTE_COMPLAINTPRODUCTKITNUMBER												= new String();
	protected String			ATTRIBUTE_COMPLAINTPRODUCTEXPIRATIONDATE										= new String();
	protected String			ATTRIBUTE_COMPLAINTPRODUCTPARTNUMBER											= new String();
	protected String			ATTRIBUTE_COMPLAINTPRODUCTOTHERNUMBER											= new String();
	protected String			ATTRIBUTE_COMPLAINTPRODUCTLOTNUMBER												= new String();
	protected String			ATTRIBUTE_COMPLAINTPRODUCTMODELNUMBER											= new String();

	// PQC Complaint Event Product Rel attributes
	private String				ATTRIBUTE_KITNUMBER																= new String();
	private String				ATTRIBUTE_EXPIRATIONDATE														= new String();
	private String				ATTRIBUTE_PARTNUMBER															= new String();
	private String				ATTRIBUTE_OTHERNUMBER															= new String();
	private String				ATTRIBUTE_LOTNUMBER																= new String();
	private String				ATTRIBUTE_MODELNUMBER															= new String();

	// Investigation attributes common from IW Event
	private String				ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYMALFUNCTION					= new String();
	protected String			ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYLABELING						= new String();
	protected String			ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYUSEERROR						= new String();
	private String				ATTRIBUTE_COMPLAINTRISKANALYSISREQUIRED											= new String();
	private String				ATTRIBUTE_COMPLAINTRISKANALYSISNUMBER											= new String();
	private String				ATTRIBUTE_COMPLAINTCONFIRMED													= new String();
	protected String			ATTRIBUTE_COMPLAINTINVESTIGATIONRECOMMENDEDACTIONS								= new String();
	protected String			ATTRIBUTE_COMPLAINTINVESTIGATOR													= new String();
	protected String			ATTRIBUTE_COMPLAINTINVESTIGATIONCLOSEDDATE										= new String();
	protected String			ATTRIBUTE_COMPLAINTINVESTIGATIONMETHODS											= new String();
	private String				ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARY								= new String();
	private String				ATTRIBUTE_COMPLAINTINVESTIGATIONREQUIRED										= new String();
	protected String			ATTRIBUTE_RESULTSCODE															= new String();
	protected String			ATTRIBUTE_CONCLUSIONCODE														= new String();
	private String				ATTRIBUTE_COMPLAINTTICKETSEVERITY												= new String();
	private String				ATTRIBUTE_NOTES																	= new String();
	protected String			ATTRIBUTE_COMPLAINTINVESTIGATIONRATIONALE										= new String();

	private String				ATTRIBUTE_COMPLAINTDATEOFOCCURRENCE												= new String();
	protected String			ATTRIBUTE_COMPLAINTEVENTTIMING													= new String();
	private String				ATTRIBUTE_COMPLAINTEVENTTIMINGDETAIL											= new String();
	protected String			ATTRIBUTE_COMPLAINTEVENTDETAIL													= new String();
	private String				ATTRIBUTE_COMPLAINTPRECEDINGORCONTRIBUTINGEVENTS								= new String();
	private String				ATTRIBUTE_COMPLAINTIMMEDIATEACTIONSTAKEN										= new String();
	private String				ATTRIBUTE_COMPLAINTOTHERACTIONTAKEN												= new String();
	private String				ATTRIBUTE_COMPLAINTPERSONSAFFECTED												= new String();
	private String				ATTRIBUTE_COMPLAINTIMPACTTOPERSONAFFECTED										= new String();
	private String				ATTRIBUTE_COMPLAINTEVENTRELEVANTTESTSDATA										= new String();
	private String				ATTRIBUTE_COMPLAINTEVENTOTHERRELEVANTHISTORY									= new String();

	protected String			ATTRIBUTE_COMPLAINTEVENTCUSTOMERISSUECODE										= new String();
	protected String			ATTRIBUTE_ISSUECODE																= new String();
	protected String			ATTRIBUTE_EXPERIENCECODE														= new String();
	protected String			ATTRIBUTE_COMPLAINTEVENTCAUSECODE												= new String();
	private String				ATTRIBUTE_COMPLAINTEVENTCOMPANYRESPONSIBLEFORREPORTING							= new String();
	private String				ATTRIBUTE_COMPLAINTNOINVESTIGATIONRATIONALE										= new String();
	private String				ATTRIBUTE_COMPLAINTNORISKANALYSISRATIONALE										= new String();
	private String				ATTRIBUTE_COMPLAINTRESPONSIBLECOMPANY											= new String();
	private String				ATTRIBUTE_COMPLAINTNOINVESTIGATIONSIGNER										= new String();
	private String				ATTRIBUTE_COMPLAINTNOINVESTIGATIONDATE											= new String();
	private String				ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWER										= new String();
	private String				ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWDATE										= new String();
	private String				ATTRIBUTE_COMPLAINTDHRREVIEWED													= new String();
	private String				ATTRIBUTE_COMPLAINTDHRREVIEWRESULTS												= new String();
	private String				ATTRIBUTE_COMPLAINTNODHRREVIEWRATIONALE											= new String();
	private String				ATTRIBUTE_COMPLAINTINVESTIGATIONRESULTS											= new String();
	protected String			ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONDETAIL								= new String();
	private String				ATTRIBUTE_COMPLAINTINVESTIGATIONCAPANUMBER										= new String();
	private String				ATTRIBUTE_EXTERNALEVALUATOR														= new String();
	private String				ATTRIBUTE_EXTERNALEVALUATORNOTIFIEDDATE											= new String();
	private String				ATTRIBUTE_MANUFACTURERANALYSIS													= new String();

	// iw Contact
	private String				ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMENTS										= new String();
	private String				ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMUNICATIONMETHOD							= new String();
	private String				ATTRIBUTE_COMPLAINTCORRESPONDENCEDATE											= new String();
	private String				ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMUNICATOR									= new String();
	private String				ATTRIBUTE_COMPLAINTCORRESPONDENCECONTACT										= new String();
	private String				ATTRIBUTE_COMPLAINTCORRESPONDENCETIME											= new String();
	private String				ATTRIBUTE_COMPLAINTCORRESPONDENCETYPE											= new String();

	// PQC Contact
	private String				ATTRIBUTE_CORRESPONDENCECOMMENTS												= new String();
	private String				ATTRIBUTE_CORRESPONDENCECOMMUNICATOR											= new String();
	private String				ATTRIBUTE_CORRESPONDENCEDATE													= new String();
	private String				ATTRIBUTE_CORRESPONDENCEMETHOD													= new String();
	private String				ATTRIBUTE_CORRESPONDENCESOURCE													= new String();
	private String				ATTRIBUTE_CORRESPONDENCETIME													= new String();
	private String				ATTRIBUTE_CORRESPONDENCETYPE													= new String();

	// attribute on relationship contact
	private String				ATTRIBUTE_PRIMARYCOMPLAINTCONTACT												= new String();

	// IW Correspondence
	private String				ATTRIBUTE_COMPLAINTCONTACTSALUTATION											= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTFIRSTNAME												= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTSECONDNAME											= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTFAMILYNAME											= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTTELEPHONECOUNTRYCODE									= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTTELEPHONEAREACODE										= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTTELEPHONELOCALNUMBER									= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTTELEPHONEEXTENSION									= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTTITLE													= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTBUSINESSNAME											= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTBUSINESSDIVISION										= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTACCOUNTNUMBER											= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTADDRESSLINE1											= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTADDRESSLINE2											= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTCITY													= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTSTATE													= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTZIPCODE												= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTZIPCODEEXTENSION										= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTCOUNTRY												= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTFAXNUMBER												= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTMOBILENUMBER											= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTEMAILADDRESS											= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTOCCUPATION											= new String();
	private String				ATTRIBUTE_COMPLAINTCONTACTRELATIONSHIP											= new String();

	// PQC Correspondence
	private String				ATTRIBUTE_SALUTATION															= new String();
	protected String			ATTRIBUTE_FIRSTNAME																= new String();
	protected String			ATTRIBUTE_MIDDLENAME															= new String();
	protected String			ATTRIBUTE_LASTNAME																= new String();
	protected String			ATTRIBUTE_TITLE																	= new String();
	protected String			ATTRIBUTE_BUSINESSORAGENCY														= new String();
	protected String			ATTRIBUTE_ADDRESS																= new String();
	protected String			ATTRIBUTE_ADDRESSLINE2															= new String();
	protected String			ATTRIBUTE_CITY																	= new String();
	protected String			ATTRIBUTE_STATE																	= new String();
	protected String			ATTRIBUTE_POSTALCODE															= new String();
	protected String			ATTRIBUTE_ZIPCODEEXTENSION														= new String();
	protected String			ATTRIBUTE_COUNTRY																= new String();
	protected String			ATTRIBUTE_FAXNUMBER																= new String();
	protected String			ATTRIBUTE_CELLPHONENUMBER														= new String();
	protected String			ATTRIBUTE_EMAILADDRESS															= new String();
	private String				ATTRIBUTE_OCCUPATION															= new String();
	protected String			ATTRIBUTE_CONTACTTYPE															= new String();

	// ESR Attributes
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTMANUFACTURINGLOCATION								= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTUNITRETURNDATESHIPPEDFROMCUSTOMER					= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTUNITRETURNDATERECEIVEDFROMCUSTOMER					= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTDATESENTFORDECONTAMINATION							= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTDATERECEIVEDFORDECONTAMINATION						= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTDATESENTFROMDECONTAMINATION							= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTDATERECEIVEDFROMDECONTAMINATION						= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTDECONTAMINATIONLOCATION								= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTDECONTAMINATIONMETHOD								= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTADDITIONALITEMSRECEIVED								= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTINCOMINGINSPECTIONSUMMARY							= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONPERFORMED									= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTFAILUREMODE											= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATOR											= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONDATE										= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONSUMMARY									= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTSERVICEPERFORMED									= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTSERVICEPERSON										= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTDATESERVICED										= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTSERVICESUMMARY										= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEDPARTNUMBERS									= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTADDITIONALINFORMATION								= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTWARRANTYREPAIR										= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTOEMWARRANTYINFO										= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTEXTENDEDWARRANTYINFO								= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTCUSTOMERPONUMBERFORREPAIR							= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTOTHERBILLINGINFORMATION								= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTLABORHOURS											= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTSTATUSOFREPAIR										= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONDATE										= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONFREQUENCY								= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONDUEDATE									= new String();

	// iwRetrun and iwFulfillment attributes
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTSERIALNUMBER								= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTADDITIONALEQUIPMENTINFORMATION			= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTCUSTOMERLOCATIONSHIPPEDTO				= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTADDITIONALSHIPPINGINFORMATION			= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATESHIPPEDTOCUSTOMER					= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATERECEIVEDBYCUSTOMER					= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATESHIPPEDFROMCUSTOMER					= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATERECEIVEDFROMCUSTOMER					= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTLOANERSERIALNUMBER									= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTLOANERADDITIONALEQUIPMENTINFORMATION				= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTLOANERCUSTOMERLOCATIONSHIPPEDTO						= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTLOANERSHIPPINGADDITIONALINFORMATION					= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTLOANERDATESHIPPEDTOCUSTOMER							= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTLOANERDATERECEIVEDBYCUSTOMER						= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTLOANERDATESHIPPEDFROMCUSTOMER						= new String();
	private String				ATTRIBUTE_COMPLAINTEQUIPMENTLOANERDATERECEIVEDFROMCUSTOMER						= new String();

	// Return attributes
	private String				ATTRIBUTE_COMPLAINTPRODUCTTOBERETURNED											= new String();
	private String				ATTRIBUTE_QUANTITY																= new String();
	private String				ATTRIBUTE_UNITOFMEASURE															= new String();
	private String				ATTRIBUTE_RETURNRECEIVER														= new String();
	private String				ATTRIBUTE_COMPLAINTPRODUCTNOTRETURNEDRATIONALE									= new String();
	protected String			ATTRIBUTE_COMPLAINTPRODUCTRECEIVEDDATE											= new String();
	protected String			ATTRIBUTE_FULFILLMENTTYPE														= new String();
	private String				ATTRIBUTE_RECEIVEDPRODUCTSERIALNUMBER											= new String();
	private String				ATTRIBUTE_RETURNDISPOSITION														= new String();
	private String				ATTRIBUTE_RETURNNOTEVALUATEDJUSTIFICATION										= new String();
	private String				ATTRIBUTE_COMPLAINTPRODUCTRMANUMBER												= new String();

	protected StringList		iwComplaintAttrL																= new StringList();
	protected StringList		iwEventAttrL																	= new StringList();
	protected StringList		iwInvestigationAttrL															= new StringList();
	private StringList			iwInquiryAttrL																	= new StringList();
	private StringList			iwESRAttrL																		= new StringList();
	private final StringList	iwContactAttrL																	= new StringList();

	protected String			comlaintTicketOwner																= new String();

	private String				TYPE_LSCOMPLAINT																= new String();
	private String				TYPE_LSEVENT																	= new String();
	private String				TYPE_SUBMISSION																	= new String();
	private String				TYPE_MDRSubmission																= new String();
	private String				TYPE_CMDRSubmission																= new String();
	private String				TYPE_CMDRFinalSubmission														= new String();
	private String				TYPE_MDVSubmission																= new String();
	private String				TYPE_MDVFinalSubmission															= new String();
	private String				TYPE_OtherSubmission															= new String();

	private String				POLICY_LSCOMPLAINT																= new String();
	private String				POLICY_COMPLAINTSUBMISSION														= new String();
	private String				POLICY_COMPLAINTWAIVED															= new String();

	private String				POLICY_COMPLAINT_PRODUCT_EVALUATION												= new String();
	private String				POLICY_ADVERSEEVENTREPORT														= new String();
	private String				POLICY_ADVERSEEVENTREPORTWAIVE													= new String();

	private String				RELATIONSHIP_DERIVEDEVENT														= new String();
	private String				RELATIONSHIP_SUBMISSIONCONTACT													= new String();
	private String				RELATIONSHIP_ACTIONTASKSUBMISSION												= new String();
	private String				RELATIONSHIP_SUBMISSION															= new String();
	private String				RELATIONSHIP_SUBMISSIONPRODUCT													= new String();
	private String				RELATIONSHIP_SUBMISSIONEVENT													= new String();

	// iwPatient
	private String				ATTRIBUTE_COMPLAINTPATIENTSEX													= new String();
	private String				ATTRIBUTE_COMPLAINTPATIENTAGEATTIMEOFEVENT										= new String();
	private String				ATTRIBUTE_COMPLAINTPATIENTDOB													= new String();
	private String				ATTRIBUTE_COMPLAINTPATIENTWEIGHT												= new String();
	private String				ATTRIBUTE_COMPLAINTPATIENTWEIGHTUOM												= new String();
	private String				ATTRIBUTE_COMPLAINTPATIENTAGEDEFINE												= new String();
	private String				ATTRIBUTE_COMPLAINTSUBMISSIONOUTCOMEDEATH										= new String();

	private String				ATTRIBUTE_COMPLAINTSUBMISSIONOUTCOMEDEATHDATE									= new String();

	// iwEvent
	private String				ATTRIBUTE_COMPLAINTMDRREPORTABLE												= new String();
	private String				ATTRIBUTE_COMPLAINTMDRREPORTABLERATIONALE										= new String();
	private String				ATTRIBUTE_COMPLAINTMDVREPORTABLE												= new String();
	private String				ATTRIBUTE_COMPLAINTMDVREPORTABLERATIONALE										= new String();
	private String				ATTRIBUTE_COMPLAINTCMDRREPORTABLE												= new String();
	private String				ATTRIBUTE_COMPLAINTCMDRREPORTABLERATIONALE										= new String();
	private String				ATTRIBUTE_COMPLAINTSUBMISSIONADVERSEEVENT										= new String();
	private String				ATTRIBUTE_COMPLAINTSUBMISSIONPRODUCTPROBLEM										= new String();

	// Patient
	private String				ATTRIBUTE_DATEOFBIRTH															= new String();
	private String				ATTRIBUTE_GENDER																= new String();
	private String				ATTRIBUTE_WEIGHT																= new String();
	private String				ATTRIBUTE_MEDICALHISTORY														= new String();
	private String				ATTRIBUTE_DEATH																	= new String();
	private String				ATTRIBUTE_DEATHDATE																= new String();
	private String				ATTRIBUTE_PATIENTPROBLEMCODE													= new String();
	private String				ATTRIBUTE_LABRESULTS															= new String();
	private String				ATTRIBUTE_DIAGNOSISPERFORMED													= new String();
	private String				ATTRIBUTE_REMEDIALACTIONTAKEN													= new String();
	private String				ATTRIBUTE_DIAGNOSISRESULTS														= new String();
	private String				ATTRIBUTE_NODIAGNOSISRATIONALE													= new String();
	private String				ATTRIBUTE_AUTOPSYPERFORMED														= new String();
	private String				ATTRIBUTE_DEATHDUETOAUTOPSY														= new String();
	private String				ATTRIBUTE_AUTOPSYRESULTS														= new String();
	private String				ATTRIBUTE_PATIENTOUTCOME														= new String();

	// on Complaint Event Patient Relationship
	private String				ATTRIBUTE_AGEATTIMEOFEVENT														= new String();

	// iwSubmisssion common attributes
	private String				ATTRIBUTE_COMPLAINT_REGULATORY_REPORT_TYPE										= new String();
	private String				ATTRIBUTE_COMPLAINT_MANUFACTURER_REPORT_NUMBER									= new String();
	private String				ATTRIBUTE_COMPLAINT_DATE_OF_THIS_REPORT											= new String();
	private String				ATTRIBUTE_COMPLAINT_REPORT_REVIEWER												= new String();
	private String				ATTRIBUTE_COMPLAINT_REPORT_REVIEWED_DATE										= new String();
	private String				ATTRIBUTE_COMPLAINT_REPORT_SUBMITTER											= new String();
	private String				ATTRIBUTE_COMPLAINT_REPORT_SUBMITTED_DATE										= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_WAIVE_REASON										= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DUE_DATE											= new String();

	// iwMDR Specific attribute
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_NAME_TITLE						= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FIRST_GIVEN_NAME					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_SECOND_GIVEN_NAME				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FAMILY_NAME						= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FACILITY_NAME					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_LINE1					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_LINE2					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_CITY						= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_STATE					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_COUNTRY					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_POSTAL					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_POSTAL_EXTENSION			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_EMAIL							= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_LOCAL_NUMBER			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_COUNTRY_CODE			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_AREA_CODE				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_EXTENSION				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FAX_NUMBER						= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_FOREIGN				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_STUDY					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_LITERATURE			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_CONSUMER				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_HEALTH_PROFESSIONAL	= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_USER_FACILITY			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_COMPANY_REP			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_DISTRIBUTOR			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_OTHER					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_OTHER_TEXT			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_RECEIVED_DATE						= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_STN_NUMBER							= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_PMA_NUMBER							= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_5_DAY					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_7_DAY					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_10_DAY					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_15_DAY					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_30_DAY					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_PERIODIC				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_INITIAL					= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_FOLLOW_UP				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_FOLLOW_UP_NUMBER		= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_NUMBER						= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_CORRECTION			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_ADDL_INFO			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_FDA_REQUEST		= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_EVALUATION			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_1				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_2				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_3				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_4				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_1				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_2				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_3				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_4				= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_1			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_2			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_3			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_4			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_RECALL		= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_NOTIFICATION	= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_REPAIR		= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_INSPECTION	= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_REPLACE		= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_MONITORING	= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_RELABELING	= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_MODIFICATION	= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_OTHER_CHOICE	= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_OTHER		= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CORRECTION_REPORTING_NUMBER	= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_ADDITIONAL_NARRATIVE			= new String();
	private String				ATTRIBUTE_COMPLAINT_SUBMISSION_REPORTER_ALSO_SENT_TO_FDA						= new String();
	private String				ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_BATCH_NUMBER									= new String();
	private String				ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_COREID										= new String();
	private String				ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_MESSAGEID									= new String();

	// AER Attributes
	private String				ATTRIBUTE_AER_CLASSIFICATION													= new String();
	private String				ATTRIBUTE_AER_FINAL																= new String();
	private String				ATTRIBUTE_AER_REVIEWED_DATE														= new String();
	private String				ATTRIBUTE_AER_SUBMITTED_DATE													= new String();
	private String				ATTRIBUTE_WAIVER_REASON															= new String();
	private String				ATTRIBUTE_AER_REVIEWER_PERSON													= new String();
	private String				ATTRIBUTE_AER_DUE_DATE															= new String();
	private String				ATTRIBUTE_AER_SUBMITTER_PERSON													= new String();
	private String				ATTRIBUTE_REPORT_NUMBER															= new String();
	private String				ATTRIBUTE_REPORT_DATE															= new String();
	private String				ATTRIBUTE_REGULATORY_RESPONSE													= new String();
	private String				ATTRIBUTE_COMMENTS																= new String();
	private String				ATTRIBUTE_DATE_OF_NEXT_REPORT													= new String();
	private String				ATTRIBUTE_BATCH_NUMBER															= new String();
	private String				ATTRIBUTE_CORE_ID																= new String();
	private String				ATTRIBUTE_MESSAGE_ID															= new String();
	private String				ATTRIBUTE_SUBMIT_STATUS															= new String();

	// MDR Attributes
	private String				ATTRIBUTE_INITIAL_REPORTER_ALSO_SENT_TO_FDA										= new String();
	private String				ATTRIBUTE_PRODUCT_CODE															= new String();
	private String				ATTRIBUTE_PRODUCT_STN_NUMBER													= new String();
	private String				ATTRIBUTE_PRODUCT_PMA_NUMBER													= new String();
	private String				ATTRIBUTE_REPORT_CONTACT_NAME													= new String();
	private String				ATTRIBUTE_REPORT_CONTACT_PHONE													= new String();
	private String				ATTRIBUTE_REPORT_CONTACT_ADDRESS												= new String();
	private String				ATTRIBUTE_REPORT_SITE_ADDRESS													= new String();
	private String				ATTRIBUTE_REPORT_SOURCE															= new String();
	private String				ATTRIBUTE_FDA_REPORT_NUMBER														= new String();
	private String				ATTRIBUTE_FOLLOWUP_TYPE															= new String();
	private String				ATTRIBUTE_COMMON_DEVICE_NAME													= new String();

	private final StringList	iwPatientAttrL																	= new StringList();
	private final StringList	iwEventReportableAttrL															= new StringList();
	private final StringList	iwSubmissionAttrL																= new StringList();
	private final StringList	iwMdrAttrL																		= new StringList();

	private final boolean		isComplaintReportable															= false;

	@SuppressWarnings("unchecked")
	private void initializeLS(Context context) throws TicketException {
		initialisationDone = true;

		TYPE_CONTACT = PropertyUtil.getSchemaProperty(context, "type_Contact");
		TYPE_COMPLAINTEVENT = PropertyUtil.getSchemaProperty(context, "type_ComplaintEvent");
		TYPE_COMPLAINT = PropertyUtil.getSchemaProperty(context, "type_Complaint");
		TYPE_EQUIPMENTSERVIEREQUEST = PropertyUtil.getSchemaProperty(context, "type_EquipmentServiceRequest");
		TYPE_INQUIRY = PropertyUtil.getSchemaProperty(context, "type_Inquiry");
		TYPE_COMPLAINTTICKETS = PropertyUtil.getSchemaProperty(context, "type_COMPLAINTTICKETS");

		POLICY_COMPLAINT = PropertyUtil.getSchemaProperty(context, "policy_Complaint");
		POLICY_COMPLAINTINVALID = PropertyUtil.getSchemaProperty(context, "policy_ComplaintInvalid");
		POLICY_MODEL = PropertyUtil.getSchemaProperty(context, "policy_Model");
		POLICY_INQUIRY = PropertyUtil.getSchemaProperty(context, "policy_Inquiry");
		POLICY_EQUIPMENTSERVICEREQUEST = PropertyUtil.getSchemaProperty(context, "policy_EquipmentServiceRequest");

		RELATIONSHIP_COMPLAINTEVENT = PropertyUtil.getSchemaProperty(context, "relationship_ComplaintEvent");
		RELATIONSHIP_RELATEDITEMS = PropertyUtil.getSchemaProperty(context, "relationship_RelatedItems");
		RELATIONSHIP_COMPLAINTEVENTPRODUCT = PropertyUtil.getSchemaProperty(context, "relationship_ComplaintEventProduct");
		RELATIONSHIP_COMPLAINTREFERENCE = PropertyUtil.getSchemaProperty(context, "relationship_ComplaintReference");
		RELATIONSHIP_COMPLAINTEQUIPMENTLOANER = PropertyUtil.getSchemaProperty(context, "relationship_ComplaintEquipmentLoaner");
		RELATIONSHIP_COMPLAINTEQUIPMENTREPLACEMENT = PropertyUtil.getSchemaProperty(context, "relationship_ComplaintEquipmentReplacement");

		INTERFACE_ASSIGNED = PropertyUtil.getSchemaProperty(context, "interface_Assigned");

		ATTRIBUTE_COMPLAINTORIGINATOR = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintOriginator");
		ATTRIBUTE_COMPLAINTFORMALLYDESIGNATEDUNIT = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintFormallyDesignatedUnit");
		ATTRIBUTE_COMPLAINTSOURCE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintSource");
		ATTRIBUTE_COMPLAINTEXTERNALREFERENCE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintExternalReference");
		ATTRIBUTE_COMPLAINTLITIGATION = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintLitigation");
		ATTRIBUTE_COMPLAINTDATEOFAWARENESS = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintDateofAwareness");
		ATTRIBUTE_COMPLAINTSUPPLEMENTALAWARENESSDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintSupplementalAwarenessDate");
		ATTRIBUTE_COMPLAINTDISTRIBUTORAWARENESSDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintDistributorAwarenessDate");
		ATTRIBUTE_COMPLAINTDATECLOSED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintDateClosed");
		ATTRIBUTE_COMPLAINTINVALIDRATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvalidRationale");
		ATTRIBUTE_COMPLAINTINVALIDATOR = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvalidator");
		ATTRIBUTE_COMPLAINTINVALIDATEDDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvalidatedDate");
		ATTRIBUTE_COMPLAINTCUSTOMERCOMPENSATIONMETHOD = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCustomerCompensationMethod");
		ATTRIBUTE_COMPLAINTCOMPENSATIONDETAILS = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCompensationDetails");
		ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintReportableComplaint");

		// IW Complaint Product Rell attributes
		ATTRIBUTE_COMPLAINTPRODUCTKITNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintProductKitNumber");
		ATTRIBUTE_COMPLAINTPRODUCTEXPIRATIONDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintProductExpirationDate");
		ATTRIBUTE_COMPLAINTPRODUCTPARTNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintProductPartNumber");
		ATTRIBUTE_COMPLAINTPRODUCTOTHERNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintProductOtherNumber");
		ATTRIBUTE_COMPLAINTPRODUCTLOTNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintProductLotNumber");
		ATTRIBUTE_COMPLAINTPRODUCTMODELNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintProductModelNumber");

		// PQC Complaint Event Product Rel attributes
		ATTRIBUTE_KITNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_KitNumber");
		ATTRIBUTE_EXPIRATIONDATE = PropertyUtil.getSchemaProperty(context, "attribute_ExpirationDate");
		ATTRIBUTE_PARTNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_PartNumber");
		ATTRIBUTE_OTHERNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_OtherNumber");
		ATTRIBUTE_LOTNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_LotNumber");
		ATTRIBUTE_MODELNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ModelNumber");

		// Investigation attributes common from IW Event
		ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYMALFUNCTION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintInvestigationConclusionSummaryMalfunction");
		ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYLABELING = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintInvestigationConclusionSummaryLabeling");
		ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYUSEERROR = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintInvestigationConclusionSummaryUseError");
		ATTRIBUTE_COMPLAINTRISKANALYSISREQUIRED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintRiskAnalysisRequired");
		ATTRIBUTE_COMPLAINTRISKANALYSISNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintRiskAnalysisNumber");
		ATTRIBUTE_COMPLAINTCONFIRMED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintConfirmed");
		ATTRIBUTE_COMPLAINTINVESTIGATIONRECOMMENDEDACTIONS = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintInvestigationRecommendedActions");
		ATTRIBUTE_COMPLAINTINVESTIGATOR = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvestigator");
		ATTRIBUTE_COMPLAINTINVESTIGATIONCLOSEDDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvestigationClosedDate");
		ATTRIBUTE_COMPLAINTINVESTIGATIONMETHODS = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvestigationMethods");
		ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintInvestigationConclusionSummary");
		ATTRIBUTE_COMPLAINTINVESTIGATIONREQUIRED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvestigationRequired");
		ATTRIBUTE_RESULTSCODE = PropertyUtil.getSchemaProperty(context, "attribute_ResultsCode");
		ATTRIBUTE_CONCLUSIONCODE = PropertyUtil.getSchemaProperty(context, "attribute_ConclusionCode");
		ATTRIBUTE_COMPLAINTTICKETSEVERITY = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintTicketSeverity");
		ATTRIBUTE_NOTES = PropertyUtil.getSchemaProperty(context, "attribute_Notes");
		ATTRIBUTE_COMPLAINTINVESTIGATIONRATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvestigationRationale");
		ATTRIBUTE_COMMENTS = PropertyUtil.getSchemaProperty(context, "attribute_Comments");

		ATTRIBUTE_COMPLAINTDATEOFOCCURRENCE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintDateofOccurrence");
		ATTRIBUTE_COMPLAINTEVENTTIMING = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEventTiming");
		ATTRIBUTE_COMPLAINTEVENTTIMINGDETAIL = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEventTimingDetail");
		ATTRIBUTE_COMPLAINTEVENTDETAIL = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEventDetail");
		ATTRIBUTE_COMPLAINTPRECEDINGORCONTRIBUTINGEVENTS = PropertyUtil
				.getSchemaProperty(context, "attribute_ComplaintPrecedingorContributingEvents");
		ATTRIBUTE_COMPLAINTIMMEDIATEACTIONSTAKEN = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintImmediateActionsTaken");
		ATTRIBUTE_COMPLAINTOTHERACTIONTAKEN = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintOtherActionTaken");
		ATTRIBUTE_COMPLAINTPERSONSAFFECTED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintPersonsAffected");
		ATTRIBUTE_COMPLAINTIMPACTTOPERSONAFFECTED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintImpacttoPersonAffected");
		ATTRIBUTE_COMPLAINTEVENTRELEVANTTESTSDATA = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEventRelevantTestsData");
		ATTRIBUTE_COMPLAINTEVENTOTHERRELEVANTHISTORY = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEventOtherRelevantHistory");
		ATTRIBUTE_COMPLAINTEVENTCUSTOMERISSUECODE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEventCustomerIssueCode");
		ATTRIBUTE_ISSUECODE = PropertyUtil.getSchemaProperty(context, "attribute_IssueCode");
		ATTRIBUTE_EXPERIENCECODE = PropertyUtil.getSchemaProperty(context, "attribute_ExperienceCode");
		ATTRIBUTE_COMPLAINTEVENTCAUSECODE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEventCauseCode");
		ATTRIBUTE_COMPLAINTEVENTCOMPANYRESPONSIBLEFORREPORTING = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEventCompanyResponsibleForReporting");
		ATTRIBUTE_COMPLAINTNOINVESTIGATIONRATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintNoInvestigationRationale");
		ATTRIBUTE_COMPLAINTNORISKANALYSISRATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintNoRiskAnalysisRationale");
		ATTRIBUTE_COMPLAINTRESPONSIBLECOMPANY = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintResponsibleCompany");
		ATTRIBUTE_COMPLAINTNOINVESTIGATIONSIGNER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintNoInvestigationSigner");
		ATTRIBUTE_COMPLAINTNOINVESTIGATIONDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintNoInvestigationDate");
		ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvestigationReviewer");
		ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvestigationReviewDate");
		ATTRIBUTE_COMPLAINTDHRREVIEWED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintDHRReviewed");
		ATTRIBUTE_COMPLAINTDHRREVIEWRESULTS = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintDHRReviewResults");
		ATTRIBUTE_COMPLAINTNODHRREVIEWRATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintNoDHRReviewRationale");
		ATTRIBUTE_COMPLAINTINVESTIGATIONRESULTS = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvestigationResults");
		ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONDETAIL = PropertyUtil
				.getSchemaProperty(context, "attribute_ComplaintInvestigationConclusionDetail");
		ATTRIBUTE_COMPLAINTINVESTIGATIONCAPANUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvestigationCAPANumber");
		ATTRIBUTE_EXTERNALEVALUATOR = PropertyUtil.getSchemaProperty(context, "attribute_ExternalEvaluator");
		ATTRIBUTE_EXTERNALEVALUATORNOTIFIEDDATE = PropertyUtil.getSchemaProperty(context, "attribute_ExternalEvaluatorNotifiedDate");
		ATTRIBUTE_MANUFACTURERANALYSIS = PropertyUtil.getSchemaProperty(context, "attribute_ManufacturerAnalysis");

		// IW Contact
		ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMENTS = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCorrespondenceComments");
		ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMUNICATIONMETHOD = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintCorrespondenceCommunicationMethod");
		ATTRIBUTE_COMPLAINTCORRESPONDENCEDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCorrespondenceDate");
		ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMUNICATOR = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCorrespondenceCommunicator");
		ATTRIBUTE_COMPLAINTCORRESPONDENCECONTACT = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCorrespondenceContact");
		ATTRIBUTE_COMPLAINTCORRESPONDENCETIME = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCorrespondenceTime");
		ATTRIBUTE_COMPLAINTCORRESPONDENCETYPE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCorrespondenceType");

		// PQC Contact
		ATTRIBUTE_CORRESPONDENCECOMMENTS = PropertyUtil.getSchemaProperty(context, "attribute_CorrespondenceComments");
		ATTRIBUTE_CORRESPONDENCECOMMUNICATOR = PropertyUtil.getSchemaProperty(context, "attribute_CorrespondenceCommunicator");
		ATTRIBUTE_CORRESPONDENCEDATE = PropertyUtil.getSchemaProperty(context, "attribute_CorrespondenceDate");
		ATTRIBUTE_CORRESPONDENCEMETHOD = PropertyUtil.getSchemaProperty(context, "attribute_CorrespondenceMethod");
		ATTRIBUTE_CORRESPONDENCESOURCE = PropertyUtil.getSchemaProperty(context, "attribute_CorrespondenceSource");
		ATTRIBUTE_CORRESPONDENCETIME = PropertyUtil.getSchemaProperty(context, "attribute_CorrespondenceTime");
		ATTRIBUTE_CORRESPONDENCETYPE = PropertyUtil.getSchemaProperty(context, "attribute_CorrespondenceType");

		ATTRIBUTE_PRIMARYCOMPLAINTCONTACT = PropertyUtil.getSchemaProperty(context, "attribute_PrimaryComplaintContact");

		// IW Correspondence
		ATTRIBUTE_COMPLAINTCONTACTSALUTATION = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactSalutation");
		ATTRIBUTE_COMPLAINTCONTACTFIRSTNAME = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactFirstName");
		ATTRIBUTE_COMPLAINTCONTACTSECONDNAME = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactSecondName");
		ATTRIBUTE_COMPLAINTCONTACTFAMILYNAME = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactFamilyName");
		ATTRIBUTE_COMPLAINTCONTACTTELEPHONECOUNTRYCODE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactTelephoneCountryCode");
		ATTRIBUTE_COMPLAINTCONTACTTELEPHONEAREACODE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactTelephoneAreaCode");
		ATTRIBUTE_COMPLAINTCONTACTTELEPHONELOCALNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactTelephoneLocalNumber");
		ATTRIBUTE_COMPLAINTCONTACTTELEPHONEEXTENSION = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactTelephoneExtension");
		ATTRIBUTE_COMPLAINTCONTACTTITLE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactTitle");
		ATTRIBUTE_COMPLAINTCONTACTBUSINESSNAME = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactBusinessName");
		ATTRIBUTE_COMPLAINTCONTACTBUSINESSDIVISION = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactBusinessDivision");
		ATTRIBUTE_COMPLAINTCONTACTACCOUNTNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactAccountNumber");
		ATTRIBUTE_COMPLAINTCONTACTADDRESSLINE1 = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactAddressLine1");
		ATTRIBUTE_COMPLAINTCONTACTADDRESSLINE2 = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactAddressLine2");
		ATTRIBUTE_COMPLAINTCONTACTCITY = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactCity");
		ATTRIBUTE_COMPLAINTCONTACTSTATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactState");
		ATTRIBUTE_COMPLAINTCONTACTZIPCODE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactZIPCode");
		ATTRIBUTE_COMPLAINTCONTACTZIPCODEEXTENSION = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactZIPCodeExtension");
		ATTRIBUTE_COMPLAINTCONTACTCOUNTRY = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactCountry");
		ATTRIBUTE_COMPLAINTCONTACTFAXNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactFaxNumber");
		ATTRIBUTE_COMPLAINTCONTACTMOBILENUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactMobileNumber");
		ATTRIBUTE_COMPLAINTCONTACTEMAILADDRESS = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactEmailAddress");
		ATTRIBUTE_COMPLAINTCONTACTOCCUPATION = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactOccupation");
		ATTRIBUTE_COMPLAINTCONTACTRELATIONSHIP = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintContactRelationship");

		// PQC Correspondence
		ATTRIBUTE_SALUTATION = PropertyUtil.getSchemaProperty(context, "attribute_Salutation");
		ATTRIBUTE_FIRSTNAME = PropertyUtil.getSchemaProperty(context, "attribute_FirstName");
		ATTRIBUTE_MIDDLENAME = PropertyUtil.getSchemaProperty(context, "attribute_MiddleName");
		ATTRIBUTE_LASTNAME = PropertyUtil.getSchemaProperty(context, "attribute_LastName");
		ATTRIBUTE_TITLE = PropertyUtil.getSchemaProperty(context, "attribute_Title");
		ATTRIBUTE_BUSINESSORAGENCY = PropertyUtil.getSchemaProperty(context, "attribute_BusinessorAgency");
		ATTRIBUTE_ADDRESS = PropertyUtil.getSchemaProperty(context, "attribute_Address");
		ATTRIBUTE_ADDRESSLINE2 = PropertyUtil.getSchemaProperty(context, "attribute_AddressLine2");
		ATTRIBUTE_CITY = PropertyUtil.getSchemaProperty(context, "attribute_City");
		ATTRIBUTE_STATE = PropertyUtil.getSchemaProperty(context, "attribute_StateRegion");
		ATTRIBUTE_POSTALCODE = PropertyUtil.getSchemaProperty(context, "attribute_PostalCode");
		ATTRIBUTE_ZIPCODEEXTENSION = PropertyUtil.getSchemaProperty(context, "attribute_ZIPCodeExtension");
		ATTRIBUTE_COUNTRY = PropertyUtil.getSchemaProperty(context, "attribute_Country");
		ATTRIBUTE_FAXNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_FaxNumber");
		ATTRIBUTE_CELLPHONENUMBER = PropertyUtil.getSchemaProperty(context, "attribute_CellPhoneNumber");
		ATTRIBUTE_EMAILADDRESS = PropertyUtil.getSchemaProperty(context, "attribute_EmailAddress");
		ATTRIBUTE_OCCUPATION = PropertyUtil.getSchemaProperty(context, "attribute_Occupation");
		ATTRIBUTE_CONTACTTYPE = PropertyUtil.getSchemaProperty(context, "attribute_ContactType");

		// ESR Attributes
		ATTRIBUTE_COMPLAINTEQUIPMENTMANUFACTURINGLOCATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentManufacturingLocation");
		ATTRIBUTE_COMPLAINTEQUIPMENTUNITRETURNDATESHIPPEDFROMCUSTOMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentUnitReturnDateShippedFromCustomer");
		ATTRIBUTE_COMPLAINTEQUIPMENTUNITRETURNDATERECEIVEDFROMCUSTOMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentUnitReturnDateReceivedFromCustomer");
		ATTRIBUTE_COMPLAINTEQUIPMENTDATESENTFORDECONTAMINATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentDateSentForDecontamination");
		ATTRIBUTE_COMPLAINTEQUIPMENTDATERECEIVEDFORDECONTAMINATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentDateReceivedForDecontamination");
		ATTRIBUTE_COMPLAINTEQUIPMENTDATESENTFROMDECONTAMINATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentDateSentFromDecontamination");
		ATTRIBUTE_COMPLAINTEQUIPMENTDATERECEIVEDFROMDECONTAMINATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentDateReceivedFromDecontamination");
		ATTRIBUTE_COMPLAINTEQUIPMENTDECONTAMINATIONLOCATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentDecontaminationLocation");
		ATTRIBUTE_COMPLAINTEQUIPMENTDECONTAMINATIONMETHOD = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentDecontaminationMethod");
		ATTRIBUTE_COMPLAINTEQUIPMENTADDITIONALITEMSRECEIVED = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentAdditionalItemsReceived");
		ATTRIBUTE_COMPLAINTEQUIPMENTINCOMINGINSPECTIONSUMMARY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentIncomingInspectionSummary");
		ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONPERFORMED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentEvaluationPerformed");
		ATTRIBUTE_COMPLAINTEQUIPMENTFAILUREMODE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentFailureMode");
		ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATOR = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentEvaluator");
		ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentEvaluationDate");
		ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONSUMMARY = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentEvaluationSummary");
		ATTRIBUTE_COMPLAINTEQUIPMENTSERVICEPERFORMED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentServicePerformed");
		ATTRIBUTE_COMPLAINTEQUIPMENTSERVICEPERSON = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentServicePerson");
		ATTRIBUTE_COMPLAINTEQUIPMENTDATESERVICED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentDateServiced");
		ATTRIBUTE_COMPLAINTEQUIPMENTSERVICESUMMARY = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentServiceSummary");
		ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEDPARTNUMBERS = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentReplacedPartNumbers");
		ATTRIBUTE_COMPLAINTEQUIPMENTADDITIONALINFORMATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentAdditionalInformation");
		ATTRIBUTE_COMPLAINTEQUIPMENTWARRANTYREPAIR = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentWarrantyRepair");
		ATTRIBUTE_COMPLAINTEQUIPMENTOEMWARRANTYINFO = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentOEMWarrantyInfo");
		ATTRIBUTE_COMPLAINTEQUIPMENTEXTENDEDWARRANTYINFO = PropertyUtil
				.getSchemaProperty(context, "attribute_ComplaintEquipmentExtendedWarrantyInfo");
		ATTRIBUTE_COMPLAINTEQUIPMENTCUSTOMERPONUMBERFORREPAIR = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentCustomerPONumberForRepair");
		ATTRIBUTE_COMPLAINTEQUIPMENTOTHERBILLINGINFORMATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentOtherBillingInformation");
		ATTRIBUTE_COMPLAINTEQUIPMENTLABORHOURS = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentLaborHours");
		ATTRIBUTE_COMPLAINTEQUIPMENTSTATUSOFREPAIR = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentStatusOfRepair");
		ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentCalibrationDate");
		ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONFREQUENCY = PropertyUtil
				.getSchemaProperty(context, "attribute_ComplaintEquipmentCalibrationFrequency");
		ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONDUEDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentCalibrationDueDate");
		ATTRIBUTE_COMPLAINTINVALIDRATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvalidRationale");
		ATTRIBUTE_COMPLAINTINVALIDATOR = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvalidator");
		ATTRIBUTE_COMPLAINTINVALIDATEDDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintInvalidatedDate");

		ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTSERIALNUMBER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentReplacementSerialNumber");
		ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTADDITIONALEQUIPMENTINFORMATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentReplacementAdditionalEquipmentInformation");
		ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTCUSTOMERLOCATIONSHIPPEDTO = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentReplacementCustomerLocationShippedTo");
		ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTADDITIONALSHIPPINGINFORMATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentReplacementAdditionalShippingInformation");
		ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATESHIPPEDTOCUSTOMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentReplacementDateShippedToCustomer");
		ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATERECEIVEDBYCUSTOMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentReplacementDateReceivedByCustomer");
		ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATESHIPPEDFROMCUSTOMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentReplacementDateShippedFromCustomer");
		ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATERECEIVEDFROMCUSTOMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentReplacementDateReceivedFromCustomer");

		ATTRIBUTE_COMPLAINTEQUIPMENTLOANERSERIALNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintEquipmentLoanerSerialNumber");
		ATTRIBUTE_COMPLAINTEQUIPMENTLOANERADDITIONALEQUIPMENTINFORMATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentLoanerAdditionalEquipmentInformation");
		ATTRIBUTE_COMPLAINTEQUIPMENTLOANERCUSTOMERLOCATIONSHIPPEDTO = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentLoanerCustomerLocationShippedTo");
		ATTRIBUTE_COMPLAINTEQUIPMENTLOANERSHIPPINGADDITIONALINFORMATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentLoanerShippingAdditionalInformation");
		ATTRIBUTE_COMPLAINTEQUIPMENTLOANERDATESHIPPEDTOCUSTOMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentLoanerDateShippedToCustomer");
		ATTRIBUTE_COMPLAINTEQUIPMENTLOANERDATERECEIVEDBYCUSTOMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentLoanerDateReceivedByCustomer");
		ATTRIBUTE_COMPLAINTEQUIPMENTLOANERDATESHIPPEDFROMCUSTOMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentLoanerDateShippedFromCustomer");
		ATTRIBUTE_COMPLAINTEQUIPMENTLOANERDATERECEIVEDFROMCUSTOMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintEquipmentLoanerDateReceivedFromCustomer");

		// Retrun Attributes
		ATTRIBUTE_COMPLAINTPRODUCTTOBERETURNED = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintProductToBeReturned");
		ATTRIBUTE_QUANTITY = PropertyUtil.getSchemaProperty(context, "attribute_Quantity");
		ATTRIBUTE_UNITOFMEASURE = PropertyUtil.getSchemaProperty(context, "attribute_UnitofMeasure");
		ATTRIBUTE_RETURNRECEIVER = PropertyUtil.getSchemaProperty(context, "attribute_ReturnReceiver");
		ATTRIBUTE_COMPLAINTPRODUCTRMANUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintProductRMANumber");
		ATTRIBUTE_COMPLAINTPRODUCTNOTRETURNEDRATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintProductNotReturnedRationale");
		ATTRIBUTE_COMPLAINTPRODUCTRECEIVEDDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintProductReceivedDate");
		ATTRIBUTE_FULFILLMENTTYPE = PropertyUtil.getSchemaProperty(context, "attribute_FulfillmentType");
		ATTRIBUTE_RECEIVEDPRODUCTSERIALNUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ReceivedProductSerialNumber");
		ATTRIBUTE_RETURNDISPOSITION = PropertyUtil.getSchemaProperty(context, "attribute_ReturnDisposition");
		ATTRIBUTE_RETURNNOTEVALUATEDJUSTIFICATION = PropertyUtil.getSchemaProperty(context, "attribute_ReturnNotEvaluatedJustification");

		iwComplaintAttrL = new StringList(12);
		iwComplaintAttrL.add(DomainConstants.SELECT_CURRENT);
		iwComplaintAttrL.add(DomainConstants.SELECT_ORIGINATED);
		iwComplaintAttrL.add(DomainConstants.SELECT_OWNER);
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTORIGINATOR));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTFORMALLYDESIGNATEDUNIT));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTSOURCE));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEXTERNALREFERENCE));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTDATEOFAWARENESS));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTSUPPLEMENTALAWARENESSDATE));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTDISTRIBUTORAWARENESSDATE));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDRATIONALE));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDATEDDATE));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCUSTOMERCOMPENSATIONMETHOD));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCOMPENSATIONDETAILS));
		iwComplaintAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT));

		iwEventAttrL = new StringList(36);
		iwEventAttrL.add(DomainConstants.SELECT_ID);
		iwEventAttrL.add(DomainConstants.SELECT_ORIGINATED);
		iwEventAttrL.add(DomainConstants.SELECT_OWNER);
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTDATEOFOCCURRENCE));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTTIMING));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTTIMINGDETAIL));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTDETAIL));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPRECEDINGORCONTRIBUTINGEVENTS));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTIMMEDIATEACTIONSTAKEN));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTOTHERACTIONTAKEN));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPERSONSAFFECTED));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTIMPACTTOPERSONAFFECTED));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTRELEVANTTESTSDATA));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTOTHERRELEVANTHISTORY));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTTOBERETURNED));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTNOTRETURNEDRATIONALE));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTRMANUMBER));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTCAUSECODE));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTCUSTOMERISSUECODE));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTCOMPANYRESPONSIBLEFORREPORTING));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTNOINVESTIGATIONRATIONALE));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTNORISKANALYSISRATIONALE));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTRESPONSIBLECOMPANY));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTNOINVESTIGATIONSIGNER));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTNOINVESTIGATIONDATE));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWER));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWDATE));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTDHRREVIEWED));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTDHRREVIEWRESULTS));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTNODHRREVIEWRATIONALE));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONRESULTS));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONDETAIL));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCAPANUMBER));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_RETURNDISPOSITION));
		iwEventAttrL.add(getAttributeSelect(ATTRIBUTE_RETURNNOTEVALUATEDJUSTIFICATION));

		iwInvestigationAttrL = new StringList(20);
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYMALFUNCTION));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYLABELING));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYUSEERROR));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTRISKANALYSISREQUIRED));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTRISKANALYSISNUMBER));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONFIRMED));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONRECOMMENDEDACTIONS));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATOR));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCLOSEDDATE));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONMETHODS));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARY));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONREQUIRED));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_RESULTSCODE));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONRATIONALE));
		iwInvestigationAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONDETAIL));

		iwInquiryAttrL = new StringList(6);
		iwInquiryAttrL.add(DomainConstants.SELECT_ID);
		iwInquiryAttrL.add(DomainConstants.SELECT_ORIGINATED);
		iwInquiryAttrL.add(DomainConstants.SELECT_OWNER);
		iwInquiryAttrL.add(DomainConstants.SELECT_CURRENT);
		iwInquiryAttrL.add(DomainConstants.SELECT_DESCRIPTION);
		iwInquiryAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDRATIONALE));
		iwInquiryAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDATOR));
		iwInquiryAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDATEDDATE));

		iwESRAttrL = new StringList(36);
		iwESRAttrL.add(DomainConstants.SELECT_ID);
		iwESRAttrL.add(DomainConstants.SELECT_ORIGINATED);
		iwESRAttrL.add(DomainConstants.SELECT_OWNER);
		iwESRAttrL.add(DomainConstants.SELECT_CURRENT);
		iwESRAttrL.add(DomainConstants.SELECT_DESCRIPTION);
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTMANUFACTURINGLOCATION));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTUNITRETURNDATESHIPPEDFROMCUSTOMER));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTUNITRETURNDATERECEIVEDFROMCUSTOMER));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDATESENTFORDECONTAMINATION));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDATERECEIVEDFORDECONTAMINATION));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDATESENTFROMDECONTAMINATION));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDATERECEIVEDFROMDECONTAMINATION));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDECONTAMINATIONLOCATION));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDECONTAMINATIONMETHOD));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTADDITIONALITEMSRECEIVED));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTINCOMINGINSPECTIONSUMMARY));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONPERFORMED));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTFAILUREMODE));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATOR));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONDATE));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONSUMMARY));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTSERVICEPERFORMED));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTSERVICEPERSON));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDATESERVICED));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTSERVICESUMMARY));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEDPARTNUMBERS));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTADDITIONALINFORMATION));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTWARRANTYREPAIR));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTOEMWARRANTYINFO));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTEXTENDEDWARRANTYINFO));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTCUSTOMERPONUMBERFORREPAIR));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTOTHERBILLINGINFORMATION));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTLABORHOURS));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTSTATUSOFREPAIR));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONDATE));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONFREQUENCY));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONDUEDATE));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDRATIONALE));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDATOR));
		iwESRAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDATEDDATE));

		iwContactAttrL.add(DomainConstants.SELECT_ID);
		iwContactAttrL.add(DomainConstants.SELECT_NAME);
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTSALUTATION));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTFIRSTNAME));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTSECONDNAME));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTFAMILYNAME));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTTITLE));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTBUSINESSNAME));
		// iwAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTBUSINESSDIVISION));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTADDRESSLINE1));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTADDRESSLINE2));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTCITY));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTSTATE));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTZIPCODE));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTZIPCODEEXTENSION));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTCOUNTRY));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTFAXNUMBER));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTMOBILENUMBER));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTEMAILADDRESS));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTOCCUPATION));
		iwContactAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTRELATIONSHIP));

		TYPE_LSCOMPLAINT = PropertyUtil.getSchemaProperty(context, "type_LifeScienceComplaint");
		TYPE_LSEVENT = PropertyUtil.getSchemaProperty(context, "type_LifeScienceComplaintEvent");
		TYPE_SUBMISSION = PropertyUtil.getSchemaProperty(context, "type_ComplaintSubmission");
		TYPE_MDRSubmission = PropertyUtil.getSchemaProperty(context, "type_ComplaintMDRSubmission");
		TYPE_CMDRSubmission = PropertyUtil.getSchemaProperty(context, "type_ComplaintCMDRSubmission");
		TYPE_CMDRFinalSubmission = PropertyUtil.getSchemaProperty(context, "type_ComplaintCMDRFinalSubmission");
		TYPE_MDVSubmission = PropertyUtil.getSchemaProperty(context, "type_ComplaintMDVSubmission");
		TYPE_MDVFinalSubmission = PropertyUtil.getSchemaProperty(context, "type_ComplaintMDVFinalSubmission");
		TYPE_OtherSubmission = PropertyUtil.getSchemaProperty(context, "type_ComplaintOtherSubmission");

		POLICY_LSCOMPLAINT = PropertyUtil.getSchemaProperty(context, "policy_LifeScienceComplaint");
		POLICY_COMPLAINTSUBMISSION = PropertyUtil.getSchemaProperty(context, "policy_ComplaintSubmission");
		POLICY_COMPLAINTWAIVED = PropertyUtil.getSchemaProperty(context, "policy_ComplaintWaived");

		POLICY_COMPLAINT_PRODUCT_EVALUATION = PropertyUtil.getSchemaProperty(context, "policy_ComplaintProductEvaluation");
		POLICY_ADVERSEEVENTREPORT = PropertyUtil.getSchemaProperty(context, "policy_AdverseEventReport");
		POLICY_ADVERSEEVENTREPORTWAIVE = PropertyUtil.getSchemaProperty(context, "policy_AdverseEventReportWaive");

		RELATIONSHIP_DERIVEDEVENT = PropertyUtil.getSchemaProperty(context, "relationship_DerivedEvent");
		RELATIONSHIP_SUBMISSIONCONTACT = PropertyUtil.getSchemaProperty(context, "relationship_ComplaintSubmissionContact");
		RELATIONSHIP_ACTIONTASKSUBMISSION = PropertyUtil.getSchemaProperty(context, "relationship_ComplaintActionTaskSubmission");
		RELATIONSHIP_SUBMISSION = PropertyUtil.getSchemaProperty(context, "relationship_ComplaintSubmission");
		RELATIONSHIP_SUBMISSIONPRODUCT = PropertyUtil.getSchemaProperty(context, "relationship_ComplaintSubmissionProduct");
		RELATIONSHIP_SUBMISSIONEVENT = PropertyUtil.getSchemaProperty(context, "relationship_ComplaintSubmissionEvent");

		// iwPatient
		ATTRIBUTE_COMPLAINTPATIENTSEX = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintPatientSex");
		ATTRIBUTE_COMPLAINTPATIENTAGEATTIMEOFEVENT = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintPatientAgeAtTimeOfEvent");
		ATTRIBUTE_COMPLAINTPATIENTDOB = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintPatientDOB");
		ATTRIBUTE_COMPLAINTPATIENTWEIGHT = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintPatientWeight");
		ATTRIBUTE_COMPLAINTPATIENTWEIGHTUOM = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintPatientWeightUOM");
		ATTRIBUTE_COMPLAINTPATIENTAGEDEFINE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintPatientAgeDefine");
		ATTRIBUTE_COMPLAINTSUBMISSIONOUTCOMEDEATH = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintSubmissionOutcomeDeath");
		ATTRIBUTE_COMPLAINTSUBMISSIONOUTCOMEDEATHDATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintSubmissionOutcomeDeathDate");

		// iwEvent
		ATTRIBUTE_COMPLAINTMDRREPORTABLE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintMDRReportable");
		ATTRIBUTE_COMPLAINTMDRREPORTABLERATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintMDRReportableRationale");
		ATTRIBUTE_COMPLAINTMDVREPORTABLE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintMDVReportable");
		ATTRIBUTE_COMPLAINTMDVREPORTABLERATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintMDVReportableRationale");
		ATTRIBUTE_COMPLAINTCMDRREPORTABLE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCMDRReportable");
		ATTRIBUTE_COMPLAINTCMDRREPORTABLERATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCMDRReportableRationale");

		ATTRIBUTE_COMPLAINTSUBMISSIONADVERSEEVENT = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintSubmissionAdverseEvent");
		ATTRIBUTE_COMPLAINTSUBMISSIONPRODUCTPROBLEM = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintSubmissionProductProblem");

		// Patient
		ATTRIBUTE_DATEOFBIRTH = PropertyUtil.getSchemaProperty(context, "attribute_DateofBirth");
		ATTRIBUTE_GENDER = PropertyUtil.getSchemaProperty(context, "attribute_Gender");
		ATTRIBUTE_WEIGHT = PropertyUtil.getSchemaProperty(context, "attribute_Weight");
		ATTRIBUTE_MEDICALHISTORY = PropertyUtil.getSchemaProperty(context, "attribute_MedicalHistory");
		ATTRIBUTE_DEATH = PropertyUtil.getSchemaProperty(context, "attribute_Death");
		ATTRIBUTE_DEATHDATE = PropertyUtil.getSchemaProperty(context, "attribute_DeathDate");
		ATTRIBUTE_PATIENTPROBLEMCODE = PropertyUtil.getSchemaProperty(context, "attribute_PatientProblemCode");
		ATTRIBUTE_COMMENTS = PropertyUtil.getSchemaProperty(context, "attribute_Comments");
		ATTRIBUTE_LABRESULTS = PropertyUtil.getSchemaProperty(context, "attribute_LabResults");
		ATTRIBUTE_DIAGNOSISPERFORMED = PropertyUtil.getSchemaProperty(context, "attribute_DiagnosisPerformed");
		ATTRIBUTE_REMEDIALACTIONTAKEN = PropertyUtil.getSchemaProperty(context, "attribute_RemedialActionTaken");
		ATTRIBUTE_DIAGNOSISRESULTS = PropertyUtil.getSchemaProperty(context, "attribute_DiagnosisResults");
		ATTRIBUTE_NODIAGNOSISRATIONALE = PropertyUtil.getSchemaProperty(context, "attribute_NoDiagnosisRationale");
		ATTRIBUTE_AUTOPSYPERFORMED = PropertyUtil.getSchemaProperty(context, "attribute_AutopsyPerformed");
		ATTRIBUTE_DEATHDUETOAUTOPSY = PropertyUtil.getSchemaProperty(context, "attribute_DeathDueToAutopsy");
		ATTRIBUTE_AUTOPSYRESULTS = PropertyUtil.getSchemaProperty(context, "attribute_AutopsyResults");
		ATTRIBUTE_PATIENTOUTCOME = PropertyUtil.getSchemaProperty(context, "attribute_PatientOutcome");

		ATTRIBUTE_AGEATTIMEOFEVENT = PropertyUtil.getSchemaProperty(context, "attribute_AgeAtTimeOfEvent");

		ATTRIBUTE_COMPLAINT_REGULATORY_REPORT_TYPE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintRegulatoryReportType");
		ATTRIBUTE_COMPLAINT_MANUFACTURER_REPORT_NUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintManufacturerReportNumber");
		ATTRIBUTE_COMPLAINT_DATE_OF_THIS_REPORT = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintDateOfThisReport");
		ATTRIBUTE_COMPLAINT_REPORT_REVIEWER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintReportReviewer");
		ATTRIBUTE_COMPLAINT_REPORT_REVIEWED_DATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintReportReviewedDate");
		ATTRIBUTE_COMPLAINT_REPORT_SUBMITTER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintReportSubmitter");
		ATTRIBUTE_COMPLAINT_REPORT_SUBMITTED_DATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintReportSubmittedDate");
		ATTRIBUTE_COMPLAINT_SUBMISSION_WAIVE_REASON = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintSubmissionWaiveReason");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DUE_DATE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintSubmissionDueDate");

		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_NAME_TITLE = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCONameTitle");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FIRST_GIVEN_NAME = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOFirstGivenName");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_SECOND_GIVEN_NAME = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOSecondGivenName");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FAMILY_NAME = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOFamilyName");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FACILITY_NAME = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOFacilityName");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_LINE1 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOAddressLine1");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_LINE2 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOAddressLine2");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_CITY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOAddressCity");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_STATE = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOAddressState");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_COUNTRY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOAddressCountry");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_POSTAL = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOAddressPostal");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_POSTAL_EXTENSION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOAddressPostalExtension");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_EMAIL = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOEmail");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_LOCAL_NUMBER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOTelephoneLocalNumber");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_COUNTRY_CODE = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOTelephoneCountryCode");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_AREA_CODE = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOTelephoneAreaCode");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_EXTENSION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOTelephoneExtension");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FAX_NUMBER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerCOFaxNumber");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_FOREIGN = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportSourceForeign");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_STUDY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportSourceStudy");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_LITERATURE = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportSourceLiterature");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_CONSUMER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportSourceConsumer");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_HEALTH_PROFESSIONAL = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportSourceHealthProfessional");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_USER_FACILITY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportSourceUserFacility");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_COMPANY_REP = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportSourceCompanyRep");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_DISTRIBUTOR = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportSourceDistributor");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_OTHER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportSourceOther");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_OTHER_TEXT = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportSourceOtherText");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_RECEIVED_DATE = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReceivedDate");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_STN_NUMBER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerSTNNumber");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_PMA_NUMBER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerPMANumber");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_5_DAY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportType5Day");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_7_DAY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportType7Day");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_10_DAY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportType10Day");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_15_DAY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportType15Day");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_30_DAY = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportType30Day");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_PERIODIC = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportTypePeriodic");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_INITIAL = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportTypeInitial");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_FOLLOW_UP = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportTypeFollowUp");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_FOLLOW_UP_NUMBER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportTypeFollowUpNumber");
		ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_NUMBER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionManufacturerReportNumber");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_CORRECTION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerFollowUpCorrection");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_ADDL_INFO = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerFollowUpAddlInfo");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_FDA_REQUEST = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerFollowUpFDARequest");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_EVALUATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerFollowUpEvaluation");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_1 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerMethodCode1");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_2 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerMethodCode2");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_3 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerMethodCode3");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_4 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerMethodCode4");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_1 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerResultsCode1");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_2 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerResultsCode2");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_3 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerResultsCode3");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_4 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerResultsCode4");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_1 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerConclusionsCode1");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_2 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerConclusionsCode2");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_3 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerConclusionsCode3");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_4 = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerConclusionsCode4");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_RECALL = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerRemedialActionRecall");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_NOTIFICATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerRemedialActionNotification");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_REPAIR = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerRemedialActionRepair");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_INSPECTION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerRemedialActionInspection");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_REPLACE = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerRemedialActionReplace");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_MONITORING = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerRemedialActionMonitoring");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_RELABELING = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerRemedialActionRelabeling");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_MODIFICATION = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerRemedialActionModification");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_OTHER_CHOICE = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerRemedialActionOtherChoice");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_OTHER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerRemedialActionOther");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CORRECTION_REPORTING_NUMBER = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerCorrectionReportingNumber");
		ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_ADDITIONAL_NARRATIVE = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionDeviceManufacturerAdditionalNarrative");
		ATTRIBUTE_COMPLAINT_SUBMISSION_REPORTER_ALSO_SENT_TO_FDA = PropertyUtil.getSchemaProperty(context,
				"attribute_ComplaintSubmissionReporterAlsoSentToFDA");
		ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_BATCH_NUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintMDRSubmissionBatchNumber");
		ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_COREID = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintMDRSubmissionCoreId");
		ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_MESSAGEID = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintMDRSubmissionMessageId");

		ATTRIBUTE_AER_CLASSIFICATION = PropertyUtil.getSchemaProperty(context, "attribute_AERClassification");
		ATTRIBUTE_AER_FINAL = PropertyUtil.getSchemaProperty(context, "attribute_AERFinal");
		ATTRIBUTE_AER_REVIEWED_DATE = PropertyUtil.getSchemaProperty(context, "attribute_AERReviewedDate");
		ATTRIBUTE_AER_SUBMITTED_DATE = PropertyUtil.getSchemaProperty(context, "attribute_AERSubmittedDate");
		ATTRIBUTE_WAIVER_REASON = PropertyUtil.getSchemaProperty(context, "attribute_WaiverReason");
		ATTRIBUTE_AER_REVIEWER_PERSON = PropertyUtil.getSchemaProperty(context, "attribute_AERReviewerPerson");
		ATTRIBUTE_AER_DUE_DATE = PropertyUtil.getSchemaProperty(context, "attribute_AERDueDate");
		ATTRIBUTE_AER_SUBMITTER_PERSON = PropertyUtil.getSchemaProperty(context, "attribute_AERSubmitterPerson");
		ATTRIBUTE_REPORT_NUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ReportNumber");
		ATTRIBUTE_REPORT_DATE = PropertyUtil.getSchemaProperty(context, "attribute_ReportDate");
		ATTRIBUTE_REGULATORY_RESPONSE = PropertyUtil.getSchemaProperty(context, "attribute_RegulatoryResponse");
		ATTRIBUTE_COMMENTS = PropertyUtil.getSchemaProperty(context, "attribute_Comments");
		ATTRIBUTE_DATE_OF_NEXT_REPORT = PropertyUtil.getSchemaProperty(context, "attribute_DateofNextReport");
		ATTRIBUTE_BATCH_NUMBER = PropertyUtil.getSchemaProperty(context, "attribute_BatchNumber");
		ATTRIBUTE_CORE_ID = PropertyUtil.getSchemaProperty(context, "attribute_CoreId");
		ATTRIBUTE_MESSAGE_ID = PropertyUtil.getSchemaProperty(context, "attribute_MessageId");
		ATTRIBUTE_SUBMIT_STATUS = PropertyUtil.getSchemaProperty(context, "attribute_SubmitStatus");

		ATTRIBUTE_INITIAL_REPORTER_ALSO_SENT_TO_FDA = PropertyUtil.getSchemaProperty(context, "attribute_InitialReporterAlsoSentToFDA");
		ATTRIBUTE_PRODUCT_CODE = PropertyUtil.getSchemaProperty(context, "attribute_ProductCode");
		ATTRIBUTE_PRODUCT_STN_NUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ProductSTNNumber");
		ATTRIBUTE_PRODUCT_PMA_NUMBER = PropertyUtil.getSchemaProperty(context, "attribute_ProductPMANumber");
		ATTRIBUTE_REPORT_CONTACT_NAME = PropertyUtil.getSchemaProperty(context, "attribute_ReportContactName");
		ATTRIBUTE_REPORT_CONTACT_PHONE = PropertyUtil.getSchemaProperty(context, "attribute_ReportContactPhone");
		ATTRIBUTE_REPORT_CONTACT_ADDRESS = PropertyUtil.getSchemaProperty(context, "attribute_ReportContactAddress");
		ATTRIBUTE_REPORT_SITE_ADDRESS = PropertyUtil.getSchemaProperty(context, "attribute_ReportSiteAddress");
		ATTRIBUTE_REPORT_SOURCE = PropertyUtil.getSchemaProperty(context, "attribute_ReportSource");
		ATTRIBUTE_FDA_REPORT_NUMBER = PropertyUtil.getSchemaProperty(context, "attribute_FDAReportNumber");
		ATTRIBUTE_FOLLOWUP_TYPE = PropertyUtil.getSchemaProperty(context, "attribute_FollowUpType");
		ATTRIBUTE_COMMON_DEVICE_NAME = PropertyUtil.getSchemaProperty(context, "attribute_CommonDeviceName");

		iwPatientAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPATIENTSEX));
		iwPatientAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPATIENTAGEATTIMEOFEVENT));
		iwPatientAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPATIENTDOB));
		iwPatientAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPATIENTWEIGHT));
		iwPatientAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPATIENTWEIGHTUOM));
		iwPatientAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTPATIENTAGEDEFINE));
		iwPatientAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTSUBMISSIONOUTCOMEDEATH));
		iwPatientAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTSUBMISSIONOUTCOMEDEATHDATE));

		iwEventReportableAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTMDRREPORTABLE));
		iwEventReportableAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTMDRREPORTABLERATIONALE));
		iwEventReportableAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTMDVREPORTABLE));
		iwEventReportableAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTMDVREPORTABLERATIONALE));
		iwEventReportableAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCMDRREPORTABLE));
		iwEventReportableAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCMDRREPORTABLERATIONALE));

		iwSubmissionAttrL.add(DomainConstants.SELECT_ID);
		iwSubmissionAttrL.add(DomainConstants.SELECT_TYPE);
		iwSubmissionAttrL.add(DomainConstants.SELECT_ORIGINATED);
		iwSubmissionAttrL.add(DomainConstants.SELECT_OWNER);
		iwSubmissionAttrL.add(DomainConstants.SELECT_CURRENT);
		iwSubmissionAttrL.add(DomainConstants.SELECT_DESCRIPTION);
		iwSubmissionAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_REGULATORY_REPORT_TYPE));
		iwSubmissionAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_MANUFACTURER_REPORT_NUMBER));
		iwSubmissionAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_DATE_OF_THIS_REPORT));
		iwSubmissionAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_REPORT_REVIEWER));
		iwSubmissionAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_REPORT_REVIEWED_DATE));
		iwSubmissionAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_REPORT_SUBMITTER));
		iwSubmissionAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_REPORT_SUBMITTED_DATE));
		iwSubmissionAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_WAIVE_REASON));
		iwSubmissionAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DUE_DATE));

		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_NAME_TITLE));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FIRST_GIVEN_NAME));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_SECOND_GIVEN_NAME));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FAMILY_NAME));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FACILITY_NAME));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_LINE1));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_LINE2));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_CITY));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_STATE));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_COUNTRY));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_POSTAL));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_POSTAL_EXTENSION));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_EMAIL));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_LOCAL_NUMBER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_COUNTRY_CODE));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_AREA_CODE));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_EXTENSION));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FAX_NUMBER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_FOREIGN));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_STUDY));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_LITERATURE));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_CONSUMER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_HEALTH_PROFESSIONAL));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_USER_FACILITY));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_COMPANY_REP));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_DISTRIBUTOR));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_OTHER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_OTHER_TEXT));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_RECEIVED_DATE));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_STN_NUMBER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_PMA_NUMBER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_5_DAY));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_7_DAY));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_10_DAY));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_15_DAY));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_30_DAY));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_PERIODIC));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_INITIAL));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_FOLLOW_UP));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_FOLLOW_UP_NUMBER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_NUMBER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_CORRECTION));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_ADDL_INFO));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_FDA_REQUEST));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_EVALUATION));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_1));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_2));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_3));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_METHOD_CODE_4));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_1));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_2));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_3));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_RESULTS_CODE_4));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_1));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_2));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_3));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CONCLUSIONS_CODE_4));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_RECALL));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_NOTIFICATION));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_REPAIR));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_INSPECTION));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_REPLACE));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_MONITORING));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_RELABELING));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_MODIFICATION));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_OTHER_CHOICE));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_REMEDIAL_ACTION_OTHER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CORRECTION_REPORTING_NUMBER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_ADDITIONAL_NARRATIVE));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_REPORTER_ALSO_SENT_TO_FDA));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_BATCH_NUMBER));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_COREID));
		iwMdrAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_MESSAGEID));
	}

	protected static ComplaintTicketService getComplaintTicketService(Context context) throws ComponentException {
		final Component component = ComponentFactory.getInstance(context, TicketConstants.TICKET_CORE_COMPONENT);
		final ComplaintTicketService complaintTicketService = (ComplaintTicketService) component.getService(ComplaintTicketService.class);
		return complaintTicketService;
	}

	protected static EventService getEventService(Context context) throws ComponentException {
		final Component component = ComponentFactory.getInstance(context, TicketConstants.TICKET_CORE_COMPONENT);
		final EventService eventService = (EventService) component.getService(EventService.class);
		return eventService;
	}

	protected static ContactService getContactService(Context context) throws ComponentException {
		final Component LSAContactsCore = ComponentFactory.getInstance(context, "LSACommonCoreComponent");
		final ContactService service = (ContactService) LSAContactsCore.getService(ContactService.class);
		return service;
	}

	private static CorrespondenceService getCorrespondenceService(Context context) throws ComponentException {
		final Component LSACommonCore = ComponentFactory.getInstance(context, "LSACommonCoreComponent");
		final CorrespondenceService service = (CorrespondenceService) LSACommonCore.getService(CorrespondenceService.class);
		return service;
	}

	private static ReturnFulfillmentService getreturnFulfillmentService(Context context) throws ComponentException {
		final Component LSAPQCCore = ComponentFactory.getInstance(context, TicketConstants.COLS_CORE_COMPONENT);
		final ReturnFulfillmentService service = (ReturnFulfillmentService) LSAPQCCore.getService(ReturnFulfillmentService.class);
		return service;
	}

	private static ReviewRouteService getReviewRouteService(Context context) throws ComponentException {
		final Component component = ComponentFactory.getInstance(context, "LSACommonCoreComponent");
		final ReviewRouteService reviewRouteService = (ReviewRouteService) component.getService(ReviewRouteService.class);
		return reviewRouteService;
	}

	private EventService getDerivedEventService(Context context) throws ComponentException {
		final Component component = ComponentFactory.getInstance(context, "TicketConstants.TICKET_CORE_COMPONENT");
		final EventService derivedEventService = (EventService) component.getService(EventService.class);
		return derivedEventService;
	}

	private PatientService getPatientService(Context context) throws ComponentException {
		final Component component = ComponentFactory.getInstance(context, "TicketConstants.COLS_CORE_COMPONENT");
		final PatientService patientService = (PatientService) component.getService(PatientService.class);
		return patientService;
	}

	private ComplaintProductEvaluationService getComplaintProductEvaluationService(Context context) throws ComponentException {
		final Component component = ComponentFactory.getInstance(context, "TicketConstants.COLS_CORE_COMPONENT");
		final ComplaintProductEvaluationService complaintProductEvaluationService = (ComplaintProductEvaluationService) component
				.getService(ComplaintProductEvaluationService.class);
		return complaintProductEvaluationService;
	}

	/**
	 * 
	 * Method to migrate IW Complaints to PQC Complaints
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * @param complaintTicketObj
	 *            object to be migrated
	 * @return domainObject of the new migrated object
	 * @throws TicketException
	 *             if attached product has model attached in incorrect state, if
	 *             build is attached. if migration of object fails
	 */
	public DomainObject migrate(Context context, DomainObject complaintTicketObj, boolean migClosedObject) throws TicketException {
		Helper.ensureNotNull(complaintTicketObj, "complaintObj");
		try {
			// to check if invalid type is not being migrated
			if (!Helper.getTypeKindOf(context, complaintTicketObj, TicketConstants.SYMBOLIC_TYPE_COMPLAINT_TICKETS).containsValue(Boolean.TRUE))
				throw new Exception("Invalid Type");
			if (!initialisationDone)
				initializeLS(context);

			DomainObject newComplaitTicketObj = null;
			boolean isObjectIsMigratebale = false;

			isObjectIsMigratebale = checkIfComplaintTicketIsMigratebale(context, complaintTicketObj);

			if (isObjectIsMigratebale) {
				ContextUtil.startTransaction(context, true);
				try {
					String migrateType = complaintTicketObj.getTypeName();
					Person iwComplaintOwner = (Person) DomainObject.newInstance(context, DomainConstants.TYPE_PERSON);
					iwComplaintOwner = Person.getPerson(context, complaintTicketObj.getOwner(context).getName());

					if (migrateType.equals(TYPE_LSCOMPLAINT) || (migrateType.equals(TYPE_COMPLAINT))) {
						newComplaitTicketObj = migrateLSComplaint(context, complaintTicketObj);
						migrateActionTasks(context, complaintTicketObj, newComplaitTicketObj);
						migrateAssignees(context, complaintTicketObj, newComplaitTicketObj);
						// migrateContacts(context, complaintTicketObj,
						// newComplaitTicketObj);
						migrateCorrespondance(context, complaintTicketObj, newComplaitTicketObj);
						migrateDiscussions(context, complaintTicketObj, newComplaitTicketObj);
					}
					else if (migrateType.equals(TYPE_EQUIPMENTSERVIEREQUEST)) {
						newComplaitTicketObj = migrateESR(context, complaintTicketObj);
					}
					else if (migrateType.equals(TYPE_INQUIRY)) {
						newComplaitTicketObj = migrateInquiry(context, complaintTicketObj);
						migrateContacts(context, complaintTicketObj, newComplaitTicketObj);
					}
					ComplaintTicketService complaintTicketService = getComplaintTicketService(context);
					complaintTicketService.setOrganizationOwnership(context, newComplaitTicketObj, "");
					// transfering onership to the iwComplaint owner
					Helper.runWithSuperUser(context, new Helper.Callable() {
						@Override
						public Object run(Context context, Object... args) throws LSAException {
							DomainObject iwInquiryOwner = (DomainObject) args[0];
							String olsCompTName = (String) args[1];
							String complaintObjeId = (String) args[2];
							String migrateType = (String) args[3];
							try {
								ComplaintTicketService complaintTicketService = getComplaintTicketService(context);
								if (Helper.isNullOrEmpty(comlaintTicketOwner)) {
									complaintTicketService.transferOwnership(context, iwInquiryOwner, "Data Migration from " + migrateType + " "
											+ olsCompTName, Action.TRANSFER,complaintObjeId);
								}
								else {
									Person comlaintTicketOwnerP = (Person) DomainObject.newInstance(context, DomainConstants.TYPE_PERSON);
									comlaintTicketOwnerP = Person.getPerson(context, comlaintTicketOwner);
									complaintTicketService.transferOwnership(context, comlaintTicketOwnerP, "Data Migration from " + migrateType
											+ " " + olsCompTName,Action.TRANSFER, complaintObjeId);
								}
								return null;
							}
							catch (Exception e) {
								throw new TicketException(e);
							}
						}
					}, iwComplaintOwner, complaintTicketObj.getName(), newComplaitTicketObj.getObjectId(), migrateType);
					ContextUtil.commitTransaction(context);
					return newComplaitTicketObj;
				}
				catch (Exception e) {
					ContextUtil.abortTransaction(context);
					throw new TicketException(e);
				}
			}
			return newComplaitTicketObj;
		}
		catch (Exception e) {
			throw new TicketException(e);
		}

	}

	@SuppressWarnings("unchecked")
	protected DomainObject migrateLSComplaint(Context context, DomainObject complaintObj) throws TicketException {

		try {
			iwEventAttrL.addAll(iwInvestigationAttrL);
			iwEventAttrL.addAll(iwPatientAttrL);
			iwEventAttrL.addAll(iwEventReportableAttrL);

			DomainObject newComplaintObj = DomainObject.newInstance(context);
			ComplaintTicketService complaintTicketService = getComplaintTicketService(context);
			EventService eventService = getEventService(context);

			String closedState = FrameworkUtil.lookupStateName(context, POLICY_LSCOMPLAINT, "state_Closed");
			String investigationState = FrameworkUtil.lookupStateName(context, POLICY_LSCOMPLAINT, "state_Investigation");
			String approvalState = FrameworkUtil.lookupStateName(context, POLICY_LSCOMPLAINT, "state_Approval");
			String invalidState = FrameworkUtil.lookupStateName(context, POLICY_COMPLAINTINVALID, "state_Invalid");

			iwComplaintAttrL.add(DomainObject.getAttributeSelect(ATTRIBUTE_COMPLAINTLITIGATION));

			Map<String, String> complaint = complaintObj.getInfo(context, iwComplaintAttrL);
			String complaintCurrentState = complaint.get(DomainConstants.SELECT_CURRENT);

			Person iwComplaintOwner = (Person) DomainObject.newInstance(context, DomainConstants.TYPE_PERSON);
			iwComplaintOwner = Person.getPerson(context, complaintObj.getOwner(context).getName());

			if (complaintCurrentState.equals(closedState) || complaintCurrentState.equals(invalidState)) {
				throw new TicketException(
						"Complaint is in Closed or Invalid State. Closed or Invalid state Complaints are not considered for migration.");
			}

			StringList prodRelAttrL = new StringList(10);
			prodRelAttrL.add(DomainRelationship.SELECT_ID);
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTKITNUMBER));
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTEXPIRATIONDATE));
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTPARTNUMBER));
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTOTHERNUMBER));
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTLOTNUMBER));
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTMODELNUMBER));
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTRECEIVEDDATE));
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(PropertyUtil.getSchemaProperty(context,
					"attribute_ComplaintProductQuantityReturned")));

			List<Map<?, ?>> prodMapL = QueryUtil.getRelatedObjects(context, complaintObj, "relationship_ComplaintProduct,relationship_MainProduct",
					"type_Products,type_Builds", Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE), prodRelAttrL, false,
					true, (short) 1, null, null);

			Map<String, Map<String, String>> prodRelAttrMapL = mapEventProductRelAttributes(context, prodMapL);

			MapList eventsIWMapL = complaintObj.getRelatedObjects(context, RELATIONSHIP_COMPLAINTEVENT, TYPE_COMPLAINTEVENT, iwEventAttrL,
					Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 1, null, null, 0);

			eventsIWMapL.addSortKey(DomainConstants.SELECT_ORIGINATED, "ascending", "date");
			eventsIWMapL.sort();
			// getting the 1 create event connected to iw Complaint
			Map<String, String> event0Map = (Map<String, String>) eventsIWMapL.get(0);

			DomainObject iwEvent = DomainObject.newInstance(context, event0Map.get(DomainConstants.SELECT_ID));
			// getting Products connected to event 0
			MapList iwEventProdMapL = iwEvent.getRelatedObjects(context, RELATIONSHIP_COMPLAINTEVENTPRODUCT, "Products,Builds",
					Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE),
					Helper.stringList(DomainRelationship.SELECT_ID, DomainRelationship.SELECT_ORIGINATED), false, true, (short) 1, null, null, 1000);
			iwEventProdMapL.addSortKey(DomainRelationship.SELECT_ORIGINATED, "ascending", "date");
			iwEventProdMapL.sort();
			List<Map<?, ?>> iwEventProdList = iwEventProdMapL;

			boolean flag = true;
			DomainObject eventObj = null;
			List<String> contactL = new ArrayList<>();

			// iterating over products connected to event 0
			for (Map<?, ?> iwEventProd : iwEventProdList) {
				DomainObject iwProdObj = DomainObject.newInstance(context, (String) iwEventProd.get(DomainConstants.SELECT_ID));
				if (Helper.getTypeKindOf(context, iwProdObj, "type_Products", "type_Builds").containsValue(Boolean.TRUE)) {
					if (flag) {

						// creating new Complaint with event and
						Map<String, String> eventAttrMap = mapEventAttributes(context, event0Map);
						newComplaintObj = complaintTicketService.createComplaintTicket(
								context,
								TicketConstants.SYMBOLIC_TYPE_COMPLAINT,
								TicketConstants.SYMBOLIC_POLICY_COMPLAINT_RECORD,
								getActiveProductForProductOrBuild(context,
										DomainObject.newInstance(context, (String) iwEventProd.get(DomainConstants.SELECT_ID))),
								mapComplaintAttributes(context, complaint), eventAttrMap, prodRelAttrMapL.get(iwProdObj.getObjectId()));
						if ("Yes".equals(complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT)))) {
							eventAttrMap.put(getAttributeSelect(ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT), "Yes");
						}
						contactL = migrateContacts(context, complaintObj, newComplaintObj);
						// adding return object
						addReturnObject(context, newComplaintObj, getActiveModelConnectedToProductOrBuild(context, iwProdObj),
								mapRetrunAttributes(context, event0Map, iwComplaintOwner.getName(), prodMapL, iwProdObj), null);
						Map<String, String> attrFulfillmentMap = new HashMap<>();

						String compersationDetailsMethod = complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCUSTOMERCOMPENSATIONMETHOD));
						switch (compersationDetailsMethod) {
						case "Cheque":
							attrFulfillmentMap.put(ATTRIBUTE_FULFILLMENTTYPE, "Cheque");
							break;
						case "Coupon":
							attrFulfillmentMap.put(ATTRIBUTE_FULFILLMENTTYPE, "Coupon");
							break;
						case "Credit":
							attrFulfillmentMap.put(ATTRIBUTE_FULFILLMENTTYPE, "Credit");
							break;
						case "Kits":
							attrFulfillmentMap.put(ATTRIBUTE_FULFILLMENTTYPE, "Kits");
							break;
						default:
							attrFulfillmentMap.put(ATTRIBUTE_FULFILLMENTTYPE, "");
							break;
						}
						String fulfillmentDesc = complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCOMPENSATIONDETAILS));
						if (!Helper.isNullOrEmpty(compersationDetailsMethod) || !Helper.isNullOrEmpty(fulfillmentDesc)) {
							addFulfillmentObject(context, newComplaintObj, getActiveModelConnectedToProductOrBuild(context, iwProdObj),
									attrFulfillmentMap, fulfillmentDesc, DomainObject.newInstance(context, contactL.get(0)));
						}
						// setting iwComplaint Originated date on the new
						// complaint Object
						setOriginatedDate(context, newComplaintObj.getObjectId(), complaint.get(DomainConstants.SELECT_ORIGINATED));

						DomainRelationship.connect(context, newComplaintObj, RELATIONSHIP_RELATEDITEMS, complaintObj);
						List<Map<?, ?>> eventMapL = eventService.getEvents(context, newComplaintObj);
						eventObj = DomainObject.newInstance(context, (String) eventMapL.get(0).get(DomainConstants.SELECT_ID));

						// setting event as primary event
						MqlUtil.mqlCommand(context, true, "trigger off", true);
						eventService.setComplaintPrimaryEvent(context, newComplaintObj, eventObj, "TRUE");
						if (complaintCurrentState.equals(investigationState) || complaintCurrentState.equals(approvalState)) {
							createDerivedEventWithPatient(context, newComplaintObj, complaintObj, eventObj, eventAttrMap, iwEvent);
						}
						else {
							createPatient(context, eventObj, iwEvent);
						}
						if ("Yes".equals(complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT)))) {
							eventAttrMap.remove(getAttributeSelect(ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT));
						}
						MqlUtil.mqlCommand(context, true, "trigger on", true);
						flag = false;
					}
					else if (null != eventObj) {
						Map<String, String> prodRelAttrMap = prodRelAttrMapL.get(iwProdObj.getObjectId());
						DomainRelationship dmoRel = DomainRelationship.connect(context, eventObj, RELATIONSHIP_COMPLAINTEVENTPRODUCT, iwProdObj);
						dmoRel.setAttributeValues(context, prodRelAttrMap);
						dmoRel = DomainRelationship.connect(context, eventObj, RELATIONSHIP_COMPLAINTEVENTPRODUCT,
								getActiveModelConnectedToProductOrBuild(context, iwProdObj));
						dmoRel.setAttributeValues(context, prodRelAttrMap);
					}
				}
			}

			Helper.ensureNotNull(newComplaintObj, "newComplaintObj");

			if (complaintCurrentState.equals(investigationState) || complaintCurrentState.equals(approvalState)) {
				MqlUtil.mqlCommand(context, true, "trigger off", true);
				complaintTicketService.promoteComplaintTicket(context, ChangePolicyState.INPROCESS, "", newComplaintObj.getObjectId());
				MqlUtil.mqlCommand(context, true, "trigger on", true);
				comlaintTicketOwner = getComplaintCI(context, complaintObj);
				if (!Helper.isNullOrEmpty(comlaintTicketOwner)) {
					Helper.runWithSuperUser(context, new Helper.Callable() {
						@Override
						public Object run(Context context, Object... args) throws LSAException {
							DomainObject newComplaintObj = (DomainObject) args[0];
							String comlaintTicketOwner = (String) args[1];
							try {
								setComplaintTicketAsAssigned(context, newComplaintObj, Person.getPerson(context, comlaintTicketOwner));
							}
							catch (Exception e) {
								throw new TicketException(e);
							}
							return null;
						}
					}, newComplaintObj, comlaintTicketOwner);

				}
				if (eventsIWMapL.size() > 1)
					event0Map = (Map<String, String>) eventsIWMapL.get(eventsIWMapL.size() - 1);
			}
			eventsIWMapL.remove(0);

			for (Map<?, ?> event : (List<Map<?, ?>>) eventsIWMapL) {

				Map<String, String> eventAttr = mapEventAttributes(context, (Map<String, String>) event);
				MqlUtil.mqlCommand(context, true, "trigger off", true);
				DomainObject eventNewObj = eventService.createEventWithAttributes(context, eventAttr);
				MqlUtil.mqlCommand(context, true, "trigger on", true);
				MapList iwEventProdL = DomainObject.newInstance(context, (String) event.get(DomainObject.SELECT_ID)).getRelatedObjects(context,
						RELATIONSHIP_COMPLAINTEVENTPRODUCT, "Products,Builds",
						Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE),
						Helper.stringList(DomainRelationship.SELECT_ID, DomainRelationship.SELECT_ORIGINATED), false, true, (short) 1, null, null,
						1000);
				DomainRelationship.connect(context, newComplaintObj, RELATIONSHIP_COMPLAINTEVENT, eventNewObj);
				List<Map<String, String>> iwEventProdML = iwEventProdL;
				for (Map<?, ?> iwProd : iwEventProdML) {
					DomainObject iwProdObj = DomainObject.newInstance(context, (String) iwProd.get(DomainObject.SELECT_ID));
					Map<String, String> prodRelAttrMap = prodRelAttrMapL.get(iwProdObj.getObjectId());
					MqlUtil.mqlCommand(context, true, "trigger off", true);
					DomainRelationship dmoRel = DomainRelationship.connect(context, eventNewObj, RELATIONSHIP_COMPLAINTEVENTPRODUCT, iwProdObj);
					dmoRel.setAttributeValues(context, prodRelAttrMap);
					dmoRel = DomainRelationship.connect(context, eventNewObj, RELATIONSHIP_COMPLAINTEVENTPRODUCT,
							getActiveModelConnectedToProductOrBuild(context, iwProdObj));
					dmoRel.setAttributeValues(context, prodRelAttrMap);
					MqlUtil.mqlCommand(context, true, "trigger on", true);
				}

				if (complaintCurrentState.equals(investigationState) || complaintCurrentState.equals(approvalState)) {
					MqlUtil.mqlCommand(context, true, "trigger off", true);
					createDerivedEventWithPatient(context, newComplaintObj, complaintObj, eventNewObj, eventAttr, iwEvent);
					MqlUtil.mqlCommand(context, true, "trigger on", true);
				}
				else {
					createPatient(context, eventObj, iwEvent);
				}
				iwEventProdList = QueryUtil.getRelatedObjects(context,
						DomainObject.newInstance(context, (String) event.get(DomainConstants.SELECT_ID)), RELATIONSHIP_COMPLAINTEVENTPRODUCT,
						"type_Products,type_Builds", Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE),
						Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 1, null, null);
				DomainObject iwProdObj = DomainObject.newInstance(context, (String) iwEventProdList.get(0).get(DomainConstants.SELECT_ID));
				addReturnObject(context, newComplaintObj, getActiveModelConnectedToProductOrBuild(context, iwProdObj),
						mapRetrunAttributesForAdditionReturn(context, eventAttr, iwComplaintOwner.getName(), prodMapL, iwProdObj), null);
			}

			// setting iwComplaint as invalid
			Helper.runWithSuperUser(context, new Helper.Callable() {
				@Override
				public Object run(Context context, Object... args) throws LSAException {
					try {
						MqlUtil.mqlCommand(context, true, "trigger off", true);
						final DomainObject complaintObj = (DomainObject) args[0];
						complaintObj.setPolicy(context, POLICY_COMPLAINTINVALID);
						MqlUtil.mqlCommand(context, true, "trigger on", true);
					}
					catch (Exception e) {
						throw new TicketException(e);
					}
					return null;
				}
			}, complaintObj);

			addIWReferenceObjects(context, complaintObj, newComplaintObj);
			return newComplaintObj;

		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	@SuppressWarnings("unchecked")
	protected DomainObject migrateESR(Context context, DomainObject esrObj) throws TicketException {

		try {
			ComplaintTicketService complaintTicketService = getComplaintTicketService(context);

			final String closedState = FrameworkUtil.lookupStateName(context, POLICY_EQUIPMENTSERVICEREQUEST, "state_Closed");
			final String reviewState = FrameworkUtil.lookupStateName(context, POLICY_EQUIPMENTSERVICEREQUEST, "state_Review");

			Map<String, String> esr = esrObj.getInfo(context, iwESRAttrL);
			String esrCurrentState = esr.get(DomainConstants.SELECT_CURRENT);

			if (esrCurrentState.equals(closedState)) {
				throw new TicketException("ESR is in Closed State. Closed ESR are not considered for migration.");
			}

			StringList prodRelAttrL = new StringList(7);
			prodRelAttrL.add(DomainRelationship.SELECT_ID);
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTPARTNUMBER));
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTLOTNUMBER));

			List<Map<?, ?>> prodMapL = QueryUtil.getRelatedObjects(context, esrObj, "relationship_ComplaintProduct,relationship_MainProduct",
					"type_Products,type_Builds", Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE), prodRelAttrL, false,
					true, (short) 1, null, null);

			Map<String, String> prodMap = new HashMap<>();
			if (!Helper.isNullOrEmpty((String) prodMapL.get(0).get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTPARTNUMBER))))
				prodMap.put(ATTRIBUTE_PARTNUMBER,
						(String) prodMapL.get(0).get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTPARTNUMBER)));
			if (!Helper.isNullOrEmpty((String) prodMapL.get(0).get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTLOTNUMBER))))
				prodMap.put(ATTRIBUTE_LOTNUMBER,
						(String) prodMapL.get(0).get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTLOTNUMBER)));

			Map<String, String> eventMap = new HashMap<>();
			eventMap.put(ATTRIBUTE_COMPLAINTEVENTDETAIL, esr.get(DomainConstants.SELECT_DESCRIPTION));

			// DomainObject activeModel =
			// getActiveModelConnectedToProductOrBuild(context,
			// DomainObject.newInstance(context, (String)
			// prodMapL.get(0).get(DomainObject.SELECT_ID)));

			// Added to pass only the Product as the createComplaintTicket IMPL
			// will take create to add model with the Product
			DomainObject activeModel = getActiveProductForProductOrBuild(context,
					DomainObject.newInstance(context, (String) prodMapL.get(0).get(DomainObject.SELECT_ID)));

			MqlUtil.mqlCommand(context, true, "trigger off", true);
			DomainObject newESRObj = complaintTicketService.createComplaintTicket(context, TicketConstants.SYMBOLIC_TYPE_EQUIPMENT_SERVICE_REQUEST,
					TicketConstants.SYMBOLIC_POLICY_TICKET_RECORD, activeModel, mapESRAttributes(context, esr), eventMap, prodMap);
			MqlUtil.mqlCommand(context, true, "trigger on", true);

			setOriginatedDate(context, newESRObj.getObjectId(), esr.get(DomainConstants.SELECT_ORIGINATED));
			DomainRelationship.connect(context, newESRObj, RELATIONSHIP_RELATEDITEMS, esrObj);

			List<Map<?, ?>> iwFulfillmentProdList = QueryUtil.getRelatedObjects(context, esrObj, RELATIONSHIP_COMPLAINTEQUIPMENTREPLACEMENT,
					"type_Products,type_Builds", Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE), Helper.stringList(
							DomainRelationship.SELECT_ID,
							DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATESHIPPEDTOCUSTOMER),
							DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATERECEIVEDBYCUSTOMER),
							DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATESHIPPEDFROMCUSTOMER),
							DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATERECEIVEDFROMCUSTOMER),
							DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTADDITIONALEQUIPMENTINFORMATION)), false,
					true, (short) 1, null, null);

			List<String> contactL = migrateContacts(context, esrObj, newESRObj);

			if (iwFulfillmentProdList.size() > 0) {
				Map<String, String> fulfillmentMap = mapESRFulfillmentAttributes(context, (Map<String, String>) iwFulfillmentProdList.get(0));
				fulfillmentMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTUNITRETURNDATESHIPPEDFROMCUSTOMER,
						esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTUNITRETURNDATESHIPPEDFROMCUSTOMER)));

				String fulfillmentDesc = null != fulfillmentMap.get(DomainConstants.SELECT_DESCRIPTION) ? fulfillmentMap
						.get(DomainConstants.SELECT_DESCRIPTION) : "";
				if (fulfillmentMap.containsKey(DomainConstants.SELECT_DESCRIPTION)) {
					fulfillmentMap.remove(DomainConstants.SELECT_DESCRIPTION);
				}
				addFulfillmentObject(
						context,
						newESRObj,
						getActiveModelConnectedToProductOrBuild(context,
								DomainObject.newInstance(context, (String) iwFulfillmentProdList.get(0).get(DomainConstants.SELECT_ID))),
						fulfillmentMap, fulfillmentDesc, DomainObject.newInstance(context, contactL.get(0)));
			}

			List<Map<?, ?>> iwRetrunProdList = QueryUtil.getRelatedObjects(
					context,
					esrObj,
					RELATIONSHIP_COMPLAINTEQUIPMENTLOANER,
					"type_Products,type_Builds",
					Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE),
					Helper.stringList(DomainRelationship.SELECT_ID,
							DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTLOANERSERIALNUMBER),
							DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTLOANERDATERECEIVEDFROMCUSTOMER),
							DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTLOANERADDITIONALEQUIPMENTINFORMATION)), false, true,
					(short) 1, null, null);
			if (iwRetrunProdList.size() > 0) {
				Map<String, String> returnMap = mapESRReturnAttributes(context, (Map<String, String>) iwRetrunProdList.get(0));
				returnMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTUNITRETURNDATERECEIVEDFROMCUSTOMER,
						esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTUNITRETURNDATERECEIVEDFROMCUSTOMER)));
				returnMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTADDITIONALITEMSRECEIVED,
						esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTADDITIONALITEMSRECEIVED)));

				String returnDesc = null != returnMap.get(DomainConstants.SELECT_DESCRIPTION) ? returnMap.get(DomainConstants.SELECT_DESCRIPTION)
						: "";
				if (returnMap.containsKey(DomainConstants.SELECT_DESCRIPTION)) {
					returnMap.remove(DomainConstants.SELECT_DESCRIPTION);
				}

				addReturnObject(
						context,
						newESRObj,
						getActiveModelConnectedToProductOrBuild(context,
								DomainObject.newInstance(context, (String) iwRetrunProdList.get(0).get(DomainConstants.SELECT_ID))), returnMap,
						returnDesc);
			}
			if (esrCurrentState.equals(reviewState)) {
				MqlUtil.mqlCommand(context, true, "trigger off", true);
				complaintTicketService.promoteComplaintTicket(context, ChangePolicyState.INPROCESS, "", newESRObj.getObjectId());
				MqlUtil.mqlCommand(context, true, "trigger on", true);
				createReviewRoute(context, newESRObj, TicketUtil.getStateName(context, TicketConstants.SYMBOLIC_POLICY_TICKET_RECORD,
						TicketConstants.SYMBOLIC_POLICY_STATE_INPROCESS));
				// TODO
				// createAndPromoteInvestigation(context, esrObj, newESRObj,
				// null, null);
			}

			Helper.runWithSuperUser(context, new Helper.Callable() {
				@Override
				public Object run(Context context, Object... args) throws LSAException {
					try {
						DomainObject esrObj = (DomainObject) args[0];
						MqlUtil.mqlCommand(context, true, "trigger off", true);
						esrObj.setState(context, closedState);
						MqlUtil.mqlCommand(context, true, "trigger on", true);
					}
					catch (Exception e) {
						throw new TicketException(e);
					}
					return null;
				}
			}, esrObj);
			addIWReferenceObjects(context, esrObj, newESRObj);
			return newESRObj;
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	@SuppressWarnings("unchecked")
	protected DomainObject migrateInquiry(Context context, DomainObject inquiryObj) throws TicketException {

		try {

			ComplaintTicketService complaintTicketService = getComplaintTicketService(context);

			final String closedState = FrameworkUtil.lookupStateName(context, POLICY_INQUIRY, "state_Closed");
			final String reviewState = FrameworkUtil.lookupStateName(context, POLICY_INQUIRY, "state_Review");

			Map<String, String> inquiry = inquiryObj.getInfo(context, iwInquiryAttrL);
			String inquiryCurrentState = inquiry.get(DomainConstants.SELECT_CURRENT);

			if (inquiryCurrentState.equals(closedState)) {
				throw new TicketException("Inquiry is in Closed. Closed Inquiry are not considered for migration.");
			}

			StringList prodRelAttrL = new StringList(7);
			prodRelAttrL.add(DomainRelationship.SELECT_ID);
			prodRelAttrL.add(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTPARTNUMBER));

			List<Map<?, ?>> prodMapL = QueryUtil.getRelatedObjects(context, inquiryObj, "relationship_ComplaintProduct,relationship_MainProduct",
					"type_Products,type_Builds", Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE), prodRelAttrL, false,
					true, (short) 1, null, null);

			DomainObject newInquiryObj = null;

			Map<String, String> prodMap = new HashMap<>();
			if (!Helper.isNullOrEmpty((String) prodMapL.get(0).get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTPARTNUMBER))))
				prodMap.put(ATTRIBUTE_PARTNUMBER,
						(String) prodMapL.get(0).get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTPARTNUMBER)));

			Map<String, String> eventMap = new HashMap<>();
			eventMap.put(ATTRIBUTE_COMPLAINTEVENTDETAIL, inquiry.get(DomainConstants.SELECT_DESCRIPTION));

			DomainObject attactiveModel = getActiveProductForProductOrBuild(context,
					DomainObject.newInstance(context, (String) prodMapL.get(0).get(DomainObject.SELECT_ID)));
			newInquiryObj = complaintTicketService.createComplaintTicket(context, TicketConstants.SYMBOLIC_TYPE_INQUIRY,
					TicketConstants.SYMBOLIC_POLICY_TICKET_RECORD, attactiveModel, new HashMap<String, String>(), eventMap, prodMap);

			setOriginatedDate(context, newInquiryObj.getObjectId(), inquiry.get(DomainConstants.SELECT_ORIGINATED));
			DomainRelationship.connect(context, newInquiryObj, RELATIONSHIP_RELATEDITEMS, inquiryObj);

			if (inquiryCurrentState.equals(reviewState)) {
				MqlUtil.mqlCommand(context, true, "trigger off", true);
				complaintTicketService.promoteComplaintTicket(context, ChangePolicyState.INPROCESS, "", newInquiryObj.getObjectId());
				MqlUtil.mqlCommand(context, true, "trigger on", true);
				createReviewRoute(context, newInquiryObj, TicketUtil.getStateName(context, TicketConstants.SYMBOLIC_POLICY_TICKET_RECORD,
						TicketConstants.SYMBOLIC_POLICY_STATE_INPROCESS));
				// TODO
				// createAndPromoteInvestigation(context, inquiryObj,
				// newInquiryObj, null, null);
			}

			Helper.runWithSuperUser(context, new Helper.Callable() {
				@Override
				public Object run(Context context, Object... args) throws LSAException {
					try {
						DomainObject inquiryObj = (DomainObject) args[0];
						MqlUtil.mqlCommand(context, true, "trigger off", true);
						inquiryObj.setState(context, closedState);
						MqlUtil.mqlCommand(context, true, "trigger on", true);
					}
					catch (Exception e) {
						throw new TicketException(e);
					}
					return null;
				}
			}, inquiryObj);

			addIWReferenceObjects(context, inquiryObj, newInquiryObj);
			return newInquiryObj;
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	/**
	 * This method will create Derived Event and add it to the Patient.It will
	 * also create Patient and attach it to Event with age set on Event Patient
	 * Relationship.
	 * 
	 * @param context
	 * @param complaintObj
	 * @param eventObj
	 * @param eventAttrMap
	 * @param iwEvent
	 * @return
	 * @throws TicketException
	 */
	private void createDerivedEventWithPatient(Context context, DomainObject complaintObj, DomainObject iwComplaint, DomainObject eventObj,
			Map<String, String> eventAttrMap, DomainObject iwEvent) throws TicketException {

		Map<String, String> dEventAttrMap = new HashMap<>();

		dEventAttrMap.put(ATTRIBUTE_COMPLAINTEVENTDETAIL, eventAttrMap.get(ATTRIBUTE_COMPLAINTEVENTDETAIL));
		dEventAttrMap.put(ATTRIBUTE_COMPLAINTEVENTTIMING, eventAttrMap.get(ATTRIBUTE_COMPLAINTEVENTTIMING));
		dEventAttrMap.put(ATTRIBUTE_ISSUECODE, eventAttrMap.get(ATTRIBUTE_ISSUECODE));
		dEventAttrMap.put(ATTRIBUTE_EXPERIENCECODE, eventAttrMap.get(ATTRIBUTE_EXPERIENCECODE));
		if ("Yes".equals(eventAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT)))) {
			dEventAttrMap.put(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_STATUS), "Reportable");
		}
		try {
			final EventService eventService = getEventService(context);
			final EventService derivedEventService = getDerivedEventService(context);
			final DomainObject dEventObj = derivedEventService.createDerivedEventWithAttributes(context, dEventAttrMap);

			if (isEventReportable(context, iwEvent, eventAttrMap)) {
				MqlUtil.mqlCommand(context, true, "trigger off", true);
				// eventService
				// .updateEvent(context, eventObj,
				// PropertyUtil.getSchemaProperty(context,
				// TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_STATUS),
				// TicketConstants.RANGE_NOT_APPLICABLE);
				// eventService
				// .updateEvent(context, dEventObj,
				// PropertyUtil.getSchemaProperty(context,
				// TicketConstants.SYMBOLIC_ATTRIBUTE_REPORTABLE_STATUS),
				// TicketConstants.RANGE_NOT_APPLICABLE);
				// if (!isComplaintReportable) {
				// eventService.updateEvent(context, complaintObj,
				// PropertyUtil.getSchemaProperty(context,
				// TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_REPORTABLE_STATUS),
				// TicketConstants.RANGE_NOT_APPLICABLE);
				// isComplaintReportable = true;
				// }
				MqlUtil.mqlCommand(context, true, "trigger on", true);
			}
			DomainRelationship.connect(context, eventObj, RELATIONSHIP_DERIVEDEVENT, dEventObj);
			List<Map<?, ?>> mlConnectProductModel = QueryUtil.getRelatedObjects(context, eventObj,
					TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT_PRODUCT, TicketConstants.SYMBOLIC_TYPE_MODEL,
					Helper.stringList(DomainConstants.SELECT_ID), Helper.stringList(DomainRelationship.SELECT_ID), false, true, new String(),
					new String(), false, true, null,
					new Pattern(PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT_PRODUCT)), null);
			for (Object obj : mlConnectProductModel) {
				Map mapModel = (Map) obj;
				// DomainObject dmoModel = DomainObject.newInstance(context,
				// mapModel.get(DomainConstants.SELECT_ID).toString());
				String strModel = (String) mapModel.get(DomainConstants.SELECT_ID);
				DomainObject dmoModel = DomainObject.newInstance(context, strModel);
				DomainRelationship.connect(context, dEventObj,
						PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT_PRODUCT), dmoModel);
			}
			createPatient(context, eventObj, iwEvent);

			createProductEvalualtion(context, complaintObj, iwComplaint, dEventObj, eventAttrMap);

			iwMdrAttrL.addAll(iwSubmissionAttrL);

			final List<Map<?, ?>> submissionL = QueryUtil.getRelatedObjects(context, iwEvent, RELATIONSHIP_SUBMISSIONEVENT, TYPE_SUBMISSION,
					iwMdrAttrL, Helper.stringList(DomainRelationship.SELECT_ID), true, false, (short) 1, new String(), new String());
			for (Map<?, ?> submission : submissionL) {
				String subType = (String) submission.get(DomainConstants.SELECT_TYPE);
				if (subType.equals(TYPE_MDRSubmission)) {
					// createAER(context, AERReportType.MDR, dEventObj, false,
					// submission);
				}
				else if (subType.equals(TYPE_CMDRSubmission)) {
					// createAER(context, AERReportType.CMDR, dEventObj, false,
					// submission);
				}
				else if (subType.equals(TYPE_CMDRFinalSubmission)) {
					// createAER(context, AERReportType.CMDR, dEventObj, true,
					// submission);
				}
				else if (subType.equals(TYPE_MDVSubmission)) {
					// createAER(context, AERReportType.MDV, dEventObj, false,
					// submission);
				}
				else if (subType.equals(TYPE_MDVFinalSubmission)) {
					// createAER(context, AERReportType.MDV, dEventObj, true,
					// submission);
				}
			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	private DomainObject createPatient(Context context, DomainObject eventObj, DomainObject iwEvent) throws FrameworkException, ComponentException,
			TicketException {
		try {
			Map<String, String> eventMap = iwEvent.getAttributeMap(context);
			Map<String, String> patientAttrMap = new HashMap<>();
			if (!Helper.isNullOrEmpty(getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTPATIENTSEX))) {
				patientAttrMap.put(ATTRIBUTE_GENDER, getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTPATIENTSEX));
			}
			if (!Helper.isNullOrEmpty(getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTPATIENTDOB))) {
				patientAttrMap.put(ATTRIBUTE_DATEOFBIRTH, getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTPATIENTDOB));
			}
			if (!Helper.isNullOrEmpty(getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTPATIENTWEIGHT))) {
				String dimention = new String();
				switch (getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTPATIENTWEIGHTUOM)) {
				case "Kilograms":
					dimention = "kg";
					break;
				case "Pounds":
					dimention = "lb";
					break;
				case "Grams":
				default:
					dimention = "g";
				}

				String value = UOMUtil.convertToDefaultUnit(context, ATTRIBUTE_WEIGHT,
						getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTPATIENTWEIGHT), dimention);

				patientAttrMap.put(ATTRIBUTE_WEIGHT, value);
			}
			if (!Helper.isNullOrEmpty(getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTSUBMISSIONOUTCOMEDEATH))) {

				patientAttrMap.put(ATTRIBUTE_DEATH, getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTSUBMISSIONOUTCOMEDEATH));
			}
			if (!Helper.isNullOrEmpty(getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTSUBMISSIONOUTCOMEDEATHDATE))) {
				patientAttrMap.put(ATTRIBUTE_DEATHDATE, getValueFromMap(context, eventMap, ATTRIBUTE_COMPLAINTSUBMISSIONOUTCOMEDEATHDATE));
			}
			if (patientAttrMap.size() > 0) {
				final PatientService patientService = getPatientService(context);
				final DomainObject patientObj = patientService.createPatient(context, patientAttrMap);
				final DomainRelationship relEventPatient = DomainRelationship.connect(context, eventObj,
						PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_EVENT_PATIENT), patientObj);
				Map<String, String> patientRelAttrMap = new HashMap<>();

				String ageDimention = (String) iwEvent.getAttributeMap(context).get(ATTRIBUTE_COMPLAINTPATIENTAGEDEFINE);
				Integer age = 0;
				if (!Helper.isNullOrEmpty(ageDimention)) {
					age = Integer.valueOf(getValueFromMap(context, iwEvent.getAttributeMap(context), ATTRIBUTE_COMPLAINTPATIENTAGEATTIMEOFEVENT));

					switch (ageDimention) {
					case "Years":
						age = age * 365;
						break;
					case "Months":
						age = age * 30;
						break;
					case "Hours":
						age = (int) (age * 0.24);
						break;
					case "Days":
					default:
						age = age;
					}
				}

				patientRelAttrMap.put(ATTRIBUTE_AGEATTIMEOFEVENT, Integer.toString(age));
				relEventPatient.setAttributeValues(context, patientRelAttrMap);
				return patientObj;
			}
			else {
				return null;
			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	/**
	 * This Method checks if the Complaint Ticket is Migratable or not.
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * @param complaintTicketObj
	 *            object to be checked if migration is possible or not
	 * @return true if object can be migrated
	 * @throws TicketException
	 *             if object cannot be migrated with the error message
	 */
	public boolean checkIfComplaintTicketIsMigratebale(Context context, DomainObject complaintTicketObj) throws TicketException {

		if (!initialisationDone)
			initializeLS(context);
		try {
			final String activeState = FrameworkUtil.lookupStateName(context, POLICY_MODEL, "state_Active");

			final List<Map<?, ?>> prodMapL = QueryUtil.getRelatedObjects(context, DomainObject.newInstance(context, complaintTicketObj),
					"relationship_ComplaintProduct,relationship_MainProduct", "type_Products,type_Builds",
					Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE), Helper.stringList(DomainRelationship.SELECT_ID),
					false, true, (short) 1, null, null);
			if (prodMapL.size() == 0)
				throw new TicketException("Atleast one Product or build should be connected to the complaint.");

			for (Map<?, ?> product : prodMapL) {
				final String prodID = (String) product.get(DomainConstants.SELECT_ID);
				DomainObject productObj = DomainObject.newInstance(context, prodID);
				if (Helper.getTypeKindOf(context, productObj, "type_Builds").containsValue(Boolean.TRUE)) {
					List<Map<?, ?>> builProdMapL = QueryUtil.getRelatedObjects(context, productObj, "relationship_ProductBuild", "type_Products",
							Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_CURRENT),
							Helper.stringList(DomainRelationship.SELECT_ID), true, false, (short) 1, null, null);
					if (builProdMapL.size() == 0) {
						throw new Exception("No Product is Connected to Build.Please add Product to build having active model connected to it.");
					}
					else
						productObj = DomainObject.newInstance(context, (String) builProdMapL.get(0).get(DomainConstants.SELECT_ID));
				}

				final List<Map<?, ?>> modelMapL = QueryUtil.getRelatedObjects(context, productObj, "relationship_MainProduct", "type_Model",
						Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_CURRENT),
						Helper.stringList(DomainRelationship.SELECT_ID), true, false, (short) 1, null, null);
				final String modelCurrentState = (String) modelMapL.get(0).get(DomainConstants.SELECT_CURRENT);
				if (!modelCurrentState.equalsIgnoreCase(activeState)) {
					throw new Exception("Model attached to the Product is not in Active State.Please promote Model to Active state and try again.");
				}
			}
			if (complaintTicketObj.getTypeName().equalsIgnoreCase(TYPE_COMPLAINT)
					|| complaintTicketObj.getTypeName().equalsIgnoreCase(TYPE_LSCOMPLAINT)) {
				List<Map<?, ?>> eventsIWMapL = QueryUtil.getRelatedObjects(context, complaintTicketObj, RELATIONSHIP_COMPLAINTEVENT, TYPE_LSEVENT
						+ "," + TYPE_COMPLAINTEVENT, iwEventAttrL, Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 1, null,
						null);
				if (eventsIWMapL.size() < 1) {
					throw new TicketException("No Events are connected to complaint");
				}
				for (Map<?, ?> event : eventsIWMapL) {
					final List<Map<?, ?>> eventProdMapL = QueryUtil.getRelatedObjects(context,
							DomainObject.newInstance(context, (String) event.get(DomainConstants.SELECT_ID)), RELATIONSHIP_COMPLAINTEVENTPRODUCT,
							"type_Products,type_Builds", Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE),
							Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 1, null, null);

					if (eventProdMapL.size() < 1)
						throw new TicketException("At least 1 Product or Build should be connected to Event for complaint to be migrated.");
				}
			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
		return true;
	}

	/**
	 * This method is called from UI to migrate the complaint which are in
	 * Complete state.
	 */
	public String actionMigrate(Context context, String args[]) throws TicketException {
		try {
			final Map<?, ?> programMap = JPO.unpackArgs(args);
			final String strComplaintId = ((String[]) programMap.get(TicketConstants.OBJECTID))[0];
			final DomainObject newComplaintTicketObject = migrate(context, DomainObject.newInstance(context, strComplaintId), true);
			return Helper.encodeFunctionForJavaScript(context, Boolean.FALSE, "openComplaintTicketPowerView",
					newComplaintTicketObject.getObjectId(context));
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	private boolean isEventReportable(Context context, DomainObject iwEvent, Map<String, String> eventM) throws TicketException {
		final String mdrReportable = eventM.get(getAttributeSelect(ATTRIBUTE_COMPLAINTMDRREPORTABLE));
		final String mdvReportable = eventM.get(getAttributeSelect(ATTRIBUTE_COMPLAINTMDVREPORTABLE));
		final String cmdrReportable = eventM.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCMDRREPORTABLE));

		try {
			final List<Map<?, ?>> submissionL = QueryUtil.getRelatedObjects(context, iwEvent, RELATIONSHIP_SUBMISSIONEVENT, TYPE_SUBMISSION,
					Helper.stringList(DomainConstants.SELECT_ID), Helper.stringList(DomainRelationship.SELECT_ID), true, false, (short) 1,
					new String(), new String());

			if ((!Helper.isNullOrEmpty(mdrReportable) || !Helper.isNullOrEmpty(mdvReportable) || !Helper.isNullOrEmpty(cmdrReportable))
					|| submissionL.size() > 0) {
				return true;
			}

		}
		catch (Exception e) {
			throw new TicketException(e);
		}
		return false;
	}

	private void setAERAttributeValues(Context context, DomainObject report, Map<?, ?> submissionAttrMap, Boolean isFinal) throws TicketException {
		try {
			Map<String, String> aerAttrM = new HashMap<>();
			aerAttrM.put(ATTRIBUTE_AER_FINAL, String.valueOf(isFinal));
			String aerClassification = (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_REGULATORY_REPORT_TYPE));
			if (!Helper.isNullOrEmpty(aerClassification)) {
				switch (aerClassification) {
				case "MDR 5 Day":
					aerAttrM.put(ATTRIBUTE_AER_CLASSIFICATION, "5");
					break;
				case "MDR 30 Day":
				case "MDV 30 Day":
				case "CMDR 30 Day":
					aerAttrM.put(ATTRIBUTE_AER_CLASSIFICATION, "30");
					break;
				case "CMDR 10 Day":
				case "MDV 10 Day":
					aerAttrM.put(ATTRIBUTE_AER_CLASSIFICATION, "10");
					break;
				case "MDV Final":
				case "CMDR Final":
					aerAttrM.remove(ATTRIBUTE_AER_FINAL);
					aerAttrM.put(ATTRIBUTE_AER_FINAL, String.valueOf(true));
					aerAttrM.put(ATTRIBUTE_AER_CLASSIFICATION, "5");
					break;
				}
			}
			aerAttrM.put(ATTRIBUTE_REPORT_NUMBER, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_MANUFACTURER_REPORT_NUMBER)));
			aerAttrM.put(ATTRIBUTE_REPORT_DATE, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_DATE_OF_THIS_REPORT)));
			aerAttrM.put(ATTRIBUTE_AER_REVIEWER_PERSON, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_REPORT_REVIEWER)));
			aerAttrM.put(ATTRIBUTE_AER_REVIEWED_DATE, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_REPORT_REVIEWED_DATE)));
			aerAttrM.put(ATTRIBUTE_AER_SUBMITTER_PERSON, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_REPORT_SUBMITTER)));
			aerAttrM.put(ATTRIBUTE_AER_SUBMITTED_DATE, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_REPORT_SUBMITTED_DATE)));
			aerAttrM.put(ATTRIBUTE_WAIVER_REASON, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_WAIVE_REASON)));
			aerAttrM.put(ATTRIBUTE_AER_DUE_DATE, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DUE_DATE)));
			// MqlUtil.mqlCommand(context, true, "trigger off", true);
			report.setAttributeValues(context, aerAttrM);
			// MqlUtil.mqlCommand(context, true, "trigger on", true);
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	private void setMDRAttributeValues(Context context, DomainObject report, Map<?, ?> submissionAttrMap) throws TicketException {
		try {
			Map<String, String> aerAttrM = new HashMap<>();
			aerAttrM.put(ATTRIBUTE_BATCH_NUMBER, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_BATCH_NUMBER)));
			aerAttrM.put(ATTRIBUTE_CORE_ID, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_COREID)));
			aerAttrM.put(ATTRIBUTE_MESSAGE_ID, (String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_MDR_SUBMISSION_MESSAGEID)));

			aerAttrM.put(ATTRIBUTE_PRODUCT_STN_NUMBER,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_STN_NUMBER)));
			aerAttrM.put(ATTRIBUTE_PRODUCT_PMA_NUMBER,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_PMA_NUMBER)));
			aerAttrM.put(ATTRIBUTE_REPORT_NUMBER,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_NUMBER)));
			aerAttrM.put(ATTRIBUTE_FDA_REPORT_NUMBER, (String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_CORRECTION_REPORTING_NUMBER)));
			aerAttrM.put(ATTRIBUTE_COMMENTS,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_ADDITIONAL_NARRATIVE)));
			String initialReporterSentToFDA = (String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_REPORTER_ALSO_SENT_TO_FDA));
			if (initialReporterSentToFDA.equalsIgnoreCase("no")) {
				aerAttrM.put(ATTRIBUTE_INITIAL_REPORTER_ALSO_SENT_TO_FDA, "No");
			}
			else if (initialReporterSentToFDA.equalsIgnoreCase("yes")) {
				aerAttrM.put(ATTRIBUTE_INITIAL_REPORTER_ALSO_SENT_TO_FDA, "Yes");
			}
			else {
				aerAttrM.put(ATTRIBUTE_INITIAL_REPORTER_ALSO_SENT_TO_FDA, "Unknown");
			}

			if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_5_DAY)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_5_DAY)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_AER_CLASSIFICATION, "5");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_7_DAY)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_7_DAY)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_AER_CLASSIFICATION, "7");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_10_DAY)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_10_DAY)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_AER_CLASSIFICATION, "10");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_15_DAY)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_15_DAY)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_AER_CLASSIFICATION, "15");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_30_DAY)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_TYPE_30_DAY)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_AER_CLASSIFICATION, "30");
			}

			if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_CORRECTION)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_CORRECTION)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_FOLLOWUP_TYPE, "Correction");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_ADDL_INFO)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_ADDL_INFO)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_FOLLOWUP_TYPE, "Additional Information");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_FDA_REQUEST)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_FDA_REQUEST)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_FOLLOWUP_TYPE, "Response to FDA Request");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_EVALUATION)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_DEVICE_MANUFACTURER_FOLLOW_UP_EVALUATION)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_FOLLOWUP_TYPE, "Device Evaluation");
			}

			if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_FOREIGN)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_FOREIGN)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_REPORT_SOURCE, "Foreign");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_STUDY)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_STUDY)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_REPORT_SOURCE, "Study");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_LITERATURE)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_LITERATURE)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_REPORT_SOURCE, "Literature");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_CONSUMER)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_CONSUMER)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_REPORT_SOURCE, "Consumer");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_HEALTH_PROFESSIONAL)))
					|| ((String) submissionAttrMap
							.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_HEALTH_PROFESSIONAL)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_REPORT_SOURCE, "Health Professional");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_USER_FACILITY)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_USER_FACILITY)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_REPORT_SOURCE, "User Facility");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_COMPANY_REP)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_COMPANY_REP)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_REPORT_SOURCE, "Company Representative");
			}
			else if (!Helper.isNullOrEmpty((String) submissionAttrMap
					.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_DISTRIBUTOR)))
					|| ((String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_REPORT_SOURCE_DISTRIBUTOR)))
							.equalsIgnoreCase("true")) {
				aerAttrM.put(ATTRIBUTE_REPORT_SOURCE, "Distributor");
			}

			Map<String, String> manufacturer = new HashMap<>();
			manufacturer.put(ATTRIBUTE_FIRSTNAME,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FIRST_GIVEN_NAME)));
			manufacturer.put(ATTRIBUTE_MIDDLENAME,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_SECOND_GIVEN_NAME)));
			manufacturer.put(ATTRIBUTE_LASTNAME,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FAMILY_NAME)));
			manufacturer.put(ATTRIBUTE_TITLE,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_NAME_TITLE)));
			manufacturer.put(ATTRIBUTE_BUSINESSORAGENCY,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FACILITY_NAME)));
			manufacturer.put(ATTRIBUTE_ADDRESS,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_LINE1)));
			manufacturer.put(ATTRIBUTE_ADDRESSLINE2,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_LINE2)));
			manufacturer.put(ATTRIBUTE_CITY,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_CITY)));
			manufacturer.put(ATTRIBUTE_STATE,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_STATE)));
			manufacturer.put(ATTRIBUTE_POSTALCODE,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_POSTAL)));
			manufacturer.put(ATTRIBUTE_ZIPCODEEXTENSION,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_POSTAL_EXTENSION)));
			manufacturer.put(ATTRIBUTE_COUNTRY,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_ADDRESS_COUNTRY)));
			manufacturer.put(ATTRIBUTE_FAXNUMBER,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_TELEPHONE_LOCAL_NUMBER)));
			manufacturer.put(ATTRIBUTE_CELLPHONENUMBER,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_FAX_NUMBER)));
			manufacturer.put(ATTRIBUTE_EMAILADDRESS,
					(String) submissionAttrMap.get(getAttributeSelect(ATTRIBUTE_COMPLAINT_SUBMISSION_MANUFACTURER_CO_EMAIL)));
			manufacturer.put(ATTRIBUTE_CONTACTTYPE, "Manufacturer");

			ContactService contactService = getContactService(context);
			String contactid = contactService.createContact(context, TYPE_CONTACT, manufacturer);
			DomainObject newContact = DomainObject.newInstance(context, contactid);

			TicketUtil.connectObjects(context, report, TicketConstants.SYMBOLIC_RELATIONSHIP_CONTACT, newContact);

			report.setAttributeValues(context, aerAttrM);
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	private DomainObject createProductEvalualtion(Context context, DomainObject complaintObj, DomainObject iwComplaintObj, DomainObject dEventObj,
			final Map<?, ?> eventAttrMap) throws TicketException {
		try {
			String complaintCurrentState = iwComplaintObj.getInfo(context, DomainConstants.SELECT_CURRENT);
			final String approvalState = FrameworkUtil.lookupStateName(context, POLICY_LSCOMPLAINT, "state_Approval");
			final String completeState = FrameworkUtil.lookupStateName(context, POLICY_COMPLAINT_PRODUCT_EVALUATION, "state_Complete");

			final String newObjId = FrameworkUtil.autoName(context, "type_ComplaintProductEvaluation", "policy_ComplaintProductEvaluation");

			final DomainObject prodEval = DomainObject.newInstance(context, newObjId);
			final ComplaintTicketService complaintTicketService = getComplaintTicketService(context);
			complaintTicketService.setOrganizationOwnership(context, prodEval, "");
			if (complaintCurrentState.equals(approvalState)) {

				Map<String, String> attributeMap = new HashMap<>();
				attributeMap = mapInvestigationAttributes(context, (Map<String, String>) eventAttrMap);

				Helper.runWithSuperUser(context, new Helper.Callable() {
					@Override
					public Object run(Context context, Object... args) throws LSAException {
						DomainObject prodEval = (DomainObject) args[0];
						Map<?, ?> attributeMap = (Map<?, ?>) args[1];
						try {
							MqlUtil.mqlCommand(context, true, "trigger off", true);
							prodEval.setAttributeValues(context, attributeMap);
							return null;
						}
						catch (Exception e) {
							throw new TicketException(e);
						}
						finally {
							try {
								MqlUtil.mqlCommand(context, true, "trigger on", true);
							}
							catch (Exception e) {
								throw new TicketException(e);
							}
						}
					}
				}, prodEval, attributeMap);
			}
			DomainRelationship.connect(context, complaintObj,
					PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_INVESTIGATION), true,
					new String[] { newObjId });
			final ComplaintProductEvaluationService complaintProductEvaluationService = getComplaintProductEvaluationService(context);
			complaintProductEvaluationService.addDerivedEventsToProductEvaluation(context, prodEval, dEventObj.getId(context));
			if (complaintCurrentState.equals(approvalState)) {
				Helper.runWithSuperUser(context, new Helper.Callable() {
					@Override
					public Object run(Context context, Object... args) throws LSAException {
						DomainObject prodEval = (DomainObject) args[0];
						try {
							MqlUtil.mqlCommand(context, true, "trigger off", true);
							prodEval.setState(context, completeState);
							MqlUtil.mqlCommand(context, true, "trigger on", true);
							return null;
						}
						catch (Exception e) {
							throw new TicketException(e);
						}
					}
				}, prodEval);
			}
			return prodEval;
		}
		catch (Exception e) {

			throw new TicketException(e);
		}

	}

	/**
	 * Forms the DomainObject attribute select for the string passed as argument
	 * 
	 * @param attrName
	 *            attribute name
	 * @return DomainObject attribute select for the string
	 */
	protected String getAttributeSelect(String attrName) {
		return DomainObject.getAttributeSelect(attrName);
	}

	@SuppressWarnings("unchecked")
	protected boolean migrateCorrespondance(Context context, DomainObject complaintObj, DomainObject newComplaintObj) throws TicketException {

		try {
			CorrespondenceService correspondenceService = getCorrespondenceService(context);
			ContactService contactService = getContactService(context);
			StringList iwAttrL = new StringList();
			iwAttrL.add(DomainConstants.SELECT_ID);
			iwAttrL.add(DomainConstants.SELECT_NAME);
			iwAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMENTS));
			iwAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMUNICATIONMETHOD));
			iwAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCEDATE));
			iwAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMUNICATOR));
			iwAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCECONTACT));
			iwAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCETIME));
			iwAttrL.add(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCETYPE));

			List<Map<?, ?>> correspondenceIWMapL = QueryUtil.getRelatedObjects(context, DomainObject.newInstance(context, complaintObj),
					"relationship_ComplaintCorrespondence", "type_ComplaintCorrespondence", iwAttrL, Helper.stringList(DomainRelationship.SELECT_ID),
					false, true, (short) 1, null, null);

			for (Map<?, ?> correspondenceIW : correspondenceIWMapL) {

				List<Map<?, ?>> contactMapL = contactService.getContactsOfParent(context, newComplaintObj, Helper.stringList(
						DomainConstants.SELECT_NAME, DomainConstants.SELECT_ID, getAttributeSelect(ATTRIBUTE_FIRSTNAME),
						getAttributeSelect(ATTRIBUTE_LASTNAME)), new String(), Helper.stringList(DomainRelationship.SELECT_ID), new String());

				boolean flag = false;
				for (Map<?, ?> contact : contactMapL) {
					// contact attached to complaint is searched with First Name
					// and Last Name and matching contact with IW correspondence
					// is attached
					String contactFulName = (String) contact.get(getAttributeSelect(ATTRIBUTE_FIRSTNAME)) + " "
							+ (String) contact.get(getAttributeSelect(ATTRIBUTE_LASTNAME));
					String contactID = (String) contact.get(DomainConstants.SELECT_ID);

					if (contactFulName.equals(correspondenceIW.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCECONTACT)))) {
						String newCorrespondenceId = correspondenceService.create(context, newComplaintObj,
								DomainObject.newInstance(context, contactID),
								mapCorrespondenceAttributes(context, (Map<String, String>) correspondenceIW));
						final ComplaintTicketService complaintTicketService = getComplaintTicketService(context);
						complaintTicketService.setOrganizationOwnership(context, DomainObject.newInstance(context, newCorrespondenceId), "");
						migrateIWDocs(context, DomainObject.newInstance(context, (String) correspondenceIW.get(DomainConstants.SELECT_ID)),
								DomainObject.newInstance(context, newCorrespondenceId));
						flag = true;
						break;
					}
				}
				if (!flag)
					throw new TicketException("Contact associated with correspondance is not attached to the complaint.");
			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}

		return true;
	}

	protected boolean migrateAssignees(Context context, DomainObject complaintObj, DomainObject newComplaintObj) throws TicketException {

		try {
			ComplaintTicketService complaintTicketService = getComplaintTicketService(context);

			List<Map<?, ?>> assigneeL = complaintTicketService.getAssignees(context, complaintObj);
			if (assigneeL.size() > 0) {
				String[] assigneeIds = new String[assigneeL.size()];
				int i = 0;
				for (Map<?, ?> assignee : assigneeL) {
					assigneeIds[i++] = (String) assignee.get(DomainConstants.SELECT_ID);
				}
				complaintTicketService.addAssigneesToComplaintTicket(context, newComplaintObj, assigneeIds);
			}
			if (newComplaintObj
					.getCurrentState(context)
					.getName()
					.equalsIgnoreCase(
							TicketUtil.getStateName(context, TicketConstants.SYMBOLIC_POLICY_COMPLAINT_RECORD,
									TicketConstants.SYMBOLIC_POLICY_STATE_INPROCESS))) {
				createReviewRoute(context, newComplaintObj, TicketUtil.getStateName(context, TicketConstants.SYMBOLIC_POLICY_COMPLAINT_RECORD,
						TicketConstants.SYMBOLIC_POLICY_STATE_INPROCESS));
			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}

		return true;
	}

	protected static void createReviewRoute(Context context, DomainObject doObjComplaint, String strCurrentState) throws Exception {
		try {
			String TYPE_SYMBOLIC = TicketUtil.getAliasForAdmin(context, TicketConstants.TYPE, doObjComplaint.getTypeName());
			String POLICY_SYMBOLIC = TicketUtil.getAliasForAdmin(context, TicketConstants.POLICY, doObjComplaint.getPolicy(context).getName());
			String strEnableReview = new String();
			if ((null != TYPE_SYMBOLIC)) {
				if (TYPE_SYMBOLIC.equalsIgnoreCase(TicketConstants.SYMBOLIC_TYPE_COMPLAINT)) {
					strEnableReview = Helper.getProperty(context, "PQCComplaint.Complaint.EnableReviewProcess");
				}
				else if (TYPE_SYMBOLIC.equalsIgnoreCase(TicketConstants.SYMBOLIC_TYPE_EQUIPMENT_SERVICE_REQUEST)) {
					strEnableReview = Helper.getProperty(context, "PQCComplaint.ESR.EnableReviewProcess");
				}
				else if (TYPE_SYMBOLIC.equalsIgnoreCase(TicketConstants.SYMBOLIC_TYPE_INQUIRY)) {
					strEnableReview = Helper.getProperty(context, "PQCComplaint.Inquiry.EnableReviewProcess");
				}
			}

			if (strCurrentState.equalsIgnoreCase(TicketUtil.getStateName(context, POLICY_SYMBOLIC, TicketConstants.SYMBOLIC_POLICY_STATE_INPROCESS))
					&& TicketConstants.TRUE.equalsIgnoreCase(strEnableReview)) {
				ComplaintTicketService complaintTicketService = getComplaintTicketService(context);
				List<Map<?, ?>> mlAssignees = complaintTicketService.getAssignees(context, doObjComplaint);
				String strApproverId = DomainConstants.EMPTY_STRING;
				String strApproverName = DomainConstants.EMPTY_STRING;
				String strAttributeValue = DomainConstants.EMPTY_STRING;
				ArrayList<Map<String, String>> routeMemberIdList = new ArrayList<Map<String, String>>();
				for (Map<?, ?> mapAssignees : mlAssignees) {
					strAttributeValue = (String) mapAssignees.get(DomainRelationship.getAttributeSelect(PropertyUtil.getSchemaProperty(context,
							TicketConstants.SYMBOLIC_ATTRIBUTE_COMPLAINT_TEAM_ROLE)));
					if (TicketConstants.APPROVER.equalsIgnoreCase(strAttributeValue)) {
						Map<String, String> membersMap = new HashMap<String, String>();
						strApproverId = (String) mapAssignees.get(DomainConstants.SELECT_ID);
						strApproverName = (String) mapAssignees.get(DomainConstants.SELECT_NAME);
						membersMap.put(DomainConstants.SELECT_NAME, strApproverName);
						membersMap.put(DomainConstants.SELECT_ID, strApproverId);
						routeMemberIdList.add(membersMap);
					}
				}

				Helper.runWithUser(context, doObjComplaint.getOwner(context).getName(), new Helper.Callable() {
					@Override
					public Object run(Context context, Object... args) throws TicketException {
						final DomainObject DOOBJCOMPLAINT = (DomainObject) args[0];
						final ArrayList<Map<String, String>> ROUTEMEMBERIDLIST = (ArrayList<Map<String, String>>) args[1];
						try {

							ReviewRouteService reviewRouteService = getReviewRouteService(context);
							return reviewRouteService.createReviewRoute(context, DOOBJCOMPLAINT, DomainConstants.EMPTY_STRING,
									DomainConstants.EMPTY_STRING, ROUTEMEMBERIDLIST,
									TicketConstants.SYMBOLIC_POLICY_STATE_INPROCESS, RouteCompletionAction.NOTIFY_ROUTE_OWNER);
						}
						catch (final Exception e) {
							throw new TicketException(e);
						}
					}
				}, doObjComplaint, routeMemberIdList);
			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	/**
	 * Set the assigned interface on the object.
	 * 
	 * @param context
	 * @param newComplaintObj
	 * @param iwComplaintOwner
	 * @return
	 * @throws TicketException
	 */
	protected boolean setComplaintTicketAsAssigned(Context context, DomainObject newComplaintObj, Person iwComplaintOwner) throws TicketException {
		try {

			Vault vault = (Vault) Helper.runWithUser(context, iwComplaintOwner.getOwner(context).getName(), new Helper.Callable() {
				@Override
				public Object run(Context context, Object... args) throws TicketException {
					try {
						return context.getVault();
					}
					catch (Exception e) {
						throw new TicketException(e);
					}
				}
			}, new String());
			BusinessInterface busInterface = new BusinessInterface(INTERFACE_ASSIGNED, vault);
			newComplaintObj.addBusinessInterface(context, busInterface);
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
		return true;
	}

	protected boolean setOriginatedDate(Context context, String objectId, String originatedDate) throws TicketException {
		try {
			MqlUtil.mqlCommand(context, false, true, "modify bus $1 $2 \"$3\"", true, objectId, "originated", originatedDate);
			return true;
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	protected DomainObject getActiveModelConnectedToProductOrBuild(Context context, DomainObject prodObj) throws TicketException {

		try {
			DomainObject product = prodObj;
			if (Helper.getTypeKindOf(context, prodObj, "type_Builds").containsValue(Boolean.TRUE)) {
				List<Map<?, ?>> builProdMapL = QueryUtil.getRelatedObjects(context, prodObj, "relationship_ProductBuild", "type_Products",
						Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_CURRENT),
						Helper.stringList(DomainRelationship.SELECT_ID), true, false, (short) 1, null, null);
				product = DomainObject.newInstance(context, (String) builProdMapL.get(0).get(DomainConstants.SELECT_ID));
			}

			List<Map<?, ?>> modelMapL = QueryUtil.getRelatedObjects(context, product, "relationship_MainProduct", "type_Model",
					Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_CURRENT), Helper.stringList(DomainRelationship.SELECT_ID),
					true, false, (short) 1, null, null);
			return DomainObject.newInstance(context, (String) modelMapL.get(0).get(DomainConstants.SELECT_ID));
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	protected DomainObject getActiveProductForProductOrBuild(Context context, DomainObject prodObj) throws TicketException {

		try {
			DomainObject product = prodObj;
			if (Helper.getTypeKindOf(context, prodObj, "type_Builds").containsValue(Boolean.TRUE)) {
				List<Map<?, ?>> builProdMapL = QueryUtil.getRelatedObjects(context, prodObj, "relationship_ProductBuild", "type_Products",
						Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_CURRENT),
						Helper.stringList(DomainRelationship.SELECT_ID), true, false, (short) 1, null, null);
				product = DomainObject.newInstance(context, (String) builProdMapL.get(0).get(DomainConstants.SELECT_ID));
				return product;
			}
			else {
				return prodObj;
			}

		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	protected String getComplaintCI(Context context, DomainObject complaintObj) throws TicketException {
		try {
			List<Map<?, ?>> connectedRoute = QueryUtil.getRelatedObjects(
					context,
					complaintObj,
					DomainConstants.RELATIONSHIP_OBJECT_ROUTE,
					DomainConstants.TYPE_ROUTE,
					Helper.stringList(DomainConstants.SELECT_NAME, DomainConstants.SELECT_ID),
					Helper.stringList(DomainRelationship.SELECT_NAME,
							DomainRelationship.getAttributeSelect(DomainConstants.ATTRIBUTE_ROUTE_BASE_STATE),
							DomainRelationship.getAttributeSelect(DomainConstants.ATTRIBUTE_ROUTE_BASE_POLICY)),
					false,
					true,
					(short) 1,
					new StringBuilder().append("(").append(DomainConstants.SELECT_CURRENT).append("==\"In Process\") && (")
							.append(getAttributeSelect(DomainConstants.ATTRIBUTE_ROUTE_BASE_PURPOSE)).append("==\"Approval\")").toString(),
					new StringBuilder().append(DomainRelationship.getAttributeSelect(DomainConstants.ATTRIBUTE_ROUTE_BASE_STATE))
							.append("==\"state_Approval\"").toString());
			if (connectedRoute.size() > 0) {
				Route route = new Route((String) connectedRoute.get(0).get(DomainConstants.SELECT_ID));
				List<Map<String, String>> routeMembers = route.getRouteMembers(context, Helper.stringList(DomainConstants.SELECT_NAME),
						new StringList(), true);
				UserList userList = null;
				Group group = new Group(PropertyUtil.getSchemaProperty(context, "group_ComplaintInvestigator"));
				userList = group.getAssignments(context);
				ArrayList<String> activeUserList = new ArrayList<>();
				if (userList != null) {
					Iterator<matrix.db.User> userIter = userList.iterator();
					while (userIter.hasNext()) {
						String userName = userIter.next().getName();
						String personState = MqlUtil.mqlCommand(context, "print bus $1 $2 $3 select current dump $4", "Person", userName, "-", "|");

						if (personState.equals("Active"))
							activeUserList.add(userName);
					}
				}
				for (Map<String, String> member : routeMembers) {
					if (activeUserList.contains(member.get(DomainConstants.SELECT_NAME))) {
						comlaintTicketOwner = member.get(DomainConstants.SELECT_NAME);
						return comlaintTicketOwner;
					}
				}

			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
		return null;
	}

	@SuppressWarnings("unchecked")
	protected List<String> migrateContacts(Context context, DomainObject complaintObj, DomainObject newComplaintObj) throws TicketException {

		try {
			ContactService contactService = getContactService(context);
			List<String> contactL = new ArrayList<>();
			ContextUtil.pushContext(context);
			MapList contactIwMapList = DomainObject.newInstance(context, complaintObj).getRelatedObjects(context,
					PropertyUtil.getSchemaProperty(context, "relationship_ComplaintContact"), "Complaint Contact", iwContactAttrL,
					Helper.stringList(DomainRelationship.SELECT_ID, DomainRelationship.SELECT_ORIGINATED), false, true, (short) 1, null, null);
			ContextUtil.popContext(context);
			contactIwMapList.addSortKey(DomainRelationship.SELECT_ORIGINATED, "ascending", "date");
			contactIwMapList.sort();
			List<Map<?, ?>> contactIwMapL = contactIwMapList;
			int i = 0;
			boolean flag = true;
			for (Map<?, ?> contact : contactIwMapL) {
				DomainObject iwContactObj = DomainObject.newInstance(context, (String) contact.get(DomainConstants.SELECT_ID));
				String contactid = contactService.createContact(context, TYPE_CONTACT, mapContactAttributes(context, (Map<String, String>) contact));
				DomainObject newContact = DomainObject.newInstance(context, contactid);
				DomainRelationship relationId = TicketUtil.connectObjects(context, newComplaintObj, TicketConstants.SYMBOLIC_RELATIONSHIP_CONTACT,
						newContact);
				migrateIWDocs(context, iwContactObj, newContact);
				contactL.add(contactid);
				if (++i == 1) {
					Map<String, String> contactAttrMap = new HashMap<String, String>();
					if (!Helper.isNullOrEmpty(new DomainRelationship[] { relationId })) {
						if (flag) {
							contactAttrMap.put(ATTRIBUTE_PRIMARYCOMPLAINTCONTACT, "Yes");
							flag = false;
						}
						relationId.setAttributeValues(context, contactAttrMap);
					}
				}

			}
			return contactL;
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
	}

	protected Map<String, String> mapRetrunAttributesForAdditionReturn(Context context, Map<String, String> event, String retrunReceiver,
			List<Map<?, ?>> prodMapL, DomainObject productAttachedToEvent) {

		int intReturnModel = 0;

		// /Model for the Retrun
		for (Map<?, ?> returnModel : prodMapL) {
			if (!returnModel.get(DomainConstants.SELECT_ID).toString().equals(productAttachedToEvent.getObjectId())) {
				intReturnModel = intReturnModel + 1;
			}
		}
		// Return attribute map
		Map<String, String> returnMap = new HashMap<>();
		returnMap.put(ATTRIBUTE_RETURNRECEIVER, retrunReceiver);
		returnMap.put(ATTRIBUTE_COMPLAINTPRODUCTTOBERETURNED, event.get(ATTRIBUTE_COMPLAINTPRODUCTTOBERETURNED));
		returnMap.put(ATTRIBUTE_COMPLAINTPRODUCTNOTRETURNEDRATIONALE, event.get(ATTRIBUTE_COMPLAINTPRODUCTNOTRETURNEDRATIONALE));
		// returnMap.put(ATTRIBUTE_RETURNDISPOSITION, (String)
		// event.get(ATTRIBUTE_RETURNDISPOSITION));
		// returnMap.put(ATTRIBUTE_RETURNNOTEVALUATEDJUSTIFICATION, (String)
		// event.get(ATTRIBUTE_RETURNNOTEVALUATEDJUSTIFICATION));
		returnMap.put(ATTRIBUTE_COMPLAINTPRODUCTRMANUMBER, event.get(ATTRIBUTE_COMPLAINTPRODUCTRMANUMBER));
		returnMap.put(ATTRIBUTE_COMPLAINTPRODUCTRECEIVEDDATE,
				(String) prodMapL.get(intReturnModel).get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTRECEIVEDDATE)));
		returnMap
				.put(ATTRIBUTE_QUANTITY,
						(String) prodMapL.get(intReturnModel).get(
								DomainRelationship.getAttributeSelect(PropertyUtil.getSchemaProperty(context,
										"attribute_ComplaintProductQuantityReturned"))));
		return returnMap;
	}

	private Map<String, String> mapContactAttributes(Context context, Map<String, String> contact) {
		Map<String, String> contactAttrMap = new HashMap<>();
		switch (contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTSALUTATION))) {
		case "Mr.":
			contactAttrMap.put(ATTRIBUTE_SALUTATION, "Mr");
			break;
		case "Ms.":
			contactAttrMap.put(ATTRIBUTE_SALUTATION, "Miss");
			break;
		case "Mrs.":
			contactAttrMap.put(ATTRIBUTE_SALUTATION, "Mrs");
			break;
		case "Dr.":
			contactAttrMap.put(ATTRIBUTE_SALUTATION, "Dr");
			break;
		default:
			contactAttrMap.put(ATTRIBUTE_SALUTATION, "");
			break;
		}
		contactAttrMap.put(ATTRIBUTE_FIRSTNAME, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTFIRSTNAME)));
		contactAttrMap.put(ATTRIBUTE_MIDDLENAME, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTSECONDNAME)));
		contactAttrMap.put(ATTRIBUTE_LASTNAME, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTFAMILYNAME)));
		contactAttrMap.put(ATTRIBUTE_TITLE, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTTITLE)));
		contactAttrMap.put(ATTRIBUTE_BUSINESSORAGENCY, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTBUSINESSNAME)));
		contactAttrMap.put(ATTRIBUTE_ADDRESS, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTADDRESSLINE1)));
		contactAttrMap.put(ATTRIBUTE_ADDRESSLINE2, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTADDRESSLINE2)));
		contactAttrMap.put(ATTRIBUTE_CITY, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTCITY)));
		contactAttrMap.put(ATTRIBUTE_STATE, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTSTATE)));
		contactAttrMap.put(ATTRIBUTE_POSTALCODE, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTZIPCODE)));
		contactAttrMap.put(ATTRIBUTE_ZIPCODEEXTENSION, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTZIPCODEEXTENSION)));
		contactAttrMap.put(ATTRIBUTE_COUNTRY, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTCOUNTRY)));
		contactAttrMap.put(ATTRIBUTE_FAXNUMBER, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTFAXNUMBER)));
		contactAttrMap.put(ATTRIBUTE_CELLPHONENUMBER, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTMOBILENUMBER)));
		contactAttrMap.put(ATTRIBUTE_EMAILADDRESS, contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTEMAILADDRESS)));
		String contactOccupation = contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTOCCUPATION));
		if (!Helper.isNullOrEmpty(contactOccupation)) {
			if (Helper.stringList("Attorney", "Technician/Representative", "Risk Manager", "Service and Testing Personnel", "Service Personnel")
					.contains(contactOccupation))
				contactAttrMap.put(ATTRIBUTE_OCCUPATION, contactOccupation);
			else {
				contactAttrMap.put(ATTRIBUTE_OCCUPATION, "NA");
			}
		}
		switch (contact.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCONTACTRELATIONSHIP))) {
		case "Reporter":
			contactAttrMap.put(ATTRIBUTE_CONTACTTYPE, "Reporter");
			break;
		case "External Investigator":
			contactAttrMap.put(ATTRIBUTE_CONTACTTYPE, "Customer");
			break;
		case "Employee":
		case "Sales Representative":
		default: {
			contactAttrMap.put(ATTRIBUTE_CONTACTTYPE, "Company Representative");
			break;
		}
		}
		return contactAttrMap;
	}

	private Map<String, String> mapCorrespondenceAttributes(Context context, Map<String, String> correspondence) {

		Map<String, String> correspondenceAttrMap = new HashMap<>();
		correspondenceAttrMap
				.put(ATTRIBUTE_CORRESPONDENCECOMMENTS, correspondence.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMENTS)));
		correspondenceAttrMap.put(ATTRIBUTE_CORRESPONDENCEMETHOD,
				correspondence.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMUNICATIONMETHOD)));
		correspondenceAttrMap.put(ATTRIBUTE_CORRESPONDENCEDATE, correspondence.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCEDATE)));
		correspondenceAttrMap.put(ATTRIBUTE_CORRESPONDENCECOMMUNICATOR,
				correspondence.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCECOMMUNICATOR)));
		correspondenceAttrMap.put(ATTRIBUTE_CORRESPONDENCESOURCE, correspondence.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCECONTACT)));
		correspondenceAttrMap.put(ATTRIBUTE_CORRESPONDENCETIME, correspondence.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCETIME)));
		switch (correspondence.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCORRESPONDENCETYPE))) {
		case "Closure":
			correspondenceAttrMap.put(ATTRIBUTE_CORRESPONDENCETYPE, "Closure");
			break;
		case "Warranty Expiration Notice":
			correspondenceAttrMap.put(ATTRIBUTE_CORRESPONDENCETYPE, "Warranty Expiration Notice");
			break;
		case "Loaner Return Request":
			correspondenceAttrMap.put(ATTRIBUTE_CORRESPONDENCETYPE, "Product Return Request");
			break;
		case "Acknowledgement":
		case "Follow Up": {
			correspondenceAttrMap.put(ATTRIBUTE_CORRESPONDENCETYPE, "Acknowledgement Follow Up");
			break;
		}
		default:
			correspondenceAttrMap.put(ATTRIBUTE_CORRESPONDENCETYPE, "Other");
			break;
		}
		return correspondenceAttrMap;
	}

	protected Map<String, Map<String, String>> mapEventProductRelAttributes(Context context, List<Map<?, ?>> prodMapL) {

		Map<String, Map<String, String>> prodRelAttrMapL = new HashMap<>(prodMapL.size());
		for (Map<?, ?> prodRelMap : prodMapL) {
			Map<String, String> prodRel = new HashMap<>();
			prodRel.put(ATTRIBUTE_KITNUMBER, (String) prodRelMap.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTKITNUMBER)));
			prodRel.put(ATTRIBUTE_EXPIRATIONDATE,
					(String) prodRelMap.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTEXPIRATIONDATE)));
			prodRel.put(ATTRIBUTE_PARTNUMBER, (String) prodRelMap.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTPARTNUMBER)));
			prodRel.put(ATTRIBUTE_OTHERNUMBER, (String) prodRelMap.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTOTHERNUMBER)));
			prodRel.put(ATTRIBUTE_LOTNUMBER, (String) prodRelMap.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTLOTNUMBER)));
			prodRel.put(ATTRIBUTE_MODELNUMBER, (String) prodRelMap.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTMODELNUMBER)));
			prodRelAttrMapL.put((String) prodRelMap.get(DomainConstants.SELECT_ID), prodRel);
		}
		return prodRelAttrMapL;
	}

	protected boolean addIWReferenceObjects(Context context, DomainObject complaintObj, DomainObject newComplaintObj) throws TicketException {
		try {
			List<Map<?, ?>> iwReferenceMapL = QueryUtil.getRelatedObjects(context, complaintObj, RELATIONSHIP_COMPLAINTREFERENCE,
					TYPE_COMPLAINTTICKETS, Helper.stringList(DomainConstants.SELECT_ID), Helper.stringList(DomainRelationship.SELECT_ID), false,
					true, (short) 1, new String(), new String());
			for (Map<?, ?> iwReference : iwReferenceMapL) {
				DomainRelationship.connect(context, newComplaintObj, RELATIONSHIP_RELATEDITEMS,
						DomainObject.newInstance(context, (String) iwReference.get(DomainConstants.SELECT_ID)));
			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
		return true;
	}

	protected Map<String, String> mapRetrunAttributes(Context context, Map<String, String> event, String retrunReceiver, List<Map<?, ?>> prodMapL,
			DomainObject productAttachedToEvent) {

		int intReturnModel = 0;

		// /Model for the Retrun
		for (Map<?, ?> returnModel : prodMapL) {
			if (!returnModel.get(DomainConstants.SELECT_ID).toString().equals(productAttachedToEvent.getObjectId())) {
				intReturnModel = intReturnModel + 1;
			}
		}
		// Return attribute map
		Map<String, String> returnMap = new HashMap<>();
		returnMap.put(ATTRIBUTE_RETURNRECEIVER, retrunReceiver);
		returnMap.put(ATTRIBUTE_COMPLAINTPRODUCTTOBERETURNED, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTTOBERETURNED)));
		returnMap.put(ATTRIBUTE_COMPLAINTPRODUCTNOTRETURNEDRATIONALE, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTNOTRETURNEDRATIONALE)));
		returnMap.put(ATTRIBUTE_RETURNDISPOSITION, event.get(getAttributeSelect(ATTRIBUTE_RETURNDISPOSITION)));
		returnMap.put(ATTRIBUTE_RETURNNOTEVALUATEDJUSTIFICATION, event.get(getAttributeSelect(ATTRIBUTE_RETURNNOTEVALUATEDJUSTIFICATION)));
		returnMap.put(ATTRIBUTE_COMPLAINTPRODUCTRMANUMBER, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTRMANUMBER)));
		returnMap.put(ATTRIBUTE_COMPLAINTPRODUCTRECEIVEDDATE,
				(String) prodMapL.get(intReturnModel).get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTRECEIVEDDATE)));
		returnMap
				.put(ATTRIBUTE_QUANTITY,
						(String) prodMapL.get(intReturnModel).get(
								DomainRelationship.getAttributeSelect(PropertyUtil.getSchemaProperty(context,
										"attribute_ComplaintProductQuantityReturned"))));
		return returnMap;
	}

	protected static String migrateIWDocs(Context context, DomainObject oldObj, DomainObject newObject) throws TicketException {
		try {
			if (!Helper.getTypeKindOf(context, oldObj, TicketConstants.SYMBOLIC_TYPE_COMPLAINT_EVENT, TicketConstants.SYMBOLIC_TYPE_CONTACT,
					"type_ComplaintContact", "type_ComplaintCorrespondence").containsValue(Boolean.TRUE)) {
				final String ATTRIBUTE_TITLE = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_Title);
				final String RELATIONSHIP_REFERENCE_DOCUMENT = PropertyUtil.getSchemaProperty(context, "relationship_ReferenceDocument");
				List<Map<?, ?>> relatedReferences = QueryUtil.getRelatedObjects(context, oldObj, "File Reference,Reference Document",
						DomainConstants.QUERY_WILDCARD, Helper.stringList(DomainConstants.SELECT_ID, DomainConstants.SELECT_TYPE,
								DomainConstants.SELECT_NAME, DomainConstants.SELECT_REVISION, DomainObject.getAttributeSelect(ATTRIBUTE_TITLE)),
						Helper.stringList(DomainConstants.SELECT_RELATIONSHIP_ID), Boolean.FALSE, Boolean.TRUE, (short) 1, null, null);
				for (Map<?, ?> references : relatedReferences) {
					context.getWorkspacePath();
					DomainObject dObjNewObject = null;
					String strNewMigratedDocId = DomainConstants.EMPTY_STRING;
					strNewMigratedDocId = FrameworkUtil.autoName(context, DomainSymbolicConstants.SYMBOLIC_type_Document,
							DomainSymbolicConstants.SYMBOLIC_policy_Document);
					Helper.runWithSuperUser(context, new Helper.Callable() {
						@Override
						public Object run(Context context, Object... args) throws LSAException {
							DomainObject dObjNewObject = (DomainObject) args[0];
							Map<String, String> references = (Map<String, String>) args[1];
							String strNewMigratedDocId = (String) args[2];
							DomainObject newObject = (DomainObject) args[3];
							try {
								dObjNewObject = DomainObject.newInstance(context, strNewMigratedDocId);
								dObjNewObject.setOwner(context, context.getUser());
								String strTitle = references.get(DomainObject.getAttributeSelect(ATTRIBUTE_TITLE));
								Map<String, String> mpAttributeMap = new HashMap<String, String>();
								mpAttributeMap.put(ATTRIBUTE_TITLE, strTitle);
								dObjNewObject.setAttributeValues(context, mpAttributeMap);
								String strMigrateDocId = references.get(DomainConstants.SELECT_ID);
								CommonDocument common = new CommonDocument(strMigrateDocId);
								common.copyDocumentFiles(context, strMigrateDocId, dObjNewObject, true);
								checkInFile(context, common, dObjNewObject);
								newObject.setRelatedObject(context, DomainConstants.RELATIONSHIP_MESSAGE_ATTACHMENTS, true,
										dObjNewObject.getObjectId(context));
								return null;
							}
							catch (Exception e) {
								throw new TicketException(e);
							}
						}
					}, dObjNewObject, references, strNewMigratedDocId, newObject);
				}
			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
		return null;
	}

	/**
	 * Copies the current document checked in file to the version document
	 * 
	 * @param context
	 *            the eMatrix <code>Context</code> object
	 * @param toObject
	 *            the object to copy the file to
	 * @param store
	 *            optional store name for the filecopy; if null, store based on
	 *            policy store definition
	 * @throws Exception
	 *             if the operation fails
	 */
	private static void checkInFile(Context context, DomainObject dobjFromObject, DomainObject dobjToObject) throws Exception {
		StringList objectSelects = new StringList(3);
		objectSelects.add(CommonDocument.SELECT_FILE_NAME);
		objectSelects.add(CommonDocument.SELECT_FILE_FORMAT);
		Map<?, ?> mpFromObjectInfo = dobjFromObject.getInfo(context, objectSelects);
		StringList files = (StringList) mpFromObjectInfo.get(CommonDocument.SELECT_FILE_NAME);
		StringList fileFormats = (StringList) mpFromObjectInfo.get(CommonDocument.SELECT_FILE_FORMAT);
		if (files != null && files.size() > 0 && UIUtil.isNotNullAndNotEmpty((String) files.get(0))) {
			for (int i = 0; i < files.size(); i++) {
				java.io.File tempFile = java.io.File.createTempFile("domain", null);

				// Define the path to temporarily store the file.
				StringBuffer directory = new StringBuffer(111);
				directory.append(tempFile.getParent());
				directory.append(java.io.File.separator);
				directory.append("backup");
				directory.append(java.io.File.separator);
				directory.append(tempFile.getName());
				tempFile.delete();
				tempFile = new java.io.File(directory.toString());
				tempFile.mkdirs();
				String fileName = (String) files.get(i);
				String fileFormat = (String) fileFormats.get(i);
				MqlUtil.mqlCommand(context, "checkout bus $1 server format $2 file $3 directory $4", dobjFromObject.getObjectId(context), fileFormat,
						fileName, directory.toString());
				// checkin file into toObject object
				MqlUtil.mqlCommand(context, "checkin bus $1 server append $2", dobjToObject.getObjectId(context), directory.toString()
						+ java.io.File.separator + fileName);
				java.io.File tempFile2 = new java.io.File(directory.toString(), fileName);
				tempFile2.delete();
				tempFile.delete();
			}
		}
	}

	protected DomainObject addReturnObject(Context context, DomainObject newComplaintObj, DomainObject modelObj, Map<String, String> attrReturn,
			String returnDesription) throws TicketException {
		DomainObject returnObj = null;
		try {
			ReturnFulfillmentService getreturnFulfillmentService = getreturnFulfillmentService(context);
			String newReturnId;
			newReturnId = FrameworkUtil.autoName(context, TicketConstants.SYMBOLIC_TYPE_COMPLAINT_PRODUCT_RETURN,
					TicketConstants.SYMBOLIC_POLICY_COMPLAINT_PRODUCT_RETURN);
			returnObj = DomainObject.newInstance(context, newReturnId);
			if (attrReturn.size() > 0)
				returnObj.setAttributeValues(context, attrReturn);
			getreturnFulfillmentService.addProductModelToReturn(context, returnObj, modelObj);
			DomainRelationship.connect(context, newComplaintObj,
					PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_PRODUCT_RETURN), returnObj);
			if (!Helper.isNullOrEmpty(returnDesription))
				returnObj.setDescription(context, returnDesription);
			final ComplaintTicketService complaintTicketService = getComplaintTicketService(context);
			complaintTicketService.setOrganizationOwnership(context, returnObj, "");
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return returnObj;
	}

	protected DomainObject addFulfillmentObject(Context context, DomainObject newComplaintObj, DomainObject modelObj,
			Map<String, String> attrFulfillment, String fulfillmentDesc, DomainObject contact) throws TicketException {
		DomainObject fulfillmentObj = null;
		try {
			ReturnFulfillmentService getreturnFulfillmentService = getreturnFulfillmentService(context);
			String newFulfillmentId;
			newFulfillmentId = FrameworkUtil.autoName(context, TicketConstants.SYMBOLIC_TYPE_COMPLAINT_PRODUCT_FULFILLMENT,
					TicketConstants.SYMBOLIC_POLICY_COMPLAINT_PRODUCT_FULFILLMENT);
			fulfillmentObj = DomainObject.newInstance(context, newFulfillmentId);
			if (attrFulfillment.size() > 0)
				fulfillmentObj.setAttributeValues(context, attrFulfillment);
			if (!Helper.isNullOrEmpty(fulfillmentDesc))
				fulfillmentObj.setDescription(context, fulfillmentDesc);
			getreturnFulfillmentService.addProductModelToFulfillment(context, fulfillmentObj, modelObj);
			DomainRelationship.connect(context, newComplaintObj,
					PropertyUtil.getSchemaProperty(context, TicketConstants.SYMBOLIC_RELATIONSHIP_COMPLAINT_PRODUCT_FULFILLMENT), fulfillmentObj);
			TicketUtil.connectObjects(context, fulfillmentObj, TicketConstants.SYMBOLIC_RELATIONSHIP_CONTACT, contact);
			final ComplaintTicketService complaintTicketService = getComplaintTicketService(context);
			complaintTicketService.setOrganizationOwnership(context, fulfillmentObj, "");
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return fulfillmentObj;
	}

	private Map<String, String> mapESRAttributes(Context context, Map<String, String> esr) {
		Map<String, String> esrAttrMap = new HashMap<>();

		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTDATESENTFORDECONTAMINATION,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDATESENTFORDECONTAMINATION)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTDATERECEIVEDFORDECONTAMINATION,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDATERECEIVEDFORDECONTAMINATION)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTDATESENTFROMDECONTAMINATION,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDATESENTFROMDECONTAMINATION)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTDATERECEIVEDFROMDECONTAMINATION,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDATERECEIVEDFROMDECONTAMINATION)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTDECONTAMINATIONLOCATION,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDECONTAMINATIONLOCATION)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTDECONTAMINATIONMETHOD,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDECONTAMINATIONMETHOD)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONDATE, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONDATE)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONFREQUENCY,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONFREQUENCY)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONDUEDATE, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTCALIBRATIONDUEDATE)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTSERVICEPERFORMED, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTSERVICEPERFORMED)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTSERVICEPERSON, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTSERVICEPERSON)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTDATESERVICED, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTDATESERVICED)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTSERVICESUMMARY, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTSERVICESUMMARY)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEDPARTNUMBERS, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEDPARTNUMBERS)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTADDITIONALINFORMATION,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTADDITIONALINFORMATION)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTWARRANTYREPAIR, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTWARRANTYREPAIR)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTOEMWARRANTYINFO, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTOEMWARRANTYINFO)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTEXTENDEDWARRANTYINFO,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTEXTENDEDWARRANTYINFO)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTCUSTOMERPONUMBERFORREPAIR,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTCUSTOMERPONUMBERFORREPAIR)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTOTHERBILLINGINFORMATION,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTOTHERBILLINGINFORMATION)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTLABORHOURS, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTLABORHOURS)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTSTATUSOFREPAIR, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTSTATUSOFREPAIR)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTINVALIDRATIONALE, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDRATIONALE)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTINVALIDATOR, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDATOR)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTINVALIDATEDDATE, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDATEDDATE)));

		// esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTMANUFACTURINGLOCATION,
		// (String)
		// esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTMANUFACTURINGLOCATION)));

		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTINCOMINGINSPECTIONSUMMARY,
				esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTINCOMINGINSPECTIONSUMMARY)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONPERFORMED, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONPERFORMED)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTFAILUREMODE, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTFAILUREMODE)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATOR, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATOR)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONDATE, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONDATE)));
		esrAttrMap.put(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONSUMMARY, esr.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTEVALUATIONSUMMARY)));
		esrAttrMap.put(DomainConstants.ATTRIBUTE_ORIGINATOR, context.getUser());
		return esrAttrMap;
	}

	protected Map<String, String> mapEventAttributes(Context context, Map<String, String> event) {
		Map<String, String> eventAttrMap = new HashMap<>();
		String investigationRequired = event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONREQUIRED));
		if (investigationRequired.equalsIgnoreCase("Yes"))
			eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONREQUIRED, "Yes");
		else
			eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONREQUIRED, "No");
		eventAttrMap.put(ATTRIBUTE_COMPLAINTDATEOFOCCURRENCE, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTDATEOFOCCURRENCE)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTEVENTTIMING, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTTIMING)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTEVENTTIMINGDETAIL, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTTIMINGDETAIL)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTEVENTDETAIL, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTDETAIL)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTPRECEDINGORCONTRIBUTINGEVENTS,
				event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTPRECEDINGORCONTRIBUTINGEVENTS)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTIMMEDIATEACTIONSTAKEN, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTIMMEDIATEACTIONSTAKEN)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTPERSONSAFFECTED, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTPERSONSAFFECTED)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTEVENTRELEVANTTESTSDATA, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTRELEVANTTESTSDATA)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTEVENTOTHERRELEVANTHISTORY, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTOTHERRELEVANTHISTORY)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTPRODUCTTOBERETURNED, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTTOBERETURNED)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTPRODUCTNOTRETURNEDRATIONALE,
				event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTNOTRETURNEDRATIONALE)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTPRODUCTRMANUMBER, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTPRODUCTRMANUMBER)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTEVENTCAUSECODE, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTCAUSECODE)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTEVENTCOMPANYRESPONSIBLEFORREPORTING,
				event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTCOMPANYRESPONSIBLEFORREPORTING)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTNOINVESTIGATIONRATIONALE, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTNOINVESTIGATIONRATIONALE)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTRISKANALYSISNUMBER, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTRISKANALYSISNUMBER)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTNORISKANALYSISRATIONALE, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTNORISKANALYSISRATIONALE)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTRESPONSIBLECOMPANY, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTRESPONSIBLECOMPANY)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTNOINVESTIGATIONSIGNER, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTNOINVESTIGATIONSIGNER)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTNOINVESTIGATIONDATE, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTNOINVESTIGATIONDATE)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWER, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWER)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWDATE, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWDATE)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTDHRREVIEWED, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTDHRREVIEWED)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTDHRREVIEWRESULTS, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTDHRREVIEWRESULTS)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTNODHRREVIEWRATIONALE, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTNODHRREVIEWRATIONALE)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONRESULTS, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONRESULTS)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONDETAIL,
				event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONDETAIL)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCAPANUMBER, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCAPANUMBER)));
		eventAttrMap.put(ATTRIBUTE_ISSUECODE, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTCAUSECODE)));
		eventAttrMap.put(ATTRIBUTE_EXPERIENCECODE, event.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEVENTCUSTOMERISSUECODE)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTCONFIRMED, getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTCONFIRMED)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTRISKANALYSISREQUIRED,
				getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTRISKANALYSISREQUIRED)));
		eventAttrMap.put(ATTRIBUTE_COMMENTS, getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTRISKANALYSISNUMBER)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCLOSEDDATE,
				getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCLOSEDDATE)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATOR, getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATOR)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONMETHODS,
				getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONMETHODS)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARY,
				getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARY)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONRECOMMENDEDACTIONS,
				getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONRECOMMENDEDACTIONS)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYMALFUNCTION,
				getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYMALFUNCTION)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYLABELING,
				getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYLABELING)));
		eventAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYUSEERROR,
				getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYUSEERROR)));
		eventAttrMap.put(ATTRIBUTE_EXTERNALEVALUATORNOTIFIEDDATE,
				getValueFromMap(context, event, getAttributeSelect(ATTRIBUTE_EXTERNALEVALUATORNOTIFIEDDATE)));
		return eventAttrMap;
	}

	private Map<String, String> mapESRFulfillmentAttributes(Context context, Map<String, String> iwFulfillment) {
		Map<String, String> fulfillmentAttrMap = new HashMap<>();
		fulfillmentAttrMap.put("Send Date",
				iwFulfillment.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATESHIPPEDTOCUSTOMER)));
		fulfillmentAttrMap.put("Date Received By Customer",
				iwFulfillment.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATERECEIVEDBYCUSTOMER)));
		fulfillmentAttrMap.put("Date Shipped From Customer",
				iwFulfillment.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATESHIPPEDFROMCUSTOMER)));
		fulfillmentAttrMap.put("Date Received From Customer",
				iwFulfillment.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTDATERECEIVEDFROMCUSTOMER)));
		fulfillmentAttrMap.put(DomainConstants.SELECT_DESCRIPTION,
				iwFulfillment.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTREPLACEMENTADDITIONALEQUIPMENTINFORMATION)));
		return fulfillmentAttrMap;
	}

	private Map<String, String> mapESRReturnAttributes(Context context, Map<String, String> iwRetrun) {
		Map<String, String> returnAttrMap = new HashMap<>();
		returnAttrMap.put("Received Product Serial Number",
				iwRetrun.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTLOANERSERIALNUMBER)));
		returnAttrMap.put("Complaint Product Received Date",
				iwRetrun.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTLOANERDATERECEIVEDFROMCUSTOMER)));
		returnAttrMap.put(DomainConstants.SELECT_DESCRIPTION,
				iwRetrun.get(DomainRelationship.getAttributeSelect(ATTRIBUTE_COMPLAINTEQUIPMENTLOANERADDITIONALEQUIPMENTINFORMATION)));
		return returnAttrMap;
	}

	protected Map<String, String> mapInvestigationAttributes(Context context, Map<String, String> event) {
		Map<String, String> investigationAttrMap = new HashMap<>();
		String investigationRequired = getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONREQUIRED);
		if (investigationRequired.equalsIgnoreCase("Yes"))
			investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONREQUIRED, "Yes");
		else
			investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONREQUIRED, "No");
		investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONRATIONALE,
				getValueFromMap(context, event, ATTRIBUTE_COMPLAINTNOINVESTIGATIONRATIONALE));
		investigationAttrMap.put(ATTRIBUTE_COMPLAINTRISKANALYSISREQUIRED, getValueFromMap(context, event, ATTRIBUTE_COMPLAINTRISKANALYSISREQUIRED));
		investigationAttrMap.put(ATTRIBUTE_COMMENTS, getValueFromMap(context, event, ATTRIBUTE_COMPLAINTRISKANALYSISNUMBER));

		if (investigationRequired.equalsIgnoreCase("Yes"))
			investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATOR, getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATOR));
		else
			investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATOR, getValueFromMap(context, event, ATTRIBUTE_COMPLAINTNOINVESTIGATIONSIGNER));

		if (investigationRequired.equalsIgnoreCase("Yes"))
			investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCLOSEDDATE,
					getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONCLOSEDDATE));
		else
			investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCLOSEDDATE,
					getValueFromMap(context, event, ATTRIBUTE_COMPLAINTNOINVESTIGATIONDATE));

		investigationAttrMap.put(ATTRIBUTE_EXTERNALEVALUATOR, event.get(ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWER));
		investigationAttrMap.put(ATTRIBUTE_EXTERNALEVALUATORNOTIFIEDDATE, event.get(ATTRIBUTE_COMPLAINTINVESTIGATIONREVIEWDATE));
		investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONMETHODS, getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONMETHODS));
		investigationAttrMap.put(ATTRIBUTE_RESULTSCODE, getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONRESULTS));
		investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARY,
				getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARY));
		investigationAttrMap.put(ATTRIBUTE_CONCLUSIONCODE, getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONDETAIL));
		investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONRECOMMENDEDACTIONS,
				getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONRECOMMENDEDACTIONS));
		investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYMALFUNCTION,
				getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYMALFUNCTION));
		investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYLABELING,
				getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYLABELING));
		investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYUSEERROR,
				getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONCONCLUSIONSUMMARYUSEERROR));
		investigationAttrMap.put(ATTRIBUTE_COMPLAINTINVESTIGATIONCAPANUMBER,
				getValueFromMap(context, event, ATTRIBUTE_COMPLAINTINVESTIGATIONCAPANUMBER));
		return investigationAttrMap;
	}

	protected String getValueFromMap(Context context, Map<String, String> attrMap, final String attrbuteName) {
		Helper.ensureNotEmpty(attrbuteName, "attrbuteName");
		if (attrMap.containsKey(attrbuteName) && !Helper.isNullOrEmpty(attrMap.get(attrbuteName))) {
			return attrMap.get(attrbuteName);
		}
		else {
			return "";
		}
	}

	protected Map<String, String> mapComplaintAttributes(Context context, final Map<String, String> complaint) {
		Map<String, String> complaintAttrMap = new HashMap<>();
		complaintAttrMap.put(ATTRIBUTE_COMPLAINTORIGINATOR, complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTORIGINATOR)));

		complaintAttrMap.put(ATTRIBUTE_COMPLAINTFORMALLYDESIGNATEDUNIT, complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTFORMALLYDESIGNATEDUNIT)));

		complaintAttrMap.put(ATTRIBUTE_COMPLAINTSOURCE, complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTSOURCE)));

		complaintAttrMap.put(ATTRIBUTE_COMPLAINTEXTERNALREFERENCE, complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTEXTERNALREFERENCE)));
		complaintAttrMap.put(ATTRIBUTE_COMPLAINTDATEOFAWARENESS, complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTDATEOFAWARENESS)));
		complaintAttrMap.put(ATTRIBUTE_COMPLAINTSUPPLEMENTALAWARENESSDATE,
				complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTSUPPLEMENTALAWARENESSDATE)));
		complaintAttrMap.put(ATTRIBUTE_COMPLAINTDISTRIBUTORAWARENESSDATE,
				complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTDISTRIBUTORAWARENESSDATE)));
		complaintAttrMap.put(ATTRIBUTE_COMPLAINTINVALIDRATIONALE, complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDRATIONALE)));
		complaintAttrMap.put(ATTRIBUTE_COMPLAINTINVALIDATEDDATE, complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTINVALIDATEDDATE)));
		complaintAttrMap.put(ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT, complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT)));
		if ("Yes".equals(complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTREPORTABLECOMPLAINT)))) {
			complaintAttrMap.put(PropertyUtil.getSchemaProperty(context, "attribute_ComplaintReportableStatus"), "Reportable");
		}
		complaintAttrMap.put(DomainConstants.ATTRIBUTE_ORIGINATOR, context.getUser());

		complaintAttrMap.put(ATTRIBUTE_COMPLAINTLITIGATION, complaint.get(getAttributeSelect(ATTRIBUTE_COMPLAINTLITIGATION)));

		return complaintAttrMap;
	}

	protected boolean migrateActionTasks(Context context, DomainObject complaintObj, DomainObject newComplaintObj) throws TicketException {

		try {

			List<Map<?, ?>> openActionItem = QueryUtil.getRelatedObjects(context, complaintObj,
					PropertyUtil.getSchemaProperty(context, "relationship_ActionItem"),
					PropertyUtil.getSchemaProperty(context, "type_ComplaintActionTask"), Helper.stringList(DomainConstants.SELECT_ID),
					Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 1, "current==Assigned", new String());

			for (Map<?, ?> actionItem : openActionItem) {
				DomainObject actionItemDO = DomainObject.newInstance(context, (String) actionItem.get(DomainConstants.SELECT_ID));
				List<Map<?, ?>> connectedRoute = QueryUtil.getRelatedObjects(
						context,
						actionItemDO,
						DomainConstants.RELATIONSHIP_OBJECT_ROUTE,
						DomainConstants.TYPE_ROUTE,
						Helper.stringList(DomainConstants.SELECT_NAME, DomainConstants.SELECT_ID),
						Helper.stringList(DomainRelationship.SELECT_ID, DomainRelationship.SELECT_NAME,
								DomainRelationship.getAttributeSelect(DomainConstants.ATTRIBUTE_ROUTE_BASE_STATE),
								DomainRelationship.getAttributeSelect(DomainConstants.ATTRIBUTE_ROUTE_BASE_POLICY)), false, true, (short) 1,
						new StringBuilder().append(DomainConstants.SELECT_CURRENT).append("==\"In Process\"").toString(),
						new StringBuilder().toString());
				for (Map<?, ?> routeM : connectedRoute) {
					Route route = new Route((String) routeM.get(DomainConstants.SELECT_ID));
					Helper.runWithSuperUser(context, new Helper.Callable() {
						@Override
						public Object run(Context context, Object... args) throws TicketException {
							try {
								final String SYMBOLIC_BUSINESS_INTERFACE = "interface_ACTActionTaskInterface";
								final String BUSINESS_INTERFACE = PropertyUtil.getSchemaProperty(context, SYMBOLIC_BUSINESS_INTERFACE);
								final Route route = (Route) args[0];
								final String newComplaintId = (String) args[1];
								final String actionItemRelId = (String) args[2];
								final Vault vaultName = (Vault) args[3];
								route.AddContent(context, new String[] { newComplaintId });
								route.RemoveContent(context, new String[] { actionItemRelId });
								final BusinessInterface busInterface = new BusinessInterface(BUSINESS_INTERFACE, vaultName);
								final List<BusinessInterface> interfaceList = route.getBusinessInterfaces(context);
								boolean flag = true;
								for (BusinessInterface bInterface : interfaceList) {
									if (bInterface.getName().equals(busInterface.getName()))
										flag = false;
								}
								if (flag)
									route.addBusinessInterface(context, busInterface);
								return null;
							}
							catch (Exception e) {
								throw new TicketException(e);
							}
						}
					}, route, newComplaintObj.getObjectId(), actionItem.get(DomainRelationship.SELECT_ID), context.getVault());

				}
			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
		return true;
	}

	protected boolean migrateDiscussions(Context context, DomainObject complaintObj, DomainObject newComplaintObj) throws TicketException {

		try {
			final String ATTRIBUTE_COMPLAINTCOMMENTTYPE = PropertyUtil.getSchemaProperty(context, "attribute_ComplaintCommentType");
			MapList discussionIwMapL = complaintObj.getRelatedObjects(context, PropertyUtil.getSchemaProperty(context,
					"relationship_ComplaintComment"), PropertyUtil.getSchemaProperty(context, "type_ComplaintComment"), Helper.stringList(
					DomainConstants.SELECT_ID, DomainConstants.SELECT_ORIGINATED, DomainConstants.SELECT_DESCRIPTION,
					getAttributeSelect(ATTRIBUTE_COMPLAINTCOMMENTTYPE)), Helper.stringList(DomainRelationship.SELECT_ID), false, true, (short) 1,
					null, null, 1000);

			discussionIwMapL.addSortKey(DomainConstants.SELECT_ORIGINATED, "ascending", "date");
			discussionIwMapL.sort();
			List<Map<?, ?>> discussionIwList = discussionIwMapL;
			boolean flag = true;
			String strPublic = "Public";
			Message message = (Message) DomainObject.newInstance(context, DomainConstants.TYPE_MESSAGE);
			for (Map<?, ?> discussion : discussionIwList) {
				String strSubject = (String) discussion.get(getAttributeSelect(ATTRIBUTE_COMPLAINTCOMMENTTYPE));
				String strMessage = (String) discussion.get(DomainConstants.SELECT_DESCRIPTION);
				strSubject = FrameworkUtil.findAndReplace(strSubject, "\n", "<br />");
				strMessage = FrameworkUtil.findAndReplace(strMessage, "\n", "<br />");
				if (flag) {
					message.create(context, strSubject, strMessage, strPublic, newComplaintObj);
					flag = false;
				}
				else {
					message.create(context, strSubject, strMessage, (DomainObject) message);
				}
				migrateIWDocs(context, DomainObject.newInstance(context, (String) discussion.get(DomainConstants.SELECT_ID)), message);
			}
		}
		catch (Exception e) {
			throw new TicketException(e);
		}
		return true;
	}
}

