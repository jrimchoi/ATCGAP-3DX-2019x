import com.designrule.drToolsEnoviaObject;
import com.designrule.drv6tools.drlToolsEnoviaObject;
import com.designrule.drv6tools.activities.drGeneralConfigurationObject;
import com.designrule.drv6tools.common.drApplicationException;
import com.designrule.drv6tools.common.drContext;
import matrix.db.Context;
import matrix.util.MatrixException;
import com.matrixone.apps.domain.util.MqlUtil;

import com.designrule.drv6tools.jpointeraction.drDocumentActions;
import com.matrixone.apps.domain.util.i18nNow;
import com.matrixone.apps.framework.ui.UIUtil;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.TimeUnit;

import matrix.db.BusinessObjectWithSelect;
import matrix.db.Context;
import matrix.util.StringList;

import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MailUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.PropertyUtil;

import matrix.db.JPO;
import matrix.db.MQLCommand;

public class ${CLASSNAME} {

    public ${CLASSNAME}() {
    }

    public int mxMain(Context ctx, String[] args) throws MatrixException {
        return 0;
    }

    /*
     * This function performs the creatation of an object from a client script
     */
    public String createRemote(Context ctx, String[] args) throws Exception {
        return drToolsEnoviaObject.createRemote(ctx, args);
    }
	
    /*
     * This function performs the creatation of an object from a client script for composed objects
     */
    public String createAsComposeeRemote(Context ctx, String[] args) throws Exception {
        return drToolsEnoviaObject.createAsComposeeRemote(ctx, args);
    }
    /*
     * This function performs the remote save from client scripts
     */
    public int saveRemote(Context ctx, String[] args) throws Exception {
        return drToolsEnoviaObject.saveRemote(ctx, args);
    }

    /*
     * This function performs the remote delete history from business object
     * from client scripts
     */
    public int deleteHistoryRemote(Context ctx, String[] args) throws Exception {
        return drToolsEnoviaObject.deleteHistoryRemote(ctx, args);
    }

    /*
     * This function performs the calculate the next value in a sequence from
     * client scripts
     */
    public String calculateSequenceNumberRemote(Context ctx, String[] args) throws Exception {
        return drToolsEnoviaObject.calculateSequenceNumberRemote(ctx, args);
    }

	
    /*
     * This function performs and runs a MQL query for clients scipts
     */
    public String runMQLCommandRemote(Context ctx, String[] args) throws Exception {
        return drToolsEnoviaObject.runMQLCommandRemote(ctx, args);
    }
	
	/*
     * This function retrieves the HTML for an objects view file processing state or Doc Actions activity
     */
    public String getActivityHTML(Context ctx, String[] args) throws Exception {
    	return drToolsEnoviaObject.getActivityHTML(ctx,args);
    }
	/*
     * This function retrieves the HTML for an objects view file processing state or Doc Actions activity
     */
    public Vector getActivityHTMLForTable(Context ctx, String[] args) throws Exception {
    	return drToolsEnoviaObject.getActivityHTMLForTable(ctx,args);
    }
	/*
     * This function retrieves the HTML for an objects view file processing state or Doc Actions activity with additional settings
     */
	public String getStatusIcon(Context ctx,String args[]) throws Exception {
		return drToolsEnoviaObject.getStatusIcon(ctx,args);
	}
	 /*
     * This function retrieves the HTML for an objects view file processing state or Doc Actions activity with additional settings
     */
	public Vector getIconOndrlStatusUpdate(Context ctx,String args[]) throws Exception {
		return drToolsEnoviaObject.getIconOndrlStatusUpdate(ctx,args);
	}
	/*
	 * Below methods are added for 3dxtools licensing enhancement
	 */
	public boolean has3dxcomponentsAccess(Context context, String[] args) throws Exception {
		return drlToolsEnoviaObject.has3dxcomponetsAccess(context, args);
	}

	public boolean has3dxprocessorAccess(Context context, String[] args) throws Exception {
		return drlToolsEnoviaObject.has3dxprocessorAccess(context, args);
	}
	
	public boolean has3dxprocessorOr3dxcomponentsAccess(Context context, String[] args) throws Exception {
		return drlToolsEnoviaObject.has3dxprocessorOr3dxcomponentsAccess(context, args);
	}

	public boolean getCADObjectDeleteCmd(Context context,String args[])throws Exception
	{
		try {
			drContext drContext  = new drContext(context);
			drGeneralConfigurationObject dObject = new drGeneralConfigurationObject(drContext, "DRLTools General Configuration Object","DeleteCADSettings", "1","3dxtools");
			String sRoles = dObject.getArg2();
			StringList sRequiredRoles = FrameworkUtil.split(sRoles, ",");
			if (sRequiredRoles != null) {
				for (String sRole : sRequiredRoles) {
					if (context.isAssigned(sRole)) {
						break;
					} else {
						return false;
					}
				}
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return true;
	}
	
	public static void mqlNotice(Context context, String notice) throws Exception {
		MqlUtil.mqlCommand(context, "notice $1", notice);
	}
	
	public int updateVaultOfDRLToolsObjects(Context context, String[] args) throws Exception {
		String objectId = "";
		String vault = "";
		String sVaultNewValue = "3dxtools";		
		try {
			if (args!=null && args.length >=1){
				objectId = args[0]; 				
				vault = args[1]; 				
				if(objectId!=null && objectId!="" ){
					if(!sVaultNewValue.equals(vault)) {
						StringBuilder mql = new StringBuilder();
						mql.append("mod bus ");
						mql.append(objectId);
						mql.append(" vault ");
						mql.append(sVaultNewValue);						
						MqlUtil.mqlCommand(context, mql.toString());
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return 1;
		}
		
		return 0;
		
	}
	public Vector getProcessorControllerStatus(Context context, String[] args)throws Exception
	{
		Vector showStatus = new Vector();
        try
        {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            MapList objectList = (MapList)programMap.get("objectList");
			if(objectList.size() <= 0){
				return showStatus;
			}
			StringBuffer sb = new StringBuffer();
			SimpleDateFormat sdformat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
			SimpleDateFormat sdf = new SimpleDateFormat("MM/yyyy/dd"); 
			SimpleDateFormat sTimeFormat = new SimpleDateFormat("hh:mm:ss");
			Date Date = new Date(); 			
			String sObjectId = "";
			DomainObject dObj = null;
			String sModifiedDate = "";
			Date dModifiedDate = null;
			boolean bCheckRequired = false;
			boolean bModifiedInAmin = false;
			for(int x = objectList.size(), y = 0; y < x ; y++) 
	        {
				String sCurrentDate = sdformat.format(Date);
				String[] sCurrentDateSplit = sCurrentDate.split(" ");
				String sCurDate = sCurrentDateSplit[0];
				String sCurTime = sCurrentDateSplit[1] +" "+ sCurrentDateSplit[2];
				
				Map mMdataMap = (Map)objectList.get(y);
				sObjectId = (String)mMdataMap.get("id");
				dObj = DomainObject.newInstance(context,sObjectId);
				sModifiedDate = dObj.getInfo(context, DomainConstants.SELECT_MODIFIED);
				
				String[] sModdateAfterSplit = sModifiedDate.split(" ");
				String sModDate = sModdateAfterSplit[0];
				String sModTime = sModdateAfterSplit[1] +" "+ sModdateAfterSplit[2];
				
				Date dCurDate = sdf.parse(sCurDate);  
				Date dModDate = sdf.parse(sModDate);  
				
				if(dCurDate.compareTo(dModDate) == 0)   
				{
					bCheckRequired = true;
					//modified date
					Date dCurTime = sTimeFormat.parse(sCurTime);
					Date dModTime = sTimeFormat.parse(sModTime);
					// Calculating the difference in milliseconds
			        long differenceInMilliSeconds
			            = Math.abs(dCurTime.getTime() - dModTime.getTime());
			  
			        // Calculating the difference in Hours
			        long differenceInHours
			            = (differenceInMilliSeconds / (60 * 60 * 1000))
			              % 24;
			  
			        // Calculating the difference in Minutes
			        long differenceInMinutes
			            = (differenceInMilliSeconds / (60 * 1000)) % 60;
			  
			        // Calculating the difference in Seconds
			        long differenceInSeconds
			            = (differenceInMilliSeconds / 1000) % 60;
			  
			        if(differenceInHours == 0 && differenceInMinutes <=1 && differenceInSeconds <= 60)
			        {
			        	bModifiedInAmin = true;
			        }
				}
				else {
					bCheckRequired = false;
				}
				int min = 1;
				String sReturn ="";
				if(bCheckRequired && bModifiedInAmin)
				{
					sReturn = "<img border='0' src='../common/images/colorSwatchGreen.png'  style=\"width:20px;height:20px;\"></img>";
				}
				else {
					sReturn = "<img border='0' src='../common/images/colorSwatchGray.png'  style=\"width:20px;height:20px;\"></img>";
				}
				
				showStatus.add(sReturn);
	        }		
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		 return  showStatus;
	}
	public Vector getProcessorObjectsStatus(Context context, String[] args)throws Exception
	{
		Vector showStatus = new Vector();
		String  RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL =
				PropertyUtil.getSchemaProperty("relationship_DRLToolsProcessorSystemQueueObjectRelationship");
    try
    {
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        MapList objectList = (MapList)programMap.get("objectList");
		if(objectList.size() <= 0){
			return showStatus;
		}
		StringBuffer sb = new StringBuffer();
		SimpleDateFormat sdformat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
		SimpleDateFormat sdf = new SimpleDateFormat("MM/yyyy/dd"); 
		SimpleDateFormat sTimeFormat = new SimpleDateFormat("hh:mm:ss");
		Date Date = new Date(); 			
		String sObjectId = "";
		DomainObject dObj = null;
		String sModifiedDate = "";
		Date dModifiedDate = null;
		boolean bCheckRequired = false;
		boolean bModifiedInAmin = false;
		boolean bModifiedInFivemin = false;
		boolean bModifiedInTenmin = false;
		String sReturn = "";
		StringList selects = new StringList(1);
		selects.add(DomainConstants.SELECT_ID);
		selects.add(DomainConstants.SELECT_MODIFIED);
		StringBuffer Output =null;
		for(int x = objectList.size(), y = 0; y < x ; y++) 
        {
			String sCurrentDate = sdformat.format(Date);
			String[] sCurrentDateSplit = sCurrentDate.split(" ");
			String sCurDate = sCurrentDateSplit[0];
			String sCurTime = sCurrentDateSplit[1] +" "+ sCurrentDateSplit[2];
			String sWhere = "originated >= "+sCurDate;
			Map mMdataMap = (Map)objectList.get(y);
			sObjectId = (String)mMdataMap.get("id");
			dObj = DomainObject.newInstance(context,sObjectId);
			String sQueueId ="";
			MapList sQueueObjectList = dObj.getRelatedObjects(context, 
					                   RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL, 
					                   "*", selects, null, false, true, (short)0, 
					                   sWhere, null,0,null,null,null);	
			if(sQueueObjectList.size()>0)
			{
			for(int k = sQueueObjectList.size(), l = 0; l < k ; l++) 
	        {
			Map mObjectsMap = (Map)sQueueObjectList.get(l);
			String sModDate =(String)mObjectsMap.get(DomainConstants.SELECT_MODIFIED);
			sQueueId= (String)mObjectsMap.get(DomainConstants.SELECT_ID);
			String[] sModdateAfterSplit = sModDate.split(" ");
			String sModTime = sModdateAfterSplit[1] +" "+ sModdateAfterSplit[2];
			Output = new StringBuffer();
			// to find difference 
			Date dCurTime = sTimeFormat.parse(sCurTime);
			Date dModTime = sTimeFormat.parse(sModTime);
			// Calculating the difference in milliseconds
	        long differenceInMilliSeconds
	            = Math.abs(dCurTime.getTime() - dModTime.getTime());
	  
	        // Calculating the difference in Hours
	        long differenceInHours
	            = (differenceInMilliSeconds / (60 * 60 * 1000))
	              % 24;
	  
	        // Calculating the difference in Minutes
	        long differenceInMinutes
	            = (differenceInMilliSeconds / (60 * 1000)) % 60;
	  
	        // Calculating the difference in Seconds
	        long differenceInSeconds
	            = (differenceInMilliSeconds / 1000) % 60;
	       
		        if(differenceInHours == 0 && differenceInMinutes <=1 && differenceInSeconds <= 60)
		        {
		        	bModifiedInAmin = true;
		        	Output.append("<a href='javascript:showNonModalDialog(\""+"../common/emxTree.jsp?objectId="+sQueueId+"\",575,575)'>");
		        	Output.append("<img border='0' src='../common/images/colorSwatchGreen.png'  style=\"width:20px;height:20px;\"></img></a>");
		        	
		        }
		        else if(differenceInHours == 0 && differenceInMinutes <=5 && differenceInSeconds <= 300)
		        {
		        	bModifiedInFivemin = true;
		        	Output.append("<a href='javascript:showNonModalDialog(\""+"../common/emxTree.jsp?objectId="+sQueueId+"\",575,575)'>");
		        	Output.append("<img border='0' src='../common/images/colorSwatchYellow.png'  style=\"width:20px;height:20px;\"></img></a>");
		        	
		        }
		        else if(differenceInHours == 0 && differenceInMinutes <=10 && differenceInSeconds <= 600)
		        {
		        	bModifiedInTenmin = true;
		        	Output.append("<a href='javascript:showNonModalDialog(\""+"../common/emxTree.jsp?objectId="+sQueueId+"\",575,575)'>");
		        	Output.append("<img border='0' src='../common/images/colorSwatchRed.png'  style=\"width:20px;height:20px;\"></img></a>");
		        	
		        }
		        else {
		        	Output.append("<img border='0' src='../common/images/colorSwatchGray.png'  style=\"width:20px;height:20px;\"></img>");
		        }
			}
			}
			else {
				Output = new StringBuffer();
				Output.append("<img border='0' src='../common/images/colorSwatchGray.png'  style=\"width:20px;height:20px;\"></img>");
			}
			
			showStatus.add(Output.toString());
        }		
	}
	catch(Exception e)	{
		e.printStackTrace();
	}
	 return  showStatus;
	}
	public Vector getProcessedQueueObjectsCount(Context context,String[] args)throws Exception
	{
		String  RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL =
				PropertyUtil.getSchemaProperty("relationship_DRLToolsProcessorSystemQueueObjectRelationship");
		Vector vQueueProcessedCOunt = new Vector();
		Date Date = new Date(); 
		SimpleDateFormat sdformat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
		SimpleDateFormat sdf = new SimpleDateFormat("MM/yyyy/dd"); 
		SimpleDateFormat sTimeFormat = new SimpleDateFormat("hh:mm:ss");
		try {
			
			 String sCurrentDate = sdformat.format(Date);
			 String[] sCurrentDateSplit = sCurrentDate.split(" ");
			 String sCurDate = sCurrentDateSplit[0];
			
			 String sObjectId = "";
			 DomainObject dObj = null;
			 HashMap programMap = (HashMap) JPO.unpackArgs(args);
		     MapList objectList = (MapList)programMap.get("objectList");
		     StringList selects = new StringList(1);
		     selects.add(DomainConstants.SELECT_ID);
		     for(int x = objectList.size(), y = 0; y < x ; y++) 
		     {
		    	    
		    	    Map mMdataMap = (Map)objectList.get(y);
					sObjectId = (String)mMdataMap.get("id");
					dObj = DomainObject.newInstance(context,sObjectId);
		    	    String sWhere = "originated >= "+sCurDate+ " && attribute[drlStatus].value == Processed"; 				
					MapList sQueueObjectList = dObj.getRelatedObjects(context, 
							                   RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL, 
							                   "*", selects, null, false, true, (short)0, 
							                   sWhere, null,0,null,null,null);	
					String sCount = String.valueOf(sQueueObjectList.size());
					vQueueProcessedCOunt.add(sCount);
		     }
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return vQueueProcessedCOunt;
	}
	public Vector getFailedQueueObjectsCount(Context context,String[] args)throws Exception
	{
		String  RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL =
				PropertyUtil.getSchemaProperty("relationship_DRLToolsProcessorSystemQueueObjectRelationship");
		Vector vQueueFailedCount = new Vector();
		Date Date = new Date(); 
		SimpleDateFormat sdformat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
		SimpleDateFormat sdf = new SimpleDateFormat("MM/yyyy/dd"); 
		SimpleDateFormat sTimeFormat = new SimpleDateFormat("hh:mm:ss");
		try {
			
			 String sCurrentDate = sdformat.format(Date);
			 String[] sCurrentDateSplit = sCurrentDate.split(" ");
			 String sCurDate = sCurrentDateSplit[0];
			
			 String sObjectId = "";
			 DomainObject dObj = null;
			 HashMap programMap = (HashMap) JPO.unpackArgs(args);
		     MapList objectList = (MapList)programMap.get("objectList");
		     StringList selects = new StringList(1);
		     selects.add(DomainConstants.SELECT_ID);
		     for(int x = objectList.size(), y = 0; y < x ; y++) 
		     {
		    	    
		    	    Map mMdataMap = (Map)objectList.get(y);
					sObjectId = (String)mMdataMap.get("id");
					dObj = DomainObject.newInstance(context,sObjectId);
		    	    String sWhere = "originated >= "+sCurDate+ " && attribute[drlStatus].value == 'Processing Failed'"; 				
					MapList sQueueObjectList = dObj.getRelatedObjects(context, 
							                   RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL, 
							                   "*", selects, null, false, true, (short)0, 
							                   sWhere, null,0,null,null,null);	
					String sCount = String.valueOf(sQueueObjectList.size());
					vQueueFailedCount.add(sCount);
		     }
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return vQueueFailedCount;
	}
	public MapList getWaitingQueObjectsModToday(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedToday(context,"Waiting",0);				
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;	
	}
	public MapList getWaitingQueObjectsModInSevenDays(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedInSevendays(context,"Waiting",0);
				
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;	
	}
	public MapList getWaitingQueObjectsModInThirtyDays(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedInThirtydays(context,"Waiting",0);			
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;	
	}
	public MapList getRecentlyFailedQueObjectsModToday(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedToday(context,"Processing Failed",0);
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;		
	}
	public MapList getRecentlyFailedQueObjectsModInSevenDays(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedInSevendays(context,"Processing Failed",0);	
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;	
	
	}
	public MapList getRecentlyFailedQueObjectsModInThirtyDays(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedInThirtydays(context,"Processing Failed",0);	
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;	
	}
	public MapList getRecentlyProcessedQueObjectsModToday(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedToday(context,"Processed",0);				
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;	
	
	}
	public MapList getRecentlyProcessedQueObjectsModInSevenDays(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedInSevendays(context,"Processed",0);				
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;	
	}
	public MapList getRecentlyProcessedQueObjectsModInThirtyDays(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedInThirtydays(context,"Processed",0);
			
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;		
	}
	public MapList getAllProcessedQueObjects(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsAll(context,"Processed",0);		
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;		
	}
	public MapList getAllRecentlyProcessedQueObjects(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsAll(context,"Processed",0);		
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;		
	}
	public MapList getAllRecentlyFailedQueObjects(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsAll(context,"Processing Failed",0);		
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;		
	}
	public MapList getAllWaitingQueObjects(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsAll(context,"Waiting",0);		
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;		
	}
	public MapList getQueObjectsAll(Context context,String sdrlStatus,int limit)throws Exception
	{
		String TYPE_DRLTOOLS_PROCESSOR_SYSTEM_QUEUE_OBJECT = PropertyUtil.getSchemaProperty("type_DRLToolsProcessorSystemQueueObject");
		String sWhere = "attribute[drlStatus].value == '"+sdrlStatus+"'"; 
		try {
			StringList strListBusSelects = new StringList();
			strListBusSelects.add(DomainObject.SELECT_ID);
		    MapList mQueueObjectList = DomainObject.findObjects(
				context,
				TYPE_DRLTOOLS_PROCESSOR_SYSTEM_QUEUE_OBJECT,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				sWhere,               // where expression
				DomainConstants.EMPTY_STRING,
				true,
				strListBusSelects, // object selects
				(short) limit);
		return mQueueObjectList;
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}
	public MapList getQueObjectsModifiedToday(Context context,String sdrlStatus,int limit)throws Exception
	{
		String TYPE_DRLTOOLS_PROCESSOR_SYSTEM_QUEUE_OBJECT = PropertyUtil.getSchemaProperty("type_DRLToolsProcessorSystemQueueObject");
		Date Date = new Date(); 
		SimpleDateFormat sdformat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
		String sCurrentDate = sdformat.format(Date);
		String[] sCurrentDateSplit = sCurrentDate.split(" ");
		String sCurDate = sCurrentDateSplit[0];
		String sWhere = "modified >= "+sCurDate+ " && attribute[drlStatus].value == '"+sdrlStatus+"'"; 
		try {
			StringList strListBusSelects = new StringList();
			strListBusSelects.add(DomainObject.SELECT_ID);
		    MapList mQueueObjectList = DomainObject.findObjects(
				context,
				TYPE_DRLTOOLS_PROCESSOR_SYSTEM_QUEUE_OBJECT,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				sWhere,               // where expression
				DomainConstants.EMPTY_STRING,
				true,
				strListBusSelects, // object selects
				(short) limit);
		return mQueueObjectList;
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}
	public MapList getQueObjectsModifiedInSevendays(Context context,String sdrlStatus,int limit)throws Exception
	{
		String TYPE_DRLTOOLS_PROCESSOR_SYSTEM_QUEUE_OBJECT = PropertyUtil.getSchemaProperty("type_DRLToolsProcessorSystemQueueObject");
		
		SimpleDateFormat sdformat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
		Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -7);
        Date Date = cal.getTime();
        String sModifiedDate = sdformat.format(Date);
		String[] sModifiedDateSplit = sModifiedDate.split(" ");
		String sModDate = sModifiedDateSplit[0];
		String sWhere = "modified >= "+sModDate+ " && attribute[drlStatus].value  == '"+sdrlStatus+"'"; 
		try {
			StringList strListBusSelects = new StringList();
			strListBusSelects.add(DomainObject.SELECT_ID);
		    MapList mQueueObjectList = DomainObject.findObjects(
				context,
				TYPE_DRLTOOLS_PROCESSOR_SYSTEM_QUEUE_OBJECT,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				sWhere,               // where expression
				DomainConstants.EMPTY_STRING,
				true,
				strListBusSelects, // object selects
				(short) limit);
		return mQueueObjectList;
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}
	public MapList getQueObjectsModifiedInThirtydays(Context context,String sdrlStatus,int limit)throws Exception
	{
		String TYPE_DRLTOOLS_PROCESSOR_SYSTEM_QUEUE_OBJECT = PropertyUtil.getSchemaProperty("type_DRLToolsProcessorSystemQueueObject");
		
		SimpleDateFormat sdformat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
		Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -30);
        Date Date = cal.getTime();
        String sModifiedDate = sdformat.format(Date);
		String[] sModifiedDateSplit = sModifiedDate.split(" ");
		String sModDate = sModifiedDateSplit[0];
		String sWhere = "modified >= "+sModDate+ " && attribute[drlStatus].value  == '"+sdrlStatus+"'"; 
		try {
			StringList strListBusSelects = new StringList();
			strListBusSelects.add(DomainObject.SELECT_ID);
		    MapList mQueueObjectList = DomainObject.findObjects(
				context,
				TYPE_DRLTOOLS_PROCESSOR_SYSTEM_QUEUE_OBJECT,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				DomainConstants.QUERY_WILDCARD,
				sWhere,               // where expression
				DomainConstants.EMPTY_STRING,
				true,
				strListBusSelects, // object selects
				(short) limit);
		return mQueueObjectList;
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}
	public MapList getAllProcessedQueObjectsModToday(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedToday(context,"Processed",5000);
			
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;	
	}
	public MapList getAllProcessedQueObjectsModInSevenDays(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedInSevendays(context,"Processed",5000);				
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;	
	}
	public MapList getAllProcessedQueObjectsModInThirtyDays(Context context,String[] args)throws Exception
	{
		MapList mReturnList = new MapList();
		try {
			mReturnList = getQueObjectsModifiedInThirtydays(context,"Processed",100);		
		}
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mReturnList;		
	}
	public MapList getProcessorFailedQueObjectsModToday(Context context ,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList =getRelatedQueObjectsModInSevendays (context,ObjectId,"Processing Failed",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorFailedQueObjectsInSevenDays(Context context ,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList =getRelatedQueObjectsModInSevendays (context,ObjectId,"Processing Failed",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorFailedQueObjectsInThirtyDays(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsModInThirtydays(context,ObjectId,"Processing Failed",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorWithErrorQueObjectsModToday(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsModToday(context,ObjectId,"Processed With Errors",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorWithErrorQueObjectsInSevenDays(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsModInSevendays(context,ObjectId,"Processed With Errors",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorWithErrorQueObjectsInThirtyDays(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsModInThirtydays(context,ObjectId,"Processed With Errors",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorProcessedQueObjectsModToday(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsModToday(context,ObjectId,"Processed",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorProcessedQueObjectsInSevenDays(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsModInSevendays(context,ObjectId,"Processed",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorProcessedQueObjectsInThirtyDays(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsModInThirtydays(context,ObjectId,"Processed",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorProcessingQueObjectsModToday(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsModToday(context,ObjectId,"Processing",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	
	public MapList getProcessorProcessingQueObjectsInSevenDays(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsModInSevendays(context,ObjectId,"Processing",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	
	public MapList getProcessorProcessingQueObjectsInThirtyDays(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsModInThirtydays(context,ObjectId,"Processing",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorProcessedQueObjectsAll(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsAll(context,ObjectId,"Processed",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorWithErrorQueObjectsAll(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsAll(context,ObjectId,"Processed With Errors",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorFailedQueObjectsAll(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsAll(context,ObjectId,"Processing Failed",5000);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getProcessorProcessingQueObjectsAll(Context context,String args[])throws Exception
	{
		MapList mReturnList = new MapList();
		  try {
			    Map programMap = (HashMap) JPO.unpackArgs(args);
			    String ObjectId = (String)programMap.get("objectId");
			    mReturnList = getRelatedQueObjectsAll(context,ObjectId,"Processing",100);
				return mReturnList;	
		  }
		  catch (Exception e) {
			  e.printStackTrace();
				throw e;
		  }
	}
	public MapList getRelatedQueObjectsAll(Context context,String sBaseObjecId,String sStatus,int limit)throws Exception
	{
		String  RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL =
				PropertyUtil.getSchemaProperty("relationship_DRLToolsProcessorSystemQueueObjectRelationship");
		
		try {
			 StringList selects = new StringList(1);
		     selects.add(DomainConstants.SELECT_ID);
			 DomainObject dObj = null;
			 dObj = DomainObject.newInstance(context,sBaseObjecId);
    	     String sWhere = "attribute[drlStatus].value  == '"+sStatus+"'"; 			
			 MapList sQueueObjectList = dObj.getRelatedObjects(context, 
						                   RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL, 
						                   "*", selects, null, false, true, (short)limit, 
						                   sWhere, null,0,null,null,null);	
			 return sQueueObjectList;
		   	
	  }
	  catch (Exception e) {
		  e.printStackTrace();
			throw e;
		}
		
	}
	public MapList getRelatedQueObjectsModToday(Context context,String sBaseObjecId,String sStatus,int limit)throws Exception
	{
		String  RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL =
				PropertyUtil.getSchemaProperty("relationship_DRLToolsProcessorSystemQueueObjectRelationship");
		Date Date = new Date(); 
		SimpleDateFormat sdformat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
		try {
			 String sCurrentDate = sdformat.format(Date);
			 String[] sCurrentDateSplit = sCurrentDate.split(" ");
			 String sCurDate = sCurrentDateSplit[0];
			 StringList selects = new StringList(1);
		     selects.add(DomainConstants.SELECT_ID);
			 DomainObject dObj = null;
			 dObj = DomainObject.newInstance(context,sBaseObjecId);
    	     String sWhere = "modified >= "+sCurDate+ " && attribute[drlStatus].value  == '"+sStatus+"'"; 			
			 MapList sQueueObjectList = dObj.getRelatedObjects(context, 
						                   RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL, 
						                   "*", selects, null, false, true, (short)limit, 
						                   sWhere, null,0,null,null,null);	
			 return sQueueObjectList;
		   	
	  }
	  catch (Exception e) {
		  e.printStackTrace();
			throw e;
		}
		
	}
	public MapList getRelatedQueObjectsModInSevendays(Context context,String sBaseObjecId,String sStatus,int limit)throws Exception
	{
		String  RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL =
				PropertyUtil.getSchemaProperty("relationship_DRLToolsProcessorSystemQueueObjectRelationship");
		SimpleDateFormat sdformat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
		Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -7);
        Date Date = cal.getTime();
        String sModifiedDate = sdformat.format(Date);
		String[] sModifiedDateSplit = sModifiedDate.split(" ");
		String sModDate = sModifiedDateSplit[0];
		String sWhere = "modified >= "+sModDate+ " && attribute[drlStatus].value  == '"+sStatus+"'"; 
		try {
			 String sCurrentDate = sdformat.format(Date);
			 String[] sCurrentDateSplit = sCurrentDate.split(" ");
			 String sCurDate = sCurrentDateSplit[0];
			 StringList selects = new StringList(1);
		     selects.add(DomainConstants.SELECT_ID);
			 DomainObject dObj = null;
			 dObj = DomainObject.newInstance(context,sBaseObjecId);			
			 MapList sQueueObjectList = dObj.getRelatedObjects(context, 
						                   RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL, 
						                   "*", selects, null, false, true, (short)limit, 
						                   sWhere, null,0,null,null,null);	
			 return sQueueObjectList;
		   	
	  }
	  catch (Exception e) {
		  e.printStackTrace();
			throw e;
		}
		
	}
	public MapList getRelatedQueObjectsModInThirtydays(Context context,String sBaseObjecId,String sStatus,int limit)throws Exception
	{
		String  RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL =
				PropertyUtil.getSchemaProperty("relationship_DRLToolsProcessorSystemQueueObjectRelationship");
		SimpleDateFormat sdformat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
		Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -30);
        Date Date = cal.getTime();
        String sModifiedDate = sdformat.format(Date);
		String[] sModifiedDateSplit = sModifiedDate.split(" ");
		String sModDate = sModifiedDateSplit[0];
		String sWhere = "modified >= "+sModDate+ " && attribute[drlStatus].value  == '"+sStatus+"'"; 
		try {
			 String sCurrentDate = sdformat.format(Date);
			 String[] sCurrentDateSplit = sCurrentDate.split(" ");
			 String sCurDate = sCurrentDateSplit[0];
			 StringList selects = new StringList(1);
		     selects.add(DomainConstants.SELECT_ID);
			 DomainObject dObj = null;
			 dObj = DomainObject.newInstance(context,sBaseObjecId);			
			 MapList sQueueObjectList = dObj.getRelatedObjects(context, 
						                   RELATIONSHIP_DRLPROCESSROR_SYSTEM_QUEUE_OBJECT_REL, 
						                   "*", selects, null, false, true, (short)limit, 
						                   sWhere, null,0,null,null,null);	
			 return sQueueObjectList;
		   	
	  }
	  catch (Exception e) {
		  e.printStackTrace();
			throw e;
		}
		
	}
	public boolean requeueObjects(Context context,String[] args)throws Exception{
		try {
			 Map programMap = (HashMap) JPO.unpackArgs(args);
			 String sObjectId = (String)programMap.get("objectId");
			 if(UIUtil.isNotNullAndNotEmpty(sObjectId))
			 {
				 DomainObject dQueueObj = DomainObject.newInstance(context,sObjectId);
				 Map attributeMap = new HashMap();
				 attributeMap.put("drlStatusComments", "");
				 attributeMap.put("drlStatus", "Waiting");
				 attributeMap.put("drlProcessDetails","");
				 dQueueObj.setAttributeValues(context, attributeMap);
			 }
	
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return true;
		}
		
}
