/*
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */

import java.util.Map;

import matrix.db.Context;

import com.dassault_systemes.enovia.lsa.qic.QICException;

public class ${CLASSNAME} {

	public ${CLASSNAME}(Context context, String[] args) {
		super();
	}

	@com.matrixone.apps.framework.ui.CreateProcessCallable
	public Map<?, ?> createAndConnectCAPARequest(Context context, String[] args) throws QICException {
		return new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPAIntegration}(context, args).createAndConnectCAPARequest(context, args);
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionAddDataSourceToExistingCAPA(Context context, String[] args) throws QICException {
		return new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPAIntegration}(context, args).actionAddDataSourceToExistingCAPA(context,
				args);
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionAssociateCAPARequestsToCAPA(Context context, String[] args) throws QICException {
		return new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.MyCAPARequestWorkQueueBase}(context, args)
				.actionAssociateCAPARequestsToCAPA(context, args);
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionAddExistingCAPARequestsToCAPA(Context context, String[] args) throws QICException {
		return new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPABase}(context, args).actionAddExistingCAPARequestsToCAPA(context, args);
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionRemoveCAPAAssociatedCAPARequests(Context context, String[] args) throws QICException {
		return new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPABase}(context, args).actionRemoveCAPAAssociatedCAPARequests(context,
				args);
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionAddExistingDataSourcesToCAPARequest(Context context, String[] args) throws QICException {
		return new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPARequest}(context, args).actionAddExistingDataSourcesToCAPARequest(
				context, args);
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionRemoveCAPARequestDataSources(Context context, String[] args) throws QICException {
		return new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPARequest}(context, args)
				.actionRemoveCAPARequestDataSources(context, args);
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionAddExistingDataSourcesToCAPA(Context context, String[] args) throws QICException {
		return new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPABase}(context, args).actionAddExistingDataSourcesToCAPA(context, args);
	}

	@com.dassault_systemes.enovia.lsa.LSACommonExecuteCallable
	public String actionRemoveCAPAAssociatedDataSources(Context context, String[] args) throws QICException {
		return new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPABase}(context, args)
				.actionRemoveCAPAAssociatedDataSources(context, args);
	}

	@com.matrixone.apps.framework.ui.PostProcessCallable
	public void updateFormtype_DefectCauseFieldPrimary(Context context, String[] args) throws QICException {
		new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPARootCauseAnalysisBase}(context, args).updateFormtype_DefectCauseFieldPrimary(
				context, args);
	}

	@com.matrixone.apps.framework.ui.CreateProcessCallable
	public Map<?, ?> actionCreateAndConnectChildCause(Context context, String[] args) throws QICException {
		return new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPARootCauseAnalysisBase}(context, args).actionCreateAndConnectChildCause(
				context, args);
	}
	
	public void modifyTransferNotesAttributeOnChangeOwnerInApprovedState(Context context,String[] args) throws QICException
	{
	  new ${CLASS:com.dassault_systemes.enovia.lsa.qic.services.ui.CAPARequestBase}(context,args).modifyTransferNotesAttributeOnChangeOwnerInApprovedState(context, args);
	}
}

