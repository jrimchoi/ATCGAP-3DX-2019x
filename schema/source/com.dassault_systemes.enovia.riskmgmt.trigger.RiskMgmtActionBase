
import matrix.db.Context;

import com.dassault_systemes.enovia.riskmgmt.ManagedRisk;
import com.dassault_systemes.enovia.riskmgmt.RiskMgmtException;
import com.dassault_systemes.enovia.riskmgmt.RiskMgmtSymNames;
import com.dassault_systemes.enovia.riskmgmt.RiskMgmtUtil;
import com.matrixone.apps.domain.DomainObject;

public class ${CLASSNAME} implements RiskMgmtSymNames {

	/**
	 * Constructs a new JPO object.
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            This argument is ignored, only provided for allowing it to be
	 *            called from UI components.
	 * @throws Exception
	 *             if the operation fails
	 */
	public ${CLASSNAME}(Context context, String[] args) throws RiskMgmtException {
		super();
	}	

	public void promoteRiskToEvaluated(Context context, String[] args) throws RiskMgmtException {
		final String STATE_IDENTIFIED = RiskMgmtUtil.getActualStateName(context, SYM_POLICY_MANAGED_RISK.toString(), SYMBOLIC_STATE_IDENTIFIED);
		try {
		String id = args[0];
		String currentState 	= args[1];
			if (!RiskMgmtUtil.isNullOrEmpty(id) && !RiskMgmtUtil.isNullOrEmpty(currentState)) {
				if (!(RiskMgmtUtil.getTypeKindOf(context, DomainObject.newInstance(context, id), SYMBOLIC_TYPE_HAZARD)).containsValue(Boolean.TRUE)) {
		ManagedRisk risk 			= new ManagedRisk(id);		
		String riskReductionNeeded 	= risk.getAttributeValue(context, SYM_ATTR_RISK_REDUCTION_NEEDED.get(context));
					if (currentState.equals(STATE_IDENTIFIED) && !RANGE_UNDEFINED.equalsIgnoreCase(riskReductionNeeded)) {
			risk.promote(context);			
		}
	}
}
		}
		catch (Exception e) {
			throw new RiskMgmtException();
		}
	}
}

