/*
 * Copyright (c) 2013-2018 Dassault Systemes. All Rights Reserved This program
 * contains proprietary and trade secret information of Dassault Systemes.
 * Copyright notice is precautionary only and does not evidence any actual or
 * intended publication of such program.
 */

import java.util.Comparator;
import java.util.HashMap;

/**
 * 
 */
@Deprecated
public class ${CLASSNAME} implements Comparator {
	/*
	 * TODO: This class appears to only serve the purpose of being a comparator
	 * for sorting the templates that are returned by its subclass,
	 * ${CLASS:iwActionTaskTemplate}. Most of the subclass' methods can be pulled
	 * into this class.
	 * 
	 * In addition, sorting should probably be done using Matrix's paradigm of
	 * putting the sort into spinner files. We could use a custom sort method if
	 * necessary.
	 */

	/** No sorting constant. */
	public static final int	NONE				= -1;

	/** Sort by rank constant. */
	public static final int	RANK				= 0;

	/** Sort by template name constant. */
	public static final int	TEMPLATE_NAME		= 1;

	/** The type of primary sort. */
	private int				primarySortKey		= RANK;

	/** The type of secondary sort. */
	private int				secondarySortKey	= TEMPLATE_NAME;

	/**
	 * Creates a new instance of the {@code iwActionItemTemplate} object.
	 */
	public ${CLASSNAME}() {
		super();
	}

	/**
	 * Creates a new instance of the {@code iwActionItemTemplate} object using
	 * the given {@code primarySortKey} and {@code secondarySortKey}.
	 * 
	 * @param primarySortKey
	 *            The type of primary sort.
	 * @param secondarySortKey
	 *            The type of secondary sort.
	 */
	public ${CLASSNAME}(int primarySortKey, int secondarySortKey) {
		setPrimarySortKey(primarySortKey);
		setSecondarySortKey(secondarySortKey);
	}

	/**
	 * Compares two objects for order. This method returns a negative integer if
	 * the first object is less than the second, 0 if they are equal, or a
	 * positive integer is the first object is greater than the second.
	 * 
	 * @param o1
	 *            First object to be compared
	 * @param o2
	 *            Second object to be compared.
	 * @return A negative integer if the first is less than the second, 0 if
	 *         they are equal, or a positive integer if the first is greater
	 *         than the second.
	 */
	@Override
	public int compare(Object o1, Object o2) {
		int result = 0;

		// Cast generic objects into their known types to do the comparison
		HashMap firstImplementationTaskTemplate = (HashMap) o1;
		HashMap secondImplementationTaskTemplate = (HashMap) o2;

		// Compare the two objects' primary keys
		Comparable[] comparables = this.getComparables(firstImplementationTaskTemplate, secondImplementationTaskTemplate, this.getPrimarySortKey());
		result = comparables[0].compareTo(comparables[1]);

		// If the two objects have equivalent primary keys, compare by the
		// secondary
		if (result == 0 && this.getSecondarySortKey() != NONE) {
			// TODO: Why don't we use the pre-casted objects?
			comparables = this.getComparables((HashMap) o1, (HashMap) o2, this.getSecondarySortKey());
			result = comparables[0].compareTo(comparables[1]);
		}

		return result;
	}

	/**
	 * Retrieves the comparable values from the given templates (e.g., rank or
	 * name attribute). These values may then be used in the {@code compare}
	 * method to determine object order.
	 * 
	 * For example, if the {@code sortKey} is 'rank', this method will retrieve
	 * the 'rank' attribute from each of the two templates. These two values are
	 * returned to the {@code compare} method where they are compared for order.
	 * 
	 * @param firstTemplate
	 *            The first action item template being compared.
	 * @param secondTemplate
	 *            The second action item template being compared.
	 * @param sortKey
	 *            The name of the attribute to retrieve from each of the
	 *            templates for comparison (the Comparable).
	 * @return The values from the given templates as determined by the given
	 *         {@code sortKey}.
	 */
	private Comparable[] getComparables(HashMap firstImplementationTaskTemplate, HashMap secondImplementationTaskTemplate, int sortKey) {
		Comparable[] result = new Comparable[2];
		Comparable firstComparable = null;
		Comparable secondComparable = null;

		// Determine which attribute values to return
		switch (sortKey) {
		// TODO: Shouldn't these case statements use the appropriate constants?
		case 0:
			// Return the templates' ranks
			firstComparable = new Integer((String) firstImplementationTaskTemplate.get(${CLASS:iwActionItemStaticVariables}.SELECT_ATTR_RANK));
			secondComparable = new Integer((String) secondImplementationTaskTemplate.get(${CLASS:iwActionItemStaticVariables}.SELECT_ATTR_RANK));
			break;
		case 1:
			// Return the templates' names
			firstComparable = (String) firstImplementationTaskTemplate.get(${CLASS:iwActionItemStaticVariables}.SELECT_ATTR_ACTION_ITEM_TEMPLATE_LABEL);
			secondComparable = (String) secondImplementationTaskTemplate
					.get(${CLASS:iwActionItemStaticVariables}.SELECT_ATTR_ACTION_ITEM_TEMPLATE_LABEL);
			break;
		default:
			break;
		}

		result[0] = firstComparable;
		result[1] = secondComparable;

		return result;
	}

	/**
	 * Returns the primary sort key.
	 * 
	 * @return The primary sort key.
	 */
	private int getPrimarySortKey() {
		// TODO: Any reason this getter is private and the other is public?
		return this.primarySortKey;
	}

	/**
	 * Sets the primary sort key to the given {@code sortKey}.
	 * 
	 * @param sortKey
	 *            The value to set.
	 */
	private void setPrimarySortKey(int sortKey) {
		this.primarySortKey = sortKey;
	}

	/**
	 * Returns the secondary sort key.
	 * 
	 * @return The secondary sort key.
	 */
	public int getSecondarySortKey() {
		return this.secondarySortKey;
	}

	/**
	 * Sets the secondary sort key to the given {@code secondarySortKey}.
	 * 
	 * @param secondarySortKey
	 *            The value to set.
	 */
	public void setSecondarySortKey(int secondarySortKey) {
		this.secondarySortKey = secondarySortKey;
	}
}

