import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.framework.ui.UIUtil;
import com.sap.conn.jco.ext.DestinationDataProvider;

import de.cenit.ev6sap.adaptor.DSXUtil;
import de.cenit.ev6sap.adaptor.EV6SAP;
import de.cenit.ev6utils.crypt.Crypt;
//import gap.cenit.SAP.Validate.gapDestinationDataProvider;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.StringList;

public class ${CLASSNAME} {
	
	public static final String CHARSET_UTF16 = "UTF-16";
	public static final String CONST_AUTH_METHOD = "AUTH_METHOD";
	public static final String CONST_BAPI_USER_DATA_CHECK = "SUSR_CHECK_LOGON_DATA";
	public static final String CONST_AUTH_METHOD_PASSWORD = "Password";
	public static final String SECTION_GENERAL = "General";
	public static final String SAP_DESTINATION = "Destination";
	public static final String SAP_DESTINATION_ASHOST = "Ashost";
	public static final String SAP_DESTINATION_USER = "User";
	public static final String SAP_DESTINATION_PASSWORD = "Password";
	public static final String SAP_DESTINATION_CLIENT = "Client";
	public static final String SAP_DESTINATION_SYSNR = "Sysnr";
	public static final String SAP_DESTINATION_LANG = "Language";
	public static final String SAP_ERROR_MSG = "ERROR_MSG";
	public static final String SAP_CHK_SAP_CREDENTIALS = "Check SAP credentials";
	public static final String FILE_EV6SAP_GLOBAL = "EV6SAP_Global.ini";
	/**
	 * this method validates user credentials 
	 * @param context
	 * @param args
	 * @return
	 * @throws Exception
	 */
	public static Map validateUserCredentials(Context context, String args[]) throws Exception
	{
		HashMap mpRes = new HashMap();
		/*Map programMap = (HashMap)JPO.unpackArgs(args);
		String strObjectId = (String) programMap.get("objectId");
		EV6SAP ev6sap = new EV6SAP();
		boolean bRes = true;
		boolean bResgistered = false;
		try {
	    	ev6sap.addConfigurationfile(FILE_EV6SAP_GLOBAL, CHARSET_UTF16);
//System.out.println("ev6sap.HomeDir : "+ev6sap.HomeDir);
	    	InputStream sequencedIS = DSXUtil.getSequencedInputStream(CHARSET_UTF16, ev6sap, new String[] { FILE_EV6SAP_GLOBAL });
		    Map mpConfig = parseEV6SAPConfig(new InputStreamReader(sequencedIS, CHARSET_UTF16));
		    // load SAP connection properties		    
		    Properties connectProperties = getConncetionProperties(mpConfig);
		 // read logged in user SAP credentials
	        String strSAPUser = context.getUser();
			if (strSAPUser.equals("User Agent"))
			{
				return mpRes;
			}
	        DomainObject person = PersonUtil.getPersonObject(context);
	        String strUserSAPName = person.getAttributeValue(context, "cenitSAPUser");
			
	        String strUserSAPPwd = person.getAttributeValue(context, "cenitSAPPassword");
	        System.out.println("Validating SAP credentials for user : "+strUserSAPName);
	        if (UIUtil.isNotNullAndNotEmpty(strUserSAPPwd))
	         strUserSAPPwd = new Crypt().PWDecrypt(strUserSAPPwd);
	        
	       // System.out.println("strUserSAPName : "+strUserSAPName+" decrypted strUserSAPPwd >> :"+strUserSAPPwd);
		    // execute bapi
		    gapDestinationDataProvider.gapSAPDestinationDataProvider gapSAPDest = new gapDestinationDataProvider.gapSAPDestinationDataProvider(); 
			//com.sap.conn.jco.ext.Environment.unregisterDestinationDataProvider(gapSAPDest);
		    
		    //catch IllegalStateException if an instance is already registered
	        try
	        {
	        	com.sap.conn.jco.ext.Environment.registerDestinationDataProvider(gapSAPDest);
	        	bResgistered = true;
	        	String destName = CONST_BAPI_USER_DATA_CHECK;

		        //set properties for the destination and ...
		        gapSAPDest.changeProperties(destName, connectProperties);
		        
		        gapDestinationDataProvider gapDestProvider = new gapDestinationDataProvider();
		        // execute bapi		        
		        bRes =  gapDestProvider.validateUserCredentials(destName, strUserSAPName, strUserSAPPwd);
	        }
	        catch(Exception providerAlreadyRegisteredException)
	        {
				//if (bResgistered)
				//com.sap.conn.jco.ext.Environment.unregisterDestinationDataProvider(gapSAPDest);
			System.out.println("here????????");
				bRes = false;
	        	mpRes.put(SAP_ERROR_MSG, providerAlreadyRegisteredException.getMessage());
	        	providerAlreadyRegisteredException.printStackTrace();
	            //somebody else registered its implementation, 
	            //stop the execution
	           // throw new Error(providerAlreadyRegisteredException);
	        }	
	        finally
	        {
	        	if (bResgistered)
				{
					bResgistered=false;
					com.sap.conn.jco.ext.Environment.unregisterDestinationDataProvider(gapSAPDest);
				}
	        }
	        
		} catch (Exception e) {
			mpRes.put(SAP_ERROR_MSG, e.getMessage());
				// TODO Auto-generated catch block
				e.printStackTrace();
		}
		/*finally
		{
	        	if (bResgistered)
	        	com.sap.conn.jco.ext.Environment.unregisterDestinationDataProvider(gapSAPDest);
	    }
		// if bres false and no message updated
		if (!bRes)
		{			
			String strErr = (String) mpRes.get(SAP_ERROR_MSG);
			System.out.println("strErr : "+strErr);
			if (UIUtil.isNullOrEmpty(strErr))
			mpRes.put(SAP_ERROR_MSG, SAP_CHK_SAP_CREDENTIALS);
		}System.out.println("mpRes >> "+mpRes);*/
		return mpRes;
	}
	/**
	 * this method reads config and builds SAP connection map
	 * @author ENGMASA
	 * @param mpConfig
	 * @return
	 * @throws Exception
	 */
	public static Properties getConncetionProperties(Map mpConfig) throws Exception
	{
		// read sap destination		    
	    String strSAPDestination = getStringFromConfig(SECTION_GENERAL, SAP_DESTINATION, mpConfig);
	    String strUser = getStringFromConfig(strSAPDestination, SAP_DESTINATION_USER, mpConfig);
			Properties connectProperties = new Properties();
		    connectProperties.setProperty(DestinationDataProvider.JCO_ASHOST,  getStringFromConfig(strSAPDestination, SAP_DESTINATION_ASHOST, mpConfig));
		    connectProperties.setProperty(DestinationDataProvider.JCO_SYSNR,   getStringFromConfig(strSAPDestination, SAP_DESTINATION_SYSNR, mpConfig));
		    connectProperties.setProperty(DestinationDataProvider.JCO_CLIENT,  getStringFromConfig(strSAPDestination, SAP_DESTINATION_CLIENT, mpConfig));
//		    connectProperties.setProperty(DestinationDataProvider.JCO_GROUP,   getStringFromConfig(strSAPDestination, SAP_DESTINATION_GR, mpConfig));
		    connectProperties.setProperty(DestinationDataProvider.JCO_USER,    getStringFromConfig(strSAPDestination, SAP_DESTINATION_USER, mpConfig));
		    connectProperties.setProperty(DestinationDataProvider.JCO_PASSWD,  getStringFromConfig(strSAPDestination, SAP_DESTINATION_PASSWORD, mpConfig));
		    connectProperties.setProperty(DestinationDataProvider.JCO_LANG,    getStringFromConfig(strSAPDestination, SAP_DESTINATION_LANG, mpConfig));
		    return connectProperties;
	}
	/**
	 * this method reads string value from map for section
	 * @author ENGMASA
	 * @param strSection
	 * @param strKey
	 * @param mpConfig
	 * @return
	 * @throws Exception
	 */
	public static String getStringFromConfig(String strSection, String strKey, Map mpConfig) throws Exception
	{
		String strVal = null;
		if (mpConfig.containsKey(strSection))
		{
			Map mpSectionMap = (Map) mpConfig.get(strSection);
			if (mpSectionMap.containsKey(strKey))
				strVal = (String) mpSectionMap.get(strKey);
		}
		return strVal;
	}
	/**
	 * this method parses an reads EV6 config for SAP connection
	 * @author ENGMASA
	 * @param reader
	 * @return
	 * @throws IOException
	 */
	public static Map<String, Properties> parseEV6SAPConfig(InputStreamReader reader) throws IOException {
	    Map<String, Properties> result = new HashMap();
	    new Properties() {

	        private Properties section;

	        @Override
	        public Object put(Object key, Object value) {
	            String header = (((String) key) + " " + value).trim();
	            if (header.startsWith("[") && header.endsWith("]"))
	                return result.put(header.substring(1, header.length() - 1), 
	                        section = new Properties());
	            else
	            {
					//System.out.println("section ; "+section);
					//System.out.println("key ; "+key);
					//System.out.println("value ; "+value);
	            	if (UIUtil.isNullOrEmpty(value.toString()))
	            		value = DomainObject.EMPTY_STRING;
	            	
	                return section.put(key, value);
	            }
	        }

	    }.load(reader);
	    return result;
	}
	public static void mxMain(Context context, String[] args) {
		try
		{
			System.out.println("connn new");
			HashMap mpRes = new HashMap();	
			HashMap programMap = new HashMap();	
			String strObjectId = "11584.8298.9760.35739";
			programMap.put("objectId", strObjectId);
			Map mp = validateUserCredentials(context, JPO.packArgs(programMap));
			/*EV6SAP ev6sap = new EV6SAP();
		boolean bRes = true;
		boolean bResgistered = false;
		try {
	    	ev6sap.addConfigurationfile(FILE_EV6SAP_GLOBAL, CHARSET_UTF16);
//System.out.println("ev6sap.HomeDir : "+ev6sap.HomeDir);
	    	InputStream sequencedIS = DSXUtil.getSequencedInputStream(CHARSET_UTF16, ev6sap, new String[] { FILE_EV6SAP_GLOBAL });
		    Map mpConfig = parseEV6SAPConfig(new InputStreamReader(sequencedIS, CHARSET_UTF16));
		    // load SAP connection properties		    
		    Properties connectProperties = getConncetionProperties(mpConfig);
		 // read logged in user SAP credentials
	        String strSAPUser = context.getUser();
			if (strSAPUser.equals("User Agent"))
			{
				return mpRes;
			}
	        DomainObject person = PersonUtil.getPersonObject(context);
	        String strUserSAPName = person.getAttributeValue(context, "cenitSAPUser");
			
	        String strUserSAPPwd = person.getAttributeValue(context, "cenitSAPPassword");
	        System.out.println("Validating SAP credentials for user : "+strUserSAPName);
	        if (UIUtil.isNotNullAndNotEmpty(strUserSAPPwd))
	         strUserSAPPwd = new Crypt().PWDecrypt(strUserSAPPwd);
	        
	       // System.out.println("strUserSAPName : "+strUserSAPName+" decrypted strUserSAPPwd >> :"+strUserSAPPwd);
		    // execute bapi
		    gapDestinationDataProvider.gapSAPDestinationDataProvider gapSAPDest = new gapDestinationDataProvider.gapSAPDestinationDataProvider();

		    //catch IllegalStateException if an instance is already registered
	        try
	        {
	        	com.sap.conn.jco.ext.Environment.registerDestinationDataProvider(gapSAPDest);
	        	bResgistered = true;
	        	String destName = CONST_BAPI_USER_DATA_CHECK;

		        //set properties for the destination and ...
		        gapSAPDest.changeProperties(destName, connectProperties);
		        
		        gapDestinationDataProvider gapDestProvider = new gapDestinationDataProvider();
		        // execute bapi		        
		        bRes =  gapDestProvider.validateUserCredentials(destName, strUserSAPName, strUserSAPPwd);
	        }
	        catch(Exception providerAlreadyRegisteredException)
	        {
				//if (bResgistered)
				com.sap.conn.jco.ext.Environment.unregisterDestinationDataProvider(gapSAPDest);
	        	mpRes.put(SAP_ERROR_MSG, providerAlreadyRegisteredException.getMessage());
	        	providerAlreadyRegisteredException.printStackTrace();
	            //somebody else registered its implementation, 
	            //stop the execution
	            throw new Error(providerAlreadyRegisteredException);
	        }	
	        finally
	        {
	        	if (bResgistered)
				{
					bResgistered=false;
					com.sap.conn.jco.ext.Environment.unregisterDestinationDataProvider(gapSAPDest);
				}
	        }
	        
		} catch (Exception e) {
			mpRes.put(SAP_ERROR_MSG, e.getMessage());
				// TODO Auto-generated catch block
				e.printStackTrace();
		}*/
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	public static String syncSpecToSAP(Context context, String args[]) throws Exception
	{
		HashMap mpRes = new HashMap();
		Map programMap = (HashMap)JPO.unpackArgs(args);
		String strObjectId = (String) programMap.get("objectId");
		DomainObject domchangeObj=DomainObject.newInstance(context);
		   domchangeObj.setId(strObjectId);
		   String typepattern=DomainConstants.TYPE_PART;
		   StringList selectStmts1	=	new StringList();
		   selectStmts1.addElement(DomainConstants.SELECT_ID);
		   selectStmts1.addElement(DomainConstants.SELECT_NAME);
		   selectStmts1.addElement(DomainConstants.SELECT_REVISION);
		   StringList selectrelStmts1	=	new StringList();
		   selectrelStmts1.addElement(DomainConstants.SELECT_RELATIONSHIP_ID);

		  MapList relatedSpec = domchangeObj.getRelatedObjects(context,
				  DomainConstants.RELATIONSHIP_PART_SPECIFICATION,
					"gapGAPSpecification",
					selectStmts1,
					selectrelStmts1,
					false,
					true,
					(short) 1,
					null,
					null);
		  StringBuffer sbMQL = new StringBuffer();
		  StringBuffer sbConnectionHistory = new StringBuffer();
		  
		  for (int i=0;i<relatedSpec.size();i++)
		  {
			  sbMQL.setLength(0);
			  
			  Map mp = (Map) relatedSpec.get(i);
			  
			  String strSpecId = (String) mp.get(DomainConstants.SELECT_ID);
			  String strSpecName = (String) mp.get(DomainConstants.SELECT_NAME);
			  String strSpecRev = (String) mp.get(DomainConstants.SELECT_REVISION);
			  sbConnectionHistory.append(strSpecName).append(" --> ").append(strSpecRev).append(" : ");
			  sbMQL.append("exec prog cenitEV6SAPJPO ")
			  	   .append(strSpecId)
			  	   .append(" RelationshipPartSpecificationCreateActionSyncToSAP 0 Online ").append(strObjectId);
			  String sResult = MqlUtil.mqlCommand(context, sbMQL.toString());
			  if (UIUtil.isNotNullAndNotEmpty(sResult))
				sbConnectionHistory.append(" FAILED ").append(sResult);
			  else
				sbConnectionHistory.append(" Sucess ");
			sbConnectionHistory.append("\n");
		  }
		 // ${CLASS:emxContextUtilBase}.mqlNotice(context, sbConnectionHistory.toString());
		return sbConnectionHistory.toString();
	}
}

