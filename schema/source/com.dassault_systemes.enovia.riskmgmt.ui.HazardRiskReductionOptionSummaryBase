
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.StringList;

import com.dassault_systemes.enovia.riskmgmt.Hazard;
import com.dassault_systemes.enovia.riskmgmt.RiskMgmtConstants;
import com.dassault_systemes.enovia.riskmgmt.RiskMgmtException;
import com.dassault_systemes.enovia.riskmgmt.RiskMgmtSymNames;
import com.dassault_systemes.enovia.riskmgmt.RiskMgmtUtil;
import com.dassault_systemes.enovia.riskmgmt.Hazard.HazardProcess;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.util.MapList;

public class ${CLASSNAME} extends ${CLASS:com.dassault_systemes.enovia.riskmgmt.ui.RiskMgmtTableBase} {

	/**
	 * Constructs a new JPO object.
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object. This argument is
	 *            ignored, only provided for allowing it to be called from UI
	 *            components.
	 * @param argsr
	 *            This argument is ignored, only provided for allowing it to be
	 *            called from UI components.
	 * @throws RiskMgmtException
	 *             if the operation fails
	 */
	public ${CLASSNAME}(Context context, String[] args) throws RiskMgmtException {
		super(context, args);
	}

	@com.matrixone.apps.framework.ui.ProgramCallable
	public List<Map<?, ?>> getTableRiskMgmtHazardRiskReductionOptionsSummaryData(Context context, String[] args) throws RiskMgmtException {
		List<Map<?, ?>> mlResult = new ArrayList<>();
		final String ATTRIBUTE_CONTROL_MEASURE = RiskMgmtSymNames.SYM_ATTR_CONTROL_MEASURE.get(context);
		final String ATTRIBUTE_EFFECTIVENESS_VERIFICATION = RiskMgmtSymNames.SYM_ATTR_EFFECTIVENESS_VERIFICATION.get(context);
		final String ATTRIBUTE_GENERATES_NEW_HAZARD = RiskMgmtSymNames.SYM_ATTR_GENERATES_NEW_HAZARD.get(context);
		final String ATTRIBUTE_IMPLEMENTATION_PRACTICABLE = RiskMgmtSymNames.SYM_ATTR_IMPLEMENTATION_PRACTICABLE.get(context);
		final String ATTRIBUTE_IMPLEMENTATION_VERIFICATION = RiskMgmtSymNames.SYM_ATTR_IMPLEMENTATION_VERIFICATION.get(context);
		final String ATTRIBUTE_RESIDUAL_RISK = RiskMgmtSymNames.SYM_ATTR_RESIDUAL_RISK.get(context);
		final String ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_INFORMATION = RiskMgmtSymNames.SYM_ATTR_RESIDUAL_RISK_DISCLOSURE_INFORMATION.get(context);
		final String ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_VERIFICATION = RiskMgmtSymNames.SYM_ATTR_RESIDUAL_RISK_DISCLOSURE_VERIFICATION.get(context);
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			String strHazardId = (String) programMap.get(RiskMgmtConstants.OBJECT_ID);
			if (!RiskMgmtUtil.isNullOrEmpty(strHazardId)) {
				Hazard hazard = new Hazard(strHazardId);
				mlResult = hazard.getRiskReductionOptions(context, RiskMgmtUtil.stringList(DomainConstants.SELECT_ID), RiskMgmtUtil.stringList(
						DomainRelationship.SELECT_ID, DomainRelationship.getAttributeSelect(ATTRIBUTE_CONTROL_MEASURE),
						DomainRelationship.getAttributeSelect(ATTRIBUTE_EFFECTIVENESS_VERIFICATION),
						DomainRelationship.getAttributeSelect(ATTRIBUTE_GENERATES_NEW_HAZARD),
						DomainRelationship.getAttributeSelect(ATTRIBUTE_IMPLEMENTATION_PRACTICABLE),
						DomainRelationship.getAttributeSelect(ATTRIBUTE_IMPLEMENTATION_VERIFICATION),
						DomainRelationship.getAttributeSelect(ATTRIBUTE_RESIDUAL_RISK),
						DomainRelationship.getAttributeSelect(ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_INFORMATION),
						DomainRelationship.getAttributeSelect(ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_VERIFICATION)));
			}
		}
		catch (Exception exp) {
			throw new RiskMgmtException(exp);
		}
		return new MapList(mlResult);
	}

	public List<String> getTableRiskMgmtHazardRiskReductionOptionsSummaryColumnMeasure(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_CONTROL_MEASURE = RiskMgmtSymNames.SYM_ATTR_CONTROL_MEASURE.get(context);
			return retrieveColumnValues(context, args, DomainRelationship.getAttributeSelect(ATTRIBUTE_CONTROL_MEASURE));
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public List<String> getTableRiskMgmtHazardRiskReductionOptionsSummaryColumnPracticable(Context context, String[] args) throws RiskMgmtException {
		try {
			List<String> returnList = new Vector<String>();
			final String ATTRIBUTE_IMPLEMENTATION_PRACTICABLE = RiskMgmtSymNames.SYM_ATTR_IMPLEMENTATION_PRACTICABLE.get(context);
			Vector<String> values = retrieveColumnValues(context, args, DomainRelationship.getAttributeSelect(ATTRIBUTE_IMPLEMENTATION_PRACTICABLE));
			if (!RiskMgmtUtil.isNullOrEmpty(values)) {
				for (String attrValue : values) {
					StringList i18nAttrList = RiskMgmtUtil.getAttributeI18NString(context, ATTRIBUTE_IMPLEMENTATION_PRACTICABLE, new StringList(
							attrValue), context.getSession().getLanguage());
					if (!RiskMgmtUtil.isNullOrEmpty(i18nAttrList) && !RiskMgmtUtil.isNullOrEmpty((String) i18nAttrList.get(0))) {
						returnList.add((String) i18nAttrList.get(0));
					}
				}
			}
			return returnList;
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public List<String> getTableRiskMgmtHazardRiskReductionOptionsSummaryColumnVerificationImpl(Context context, String[] args)
			throws RiskMgmtException {
		try {
			final String ATTRIBUTE_IMPLEMENTATION_VERIFICATION = RiskMgmtSymNames.SYM_ATTR_IMPLEMENTATION_VERIFICATION.get(context);
			return retrieveColumnValues(context, args, DomainRelationship.getAttributeSelect(ATTRIBUTE_IMPLEMENTATION_VERIFICATION));
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public List<String> getTableRiskMgmtHazardRiskReductionOptionsSummaryColumnVerificationEffec(Context context, String[] args)
			throws RiskMgmtException {
		try {
			final String ATTRIBUTE_EFFECTIVENESS_VERIFICATION = RiskMgmtSymNames.SYM_ATTR_EFFECTIVENESS_VERIFICATION.get(context);
			return retrieveColumnValues(context, args, DomainRelationship.getAttributeSelect(ATTRIBUTE_EFFECTIVENESS_VERIFICATION));
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public List<String> getTableRiskMgmtHazardRiskReductionOptionsSummaryColumnResidualRisk(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_RESIDUAL_RISK = RiskMgmtSymNames.SYM_ATTR_RESIDUAL_RISK.get(context);
			return retrieveColumnValues(context, args, DomainRelationship.getAttributeSelect(ATTRIBUTE_RESIDUAL_RISK));
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public List<String> getTableRiskMgmtHazardRiskReductionOptionsSummaryColumnInformation(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_INFORMATION = RiskMgmtSymNames.SYM_ATTR_RESIDUAL_RISK_DISCLOSURE_INFORMATION.get(context);
			return retrieveColumnValues(context, args, DomainRelationship.getAttributeSelect(ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_INFORMATION));
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public List<String> getTableRiskMgmtHazardRiskReductionOptionsSummaryColumnVerificationRiskDisc(Context context, String[] args)
			throws RiskMgmtException {
		try {
			final String ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_VERIFICATION = RiskMgmtSymNames.SYM_ATTR_RESIDUAL_RISK_DISCLOSURE_VERIFICATION
					.get(context);
			return retrieveColumnValues(context, args, DomainRelationship.getAttributeSelect(ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_VERIFICATION));
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public List<String> getTableRiskMgmtHazardRiskReductionOptionsSummaryColumnGenerateHazard(Context context, String[] args)
			throws RiskMgmtException {
		try {
			List<String> returnList = new Vector<String>();
			final String ATTRIBUTE_GENERATES_NEW_HAZARD = RiskMgmtSymNames.SYM_ATTR_GENERATES_NEW_HAZARD.get(context);
			Vector<String> values = retrieveColumnValues(context, args, DomainRelationship.getAttributeSelect(ATTRIBUTE_GENERATES_NEW_HAZARD));
			if (!RiskMgmtUtil.isNullOrEmpty(values)) {
				for (String attrValue : values) {
					StringList i18nAttrList = RiskMgmtUtil.getAttributeI18NString(context, ATTRIBUTE_GENERATES_NEW_HAZARD, new StringList(attrValue),
							context.getSession().getLanguage());
					if (!RiskMgmtUtil.isNullOrEmpty(i18nAttrList) && !RiskMgmtUtil.isNullOrEmpty((String) i18nAttrList.get(0))) {
						returnList.add((String) i18nAttrList.get(0));
					}
				}
			}
			return returnList;

		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public Map<?, ?> getRangeTableRiskReductionOptionsSummaryColumnPracticable(Context context, String[] args) throws RiskMgmtException {
		return RiskMgmtUtil.getAttributeRanges(context, RiskMgmtSymNames.SYM_ATTR_IMPLEMENTATION_PRACTICABLE.toString());
	}

	public Map<?, ?> getRangeTableRiskReductionOptionsSummaryColumnGenerateHazards(Context context, String[] args) throws RiskMgmtException {
		return RiskMgmtUtil.getAttributeRanges(context, RiskMgmtSymNames.SYM_ATTR_GENERATES_NEW_HAZARD.toString());
	}

	public void updateTableRiskReductionOptionsSummaryColumnMeasure(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_CONTROL_MEASURE = RiskMgmtSymNames.SYM_ATTR_CONTROL_MEASURE.get(context);
			setRiskReductionAttribute(context, args, ATTRIBUTE_CONTROL_MEASURE);
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public void updateTableRiskReductionOptionsSummaryColumnPracticable(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_IMPLEMENTATION_PRACTICABLE = RiskMgmtSymNames.SYM_ATTR_IMPLEMENTATION_PRACTICABLE.get(context);
			setRiskReductionAttribute(context, args, ATTRIBUTE_IMPLEMENTATION_PRACTICABLE);

		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public void updateTableRiskReductionOptionsSummaryColumnVerificationImpl(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_IMPLEMENTATION_VERIFICATION = RiskMgmtSymNames.SYM_ATTR_IMPLEMENTATION_VERIFICATION.get(context);
			setRiskReductionAttribute(context, args, ATTRIBUTE_IMPLEMENTATION_VERIFICATION);
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public void updateTableRiskReductionOptionsSummaryColumnVerificationEffec(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_EFFECTIVENESS_VERIFICATION = RiskMgmtSymNames.SYM_ATTR_EFFECTIVENESS_VERIFICATION.get(context);
			setRiskReductionAttribute(context, args, ATTRIBUTE_EFFECTIVENESS_VERIFICATION);

		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public void updateTableRiskReductionOptionsSummaryColumnResidualRisk(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_RESIDUAL_RISK = RiskMgmtSymNames.SYM_ATTR_RESIDUAL_RISK.get(context);
			setRiskReductionAttribute(context, args, ATTRIBUTE_RESIDUAL_RISK);
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public void updateTableRiskReductionOptionsSummaryColumnInformation(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_INFORMATION = RiskMgmtSymNames.SYM_ATTR_RESIDUAL_RISK_DISCLOSURE_INFORMATION.get(context);
			setRiskReductionAttribute(context, args, ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_INFORMATION);
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public void updateTableRiskReductionOptionsSummaryColumnVerificationRiskDisc(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_VERIFICATION = RiskMgmtSymNames.SYM_ATTR_RESIDUAL_RISK_DISCLOSURE_VERIFICATION
					.get(context);
			setRiskReductionAttribute(context, args, ATTRIBUTE_RESIDUAL_RISK_DISCLOSURE_VERIFICATION);
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	public void updateTableRiskReductionOptionsSummaryColumnGenerateHazard(Context context, String[] args) throws RiskMgmtException {
		try {
			final String ATTRIBUTE_GENERATES_NEW_HAZARD = RiskMgmtSymNames.SYM_ATTR_GENERATES_NEW_HAZARD.get(context);
			setRiskReductionAttribute(context, args, ATTRIBUTE_GENERATES_NEW_HAZARD);
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

	/**
	 * This method sets the attribute define on relationship Risk Reduction
	 * 
	 * @param context
	 * @param args
	 * @param ATTRIBUTE_CONTROL_MEASURE
	 * @throws Exception
	 * @throws RiskMgmtException
	 */
	private void setRiskReductionAttribute(Context context, String[] args, final String ATTRIBUTE_CONTROL_MEASURE) throws RiskMgmtException {
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			Map requestMap = (Map) programMap.get(REQUEST_MAP);
			Map paramMap = (Map) programMap.get(PARAM_MAP);
			String hazardId = (String) requestMap.get(RiskMgmtConstants.PARENT_OID);
			String attrValue = (String) paramMap.get(RiskMgmtConstants.NEW_VALUE);
			String relId = (String) paramMap.get(RiskMgmtConstants.REL_ID);

			if (!RiskMgmtUtil.isNullOrEmpty(hazardId) && !RiskMgmtUtil.isNullOrEmpty(attrValue) && !RiskMgmtUtil.isNullOrEmpty(relId)) {
				Hazard hazard = new Hazard(hazardId);
				Map<String, String> attributeMap = new HashMap<String, String>();
				attributeMap.put(ATTRIBUTE_CONTROL_MEASURE, attrValue);
				hazard.setRiskReductionAttributes(context, relId, attributeMap);
			}
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}
	
	/**
	 * This method checks if Risk Reduction Options related columns can be edited on table RiskMgmtHazardRiskReductionOptionsSummary.
	 * 
	 * @param context
	 * @param args
	 * @return StringList
	 * @throws RiskMgmtException
	 */
	public StringList canEditTableRiskMgmtHazardRiskReductionOptionsSummaryColumnsRiskReductionOptions(Context context, String args[]) throws RiskMgmtException {
		return canEditTableRiskMgmtHazardRiskReductionOptionsSummaryColumns(context, args, HazardProcess.REDUCTION.toString());
	}
	
	/**
	 * This method checks if verification related columns can be edited on table RiskMgmtHazardRiskReductionOptionsSummary.
	 * 
	 * @param context
	 * @param args
	 * @return StringList
	 * @throws RiskMgmtException
	 */
	public StringList canEditTableRiskMgmtHazardRiskReductionOptionsSummaryColumnsVerification(Context context, String args[]) throws RiskMgmtException {
		return canEditTableRiskMgmtHazardRiskReductionOptionsSummaryColumns(context, args, HazardProcess.VERIFICATION.toString());
	}
	
	private StringList canEditTableRiskMgmtHazardRiskReductionOptionsSummaryColumns(Context context, String args[], String process) throws RiskMgmtException {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map requestMap = (Map) programMap.get(REQUEST_MAP);
			MapList objectMap = (MapList) programMap.get(OBJECT_LIST);

			boolean editAccess = false;
			int objectMapSize = 0;

			if(!RiskMgmtUtil.isNullOrEmpty(requestMap)) {
				String strHazardId = (String) requestMap.get(RiskMgmtConstants.OBJECT_ID);
				String strCurrentColumn = (String) requestMap.get(RiskMgmtConstants.CURRENT_COLUMN);

				if(RiskMgmtUtil.isNullOrEmpty(strCurrentColumn)) {
					editAccess = true;
				} else if (!RiskMgmtUtil.isNullOrEmpty(process) && process.equals(strCurrentColumn) && !RiskMgmtUtil.isNullOrEmpty(strHazardId)) {
					Hazard hazard = new Hazard(strHazardId);
					String strCurrentProcess = hazard.getProcess(context);

					if (process.equals(strCurrentProcess)) {
						editAccess = true;
					}
				}
			}

			if(!RiskMgmtUtil.isNullOrEmpty(objectMap)) {
				objectMapSize = objectMap.size();
			}

			StringList accessList = new StringList(objectMapSize);
			for(int index = 0; index < objectMapSize; index++) {
				accessList.add(Boolean.toString(editAccess));
			}

			return accessList;
		}
		catch (Exception e) {
			throw new RiskMgmtException(e);
		}
	}

}

