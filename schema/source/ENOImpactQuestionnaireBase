import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;

import matrix.db.AccessConstants;
import matrix.db.AttributeType;
import matrix.db.BusinessObject;
import matrix.db.BusinessObjectWithSelect;
import matrix.db.BusinessObjectWithSelectItr;
import matrix.db.BusinessObjectWithSelectList;
import matrix.db.Context;
import matrix.db.Environment;
import matrix.db.JPO;
import matrix.db.RelationshipType;
import matrix.util.StringList;

import com.dassault_systemes.enovia.questionnaire.ConfigureApprovalService;
import com.dassault_systemes.enovia.questionnaire.ConfigureApprovalServiceImpl;
import com.dassault_systemes.enovia.questionnaire.ImpactQuestionnaireService;
import com.dassault_systemes.enovia.questionnaire.ImpactQuestionnaireServiceImpl;
import com.dassault_systemes.enovia.questionnaire.QuestionService;
import com.dassault_systemes.enovia.questionnaire.QuestionServiceImpl;
import com.dassault_systemes.enovia.questionnaire.QuestionServiceImpl.Question;
import com.dassault_systemes.enovia.questionnaire.QuestionUtil;
import com.dassault_systemes.enovia.questionnaire.QuestionnaireConstants;
import com.dassault_systemes.enovia.questionnaire.TableRowId;
import com.matrixone.apps.common.CommonDocument;
import com.matrixone.apps.domain.DomainAccess;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.DomainSymbolicConstants;
import com.matrixone.apps.domain.util.AccessUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MessageUtil;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.XSSUtil;
import com.matrixone.apps.domain.util.eMatrixDateFormat;
import com.matrixone.apps.domain.util.i18nNow;
import com.matrixone.apps.framework.ui.UICache;
import com.matrixone.apps.framework.ui.UIComponent;
import com.matrixone.apps.framework.ui.UIUtil;

public class ${CLASSNAME}{
	@com.matrixone.apps.framework.ui.ProgramCallable
	public List<Map> getTemplateRelatedQuestions(Context context, String args[]) throws Exception {
		try {
			QuestionService questionService = new QuestionServiceImpl();
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			String strExpandLevel = (String) programMap.get("expandLevel");
			strExpandLevel = UIUtil.isNotNullAndNotEmpty(strExpandLevel) ? strExpandLevel : "1";
			List<Map> lRelatedQuestionsMap = questionService.getQuestionRelatedObjects(context, strObjectId, "Question", (short) 1, "", "");
			questionService.sortMapListOnSequenceOrder(context, (MapList) lRelatedQuestionsMap);
			return lRelatedQuestionsMap;
		}
		catch (Exception e) {
			throw new Exception();
		}
	}

	@com.matrixone.apps.framework.ui.ConnectionProgramCallable
	public Map createQuestionsAndSaveInPage(Context context, String args[]) throws Exception {

		try {
			Map<String, Object> mReturn = new HashMap<String, Object>();
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.PARAMMAP);

			Object changeRowObj = programMap.get("contextData");
			MapList chgRowsMapList = com.matrixone.apps.framework.ui.UITableIndented.getChangedRowsMapFromElement(context, changeRowObj);

			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			DomainObject dobj = DomainObject.newInstance(context, strObjectId);
			if (!dobj.isKindOf(context, PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_IMPACT_QUESTIONNAIRE_TEMPLATE))) {
				String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
						"enoQuestionnaire.Alert.Msg.CannotCreateSubQuestion");
				throw new Exception(strMessage);
			}

			String strParentObject = strObjectId;
			if (UIUtil.isNullOrEmpty(strParentObject))
				strParentObject = (String) paramMap.get(QuestionnaireConstants.OBJECTID);

			QuestionService questionService = new QuestionServiceImpl();
			List<Question> lQuestionObj = new ArrayList<Question>();
			for (Object mObjMap : chgRowsMapList) {
				Map<?, ?> mNewObj = (Map<?, ?>) mObjMap;
				String strRowId = (String) mNewObj.get("rowId");
				Map mColumnMap = (Map) mNewObj.get("columns");
				String strQuestionDescription = (String) mColumnMap.get("Description");
				String strQuestionComment = (String) mColumnMap.get("Comment");
				String strName = (String) mColumnMap.get("Name");
				String ResponseRangeType = (String) mColumnMap.get("ResponseRangeType");
				String ResponseRangeValues = (String) mColumnMap.get("ResponseRangeValues");
				if (!ResponseRangeType.equals("Textbox") && !ResponseRangeType.equals("TextArea") && UIUtil.isNullOrEmpty(ResponseRangeValues)) {
					String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE,
							context.getLocale(), "enoQuestionnaire.Alert.Msg.RangeValueRequired");
					throw new Exception(strMessage);
				}
				if (UIUtil.isNullOrEmpty(strObjectId)) {
					StringList sl = FrameworkUtil.split(strRowId, ",");
					if (sl.size() < 2)
						strObjectId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);
					else {
						String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE,
								context.getLocale(), "enoQuestionnaire.Alert.Msg.WrongQuestionPosition");
						throw new Exception(strMessage);
					}
				}
				com.dassault_systemes.enovia.questionnaire.TableRowId rowId = new com.dassault_systemes.enovia.questionnaire.TableRowId("", "",
						strObjectId, strRowId);
				QuestionServiceImpl questionServiceImpl = new QuestionServiceImpl();
				if (ResponseRangeType.equals("Textbox") || ResponseRangeType.equals("TextArea")) {
					ResponseRangeValues = "";
				}
				
				if(ResponseRangeValues.contains("|"))
				{
					String arrValues[];
					int count = ResponseRangeValues.length() - ResponseRangeValues.replace("|", "").length()+1;
					arrValues= ResponseRangeValues.split("\\|");
					
					if(arrValues.length<count)
						arrValues= Arrays.copyOf(arrValues, count);
					
					boolean boolFlag = false;
	
					for (int i = 0; i < arrValues.length; i++) {
						if (UIUtil.isNullOrEmpty(arrValues[i])) {
							boolFlag = true;
							break;
						}
					}
					if (arrValues.length == 0 || boolFlag) {
						String strMessage = EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE,
								context.getLocale(), "enoQuestionnaire.Alert.Msg.RangeValueCannotBeBlank");
						throw new Exception(strMessage);
					}
				}
				Question question = questionServiceImpl.new Question(rowId, strQuestionDescription, strName, strQuestionComment, "Descriptive",
						ResponseRangeType, ResponseRangeValues);
				lQuestionObj.add(question);
			}
			List<Question> lQuestion = questionService.createQuestionForEForm(context, lQuestionObj);
			Map<?, ?> mNewObj = (Map<?, ?>) chgRowsMapList.get(0);
			Map mColumnMap = (Map) mNewObj.get("columns");
			String desc = mColumnMap.get("Description").toString();

			mColumnMap.remove("Description");
			mColumnMap.put("Description", XSSUtil.encodeForHTML(context, desc));

			MapList mlChangedRows = new MapList();
			for (Question question : lQuestion) {
				mReturn = new HashMap<String, Object>();
				mReturn.put("rowId", question.getRowId().getLevel());
				mReturn.put("oid", question.getRowId().getObjectId());
				mReturn.put("pid", question.getRowId().getParentObjectId());
				mReturn.put("markup", "new");
				mReturn.put("columns", mColumnMap);
				mReturn.put("relid", question.getRowId().getRelationshipId());
				mlChangedRows.add(mReturn);
			}

			Map<String, Serializable> mReturnMap = new HashMap<String, Serializable>();
			mReturnMap.put("Action", "success");
			mReturnMap.put("changedRows", mlChangedRows);
			return mReturnMap;

		}
		catch (Exception e) {
			Map<String, Serializable> mReturn = new HashMap<String, Serializable>();
			mReturn.put("Action", QuestionnaireConstants.ERROR);
			mReturn.put("Message", e.getMessage());
			return mReturn;
		}

	}

	public MapList renderForm(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strAttrQuestionRangeType = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_TYPE);
			String strAttrQuestionRangeValue = PropertyUtil.getSchemaProperty(context,
					QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_VALUES);
			String strAttrQuestionSubmit = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_COMMENT);
			String strPoliCYTemplate = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM_TEMPLATE);
			String strPolicyStateActive = PropertyUtil.getSchemaProperty(context, "policy", strPoliCYTemplate,
					QuestionnaireConstants.SYMBOLIC_STATE_ACTIVE);

			QuestionService questionService = new QuestionServiceImpl();

			Map requestMap = (Map) programMap.get("requestMap");
			String strObjectId = (String) requestMap.get(QuestionnaireConstants.OBJECTID);
			String strAction = (String) programMap.get(QuestionnaireConstants.QUESTION_MODE);
			String mode = (String) requestMap.get("mode");
			String eFormTemplateId = strObjectId;
			if (UIUtil.isNullOrEmpty(strObjectId)) {
				strObjectId = (String) requestMap.get(QuestionnaireConstants.OBJECTID);

			}
			eFormTemplateId = DomainObject.newInstance(context, strObjectId).getInfo(context, "from[eForm Template].to.id");
			StringBuilder sbObjectWhere = new StringBuilder();
			sbObjectWhere.append(DomainConstants.SELECT_CURRENT).append("==").append(strPolicyStateActive);
			List<Map> mListRelatedQuestions = questionService.getQuestionRelatedObjects(context, eFormTemplateId, "Question", (short) 1,
					sbObjectWhere.toString(), "");
			questionService.sortMapListOnSequenceOrder(context, (MapList) mListRelatedQuestions);
			Map<String, Map<String, String>> mQuesIdResponse = new HashMap<String, Map<String, String>>();
			mQuesIdResponse = getEFormConfigureConnectedQuestions(context, strObjectId);

			MapList customerAttFields = new MapList();
			HashMap fieldMap = new HashMap<>();
			fieldMap.put("expression_businessobject", "empty");
			fieldMap.put(UICache.LABEL, "Name");
			fieldMap.put(UICache.NAME, "Name");
			fieldMap.put("expression_businessobject", "name");
			UIComponent.modifySetting(fieldMap, "Editable", "false");
			customerAttFields.add(fieldMap);
			for (Map mQues : mListRelatedQuestions) {
				fieldMap = new HashMap<>();
				String strQuesDescription = (String) mQues.get(DomainConstants.SELECT_DESCRIPTION);
				String strQuesName = (String) mQues.get(DomainConstants.SELECT_NAME);
				String strQuesId = (String) mQues.get(DomainObject.SELECT_ID);
				String strQuesRelId = (String) mQues.get(DomainRelationship.SELECT_ID);
				String strQuesInputType = (String) mQues.get(DomainObject.getAttributeSelect(strAttrQuestionRangeType));
				String strQuesInputRange = (String) mQues.get(DomainObject.getAttributeSelect(strAttrQuestionRangeValue));


				List<String> slQuestionInputRangeValues = FrameworkUtil.split(strQuesInputRange, "|");
				StringList slQuestionRangeVlaues = new StringList();
				if (strQuesInputType.equals("Combobox"))
					slQuestionRangeVlaues.add(" ");
				for (String rangeValue : slQuestionInputRangeValues) {
					slQuestionRangeVlaues.add(rangeValue.trim());
				}
				fieldMap.put("expression_businessobject", "empty");
				// fieldMap.put("isMultiVal", "true");
				fieldMap.put(UICache.LABEL, strQuesDescription);
				fieldMap.put(UICache.NAME, strQuesId + "$" + strQuesRelId);
				fieldMap.put("field_choices", slQuestionRangeVlaues);
				fieldMap.put("field_display_choices", slQuestionRangeVlaues);
				fieldMap.put("field_display_value", slQuestionRangeVlaues);
				fieldMap.put("field_value", slQuestionRangeVlaues);

				UIComponent.modifySetting(fieldMap, "Editable", "true");
				UIComponent.modifySetting(fieldMap, "Input Type", strQuesInputType.toLowerCase());
				UIComponent.modifySetting(fieldMap, "Remove Range Blank", "true");
				UIComponent.modifySetting(fieldMap, "Field Type", "program");
				UIComponent.modifySetting(fieldMap, "program", "ENOImpactQuestionnaire");

				UIComponent.modifySetting(fieldMap, "Sort Direction", "descending");

				if ("Edit".equalsIgnoreCase(mode))
					UIComponent.modifySetting(fieldMap, "function", "getDefaultValue");
				else if (UIUtil.isNullOrEmpty(mode) || "view".equalsIgnoreCase(mode))
					UIComponent.modifySetting(fieldMap, "function", "getDefaultValue1");

				if (mQuesIdResponse.containsKey(strQuesId)) {
					Map mRelResponse = mQuesIdResponse.get(strQuesId);
					String connId = (String) mRelResponse.get(DomainRelationship.SELECT_ID);
					DomainRelationship drCOQuestionnaire = new DomainRelationship(connId);
					String value = drCOQuestionnaire.getAttributeValue(context, strAttrQuestionSubmit);
					if (UIUtil.isNotNullAndNotEmpty(value))
						UIComponent.modifySetting(fieldMap, "Default1", value);
				}
				customerAttFields.add(fieldMap);
			}
			return customerAttFields;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public StringList getDefaultValue(Context context, String args[]) throws Exception {
		Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
		Map fieldMap = (Map) programMap.get("fieldMap");
		Map settingsMap = (Map) fieldMap.get("settings");
		String defaultValue = (String) settingsMap.get("Default1");
		String inputType = (String) settingsMap.get("Input Type");
		if (UIUtil.isNullOrEmpty(defaultValue))
			defaultValue = "";
		StringList slQuestionRangeVlaues = new StringList();
		if (defaultValue.contains(",") && !inputType.equals("checkbox")) {
			List<String> slQuestionInputRangeValues = FrameworkUtil.split(defaultValue, ",");
			for (String rangeValue : slQuestionInputRangeValues) {
				slQuestionRangeVlaues.add(rangeValue.trim());
		}
			slQuestionRangeVlaues = FrameworkUtil.split(defaultValue, ",");
		}

		else if (UIUtil.isNotNullAndNotEmpty(defaultValue))
			slQuestionRangeVlaues.add(defaultValue.trim());
		return slQuestionRangeVlaues;
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String saveEFormQuestionnaireForm(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strRelChangeOrderQuestionnaire = PropertyUtil.getSchemaProperty(context,
					QuestionnaireConstants.SYMBOLIC_RELATIONSHIP_RELATED_ITEM_QUESTIONNAIRE);
			String strAttrQuestionSubmit = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_COMMENT);
			String strObjectId[] = (String[]) programMap.get(QuestionnaireConstants.OBJECTID);
			QuestionService questionService = new QuestionServiceImpl();
			String eFormTemplateId = DomainObject.newInstance(context, strObjectId[0]).getInfo(context, "from[eForm Template].to.id");
			List<Map> mListRelatedQuestions = questionService.getQuestionRelatedObjects(context, eFormTemplateId, "Question", (short) 1, "", "");
			MapList customerAttFields = new MapList();
			HashMap fieldMap = new HashMap<>();
			
			String strKeepHistory=EnoviaResourceBundle.getProperty(context,"enoQuestionnaire.Component.Approval.QuestionResponse.History");
			
			boolean keepHistory="true".equalsIgnoreCase(strKeepHistory);
			
			for (Map mQues : mListRelatedQuestions) {

				String stName = (String) mQues.get(DomainConstants.SELECT_NAME);
				String strQuesId = (String) mQues.get(DomainObject.SELECT_ID);
				String strQuesRelId = (String) mQues.get(DomainRelationship.SELECT_ID);
				String strQuesDesc = (String) mQues.get(DomainConstants.SELECT_DESCRIPTION);
				
				String[] value = (String[]) programMap.get(strQuesId + "$" + strQuesRelId);
				Map<String, Map<String, String>> mQuesIdResponse = new HashMap<String, Map<String, String>>();
				ConfigureApprovalService configureApprovalService = new ConfigureApprovalServiceImpl();
				mQuesIdResponse = configureApprovalService.getEFormConfigureConnectedQuestions(context, strObjectId[0]);
				String v = "";
				if (value != null) {

					for (int i = 0; i < value.length; i++) {
						v += value[i].trim();
						if (i < value.length - 1)
							v += ",";
					}
				}
				String strFinalDescription="";
				String oldVal="";
				boolean flag=false;
				if (mQuesIdResponse.containsKey(strQuesId)) {
					Map mRelResponse = mQuesIdResponse.get(strQuesId);
					String connId = (String) mRelResponse.get(DomainRelationship.SELECT_ID);
					DomainRelationship drCOQuestionnaire = new DomainRelationship(connId);
					oldVal=drCOQuestionnaire.getAttributeValue(context, strAttrQuestionSubmit);
					
					if (UIUtil.isNotNullAndNotEmpty(v))
						drCOQuestionnaire.setAttributeValue(context, strAttrQuestionSubmit, v);
					else
						DomainRelationship.disconnect(context, connId);

					flag=true;
				}
				else if (value != null && UIUtil.isNotNullAndNotEmpty(value[0])) {

					String cmd = "add connection $1 $2 $3 $4 $5 select $6 dump $7";
					String connId = QuestionUtil.mqlCommand(context, cmd, true, strRelChangeOrderQuestionnaire, "from", strObjectId[0], "torel",
							strQuesRelId, "id", "|");
					DomainRelationship drCOQuestionnaire = new DomainRelationship(connId);
					oldVal=drCOQuestionnaire.getAttributeValue(context, strAttrQuestionSubmit);
					drCOQuestionnaire.setAttributeValue(context, strAttrQuestionSubmit, v);
					flag=true;
				}
				
				if(keepHistory && flag && !oldVal.equals(v))
				{
					if(oldVal!=null && UIUtil.isNotNullAndNotEmpty(oldVal.toString()))
						strFinalDescription= MessageUtil
						.getMessage(context, null, "enoQuestionnaire.History.ResponseSave1", 
						new String[] {QuestionnaireConstants.RESPONSE,stName + "-"+strQuesDesc,v, oldVal.toString() },null, 
						context.getLocale(), QuestionnaireConstants.QUESTION_STRING_RESOURCE);
					else
						strFinalDescription= MessageUtil
						.getMessage(context, null, "enoQuestionnaire.History.ResponseSave2", 
						new String[] {QuestionnaireConstants.RESPONSE,stName + "-" + strQuesDesc,v},null, 
						context.getLocale(), QuestionnaireConstants.QUESTION_STRING_RESOURCE);
					
					String strEvent=EnoviaResourceBundle.getProperty(context, QuestionnaireConstants.QUESTION_STRING_RESOURCE, context.getLocale(),
							"enoQuestionnaire.History.EventResponseChanged");
					
					setCustomHistory(context,strObjectId[0],strEvent,strFinalDescription);
					flag=false;
				}
			}
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
		return "";
	}

	public Map<String, Map<String, String>> getEFormConfigureConnectedQuestions(Context context, String strObjectId) throws Exception {
		try {
			QuestionUtil.ensureNotEmpty(strObjectId, "Object Id is null");
			String strRelChangeOrderQuestionnaire = PropertyUtil.getSchemaProperty(context,
					QuestionnaireConstants.SYMBOLIC_RELATIONSHIP_RELATED_ITEM_QUESTIONNAIRE);
			String strAttrCOResposne = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RESPONSE);
			String strPolicyname = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_relationship_Question);
			StringList slSelects = new StringList();
			Map mQuesIdResponse = new HashMap();
			slSelects.add("from[" + strRelChangeOrderQuestionnaire + "].torel.to.id");
			slSelects.add("from[" + strRelChangeOrderQuestionnaire + "].id");
			String strCO[] = new String[] { strObjectId };
			BusinessObjectWithSelectList bList = BusinessObject.getSelectBusinessObjectData(context, strCO, slSelects);
			for (BusinessObjectWithSelectItr itr = new BusinessObjectWithSelectItr(bList); itr.next();) {
				BusinessObjectWithSelect bows = itr.obj();
				StringList slQuesId = bows.getSelectDataList(new StringBuilder().append("from[").append(strRelChangeOrderQuestionnaire)
						.append("].torel.to.id").toString());
				StringList slRelIds = bows.getSelectDataList(new StringBuilder().append("from[").append(strRelChangeOrderQuestionnaire)
						.append("].id").toString());
				if (slQuesId != null) {
					for (int i = 0; i < slQuesId.size(); i++) {
						Map mCoRelResponse = new HashMap();
						mCoRelResponse.put(DomainRelationship.SELECT_ID, slRelIds.get(i).toString());
						mQuesIdResponse.put(slQuesId.get(i).toString(), mCoRelResponse);

					}
				}
			}
			return mQuesIdResponse;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}
	
	/**
	 * JPO method for Include OIDs of Assignee Person of Responsible Organization of Impact Questionnaire
	 * 
	 * @param context
	 *            ENOVIA context object
	 * @param args
	 *            Holds input arguments
	 * @throws Exception
	 *             If operation fails
	 */
	@com.matrixone.apps.framework.ui.IncludeOIDProgramCallable
	public StringList getPersonIncludeOIdOfOrganizationForImpactQuestionnaireTemplate(Context context, String args[]) throws Exception 
	{
		HashMap programMap = (HashMap) JPO.unpackArgs(args);
		HashMap typeAheadMap =(HashMap)programMap.get("typeAheadMap");
		String objectId=(String)programMap.get("parentOID");
		if(UIUtil.isNullOrEmpty(objectId))
			objectId=(String)programMap.get("objectId");
		if(UIUtil.isNullOrEmpty(objectId))
			objectId=(String)typeAheadMap.get("rowObjectId");
		
		String  REL_MEMBER=DomainConstants.RELATIONSHIP_MEMBER;
		
		try {
			
			DomainObject domObj=DomainObject.newInstance(context,objectId);
			String attrOrganization=domObj.getInfo(context,DomainConstants.SELECT_ORGANIZATION);
			String attrResponsibleRole=domObj.getAttributeValue(context, PropertyUtil.getSchemaProperty(context,QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_RESPONSIBLE_ROLE));

			String strPersons=MqlUtil.mqlCommand(context, "list $1 $2 where $3",DomainConstants.TYPE_PERSON,"*","assignment["+attrResponsibleRole+"]");
			
			StringList slReturn=new StringList();
			if(UIUtil.isNotNullAndNotEmpty(strPersons))
			{
				String mlPersons[]=strPersons.split("\\n");

				for(int i=0;i<mlPersons.length;i++)
				{
					DomainObject domPerson=PersonUtil.getPersonObject(context,mlPersons[i]);
					String organization=domPerson.getInfo(context,"to["+REL_MEMBER+"].from.name");
					if(attrOrganization.equals(organization))
						slReturn.add(domPerson.getId(context));
				}
			}
			return slReturn;
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}
	
	/**
	 * JPO method for Updating Assignee Person of Responsible Organization of Impact Questionnaire
	 * 
	 * @param context
	 *            ENOVIA context object
	 * @param args
	 *            Holds input arguments
	 * @throws Exception
	 *             If operation fails
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String updateAssigneeOfImpactQuestionnaire(Context context,String[] args) throws Exception
	{
		String strSubjectKeyAdd=EnoviaResourceBundle.getProperty(context,"enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Notification.AddAssignee.SubjectKey");
		String strBodyKeyAdd=EnoviaResourceBundle.getProperty(context,"enoQuestionnaireStringResource",  context.getLocale(),"enoQuestionnaire.Notification.AddAssignee.SubjectKey");
		String strSubjectKeyRemove=EnoviaResourceBundle.getProperty(context,"enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Notification.RemoveAssignee.SubjectKey");
		String strBodyKeyRemove=EnoviaResourceBundle.getProperty(context,"enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Notification.RemoveAssignee.SubjectKey");
		String STR_COMMENT="comment";
		try {
			Map<?, ?> inputMap = (Map<?, ?>) JPO.unpackArgs(args);
			String objectId = ((String[]) inputMap.get("objectId"))[0];
			String 	personId="";
				
			String[] strEmxTableRowIds=(String[]) inputMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID); 
			if(null!=strEmxTableRowIds)
			{
				TableRowId tr=new TableRowId(strEmxTableRowIds[0]);
				personId=tr.getObjectId();
			}
			String strNewAssignee=DomainObject.newInstance(context,personId).getInfo(context,DomainConstants.SELECT_NAME);
			
			MapList results = DomainAccess.getAccessSummaryList(context, objectId);
			Iterator itr=results.iterator();
			
			boolean boolAlready=false;
			while(itr.hasNext())
			{
				Map<?,?> mpObj=(Map<?,?>)itr.next();
				String strComment=(String)mpObj.get(STR_COMMENT);
				
				if(DomainAccess.COMMENT_MULTIPLE_OWNERSHIP.equals(strComment))
				{
					if(mpObj.get(DomainConstants.SELECT_NAME).toString().equals(strNewAssignee+"_PRJ"))
						boolAlready=true;
					else
					{
						String keyName=mpObj.get(DomainConstants.SELECT_NAME).toString();
						String oldAssignee=keyName.substring(0,keyName.indexOf("_PRJ"));
						DomainAccess.deleteObjectOwnership(context, objectId, "",mpObj.get(DomainConstants.SELECT_NAME).toString(),mpObj.get(STR_COMMENT).toString());
						QuestionUtil.sendActualNotificationToUser(context, objectId, strSubjectKeyRemove, strBodyKeyRemove, new StringList(oldAssignee), null, new String[]{});
					}
					break;
				}
			
			}
			if(!boolAlready)
			{
				String access="read,modify,delete,changeowner,promote,changename,fromconnect,toconnect,fromdisconnect,todisconnect,show";
				DomainAccess.createObjectOwnership(context, objectId,personId, access,DomainAccess.COMMENT_MULTIPLE_OWNERSHIP, true, true);
				
				QuestionUtil.sendActualNotificationToUser(context, objectId, strSubjectKeyAdd, strBodyKeyAdd, new StringList(strNewAssignee), null, new String[]{});
			}
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "closeAndRefreshWindowAfterAddAssignee"); 
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}
	
	/**
	 * JPO method for Getting Assignee Person of Responsible Organization of Impact Questionnaire
	 * 
	 * @param context
	 *            ENOVIA context object
	 * @param args
	 *            Holds input arguments
	 * @throws Exception
	 *             If operation fails
	 */
	public static String getAssigneeForImpactQuestionnaireTemplate(Context context,String args[]) throws Exception
	{
		String STR_COMMENT="comment";
		
		Map<?, ?> inputMap = (Map<?, ?>) JPO.unpackArgs(args);
		Map<?, ?> paramMap = (Map<?, ?>) inputMap.get("paramMap");
		String objectId = (String) paramMap.get("objectId");

		MapList results = DomainAccess.getAccessSummaryList(context, objectId);
		
		Iterator<Map<?, ?>> itr=results.iterator();
		
		while(itr.hasNext())
		{
			Map<?,?> mpObj=(Map<?,?>)itr.next();
			String strComment=(String)mpObj.get(STR_COMMENT);
			
			if(DomainAccess.COMMENT_MULTIPLE_OWNERSHIP.equals(strComment))
			{
				String strName=(String)mpObj.get(DomainConstants.SELECT_NAME);
				strName=strName.substring(0,strName.indexOf("_PRJ"));
				return QuestionUtil.getObjectLink(context, PersonUtil.getPersonObjectID(context,strName), strName);
			}
		}
		return "";
	}

	/**
	 * JPO method for removing Assignee Person of Responsible Organization of Impact Questionnaire
	 * 
	 * @param context
	 *            ENOVIA context object
	 * @param args
	 *            Holds input arguments
	 * @throws Exception
	 *             If operation fails
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String removeAssigneeFromImpactQuestionnaire(Context context,String[] args) throws Exception
	{
		String strSubjectKeyRemove=EnoviaResourceBundle.getProperty(context,"enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Notification.RemoveAssignee.SubjectKey");
		String strBodyKeyRemove=EnoviaResourceBundle.getProperty(context,"enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Notification.RemoveAssignee.SubjectKey");
		String STR_COMMENT="comment";
		try {
			Map<?, ?> inputMap = (Map<?, ?>) JPO.unpackArgs(args);
			String objectId = ((String[]) inputMap.get("objectId"))[0];

			MapList results = DomainAccess.getAccessSummaryList(context, objectId);
			Iterator itr=results.iterator();
			
			while(itr.hasNext())
			{
				Map<?,?> mpObj=(Map<?,?>)itr.next();
				String strComment=(String)mpObj.get(STR_COMMENT);
				
				if(DomainAccess.COMMENT_MULTIPLE_OWNERSHIP.equals(strComment))
				{
					String keyName=mpObj.get(DomainConstants.SELECT_NAME).toString();
					String oldAssignee=keyName.substring(0,keyName.indexOf("_PRJ"));
					DomainAccess.deleteObjectOwnership(context, objectId, "",mpObj.get(DomainConstants.SELECT_NAME).toString(),mpObj.get(STR_COMMENT).toString());
					QuestionUtil.sendActualNotificationToUser(context, objectId, strSubjectKeyRemove, strBodyKeyRemove, new StringList(oldAssignee), null, new String[]{});
				}
			}
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshFormAfterRemoveAssignee"); 
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}
	
	/**
	 * JPO method for Getting Assignee Person of Responsible Organization of Impact Questionnaire Table
	 * 
	 * @param context
	 *            ENOVIA context object
	 * @param args
	 *            Holds input arguments
	 * @throws Exception
	 *             If operation fails
	 */
	public static List<String> getAssigneeForImpactQuestionnaireTable(Context context,String args[]) throws Exception
	{
		String STR_COMMENT="comment";
		try {
			
			List<String> slAssigneeList=new StringList();
			Map<?,?> programMap = (Map<?,?> )JPO.unpackArgs(args);
			List<Map<?,?>> mlObjectList= (List<Map<?,?>>)programMap.get(QuestionnaireConstants.OBJECTLIST);
			boolean flag=false;
			for (Map map : mlObjectList) {
				String strObjectId = (String)map.get(DomainConstants.SELECT_ID);
				MapList results = DomainAccess.getAccessSummaryList(context, strObjectId);
				
				Iterator<Map<?, ?>> itr=results.iterator();
				
				while(itr.hasNext())
				{
					Map<?,?> mpObj=(Map<?,?>)itr.next();
					String strComment=(String)mpObj.get(STR_COMMENT);
					
					if(DomainAccess.COMMENT_MULTIPLE_OWNERSHIP.equals(strComment))
					{
						String strName=(String)mpObj.get(DomainConstants.SELECT_NAME);
						strName=strName.substring(0,strName.indexOf("_PRJ"));
						slAssigneeList.add(QuestionUtil.getObjectLink(context, PersonUtil.getPersonObjectID(context,strName), strName));
						flag=true;
						break;
					}
				}
				if(!flag)
					slAssigneeList.add("");
				flag=false;
			}

			return slAssigneeList;
		} catch (Exception e) {
			throw new Exception(e);
		}

	}
	
	/**
	 * JPO method for Updating Assignee Person of Responsible Organization of Impact Questionnaire Table
	 * 
	 * @param context
	 *            ENOVIA context object
	 * @param args
	 *            Holds input arguments
	 * @throws Exception
	 *             If operation fails
	 */
	public void updateAssigneeOfImpactQuestionnaireTable(Context context,String[] args) throws Exception
	{
		String STR_COMMENT="comment";
		 
		String strSubjectKeyAdd=EnoviaResourceBundle.getProperty(context,"enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Notification.AddAssignee.SubjectKey");
		String strBodyKeyAdd=EnoviaResourceBundle.getProperty(context,"enoQuestionnaireStringResource",  context.getLocale(),"enoQuestionnaire.Notification.AddAssignee.SubjectKey");
		String strSubjectKeyRemove=EnoviaResourceBundle.getProperty(context,"enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Notification.RemoveAssignee.SubjectKey");
		String strBodyKeyRemove=EnoviaResourceBundle.getProperty(context,"enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Notification.RemoveAssignee.SubjectKey");
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.PARAMMAP);
			String strNewAssignee = (String) paramMap.get(QuestionnaireConstants.NEW_VALUE);
			String strEFormId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);
			
			MapList results = DomainAccess.getAccessSummaryList(context, strEFormId);
			Iterator itr=results.iterator();
			boolean boolAlready=false;
			while(itr.hasNext())
			{
				Map<?,?> mpObj=(Map<?,?>)itr.next();
				String strComment=(String)mpObj.get(STR_COMMENT);
				
				if(DomainAccess.COMMENT_MULTIPLE_OWNERSHIP.equals(strComment))
				{
					if(mpObj.get(DomainConstants.SELECT_NAME).toString().equals(strNewAssignee+"_PRJ"))
						boolAlready=true;
					else
					{
						String keyName=mpObj.get(DomainConstants.SELECT_NAME).toString();
						String oldAssignee=keyName.substring(0,keyName.indexOf("_PRJ"));
						DomainAccess.deleteObjectOwnership(context, strEFormId, "",mpObj.get(DomainConstants.SELECT_NAME).toString(),mpObj.get(STR_COMMENT).toString());
						QuestionUtil.sendActualNotificationToUser(context, strEFormId, strSubjectKeyRemove, strBodyKeyRemove, new StringList(oldAssignee), null, new String[]{});
					}
					break;
				}
			}
			if(!boolAlready)
			{
				String access="read,modify,delete,promote,changename,fromconnect,toconnect,fromdisconnect,todisconnect,show";
				DomainAccess.createObjectOwnership(context, strEFormId,PersonUtil.getPersonObjectID(context,strNewAssignee), access,DomainAccess.COMMENT_MULTIPLE_OWNERSHIP, true, true);
				QuestionUtil.sendActualNotificationToUser(context, strEFormId, strSubjectKeyAdd, strBodyKeyAdd, new StringList(strNewAssignee), null, new String[]{});
			}
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}

	/**
	 * This method is used to get list of All eForm Templates
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return MapList of active eForm Templates
	 * @throws Exception
	 *             if operation fails
	 * @exclude
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getAllEFormTemplates(Context context, String args[]) throws Exception {
		try {
			String strPolicyEForm = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM_TEMPLATE);
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();

			StringBuilder sbWhere = new StringBuilder().append(DomainConstants.SELECT_POLICY).append("==\'").append(strPolicyEForm).append("\'");
			sbWhere.append("&&").append(DomainConstants.SELECT_OWNER).append("==\'").append(context.getUser()).append("\'");
			sbWhere.append("&&").append(DomainConstants.SELECT_REVISION).append("==last");
			MapList mlEFormTemplate = eFormService.getAllEFormTemplate(context, sbWhere.toString());
			return mlEFormTemplate;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * This method is to delete eForm Templates
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            emxTableRowIds of eForm Templates
	 * @return Map with String returns the HTML code and calls the javascript
	 *         function.
	 * @throws Exception
	 *             if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String deleteEFormTemplates(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
			Map<String, String> mReturnMap = new HashMap<String, String>();
			StringBuilder sbMessage = new StringBuilder();
			String strTableRowIds[] = (String[]) programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			List<String> slEFormTemplatesId = new StringList();
			List<String> slEFormTemplatesRowId = new StringList();
			for (String strRowIds : strTableRowIds) {
				String strRowId = strRowIds;
				TableRowId tr = new TableRowId(strRowId);
				String streFormObjectId = tr.getObjectId();
				slEFormTemplatesId.add(streFormObjectId);
				slEFormTemplatesRowId.add(strRowId);

			}
			Map<String, List<String>> mInvalideFormTemplate = eFormService.deleteEFormTemplate(context, slEFormTemplatesId);
			List<String> slInvalideFormTemplateActiveState = mInvalideFormTemplate.get(QuestionnaireConstants.ACTIVE);
			List<String> slInvalideFormTemplateEFormConnected = mInvalideFormTemplate.get(QuestionnaireConstants.EFORM_CONNECTED);
			List<String> slValidIdsDeleted = mInvalideFormTemplate.get(QuestionnaireConstants.ACTIONS_SUCCESS);

			if (slInvalideFormTemplateActiveState.size() > 0) {
				sbMessage.append(MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.eFormTemplateInActiveOrObsoleteState",
						new String[] { slInvalideFormTemplateActiveState.toString() }, null, context.getLocale(),
						QuestionnaireConstants.QUESTION_STRING_RESOURCE));
				sbMessage.append("\\n");

			}
			if (slInvalideFormTemplateEFormConnected.size() > 0) {
				sbMessage
.append(MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.eFormTemplateConnectedToeForm",
								new String[] { slInvalideFormTemplateEFormConnected.toString() }, null, context.getLocale(),
						QuestionnaireConstants.QUESTION_STRING_RESOURCE));
				sbMessage.append("\\n");

			}
			if (!UIUtil.isNullOrEmpty(sbMessage.toString()))
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", sbMessage.toString());
			else if (slValidIdsDeleted != null && slValidIdsDeleted.size() > 0) {
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshParent", sbMessage.toString());
			}
			return "";
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	/**
	 * This method is to active and inactive eForm Templates
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            emxTableRowIds of eForm Templates
	 * @return Map with String returns the HTML code and calls the javascript
	 *         function.
	 * @throws Exception
	 *             if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String activeInactiveEFormTemplate(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
			Map<String, String> mReturnMap = new HashMap<String, String>();
			String strTableRowIds[] = (String[]) programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			List<String> slEFormTemplatesId = new StringList();

			if (strTableRowIds == null) {
				String[] arrEFormTemplateId = (String[]) programMap.get(QuestionnaireConstants.OBJECTID);
				slEFormTemplatesId.add(arrEFormTemplateId[0]);
				eFormService.activeInactiveEFormTemplate(context, slEFormTemplatesId);
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshFrame", "detailsDisplay");
			}
			else {
				for (String strRowIds : strTableRowIds) {
					String strRowId = strRowIds;
					TableRowId tr = new TableRowId(strRowId);
					String strDocObjectId = tr.getObjectId();
					slEFormTemplatesId.add(strDocObjectId);

				}
				eFormService.activeInactiveEFormTemplate(context, slEFormTemplatesId);

				return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshStructureBrowser");
			}

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * This method changes the EForms state from Preliminary to complete
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return Map with String returns the HTML code and calls the javascript
	 *         function.
	 * @throws Exception
	 *             if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String changeEFormsStateToCompleteState(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map<String, String> mReturnMap = new HashMap<String, String>();
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
			List<String> slEFormId = new StringList();
			StringBuilder sbJavascript = new StringBuilder();
			String strTableRowIds[] = (String[]) programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			if (strTableRowIds == null) {
				String strObjectId[] = (String[]) programMap.get(QuestionnaireConstants.OBJECTID);
				slEFormId.add(strObjectId[0]);
				StringList sListInValidEForm = eFormService.completeEForms(context, slEFormId);
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshFormAfterRemoveAssignee");
			}
			else {
				for (String strRowIds : strTableRowIds) {
					String strRowId = strRowIds;
					TableRowId tr = new TableRowId(strRowId);
					String strDocObjectId = tr.getObjectId();
					slEFormId.add(strDocObjectId);
				}
				StringList sListInValidEForm = eFormService.completeEForms(context, slEFormId);
				if (sListInValidEForm.size() > 0) {
					String strMessage = MessageUtil
							.getMessage(context, null, "enoQuestionnaire.Alert.CannotComplete",
 new String[] { sListInValidEForm.toString() },
 null,
									context.getLocale(), QuestionnaireConstants.QUESTION_STRING_RESOURCE);
					return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);
				}
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshParent");
			}

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * This method is to delete eForm Templates
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @return Map with String returns the HTML code and calls the javascript
	 *         function.
	 * @throws Exception
	 *             if operation fails
	 * @exclude
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String deleteEForm(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
			Map<String, String> mReturnMap = new HashMap<String, String>();
			String strTableRowIds[] = (String[]) programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			List<String> slEFormId = new StringList();
			StringBuilder sbEFormRowId = new StringBuilder();
			for (String strRowIds : strTableRowIds) {
				String strRowId = strRowIds;
				TableRowId tr = new TableRowId(strRowId);
				String strDocObjectId = tr.getObjectId();
				slEFormId.add(strDocObjectId);
				sbEFormRowId.append(strRowId).append(";");
			}
			String[] strArreForm = new String[slEFormId.size()];
			((StringList) slEFormId).copyInto(strArreForm);
			StringList sListInValidEForm = eFormService.deleteEForms(context, strArreForm);

			StringBuilder sbJavascript = new StringBuilder();
			if (sListInValidEForm.size() > 0) {
				String strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.CannotDeleteEForm",
						new String[] { sListInValidEForm.toString() }, null, context.getLocale(), QuestionnaireConstants.QUESTION_STRING_RESOURCE);
				return QuestionUtil.encodeFunctionForJavaScript(context, false, "alertMessage", strMessage);
			}
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshParent");

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * This method update EForm Owner
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @throws Exception
	 *             if operation fails
	 * @exclude
	 */
	public void updateEFormOwnership(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.PARAMMAP);
			String streFormId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);
			String strOwnerName = (String) paramMap.get(QuestionnaireConstants.NEW_VALUE);// value
			DomainObject dObj = DomainObject.newInstance(context, streFormId);
			eFormService.changeEFormOwner(context, dObj, strOwnerName);
			String strSubjectKey = "enoQuestionnaire.Notification.eFormOwnerChange.Subject";
			String strMsgKey = "enoQuestionnaire.Notification.eFormOwnerChange.Body";
			QuestionUtil.sendActualNotificationToUser(context, streFormId, strSubjectKey, strMsgKey, new StringList(strOwnerName), null,
					new String[] {});

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	/**
	 * This method check the access to create EForm
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            returns true if user has access to create EForm false if user
	 *            does not have access to create EForm
	 * @throws Exception
	 *             if operation fails
	 * @exclude
	 */
	public boolean canCreateEFormFromEFormTemplate(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			String strPolicyFormalChange = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_FORMAL_CHANGE);
			String strPolicyFastTrackChange = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_FASTTRACK);
			String strPolicyStateInWork = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyFormalChange,
					QuestionnaireConstants.SYMBOLIC_STATE_IN_WORK);
			String strPolicyStateReview = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyFormalChange,
					QuestionnaireConstants.SYMBOLIC_STATE_IN_REVIEW);
			String strPolicyStatePropose = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyFormalChange,
					QuestionnaireConstants.SYMBOLIC_STATE_PROPOSE);
			String strPolicyStatePrepare = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyFormalChange,
					QuestionnaireConstants.SYMBOLIC_STATE_PREPARE);
			String strPolicyChangeRequest = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_CHANGE_REQUEST);
			String strPolicyStateEvaluate = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyChangeRequest,
					QuestionnaireConstants.SYMBOLIC_STATE_EVALUATE);
			StringList slObjectSelect = new StringList();
			slObjectSelect.add(DomainConstants.SELECT_CURRENT);
			slObjectSelect.add(DomainConstants.SELECT_POLICY);
			Map mCOInfo = new HashMap();
			String strCurrentState = DomainObject.EMPTY_STRING;
			String strPolicy = DomainObject.EMPTY_STRING;
			String strDclAction = (String) programMap.get("questionAction");// value
			if (UIUtil.isNotNullAndNotEmpty(strObjectId)) {
				mCOInfo = QuestionUtil.getInfo(context, strObjectId, slObjectSelect);
				strCurrentState = (String) mCOInfo.get(DomainConstants.SELECT_CURRENT);
				strPolicy = (String) mCOInfo.get(DomainConstants.SELECT_POLICY);

			}
			if ((!UIUtil.isNullOrEmpty(strDclAction) && strDclAction.equalsIgnoreCase("COEForms"))
					&& (((strPolicy.equals(strPolicyFastTrackChange) || strPolicy.equals(strPolicyFormalChange)) && (strPolicyStateInWork
							.equals(strCurrentState)
							|| strPolicyStatePrepare.equals(strCurrentState)
							|| strPolicyStatePropose.equals(strCurrentState) || strPolicyStateReview.equals(strCurrentState))) || (strPolicy
							.equals(strPolicyChangeRequest) && strPolicyStateEvaluate.equals(strCurrentState))))
				return true;
			return false;

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * get All state eForms
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return MapList of EForms
	 * @throws Exception
	 *             if operation fails
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getAllEForms(Context context, String args[]) throws Exception {
		String strPolicyname = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM);
		MapList mlEFormTemplate = new MapList();
		MapList mlFinalEFormTemplate = new MapList();
		try {
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
			StringBuilder sbWhere = new StringBuilder().append(DomainConstants.SELECT_POLICY).append("==\'").append(strPolicyname).append("\'");
		//sbWhere.append("&&").append(DomainConstants.SELECT_OWNER).append("==\'").append(context.getUser()).append("\'");
			mlEFormTemplate = eFormService.getAllEFormTemplate(context, sbWhere.toString());
			String user=context.getUser();
			for(Object oImpactQuestionnaire:mlEFormTemplate)
			{
				Map mImpactQuestionnaire =(Map) oImpactQuestionnaire;
				String strOwnership=(String) mImpactQuestionnaire.get("ownership");
				String strOwner=(String) mImpactQuestionnaire.get(DomainConstants.SELECT_OWNER);
				if (user.equals(strOwner) || (UIUtil.isNotNullAndNotEmpty(strOwnership) && strOwnership.contains(user + "_PRJ"))) {
					mlFinalEFormTemplate.add(mImpactQuestionnaire);
				}
			}
			
		}
		catch (Exception e) {
			throw new Exception();
		}
		return mlFinalEFormTemplate;
	}

	/**
	 * Check the modify accessand state of eForm
	 * 
	 * @param context
	 * @param args
	 * @return true if user has access to modify EForm false if user does not
	 *         have modify to create EForm
	 * @throws Exception
	 *             if operation fails
	 */
	//public List<Boolean> checkEditAccesEForm(Context context, String args[]) throws Exception {
	public StringList checkEditAccesEForm(Context context, String args[]) throws Exception {
		try {
			StringList list = new StringList();
			//List<Boolean> list = new ArrayList<Boolean>();
			Map<?, ?> paramMap = (Map<?, ?>) JPO.unpackArgs(args);
			MapList mobjectList = (MapList) paramMap.get(QuestionnaireConstants.OBJECTLIST);
			Map<?, ?> columnMap = (Map<?, ?>) paramMap.get("columnMap");
			String strColName = (String) columnMap.get("name");
			boolean boolAssigneeCheck = false;
			String strEFormPolicy = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM);
			String strEFormTemplatePolicy = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM_TEMPLATE);

			StringList strStateComplete = new StringList(PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strEFormPolicy,
					QuestionnaireConstants.SYMBOLIC_STATE_COMPLETE));
			strStateComplete.add(PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strEFormTemplatePolicy,
					QuestionnaireConstants.SYMBOLIC_STATE_ACTIVE));
			strStateComplete.add(PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strEFormTemplatePolicy,
					QuestionnaireConstants.SYMBOLIC_STATE_OBSOLETE));
			for (Object mObjectMap : mobjectList) {
				Map<String, String> ObjectMap = (Map<String, String>) mObjectMap;
				String strState = DomainObject.EMPTY_STRING;
				String strObjectId = ObjectMap.get(DomainConstants.SELECT_ID);
				strState = ObjectMap.get(DomainConstants.SELECT_CURRENT);

				ArrayList<String> alPerson = new ArrayList<String>();
				alPerson.add(context.getUser().toString());
				ArrayList<String> alAccess = new ArrayList<String>();
				alAccess.add("read");
				ArrayList<String> alNoPersonAccess = AccessUtil.hasAccess(context, strObjectId, alPerson, alAccess);

				if (strColName.equals("Assignee")) {
					boolAssigneeCheck = !alNoPersonAccess.contains(context.getUser().toString())
							&& DomainObject.newInstance(context, strObjectId).checkAccess(context, (short) AccessConstants.cChangeOwner)
							&& !strStateComplete.contains(strState);
					list.add(String.valueOf(boolAssigneeCheck));
					continue;
				}
				if (alNoPersonAccess.contains(context.getUser().toString()))
					list.add(String.valueOf(false));
				else if (DomainObject.newInstance(context, strObjectId).checkAccess(context, (short) AccessConstants.cModify)
						&& !strStateComplete.contains(strState))
					list.add(String.valueOf(true));
				else
					list.add(String.valueOf(false));
			}
			return list;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * This method is used to get list of Preliminary state eForm
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return MapList of Preliminary state eForm
	 * @throws Exception
	 *             if operation fails
	 * @exclude
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getPreliminaryEForm(Context context, String args[]) throws Exception {
		String strPolicyname = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM);
		String strPreliminaryState = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyname,
				QuestionnaireConstants.SYMBOLIC_STATE_PRELIMINARY);
		String strInWorkState = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyname,
				QuestionnaireConstants.SYMBOLIC_STATE_IN_WORK);
		MapList mlEFormTemplate = new MapList();
		MapList mlFinalEFormTemplate = new MapList();
		try {
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
			StringBuilder sbWhere = new StringBuilder().append("(").append(DomainConstants.SELECT_CURRENT).append("==\'").append(strPreliminaryState)
					.append("\'");
			sbWhere.append(" || ").append(DomainConstants.SELECT_CURRENT).append("==\'").append(strInWorkState).append("\')");
			mlEFormTemplate = eFormService.getAllEFormTemplate(context, sbWhere.toString());
			String user = context.getUser();
			for (Object oImpactQuestionnaire : mlEFormTemplate) {
				Map mImpactQuestionnaire = (Map) oImpactQuestionnaire;
				String strOwnership = (String) mImpactQuestionnaire.get("ownership");
				String strOwner = (String) mImpactQuestionnaire.get(DomainConstants.SELECT_OWNER);
				if (user.equals(strOwner) || (UIUtil.isNotNullAndNotEmpty(strOwnership) && strOwnership.contains(user + "_PRJ"))) {
					mlFinalEFormTemplate.add(mImpactQuestionnaire);
				}
			}

		}
		catch (Exception e) {
			throw new Exception();
		}
		return mlFinalEFormTemplate;

	}

	/**
	 * This method is used to get list of complete eForm Templates
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return MapList of inactive eForm Templates
	 * @throws Exception
	 *             if operation fails
	 * @exclude
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getCompleteEForm(Context context, String args[]) throws Exception {
		String strPolicyname = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM);
		String strActiveStateName = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyname,
				QuestionnaireConstants.SYMBOLIC_STATE_COMPLETE);
		MapList mlEFormTemplate = new MapList();
		MapList mlFinalEFormTemplate = new MapList();
		try {
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
			StringBuilder sbWhere = new StringBuilder().append(DomainConstants.SELECT_CURRENT).append("==\'").append(strActiveStateName).append("\'");
			// sbWhere.append("&&").append(DomainConstants.SELECT_OWNER).append("==\'").append(context.getUser()).append("\'");
			mlEFormTemplate = eFormService.getAllEFormTemplate(context, sbWhere.toString());
			String user = context.getUser();
			for (Object oImpactQuestionnaire : mlEFormTemplate) {
				Map mImpactQuestionnaire = (Map) oImpactQuestionnaire;
				String strOwnership = (String) mImpactQuestionnaire.get("ownership");
				String strOwner = (String) mImpactQuestionnaire.get(DomainConstants.SELECT_OWNER);
				if (user.equals(strOwner) || (UIUtil.isNotNullAndNotEmpty(strOwnership) && strOwnership.contains(user + "_PRJ"))) {
					mlFinalEFormTemplate.add(mImpactQuestionnaire);
				}
			}

		}
		catch (Exception e) {
			throw new Exception();
		}
		return mlFinalEFormTemplate;

	}

	/**
	 * Get the list of attributes to be added on th eForm Template
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return MapList of Attributes
	 * @throws Exception
	 *             if operation fails
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getAttributeList(Context context, String args[]) throws Exception {
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			String strTypeFilter = null;
			String strNameMatches = DomainConstants.QUERY_WILDCARD;
			String strDoFilter = (String) programMap.get("questionAction");
			if (UIUtil.isNotNullAndNotEmpty(strDoFilter)) {
				strNameMatches = (String) programMap.get("QuestionAttributeNameMatches");
				strTypeFilter = (String) programMap.get("QuestionAttributeType");
			}

			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			List<Map> mlAddedRelatedAttributes = getEFormAddedAttributes(context, strObjectId);
			MapList mlRelatedAttributes = new MapList();

			String strAllAttrData = QuestionUtil.mqlCommand(context, "list attribute $1 where $2 select $3 $4 $5 dump $6 recordsep $7", true,
					strNameMatches, "owner==\"\"", "name", "type", "hidden", "@", "|").trim();

			String strDueDate = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_DueDate);
			String strTaskRequirement = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_TaskRequirement);
			List<String> slAllAttrRows = FrameworkUtil.split(strAllAttrData, "|");

			for (String row : slAllAttrRows) {
				StringList strAttrTokens = FrameworkUtil.split(row, "@");
				if (strAttrTokens.size() != 3) {
					continue;
				} // @ or | in attributes descr }
				String strName = (String) strAttrTokens.get(0);
				String strType = (String) strAttrTokens.get(1);
				String strHidden = (String) strAttrTokens.get(2);

				if (strName.contains("/"))
					continue;

				if (strName.equals(strDueDate))
					continue;
				if (strName.equals(strTaskRequirement))
					continue;

				// Skip hidden attributes
				if (strHidden.equalsIgnoreCase(QuestionnaireConstants.TRUE))
					continue;

				if (UIUtil.isNotNullAndNotEmpty(strTypeFilter) && !strTypeFilter.equals(DomainConstants.QUERY_WILDCARD)
						&& !strTypeFilter.toUpperCase().trim().equals(strType.toUpperCase().trim()))
					continue;
				Map mAttribute = new HashMap();
				mAttribute.put(DomainConstants.SELECT_ID, strName);
				mlRelatedAttributes.add(mAttribute);

			}
			MapList mTempAttr = new MapList();
			mTempAttr.addAll(mlRelatedAttributes);
			for (Object mAttribute : mTempAttr) {
				Map mAttr = (Map) mAttribute;
				if (mlAddedRelatedAttributes.contains(mAttr))
					mlRelatedAttributes.remove(mAttr);
			}

			return mlRelatedAttributes;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	private List<Map> getEFormAddedAttributes(Context context, String strObjectId) throws Exception {
		try {
			List<Map> mlRelatedAttributes = new MapList();
			String result = QuestionUtil.mqlCommand(context, "print bus $1 select attribute $2 dump $3", true, strObjectId, "interface.attribute",
					",");
			if (UIUtil.isNotNullAndNotEmpty(result)) {
				List<String> slAttributesName = FrameworkUtil.split(result.trim(), ",");
				for (String strAttributeName : slAttributesName) {
					HashMap objectMap = new HashMap();
					if (strAttributeName != null && !strAttributeName.trim().equals("") && !strAttributeName.trim().equals("null")) {
						objectMap.put(DomainConstants.SELECT_ID, strAttributeName.trim());
						mlRelatedAttributes.add(objectMap);
					}
				}
			}
			return mlRelatedAttributes;
		}
		catch (Exception ex) {
			throw new Exception(ex.getLocalizedMessage());
		}
	}

	/**
	 * GIve the list of eForms attribute that are added on eForm
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return MapList of attribiutes information
	 * @throws Exception
	 *             if Operation fails
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getEFormAttributes(Context context, String[] args) throws Exception {
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);

			MapList mlReturnList = new MapList();

			String strResult = QuestionUtil.mqlCommand(context, "print bus  $1 select $2 dump $3", false, strObjectId, "interface.attribute", ",");

			if (UIUtil.isNotNullAndNotEmpty(strResult)) {
				mlReturnList = new MapList();
				List<String> sListAttribute = FrameworkUtil.split(strResult, ",");
				for (String attrName : sListAttribute) {
					Map objectMap = new HashMap();
					if (UIUtil.isNotNullAndNotEmpty(attrName)) {
						objectMap.put(DomainConstants.SELECT_ID, attrName.trim());
						mlReturnList.add(objectMap);
					}

				}
			}
			return mlReturnList;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	/**
	 * add attributes on eForm
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return Map with String returns the HTML code and calls the javascript
	 *         function.
	 * @throws Exception
	 *             if Operation fails
	 */
	public String addEFormAttributes(Context context, String[] args) throws Exception {
		try {
			Map programMap = (Map) JPO.unpackArgs(args);

			String[] strObjectId = (String[]) programMap.get(QuestionnaireConstants.OBJECTID);
			String[] strEmxTableRowIds = (String[]) programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			if (null != strEmxTableRowIds) {
				List<String> slAttrId = new StringList();
				for (String strRowIds : strEmxTableRowIds) {
					String strRowId = strRowIds;
					TableRowId tr = new TableRowId(strRowId);
					String strQuesId = tr.getObjectId();
					slAttrId.add(strQuesId);

				}
				ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
				eFormService.addEFormAttributes(context, strObjectId[0], slAttrId);
			}
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "closeTopWindowAndRefresh");
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * remove attribute from eForm
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return Map with String returns the HTML code and calls the javascript
	 *         function.
	 * @throws Exception
	 *             if Operation fails
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String removeInterfaceAttributes(Context context, String[] args) throws Exception {
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			Map mReturnMap = new HashMap();
			String[] strObjectId = (String[]) programMap.get(QuestionnaireConstants.OBJECTID);
			String[] strEmxTableRowIds = (String[]) programMap.get(QuestionnaireConstants.EMX_TABLE_ROW_ID);
			List<String> slAttrId = new StringList();
			for (String strRowIds : strEmxTableRowIds) {
				String strRowId = strRowIds;
				TableRowId tr = new TableRowId(strRowId);
				String strQuesId = tr.getObjectId();
				slAttrId.add(strQuesId);

			}
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
			eFormService.removeInterfaceAttributes(context, strObjectId[0], slAttrId);

			return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshParent");

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	/**
	 * Filter the attributes on the basis of Name matches
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return Map with String returns the HTML code and calls the javascript
	 *         function.
	 * @throws Exception
	 *             if operation fails
	 */
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String filterAttributes(Context context, String[] args) throws Exception {
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			Map mReturnMap = new HashMap();
			String[] strDoFilter = (String[]) programMap.get("questionAction");
			String[] strParentOID = (String[]) programMap.get(QuestionnaireConstants.OBJECTID);
			String[] strnameMatches = (String[]) programMap.get("QuestionAttributeNameMatches");
			String[] strTypeFilter = (String[]) programMap.get("QuestionAttributeType");
			String[] sTableName = (String[]) programMap.get("table");
			StringBuilder sbJavascript = new StringBuilder();
			sbJavascript.append("parent.resetParameter(\"questionAction\",\"" + XSSUtil.encodeForJavaScript(context, strDoFilter[0]) + "\");\n");
			sbJavascript.append("parent.resetParameter(\"QuestionAttributeNameMatches\",\"" + XSSUtil.encodeForJavaScript(context, strnameMatches[0])
					+ "\");\n");
			sbJavascript.append("parent.resetParameter(\"QuestionAttributeType\",\"" + XSSUtil.encodeForJavaScript(context, strTypeFilter[0])
					+ "\");\n");

			sbJavascript.append("parent.resetParameter(\"parentOID\",\"" + XSSUtil.encodeForJavaScript(context, strParentOID[0]) + "\");\n");
			sbJavascript.append("parent.resetParameter(\"submitLabel\",\"emxFramework.Common.Done\");\n");
			sbJavascript.append("parent.resetParameter(\"cancelLabel\",\"emxFramework.Common.Cancel\");\n");
			sbJavascript.append("parent.refreshSBTable(\"" + XSSUtil.encodeForJavaScript(context, sTableName[0]) + "\",\"Name\",\"ascending\");\n");
			mReturnMap.put(QuestionnaireConstants.ACTION_JAVASCRIPT, sbJavascript.toString());
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "filterAttribute", strDoFilter[0], strnameMatches[0], strTypeFilter[0],
					strParentOID[0], sTableName[0]);
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * Column type program to display attribute names
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return String list of attributes name
	 * @throws Exception
	 *             if operation fails
	 */
	public List<String> getAttributeName(Context context, String[] args) throws Exception {

		try {
			List<String> slColumnValues = new StringList();
			Map programMap = (Map) JPO.unpackArgs(args);
			MapList mlObjList = (MapList) programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map paramList = (Map) programMap.get(QuestionnaireConstants.PARAMLIST);
			String strReportFormat = (String) paramList.get(QuestionnaireConstants.REPORTFORMAT);
			Map map;
			String strLanguageStr = ((String) ((Map) programMap.get(QuestionnaireConstants.PARAMLIST)).get(QuestionnaireConstants.LANGUAGE_STR));
			for (Object objMap : mlObjList) {
				map = (Map) objMap;
				AttributeType att = new AttributeType((String) map.get(DomainConstants.SELECT_ID));
				StringBuilder sbI18nAttributeName = new StringBuilder();
				String strAttrName = EnoviaResourceBundle.getAttributeI18NString(context, att.getName(), strLanguageStr);
				if (UIUtil.isNullOrEmpty(strReportFormat) && UIUtil.isNotNullAndNotEmpty(strAttrName)) {
					sbI18nAttributeName.append("<img align=\"top\" SRC=\"images/iconSmallAttribute.gif\"></img><span class='object'>");
					sbI18nAttributeName.append(strAttrName);
					sbI18nAttributeName.append("</span>");
				}
				else
					sbI18nAttributeName.append(strAttrName);
				((StringList) slColumnValues).addElement(sbI18nAttributeName.toString());
			}
			return slColumnValues;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	/**
	 * Column type program to display attribute type
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return String list of attributes type
	 * @throws Exception
	 *             if operation fails
	 */
	public List<String> getAttributeType(Context context, String[] args) throws Exception {

		try {
			List<String> slColumnValues = new StringList();
			Map programMap = (Map) JPO.unpackArgs(args);
			MapList mlObjList = (MapList) programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map map;
			String strLanguageStr = ((String) ((Map) programMap.get(QuestionnaireConstants.PARAMLIST)).get(QuestionnaireConstants.LANGUAGE_STR));
			for (Object objMap : mlObjList) {
				map = (Map) objMap;
				AttributeType att = new AttributeType((String) map.get(DomainConstants.SELECT_ID));
				att.open(context);
				String strI18nAttributeType = EnoviaResourceBundle.getAttributeTypeI18NString(context, att.getName(), strLanguageStr);
				((StringList) slColumnValues).addElement(strI18nAttributeType);
				att.close(context);
			}
			return slColumnValues;
		}
		catch (Exception ex) {

			throw new Exception(ex.getLocalizedMessage());
		}

	}

	/**
	 * Column type program to display attribute description
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return Stringlist of attributes description
	 * @throws Exception
	 *             if operation fails
	 */
	public List<String> getAttributeDescription(Context context, String[] args) throws Exception {

		try {
			List<String> slColumnValues = new StringList();
			Map programMap = (Map) JPO.unpackArgs(args);
			MapList mlObjList = (MapList) programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map map;
			for (Object objMap : mlObjList) {
				map = (Map) objMap;
				AttributeType att = new AttributeType((String) map.get(DomainConstants.SELECT_ID));
				att.open(context);
				((StringList) slColumnValues).addElement(att.getDescription());
				att.close(context);
			}
			return slColumnValues;
		}
		catch (Exception ex) {
			throw new Exception(ex.getLocalizedMessage());
		}

	}

	/**
	 * Column type program to display attribute value
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return String list of attributes value
	 * @throws Exception
	 *             if operation fails
	 */
	public List<String> getAttributeDefaultValue(Context context, String[] args) throws Exception {

		try {
			List<String> slColumnValues = new StringList();
			Map programMap = (Map) JPO.unpackArgs(args);
			MapList mlObjList = (MapList) programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map map;
			for (Object objMap : mlObjList) {
				map = (Map) objMap;
				AttributeType att = new AttributeType((String) map.get(DomainConstants.SELECT_ID));
				att.open(context);
				((StringList) slColumnValues).addElement(att.getDefaultValue());
				att.close(context);
			}
			return slColumnValues;
		}
		catch (Exception ex) {
			throw new Exception(ex.getLocalizedMessage());
		}

	}

	/**
	 * get the data type of attributes type
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return Map with String returns the HTML code and calls the javascript
	 *         function.
	 * @throws Exception
	 *             if Operation fails
	 */
	public Map<String, List<String>> getAttributeTypes(Context context, String[] args) throws Exception {
		try {
			Map<String, List<String>> rangeMap = new HashMap();
			String strFrameworkI18NResourceBundle = "emxFrameworkStringResource";

			String strAttrTypeFilterBoolean = EnoviaResourceBundle.getProperty(context, strFrameworkI18NResourceBundle, context.getLocale(),
					"emxFramework.Attribute.Type.boolean");
			String strAttrTypeFilterTimestamp = EnoviaResourceBundle.getProperty(context, strFrameworkI18NResourceBundle, context.getLocale(),
					"emxFramework.Attribute.Type.timestamp");
			String strAttrTypeFilterInteger = EnoviaResourceBundle.getProperty(context, strFrameworkI18NResourceBundle, context.getLocale(),
					"emxFramework.Attribute.Type.integer");
			String strAttrTypeFilterReal = EnoviaResourceBundle.getProperty(context, strFrameworkI18NResourceBundle, context.getLocale(),
					"emxFramework.Attribute.Type.real");
			String strAttrTypeFilterString = EnoviaResourceBundle.getProperty(context, strFrameworkI18NResourceBundle, context.getLocale(),
					"emxFramework.Attribute.Type.string");
			String strAll = EnoviaResourceBundle.getProperty(context, "emxComponentsStringResource", context.getLocale(), "emxComponents.Common.All");

			List<String> slFieldChoices = new StringList();
			List<String> slFieldDisplayChoices = new StringList();
			slFieldChoices.add(DomainConstants.QUERY_WILDCARD);
			slFieldChoices.add("boolean");
			slFieldChoices.add("timestamp");
			slFieldChoices.add("integer");
			slFieldChoices.add("real");
			slFieldChoices.add("string");

			slFieldDisplayChoices.add(strAll);
			slFieldDisplayChoices.add(strAttrTypeFilterBoolean);
			slFieldDisplayChoices.add(strAttrTypeFilterTimestamp);
			slFieldDisplayChoices.add(strAttrTypeFilterInteger);
			slFieldDisplayChoices.add(strAttrTypeFilterReal);
			slFieldDisplayChoices.add(strAttrTypeFilterString);

			rangeMap.put("field_choices", slFieldChoices);
			rangeMap.put("field_display_choices", slFieldDisplayChoices);
			return rangeMap;
		}
		catch (Exception ex) {
			throw new Exception(ex.getLocalizedMessage());
		}

	}

	/**
	 * Revise the eForm Template
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return Map with String returns the HTML code and calls the javascript
	 *         function.
	 * @throws Exception
	 *             if Operation fails
	 */
	public String reviseEForm(Context context, String[] args) throws Exception {
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			Map mReturn = new HashMap();
			String[] strObjectId = (String[]) programMap.get(QuestionnaireConstants.OBJECTID);
			DomainObject domObj = DomainObject.newInstance(context, strObjectId[0]);
			ImpactQuestionnaireService eFormService = new ImpactQuestionnaireServiceImpl();
			String strLastRevisionId = eFormService.reviseEForm(context, domObj);
			String str = " var frame=findFrame(getTopWindow(),\"detailsDisplay\");";
			str += "frame.document.location.href=\"../common/emxTree.jsp?&objectId=" + XSSUtil.encodeForJavaScript(context, strLastRevisionId)
					+ "\";";

			return QuestionUtil.encodeFunctionForJavaScript(context, false, "revise", strLastRevisionId);
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	/**
	 * Method to check the access to revise
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return true if in active state and the lates revision else false
	 * @throws Exception
	 *             if Operation fails
	 */
	public boolean canReviseEForm(Context context, String[] args) throws Exception {
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			String strPolicyname = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM_TEMPLATE);
			String strActiveState = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyname,
					QuestionnaireConstants.SYMBOLIC_STATE_ACTIVE);
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			List<String> slSelects = new StringList();
			slSelects.add(DomainConstants.SELECT_REVISION);
			slSelects.add(DomainConstants.SELECT_CURRENT);
			slSelects.add("last.revision");
			Map mEFormtemplateInfo = QuestionUtil.getInfo(context, strObjectId, slSelects);
			String strCurrentRevision = mEFormtemplateInfo.get(DomainConstants.SELECT_REVISION).toString();
			String strLastRevision = mEFormtemplateInfo.get("last.revision").toString();
			String strState = mEFormtemplateInfo.get(DomainConstants.SELECT_CURRENT).toString();
			if (strCurrentRevision.equals(strLastRevision) && strState.equals(strActiveState))
				return true;
			else
				return false;

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * Method to create eForm from eForm Template
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @throws Exception
	 *             if operation fails
	 */
	public void createEFormTemplateFromEForm(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = JPO.unpackArgs(args);
			Map requestMap = (Map) programMap.get(QuestionnaireConstants.REQUESTMAP);
			Map paramMap = (Map) programMap.get(QuestionnaireConstants.PARAMMAP);
			String streFormId = (String) requestMap.get("eFormOID");
			String strNewObjectId = (String) paramMap.get(QuestionnaireConstants.NEW_OBJECTID);
			String strObjectId = (String) requestMap.get(QuestionnaireConstants.OBJECTID);
			ConfigureApprovalService confgApprovalService = new ConfigureApprovalServiceImpl();
			confgApprovalService.connectEFormToEFormTemplate(context, strObjectId, streFormId, strNewObjectId);
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * SHow eForm status depending on the due date of eForm
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return List of status on the basis of object
	 * @throws Exception
	 *             if Operation fails
	 */
	public List<String> showEFormDueDateStatus(Context context, String[] args) throws Exception {
		try {
			String strPolicyname = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM);
			String strAttrDueDate = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_DueDate);
			String strStateComplete = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, strPolicyname,
					QuestionnaireConstants.SYMBOLIC_STATE_COMPLETE);
			List<String> slDueDateStatus = new StringList();
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			SimpleDateFormat sdf = new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat(), Locale.US);
			List<Map> mobjectList = (MapList) programMap.get(QuestionnaireConstants.OBJECTLIST);
			for (Map mEForm : mobjectList) {
				String strDueDate = (String) mEForm.get(DomainObject.getAttributeSelect(strAttrDueDate));
				String strCurrentState = (String) mEForm.get(DomainConstants.SELECT_CURRENT);
				StringBuilder sb = new StringBuilder();
				if (strStateComplete.equals(strCurrentState)) {
					sb.append("<img border=\"0\" src=\"../common/images/iconActionComplete.gif\"></img>");
					slDueDateStatus.add(sb.toString());
				}
				else if (UIUtil.isNotNullAndNotEmpty(strDueDate)) {
					Date todayDate = new Date();
					String strCD = sdf.format(todayDate);
					SimpleDateFormat sdf1 = new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat());
					java.util.Date d1 = sdf1.parse(strCD);
					java.util.Date d2 = sdf1.parse(strDueDate);
					QuestionUtil.cleanTime(d1);
					QuestionUtil.cleanTime(d2);
					Long timeStatus1 = d1.getTime() - d2.getTime();
					Long timeStatus2 = d2.getTime() - d1.getTime();
					int iDifference1 = (int) (timeStatus1 / (1000 * 60 * 60 * 24));
					int iDifference2 = (int) (timeStatus2 / (1000 * 60 * 60 * 24));

					if (iDifference2 >= 0 && iDifference2 <= 5) {
						sb.append("<img border=\"0\" src=\"../common/images/iconStatusYellow.gif\" ></img>");
						slDueDateStatus.add(sb.toString());
					}
					else if (iDifference2 < 0) {
						sb.append("<img border=\"0\" src=\"../common/images/iconStatusRed.gif\" ></img>");
						slDueDateStatus.add(sb.toString());
					}
					else if (iDifference2 > 5) {
						sb.append("<img border=\"0\" src=\"../common/images/iconStatusGreen.gif\"></img>");
						slDueDateStatus.add(sb.toString());
					}
				}
				else
					slDueDateStatus.add(DomainConstants.EMPTY_STRING);

			}
			return slDueDateStatus;

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	/**
	 * Get list of all revision of eForm Templates
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return MapList of eFormTemplate
	 * @throws Exception
	 *             if operation fails
	 */
	@com.matrixone.apps.framework.ui.ProgramCallable
	public MapList getEFormAllRevisions(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			DomainObject dobj = DomainObject.newInstance(context, strObjectId);
			StringList sList = new StringList();
			sList.addElement(DomainConstants.SELECT_ID);
			sList.addElement(DomainConstants.SELECT_NAME);
			sList.addElement(DomainConstants.SELECT_REVISION);
			sList.addElement(DomainConstants.SELECT_ORIGINATED);
			MapList revisionsList = dobj.getRevisionsInfo(context, sList, new StringList(0));
			return revisionsList;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	/**
	 * Hide AttributeExtension command once the eForms are created from eForm
	 * template
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return true and false
	 * @throws Exception
	 *             if operation fails
	 */
	public boolean hideAttributeExtension(Context context, String[] args) throws Exception {
		Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
		String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
		String strRelEFormTemplate = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_RELATIONSHIP_EFORM_TEMPLATE);

		List<String> slSelects = new StringList();
		slSelects.add(DomainConstants.SELECT_REVISION);
		slSelects.add("last.revision");
		slSelects.add("to[" + strRelEFormTemplate + "].from.id");
		Map mEFormtemplateInfo = QuestionUtil.getInfo(context, strObjectId, slSelects);
		String strCurrentRevision = mEFormtemplateInfo.get(DomainConstants.SELECT_REVISION).toString();
		String strLastRevision = mEFormtemplateInfo.get("last.revision").toString();
		Object oEFormRef = mEFormtemplateInfo.get("to[" + strRelEFormTemplate + "].from.id");
		if (oEFormRef != null || !strCurrentRevision.equals(strLastRevision))
			return false;
		else
			return true;

	}

	/**
	 * Get the name of EFormTemplate from which eForm was created
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 * @return
	 * @throws Exception
	 *             if operation fails
	 */
	public String getEFormTemplateFormEForm(Context context, String[] args) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.PARAMMAP);
			String strObjectId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);
			String strRelEFormTemplate = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_RELATIONSHIP_EFORM_TEMPLATE);
			StringList slSelects = new StringList();
			slSelects.add("from[" + strRelEFormTemplate + "].to.name");
			slSelects.add("from[" + strRelEFormTemplate + "].to.revision");
			Map<String, String> mEForm = QuestionUtil.getInfo(context, strObjectId, slSelects);
			String strName = mEForm.get("from[" + strRelEFormTemplate + "].to.name");
			String strRev = mEForm.get("from[" + strRelEFormTemplate + "].to.revision");
			return strName + " rev " + strRev;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}



	public String getDefaultValue1(Context context, String args[]) throws Exception {
		Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
		Map fieldMap = (Map) programMap.get("fieldMap");
		Map settingsMap = (Map) fieldMap.get("settings");
		String defaultValue = (String) settingsMap.get("Default1");
		String inputType = (String) settingsMap.get("Input Type");
		if (UIUtil.isNullOrEmpty(defaultValue))
			defaultValue = "";
		defaultValue = defaultValue.replace(",", " | ");
		return defaultValue;
	}


	public void updateOrganizationOfEFormTemplate(Context context, String args[]) throws FrameworkException {
		try {
			Map programMap = (HashMap) JPO.unpackArgs(args);
			Map paramMap = (Map) programMap.get("paramMap");
			String strObjectId = (String) paramMap.get("objectId");
			String strNewValue = (String) paramMap.get("New Value");
			DomainObject dObj = DomainObject.newInstance(context, strObjectId);
			QuestionUtil.mqlCommand(context, "mod bus $1 organization $2", true, strObjectId, strNewValue);
		}
		catch (Exception e) {
			throw new FrameworkException(e);
		}
	}

	@com.matrixone.apps.framework.ui.PreProcessCallable
	public void checkEditAccessOnEForm(Context context, String args[]) throws FrameworkException {
		try {
			Map programMap = JPO.unpackArgs(args);
			Map requestMap = (Map) programMap.get("requestMap");
			Map<?, ?> formMap = (Map<?, ?>) programMap.get("formMap");
			MapList formFieldList = (MapList) formMap.get("fields");
			String strObjectId = (String) requestMap.get("parentOID");
			DomainObject dObj = DomainObject.newInstance(context, strObjectId);
			String strOwner = dObj.getInfo(context, DomainObject.SELECT_OWNER);
			String strCurrent = dObj.getInfo(context, DomainObject.SELECT_CURRENT);
			String strPolicy = dObj.getInfo(context, DomainObject.SELECT_POLICY);
			String StrEFormTemplatePolicy = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM_TEMPLATE);
			String StrEForm = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM);
			if (!(strOwner.equals(context.getUser()) && strCurrent.equals("Inactive") && strPolicy.equals(StrEFormTemplatePolicy))) {
				for (Object map : formFieldList) {
					Map fieldMap = (Map) map;
					String strFieldName = (String) fieldMap.get(DomainObject.SELECT_NAME);
					if (strFieldName.equals("Responsible Organization") || strFieldName.equals("Responsible Role")) {
						Map settingMap = (Map) fieldMap.get("settings");
						settingMap.put("Editable", "false");
					}
				}
			}
			if (strPolicy.equals(StrEForm)) {
				for (Object map : formFieldList) {
					Map fieldMap = (Map) map;
					String strFieldName = (String) fieldMap.get(DomainObject.SELECT_NAME);
					if (strFieldName.equals("eForm Requirement")) {
						Map settingMap = (Map) fieldMap.get("settings");
						settingMap.put("Editable", "false");
					}
				}
			}

		}
		catch (Exception e) {

		}
	}

	public StringList getResponsibleOrgRange(Context context, String args[]) throws Exception {
		StringList slOrgList = new StringList();
		try {

			String strOrgType = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Organization);
			StringList slBusSelects = new StringList(DomainObject.SELECT_ID);
			slBusSelects.add(DomainObject.SELECT_NAME);

			MapList TraineeDocumentList = new MapList();
			String strCheckState = "==";

			StringBuilder sbWhere = new StringBuilder(); // "current==const'Active'";
			sbWhere.append(DomainObject.SELECT_CURRENT);
			sbWhere.append(strCheckState);
			sbWhere.append("const\"");
			sbWhere.append("Active");
			sbWhere.append("\"");

			List<Map> findObjectMapList = DomainObject.findObjects(context, strOrgType, DomainConstants.QUERY_WILDCARD,
					DomainConstants.QUERY_WILDCARD, DomainConstants.QUERY_WILDCARD, null, sbWhere.toString(), true,
					slBusSelects);
			for (Map mp : findObjectMapList) {
				slOrgList.add((String)mp.get(DomainObject.SELECT_NAME));
			}
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
		return slOrgList;
	}

	public StringList getRoleForOrg(Context context, String args[]) throws Exception {
		StringList slOrgList = new StringList();
		try {

			String strRole = MqlUtil.mqlCommand(context, "list role $1", true, "*");
			List<String> slRoles = FrameworkUtil.split(strRole, System.getProperty("line.separator"));
			for (String str : slRoles) {
				if (UIUtil.isNotNullAndNotEmpty(str))
					slOrgList.add(str);
			}

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
		return slOrgList;
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String updateResponsibleRoleOfEFormTemplate(Context context, String args[]) throws FrameworkException {
		try {
			Map programMap = (HashMap) JPO.unpackArgs(args);
			Map paramMap = (Map) programMap.get("paramMap");
			String strObjectId[] = (String[]) programMap.get("objectId");
			String strNewValue[] = (String[]) programMap.get("emxTableRowIdActual");
			String[] strfieldName = (String[]) programMap.get("fieldName");
			String[] strfieldNameDisplay = (String[]) programMap.get("fieldNameDisplay");
			String[] strfieldNameActual = (String[]) programMap.get("fieldNameActual");
			DomainObject dObj = DomainObject.newInstance(context, strObjectId[0]);
			StringList slRole = FrameworkUtil.split(strNewValue[0], "|");
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "getResponsibleRoleOnTable", (String) slRole.get(0),
					strfieldNameDisplay[0], strfieldNameActual[0]);
		}
		catch (Exception e) {
			throw new FrameworkException(e);
		}
	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String getResponsibleRoleOfEFormTemplate(Context context, String args[]) throws FrameworkException {
		try {
			Map programMap = (HashMap) JPO.unpackArgs(args);
			Map paramMap = (Map) programMap.get("paramMap");
			String strObjectId[] = (String[]) programMap.get("objectId");
			String strNewValue[] = (String[]) programMap.get("emxTableRowIdActual");
			String[] strTableIds = (String[]) programMap.get("emxTableRowId");
			String[] strColumnSel = (String[]) programMap.get("columnSelect");
			StringList slRole = FrameworkUtil.split(strNewValue[0], "|");
			return QuestionUtil.encodeFunctionForJavaScript(context, false, "getResponsibleRoleOnForm", (String) slRole.get(0));
		}
		catch (Exception e) {
			throw new FrameworkException(e);
		}
	}

	public void promoteLastRevisionToObsolete(Context context, String args[]) throws Exception {
		try {
			String strEFormTemplatePolicy = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_EFORM_TEMPLATE);
			String strObjectId = (String) args[0];
			DomainObject dObj = DomainObject.newInstance(context, strObjectId);
			// To promote eForm Template to Obsolete on reviseR
			String strPolicy = dObj.getInfo(context, DomainObject.SELECT_POLICY);
			String strCurrent = dObj.getInfo(context, DomainObject.SELECT_CURRENT);
			if (strPolicy.equals(strEFormTemplatePolicy) && strCurrent.equals(QuestionnaireConstants.ACTIVE))
				dObj.promote(context);
			// to copy questions on last revision to new revision
			copyQuestionToNewRevision(context, strObjectId);
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	private void connectLatestRevisionToQuestionsOnChangeTemplate(Context context, String strObjectId) throws Exception {
		try {
			DomainObject dObj = DomainObject.newInstance(context, strObjectId);
			BusinessObject newRev = dObj.getNextRevision(context);
			DomainObject newRevObj = DomainObject.newInstance(context, newRev);
			QuestionService questionService = new QuestionServiceImpl();
			QuestionUtil.ensureNotEmpty(strObjectId, "Object id is null");
			String strTypeQuestion = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Question);
			String strRelQues = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_relationship_Question);
			String strAttrQuestionResponse = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RESPONSE);
			StringList slObjectSelects = new StringList();
			slObjectSelects.add(DomainConstants.SELECT_ID);
			slObjectSelects.add(DomainConstants.SELECT_NAME);
			slObjectSelects.add(DomainConstants.SELECT_TYPE);

			StringList slRelSelects = new StringList();
			slRelSelects.add(DomainRelationship.SELECT_ID);

			List<Map> mlRelatedObjects = DomainObject.newInstance(context, strObjectId).getRelatedObjects(context, strRelQues, // String
																																// relPattern
					strTypeQuestion, // String typePattern
					slObjectSelects, // List<String> objectSelects,
					slRelSelects, // List<String> relationShipselect,
					true, // boolean getTo,
					false, // boolean getFrom,
					(short) 1, // short recurseToLevel,
					null, // String objectWhere,
					null, // String relationshipWhere,
					0); // int limit

			for (Map mp : mlRelatedObjects) {
				String strQuestionResponseVal = DomainRelationship.getAttributeValue(context, (String) mp.get("id[connection]"),
						strAttrQuestionResponse);
				String[] strQuestionsIds = { (String) mp.get("id") };
				Map mRelIds = DomainRelationship.connect(context, newRevObj, new RelationshipType(strRelQues), false, strQuestionsIds);
				for (Iterator iterator = mRelIds.keySet().iterator(); iterator.hasNext();) {
					Object objKey = (Object) iterator.next();
					String strRelId = (String) mRelIds.get(objKey);
					DomainRelationship drQuestion = DomainRelationship.newInstance(context, strRelId);
					if (UIUtil.isNotNullAndNotEmpty(strQuestionResponseVal))
						drQuestion.setAttributeValue(context, strAttrQuestionResponse, strQuestionResponseVal);
					DomainRelationship.disconnect(context, (String) mp.get("id[connection]"));
				}

			}
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	private void copyQuestionToNewRevision(Context context, String strObjectId) throws Exception {
		try {
			String strAttrSequenceOrder = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_SEQUENCE_ORDER);
			String attributeQuestionCategory = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_CATEGORY);
			String attributeQuestionText = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_COMMENT);
			String strAttrQuestionRangeType = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_TYPE);
			String strAttrQuestionRangeValue = PropertyUtil.getSchemaProperty(context,
					QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_QUESTION_RANGE_VALUES);

			DomainObject dObj = DomainObject.newInstance(context, strObjectId);
			BusinessObject newRev = dObj.getNextRevision(context);
			DomainObject newRevObj = DomainObject.newInstance(context, newRev);
			QuestionService questionService = new QuestionServiceImpl();
			List<Map> questionOnLastRev = questionService.getQuestionRelatedObjects(context, strObjectId, "Question", (short) 1, "", "");
			for (Map mp : questionOnLastRev) {
				Map attrMap = new HashMap();
				attrMap.put(attributeQuestionCategory, (String) mp.get(DomainObject.getAttributeSelect(attributeQuestionCategory)));
				attrMap.put(attributeQuestionText, (String) mp.get(DomainObject.getAttributeSelect(attributeQuestionText)));
				attrMap.put(strAttrQuestionRangeType, (String) mp.get(DomainObject.getAttributeSelect(strAttrQuestionRangeType)));
				attrMap.put(strAttrQuestionRangeValue, (String) mp.get(DomainObject.getAttributeSelect(strAttrQuestionRangeValue)));

				String strNewObjectId = FrameworkUtil.autoName(context, DomainSymbolicConstants.SYMBOLIC_type_Question,
						DomainSymbolicConstants.SYMBOLIC_policy_Question);
				DomainObject dobjObject = DomainObject.newInstance(context, strNewObjectId);
				dobjObject.setAttributeValues(context, attrMap);
				dobjObject.setDescription(context, (String) mp.get(DomainObject.SELECT_DESCRIPTION));
				DomainRelationship doRel = DomainRelationship.connect(context, newRevObj, "Question", dobjObject);
				doRel.setAttributeValue(context, strAttrSequenceOrder, (String) mp.get(DomainRelationship.getAttributeSelect(strAttrSequenceOrder)));
			}
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String getTemplateDetails(Context context, String[] args) throws Exception {
		try {

			Map<String, String> mpReturn = new HashMap<String, String>();
			Map hmParamMap = (Map) JPO.unpackArgs(args);
			String[] strTemplate = (String[]) hmParamMap.get("templateOID");
			String strTemplateOID = strTemplate[0];

			String strOrg = DomainConstants.EMPTY_STRING;
			String strRole = DomainConstants.EMPTY_STRING;
			String strTaskRequirement = DomainConstants.EMPTY_STRING;
			String strAttrResponsibleRole = "attribute["
					+ PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_RESPONSIBLE_ROLE) + "]";

			String strAttrTaskRequirementSelect = "attribute["
					+ PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_ATTRIBUTE_TASK_REQUIREMENT) + "]";

			if (UIUtil.isNotNullAndNotEmpty(strTemplateOID)) {

				StringList slSelect = new StringList();

				slSelect.add(strAttrResponsibleRole);
				slSelect.add(DomainConstants.SELECT_ORGANIZATION);
				slSelect.add(strAttrTaskRequirementSelect);

				Map<String, String> mTempInfo = QuestionUtil.getInfo(context, strTemplateOID, slSelect);

				strRole = mTempInfo.get(strAttrResponsibleRole);
				strOrg = mTempInfo.get(DomainConstants.SELECT_ORGANIZATION);
				strTaskRequirement = mTempInfo.get(strAttrTaskRequirementSelect);
			}

			StringBuffer sBuff = new StringBuffer("Ajax$");
			sBuff.append(strRole).append("|");
			sBuff.append(strOrg).append("|");
			sBuff.append(strTaskRequirement).append("|");

			return sBuff.toString();
		}
		catch (Exception e) {
			throw new Exception();
		}
	}

	public MapList getCOEForms(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strObjectId = (String) programMap.get(QuestionnaireConstants.OBJECTID);
			ImpactQuestionnaireService changeOrderService = new ImpactQuestionnaireServiceImpl();
			MapList mlEForms = changeOrderService.getCOEForms(context, strObjectId);

			DomainObject dobj = DomainObject.newInstance(context, strObjectId);

			String strTypeChangeOrder = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_ORDER);
			String strRelChangeOrder = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_RELATIONSHIP_CHANGE_ORDER);
			String strAttrTaskrequirement = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_TaskRequirement);
			String strStateComplete = PropertyUtil.getSchemaProperty(context, "policy", PropertyUtil.getSchemaProperty(context, "policy_eForm"),QuestionnaireConstants.SYMBOLIC_STATE_COMPLETE);

			if (dobj.isKindOf(context, strTypeChangeOrder)) {
				String strCRId = dobj.getInfo(context, "to[" + strRelChangeOrder + "].from.id");
				if (UIUtil.isNotNullAndNotEmpty(strCRId))
 {
					List<Map> mlCREForms = changeOrderService.getCOEForms(context, strCRId);
					for (Map mCREform : mlCREForms) {
						String strTaskRequirement = (String) mCREform.get(DomainObject.getAttributeSelect(strAttrTaskrequirement));
						String strIsComplete = (String) mCREform.get("current");
						if (strTaskRequirement.equals(QuestionnaireConstants.OPTIONAL.toString()) && !strIsComplete.equals(strStateComplete))
							mlEForms.add(mCREform);
					}
				}
			}
			return mlEForms;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}

	}

	public List<String> getEFormTableAttributeValues(Context context, String[] args) throws Exception {

		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			List<Map> mobjectList = (MapList) programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map mColumnMap = (Map) programMap.get("columnMap");
			String strName = (String) mColumnMap.get(DomainConstants.SELECT_NAME);
			String strSelect = DomainConstants.EMPTY_STRING;
			Map paramList = (Map) programMap.get(QuestionnaireConstants.PARAMLIST);
			String strReportFormat = (String) paramList.get(QuestionnaireConstants.REPORTFORMAT);

			String strAttrDueDate = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_DueDate);
			String strPolicyFormalChange = PropertyUtil.getSchemaProperty(context, QuestionnaireConstants.SYMBOLIC_POLICY_FORMAL_CHANGE);
			String strAttrTaskRequirement = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_TaskRequirement);
			String strRelRelatedChangePackageItem = PropertyUtil.getSchemaProperty(context,
					QuestionnaireConstants.SYMBOLIC_RELATIONSHIP_RELATED_CHANGE_PACKAGE_ITEM);
			switch (strName) {
			case "Name":
				strSelect = DomainConstants.SELECT_NAME;
				break;
			case "State":
				strSelect = DomainConstants.SELECT_CURRENT;
				break;
			case "Description":
				strSelect = DomainConstants.SELECT_DESCRIPTION;
				break;
			case "eForm Requirement":
				strSelect = DomainObject.getAttributeSelect(strAttrTaskRequirement);
				break;
			case "DueDate":
				strSelect = DomainObject.getAttributeSelect(strAttrDueDate);
				break;
			case "Reference":
				strSelect = "to[" + strRelRelatedChangePackageItem + "].from.name";
				break;
			case "owner":
				strSelect = DomainConstants.SELECT_OWNER;
				break;

			}
			List<String> slEFormValue = new StringList();
			for (Map mEForm : mobjectList) {
				String strId = (String) mEForm.get(DomainConstants.SELECT_ID);
				String strPolicy = (String) mEForm.get(DomainConstants.SELECT_POLICY);
				String strSelectValue = QuestionUtil.getInfo(context, strId, strSelect);

				if (strName.equals("eForm Requirement") && UIUtil.isNotNullAndNotEmpty(strSelectValue))
					strSelectValue = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),
							"emxFramework.Range.Task_Requirement." + strSelectValue);

				if (strName.equals("State")) {
					strPolicy = UIUtil.isNotNullAndNotEmpty(strPolicy) ? strPolicy : strPolicyFormalChange.replace(" ", "_");
					// strPolicy=PropertyUtil.getSchemaProperty(context,
					// QuestionnaireConstants.SYMBOLIC_POLICY_EFORM);
					strSelectValue = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),
							"emxFramework.State." + strPolicy + "." + strSelectValue);
				}
				StringBuffer sbLink = new StringBuffer();
				if (UIUtil.isNullOrEmpty(strReportFormat) && UIUtil.isNotNullAndNotEmpty(strSelectValue) && strName.equals("Reference")) {
					String strCOIDSelect = "to[" + strRelRelatedChangePackageItem + "].from.id";
					String strCOtypeIcon = EnoviaResourceBundle.getProperty(context, "emxFramework.smallIcon."
							+ QuestionnaireConstants.SYMBOLIC_TYPE_CHANGE_ORDER);

					String strCOId = QuestionUtil.getInfo(context, strId, strCOIDSelect);
					sbLink.append("<img src = \"images/").append(strCOtypeIcon).append("\"/>&#160;");
					sbLink.append("<a href=\"JavaScript:showNonModalDialog('emxTree.jsp?objectId=");
					sbLink.append(XSSUtil.encodeForJavaScript(context, strCOId));
					sbLink.append("', '930', '650', 'true')\"> ");
					sbLink.append(strSelectValue);
					sbLink.append("</a>");
				}
				else if (UIUtil.isNotNullAndNotEmpty(strSelectValue))
					sbLink.append(strSelectValue);
				strSelectValue = sbLink.toString();
				slEFormValue.add(strSelectValue);
			}

			return slEFormValue;
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public void updateEFormAttributes(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strAttrDueDate = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_DueDate);

			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.PARAMMAP);
			String streFormId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);
			String strOwnerName = (String) paramMap.get(QuestionnaireConstants.NEW_VALUE);// value

			TimeZone tz = TimeZone.getTimeZone(context.getSession().getTimezone());
			double dbMilisecondsOffset = (double) (-1) * tz.getRawOffset();
			double clientTZOffset = (new Double(dbMilisecondsOffset / (1000 * 60 * 60))).doubleValue();
			String strDate = QuestionUtil.getDateinEmatrixFormat(context, strOwnerName, String.valueOf(clientTZOffset));
			DomainObject dobj = DomainObject.newInstance(context, streFormId);
			dobj.setAttributeValue(context, strDate, strAttrDueDate);
		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * This method will return complete name of the Person object with link on
	 * the name and Icon of Person
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object
	 * @param args
	 *            holds no value
	 * @return Vector containing complete names of the owner
	 * @throws FrameworkException
	 *             if the operation fails
	 * @exclude
	 */
	public List<String> getOwnerLink(Context context, String[] args) throws FrameworkException {
		// Unpacking the args
		Map programMap;
		try {
			programMap = (Map) JPO.unpackArgs(args);

			// Gets the objectList from args
			MapList mlObjectList = (MapList) programMap.get(QuestionnaireConstants.OBJECTLIST);
			Map paramList = (Map) programMap.get(QuestionnaireConstants.PARAMLIST);
			String strReportFormat = (String) paramList.get(QuestionnaireConstants.REPORTFORMAT);
			List<String> lLinks = new StringList();
			// Getting the bus ids for objects in the table
			for (Object object : mlObjectList) {
				Map map = (Map) object;
				String strName = (String) map.get(CommonDocument.SELECT_OWNER);
				if (UIUtil.isNotNullAndNotEmpty(strName)) {
					String strPerson = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Person);
					String strOwnerBus = MqlUtil.mqlCommand(context, "temp query bus $1 $2 $3 select $4 $5", true, strPerson, strName, "-", "id",
							"dump");
					if (UIUtil.isNotNullAndNotEmpty(strOwnerBus)) {
						String strOwnerId = PersonUtil.getPersonObjectID(context, strName);
						strName = PersonUtil.getFullName(context, strName);
						if (UIUtil.isNullOrEmpty(strReportFormat) && UIUtil.isNotNullAndNotEmpty(strName)) {
							strName = QuestionUtil.getObjectLink(context, strOwnerId, strName);
						}
					}
				}
				lLinks.add(strName);
			}

			return lLinks;
		}
		catch (Exception ex) {
			throw new FrameworkException(ex.getMessage());
		}
	}

	@com.matrixone.apps.framework.ui.PostProcessCallable
	public Map postProcessRefreshTable(Context context, String[] args) throws Exception {
		try {
			Map mapReturn = new HashMap();
			mapReturn.put("Action", "refresh");
			return mapReturn;
		}
		catch (Exception ex) {
			throw new Exception(ex.getLocalizedMessage());
		}
	}

	public void updateEFormDescription(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.PARAMMAP);
			String streFormId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);
			String strDescription = (String) paramMap.get(QuestionnaireConstants.NEW_VALUE);// value
			DomainObject dObj = DomainObject.newInstance(context, streFormId);
			dObj.setDescription(context, strDescription);

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	public void updateEFormRequirement(Context context, String args[]) throws Exception {
		try {
			Map<?, ?> programMap = (Map<?, ?>) JPO.unpackArgs(args);
			String strAttrTaskRequirement = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_TaskRequirement);
			Map<?, ?> paramMap = (Map<?, ?>) programMap.get(QuestionnaireConstants.PARAMMAP);
			String streFormId = (String) paramMap.get(QuestionnaireConstants.OBJECTID);
			String strEFormRequirement = (String) paramMap.get(QuestionnaireConstants.NEW_VALUE);// value
			DomainObject dobj = DomainObject.newInstance(context, streFormId);
			dobj.setAttributeValue(context, strEFormRequirement, strAttrTaskRequirement);

		}
		catch (Exception e) {
			throw new Exception(e.getLocalizedMessage());
		}
	}

	/**
	 * programHTMLOutput Method is used to get the link of owner
	 * 
	 * @param context
	 *            the ENOVIA <code>Context</code> object.
	 * @param args
	 *            holds packed arguments
	 * @return String returns the HTML code to dispaly link for owner
	 * @throws Exception
	 *             if operation fails
	 * @exclude
	 */
	public String getOwnerFieldLink(Context context, String[] args) throws Exception {
		String strOwnerLink = DomainConstants.EMPTY_STRING;
		StringBuilder sbOwner = new StringBuilder(256);
		try {
			Map mpProgram = (Map) JPO.unpackArgs(args);
			Map mpParam = (Map) mpProgram.get("paramMap");
			Map mpRequest = (Map) mpProgram.get(QuestionnaireConstants.REQUESTMAP);
			String strReportFormat = (String) mpRequest.get(QuestionnaireConstants.REPORTFORMAT);
			String strPFMode = (String) mpRequest.get("PFmode");

			StringList slObjectSelect = new StringList();
			slObjectSelect.add(DomainConstants.SELECT_OWNER);
			Map mDocInfo = QuestionUtil.getInfo(context, (String) mpParam.get("objectId"), slObjectSelect);

			String strName = (String) mDocInfo.get(DomainConstants.SELECT_OWNER);
			if (UIUtil.isNotNullAndNotEmpty(strName)) {
				String strOwnerBus = QuestionUtil.mqlCommand(context, "temp query bus $1 $2 $3 select $4 $5", true, "Person", strName, "-", "id",
						"dump");
				if (UIUtil.isNotNullAndNotEmpty(strOwnerBus)) {
					String strOwnerId = PersonUtil.getPersonObjectID(context, strName);
					strName = PersonUtil.getFullName(context, strName);
					if (UIUtil.isNullOrEmpty(strReportFormat) && UIUtil.isNotNullAndNotEmpty(strName)) {
						strName = QuestionUtil.getObjectLink(context, strOwnerId, strName);
					}
				}

			}
			return strName != null ? strName : "";
		}
		catch (Exception e) {
			throw new Exception(e);
		}
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String preProcessImportQuestions(Context context, String[] args) throws Exception 
	{
		
		Map programMap = JPO.unpackArgs(args);
		
		String objectId=(String)programMap.get("objectId");
		
		final StringList QUESTION_RESPONSE_TYPE=new StringList();
		QUESTION_RESPONSE_TYPE.add("Checkbox");
		QUESTION_RESPONSE_TYPE.add("Listbox");
		QUESTION_RESPONSE_TYPE.add("Combobox");
		QUESTION_RESPONSE_TYPE.add("Radio Button");
		QUESTION_RESPONSE_TYPE.add("Textbox");
		QUESTION_RESPONSE_TYPE.add("TextArea");

		
		final String QUESTION_TYPE="Question";

		final String QUESTION_STATE_ACTIVE="Active";
		final String QUESTION_STATE_INACTIVE="Inactive";

		String invalidCharactersStr = EnoviaResourceBundle.getProperty(context, "emxFramework.Javascript.NameBadChars");
		invalidCharactersStr = invalidCharactersStr.replaceAll("\\s+", "");
		StringBuffer invalidCharacters = new StringBuffer(invalidCharactersStr);
		
		List<String> slErrorList = new StringList();

		boolean headerCorrected = false;
		
		String header = "yes";
		
		String delimiterName = "comma";
		char delimiter;
		String blankLine = null;
		if (delimiterName.equals("comma")) {
			delimiter = ',';
			blankLine = ",,,";
		}
		else {
			delimiter = '\t';
			blankLine = "\t\t\t";
		}

		boolean errors = false;
		
		File inputFile = (File) programMap.get("FilePath");
															
		String fileName = null;
		List<Map> mlImportQuestions = new MapList();
		HashMap validUserMap = new HashMap();
		MapList errorList = null;
		if (inputFile == null) {
			fileName = (String) programMap.get("fileName");
			mlImportQuestions = (MapList) programMap.get("importList");
			errorList = new MapList();
		}
		else {
			fileName = inputFile.getName();
			if (!fileName.endsWith(".csv")) {
				
			}
			if (inputFile.length() == 0) {

			}

			String AcceptLanguage = context.getLocale().toString();
		}
		
		String curLine="";
		
		String fileEncodeType = "iso-8859-1";
		FileInputStream fis = new FileInputStream(inputFile);
		int lineCount = fis.read();
		if (lineCount == -1) {
			String message = "Invalid File";
			throw new Exception(message);
		}
		InputStreamReader isr = new InputStreamReader(fis, fileEncodeType);
		BufferedReader myInput = new BufferedReader(isr);

		if (header.equals("yes")) {
			curLine = myInput.readLine();
		}

		int curLineCount=1;
		while ((curLine = myInput.readLine()) != null) 
		{
			curLineCount++;
			
			HashMap mpQuestion = new HashMap();
			
			if (curLine.equals(blankLine) || "".equals(curLine.trim())) {
			
				mpQuestion.put("DESCRIPTION", "");
				mpQuestion.put("RESPONSE TYPE", "");
				mpQuestion.put("RESPONSE RANGE","");
				mpQuestion.put("COMMENT", "");
				continue;
			}
			String arrColumns[]=new String[4];
			arrColumns=curLine.split(",");
			
			if(arrColumns.length<4)
				arrColumns=Arrays.copyOf(arrColumns,4);
			
			if(UIUtil.isNotNullAndNotEmpty(arrColumns[0]))
			{
			mpQuestion.put("DESCRIPTION", arrColumns[0]);
			}
			else
			{
				String strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotImportQuestions.DescriptionCannotBeBlank",
						new String[] {curLineCount+""}, null, context.getLocale(),
						QuestionnaireConstants.QUESTION_STRING_RESOURCE);
				return "alert(\""+strMessage+"\");top.close()";
			}
			
			String quesResponseType=arrColumns[1];
			if(QUESTION_RESPONSE_TYPE.contains(quesResponseType))
			{
				mpQuestion.put("RESPONSE TYPE",quesResponseType);
			}
			else
			{
				String strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotImportQuestions.InvalidQuestionResponse",
						new String[] {curLineCount+""}, null, context.getLocale(),
						QuestionnaireConstants.QUESTION_STRING_RESOURCE);
				return "alert(\""+strMessage+"\");top.close()";
			}
			
			int level;
			
			String strResponseRange=arrColumns[2];
			
				
			if(!(quesResponseType.equals("TextArea") || quesResponseType.equals("Textbox")))
			{
				if(UIUtil.isNullOrEmpty(strResponseRange))
				{
					String strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotImportQuestions.RangeValueCannotBeBlankFor",
							new String[] {curLineCount+""}, null, context.getLocale(),
							QuestionnaireConstants.QUESTION_STRING_RESOURCE);
					return "alert(\""+strMessage+"\");top.close()";
				}
				String arrValues[];
				if(strResponseRange.contains("|"))
				{
					int count = strResponseRange.length() - strResponseRange.replace("|", "").length()+1;
					arrValues= strResponseRange.split("\\|");
					
					if(arrValues.length<count)
						arrValues= Arrays.copyOf(arrValues, count);
					
					boolean boolFlag=false;
					
					for(int i=0;i<arrValues.length;i++)
					{
						if(UIUtil.isNullOrEmpty(arrValues[i]))
						{
							boolFlag=true;
							break;
						}
			}
					if(arrValues.length==0 || boolFlag)
			{
				String strMessage = MessageUtil.getMessage(context, null, "enoQuestionnaire.Alert.Msg.CannotImportQuestions.InvalidResponseRange",
						new String[] {curLineCount+""}, null, context.getLocale(),
						QuestionnaireConstants.QUESTION_STRING_RESOURCE);
				return "alert(\""+strMessage+"\");top.close()";
					}
				}
				mpQuestion.put("RESPONSE RANGE", strResponseRange);
			}

			
			if(arrColumns.length==4)
				mpQuestion.put("COMMENT", arrColumns[3]);
			else
				mpQuestion.put("COMMENT", "");

			mlImportQuestions.add(mpQuestion);
		}
		return importQuestions(context,objectId, mlImportQuestions);
	}
	
	private String importQuestions(Context context, String objectid, List<Map> mlImport) throws Exception
	{
		QuestionService questionService= new QuestionServiceImpl();
	
		DomainObject domObj=DomainObject.newInstance(context,objectid);
		
		List<Question> lsQuestions=new ArrayList<Question>();
		Iterator itr=mlImport.iterator();
		
		for(Map mpQuestion : mlImport)
		{
			Map<?,?> mNewObj = (Map<?,?>)mpQuestion;
			
			String strQuestionDescription=(String)mpQuestion.get("DESCRIPTION");
			String strQuestionComment=(String)mpQuestion.get("COMMENT");
			String strQuesResponseType=(String)mpQuestion.get("RESPONSE TYPE");
			String strResponseRange=(String)mpQuestion.get("RESPONSE RANGE");
			
			
			TableRowId rowId = new TableRowId("", "" ,objectid, "");
			
			QuestionServiceImpl questionServiceImpl=new QuestionServiceImpl();
			Question question = questionServiceImpl.new Question(rowId, strQuestionDescription, "", strQuestionComment, "Descriptive",
					strQuesResponseType, strResponseRange);
			lsQuestions.add(question);
		}
		
		List<Question> lQuestion = questionService.createQuestionForEForm(context, lsQuestions);
		
		return QuestionUtil.encodeFunctionForJavaScript(context, false, "refreshFrameAfterImport");
		
	}
	
	@com.dassault_systemes.enovia.questionnaire.ExecuteCallable
	public String exportQuestions(Context context,String[] args) throws Exception
	{
		Map programMap = JPO.unpackArgs(args);
		String objectid=((String[])programMap.get("objectId"))[0];
		String csrfTokenName=((String[])programMap.get("csrfTokenName"))[0];
		String csrfToken=((String[])programMap.get(csrfTokenName))[0];
		
		QuestionService questionService= new QuestionServiceImpl();
		
		List<Map> lRelatedQuestionsMap = questionService.getQuestionRelatedObjects(context, objectid, "Question", (short) 1, "", "");
		questionService.sortMapListOnSequenceOrder(context, (MapList) lRelatedQuestionsMap);
		ArrayList arrLevels=new ArrayList();
		
		lRelatedQuestionsMap=getWellFormedQuestionMapList(lRelatedQuestionsMap);
		String timestamp=writeExportQuestionFile(context, lRelatedQuestionsMap);
		
		return QuestionUtil.encodeFunctionForJavaScript(context, false, "redirectExportToDownloadServlet",timestamp,csrfTokenName,csrfToken);
	}
	
	private MapList getWellFormedQuestionMapList(List<Map> mlQuestion)
	{
		MapList retMapList=new MapList();
		Iterator itr=mlQuestion.iterator();
		int i=0;
		while(itr.hasNext())
		{
			Map<?,?> mpQuestion=(Map<?,?>)itr.next();
			
			Map<String,String> mpPut=new HashMap<String,String>();
			
			mpPut.put("DESCRIPTION", (String)mpQuestion.get("description"));
			mpPut.put("RESPONSE TYPE", (String)mpQuestion.get("attribute[Question Range Type]"));
			mpPut.put("COMMENT", (String)mpQuestion.get("attribute[Comment]"));
			mpPut.put("RESPONSE RANGE", (String)mpQuestion.get("attribute[Question Range Values]"));
			retMapList.add(mpPut);
		}
		return retMapList;
		
	}

	private String writeExportQuestionFile(Context context,List<Map> questions) throws Exception
	{
		String serverFolder = Environment.getValue(context, "MATRIXINSTALL");
		String strPath = serverFolder+File.separator+context.getWorkspacePath();
		
		String fileName=EnoviaResourceBundle.getProperty(context, "enoQuestionnaireStringResource", context.getLocale(),"enoQuestionnaire.Export.QuestionExportFileName");

		File outFile=null;

		String timestamp=""+new Date().getTime();
		String tempFileName=fileName;
		
		outFile=new File(strPath,fileName+"-"+timestamp+".csv");
		if(outFile.exists())
			outFile.delete();
		
		PrintWriter out = new PrintWriter(new FileOutputStream(outFile));
		try
		{

			Iterator itr=questions.iterator();
			StringBuilder line=new StringBuilder("Description,Response Type,Response Range,Comment");
			out.println(line);

			while(itr.hasNext())
			{
				Map<?,?> mpQuestion=(Map<?,?>)itr.next();
				line=new StringBuilder("");
				line.append(mpQuestion.get("DESCRIPTION"));
				line.append(",");
				line.append(mpQuestion.get("RESPONSE TYPE"));
				line.append(",");
				line.append(mpQuestion.get("RESPONSE RANGE"));
				line.append(",");
				line.append(mpQuestion.get("COMMENT"));
				out.println(line);
			}
		}
		catch(Exception ex)
		{
			throw ex;
		}
		finally
		{
			out.close();
		}
		return timestamp;
	}
	
	private void setCustomHistory(Context context, String strObjectId,
			String strEvent, String strFinalDescription) throws Exception {
		
		MqlUtil.mqlCommand(context, "Modify bus $1 add history $2 comment $3",false, strObjectId,strEvent,strFinalDescription);
	}

	public StringList getI18NRoleDescription(Context context, String[] args) throws FrameworkException {
		try {
			Map programMap = (Map) JPO.unpackArgs(args);
			MapList objectList = (MapList) programMap.get("objectList");
			StringList roleDesc = new StringList(objectList.size());
			HashMap paramList = (HashMap) programMap.get("paramList");
			String strLanguage = (String) paramList.get("languageStr");

			for (int i = 0; i < objectList.size(); i++) {
				Map objectMap = (Map) objectList.get(i);
				String id = (String) objectMap.get(DomainConstants.SELECT_ID);
				String name = DomainObject.newInstance(context, id).getInfo(context, DomainConstants.SELECT_NAME);
				roleDesc.add(i18nNow.getRoleDescriptionI18NString(name, strLanguage));
			}
			return roleDesc;
		}
		catch (Exception e) {
			throw new FrameworkException(e);
		}
	}
}

