/*
 ** emxConfigurationRuleBase
 **
 ** Copyright (c) 1992-2018 Dassault Systemes.
 **
 ** All Rights Reserved.
 ** This program contains proprietary and trade secret information of
 ** MatrixOne, Inc.  Copyright notice is precautionary only and does
 ** not evidence any actual or intended publication of such program.
 **
 ** static const char RCSID[] = $Id: /ENOVariantConfigurationBase/CNext/Modules/ENOVariantConfigurationBase/JPOsrc/base/${CLASSNAME}.java 1.6.2.1.1.1 Wed Oct 29 22:27:16 2008 GMT przemek Experimental$
 */

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;

import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;

import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.StringList;

import com.dassault_systemes.enovia.configuration.modeler.Model;
import com.matrixone.apps.configuration.ConfigurableRulesUtil;
import com.matrixone.apps.configuration.ConfigurationConstants;
import com.matrixone.apps.configuration.ConfigurationUtil;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.XSSUtil;
import com.matrixone.apps.effectivity.EffectivityFramework;
import com.matrixone.apps.productline.Product;
import com.matrixone.apps.productline.ProductLineCommon;


/**
 * This JPO class has some method pertaining to Configuration Rule type.
 * @author Enovia MatrixOne
 * @version ProductCentral 10.5 - Copyright (c) 2004, MatrixOne, Inc.
 */
public class ${CLASSNAME} extends ${CLASS:emxDomainObject}
{

/**
  * Default Constructor.
  * @param context the eMatrix <code>Context</code> object
  * @param args holds no arguments
  * @throws Exception if the operation fails
  * @since R418
  * @grade 0
  */
  ${CLASSNAME} (Context context, String[] args) throws Exception
  {
    super(context, args);
  }

 /**
  * Main entry point.
  *
  * @param context the eMatrix <code>Context</code> object
  * @param args holds no arguments
  * @return an integer status code (0 = success)
  * @throws Exception if the operation fails
  * @since R418
  * @grade 0
  */
  public int mxMain(Context context, String[] args) throws Exception
  {
    if (!context.isConnected()){
         String strContentLabel =EnoviaResourceBundle.getProperty(context,
        	        "Configuration","emxProduct.Error.UnsupportedClient",context.getSession().getLanguage());
         throw  new Exception(strContentLabel);
        }
    return 0;
  }

  
    
    /**
     * Method call to get all the configuration Rules in the data base in given context.
     *
     * @param context the eMatrix <code>Context</code> object
     * @param args holds the following input arguments:
     *        0 - HashMap containing one String entry for key "objectId"
     * @return Object - MapList containing the id of Configuration Rule objects
     * @throws Exception if the operation fails
     * @since R418
     * @grade 0
     */
     @com.matrixone.apps.framework.ui.ProgramCallable
     public MapList getAllConfigurationRuleObjects(Context context, String[] args) throws Exception
     {
    	 MapList mlExpressionRules = new MapList();

    	 try {
    		 HashMap reqMap = (HashMap) JPO.unpackArgs(args);
    		 String strProductId = (String)reqMap.get("objectId");
    		 strProductId =  strProductId.trim();//Context Product ID

    		 String strFilterBinary = ConfigurationUtil.getCompiledFilterBinary(context, strProductId);

    		 String strModelId="";
    		 Product productBean = new Product(strProductId);
    		 strModelId = productBean.getModelId(context);
	        
       	StringList objSelects =new StringList(DomainConstants.SELECT_ID);
       	objSelects.add(DomainConstants.SELECT_TYPE);
       	objSelects.add(DomainConstants.SELECT_MODIFIED+".generic");  	
       	StringList relSelects = new StringList(DomainConstants.SELECT_RELATIONSHIP_ID);
       	relSelects.addElement(ConfigurationConstants.SELECT_ATTRIBUTE_MANDATORYRULE);
    		 Model mdoelBean = new Model(strModelId);
    		 mlExpressionRules = mdoelBean.getCfgRules(context, objSelects, relSelects, strFilterBinary,"",ConfigurationConstants.RANGE_VALUE_EXPRESSION_TYPE_MATRIX);
    		 mlExpressionRules.addSortKey(DomainConstants.SELECT_MODIFIED+".generic", "descending", "string");
    		 mlExpressionRules.sortStructure();
    	 } catch (Exception e) {
    		 throw new FrameworkException(e.getMessage());
    	 }     	

    	 return mlExpressionRules;
       }   
       	
     /**
 	 * get formatted expression for Product 
 	 * @param context
 	 * @param contextId
 	 * @return
 	 * @throws Exception
 	 * @since R417.HF12
 	 */
  	private static String getProductRevisionExpression(Context context,String contextId) throws Exception
  	{
  		String modelId = "";
  		String modelPhysicalId = "";
  		String productPhysicalId = "";
  		StringList selList = new StringList();
  		selList.add(DomainObject.SELECT_ID);
  		selList.add(ConfigurationConstants.SELECT_PHYSICAL_ID);
  		selList.add("to[" + ConfigurationConstants.RELATIONSHIP_PRODUCTS + "].from.id");
  		selList.add("to[" + ConfigurationConstants.RELATIONSHIP_PRODUCTS + "].from.physicalid");
        
  		try
  		{		
  			DomainObject domProductBus = new DomainObject(contextId);
  			Map productInfo = domProductBus.getInfo(context, selList);
	    
  			if(productInfo != null && productInfo.size() > 0) {
  				productPhysicalId = (String)productInfo.get(ConfigurationConstants.SELECT_PHYSICAL_ID);
  				Object objModelId = productInfo.get("to[" + ConfigurationConstants.RELATIONSHIP_PRODUCTS + "].from.id");
  				if(objModelId != null)
  				{
  					modelId = (String)objModelId;
  					modelPhysicalId = (String)productInfo.get("to[" + ConfigurationConstants.RELATIONSHIP_PRODUCTS + "].from.physicalid");
  				}else{
  					modelId = (String)productInfo.get("to[" + ConfigurationConstants.RELATIONSHIP_MAIN_PRODUCT + "].from.id");
  					modelPhysicalId = (String)productInfo.get("to[" + ConfigurationConstants.RELATIONSHIP_MAIN_PRODUCT + "].from.physicalid");
  				}
  			}
  		}
  		catch(Exception e)
  		{
  			throw new FrameworkException(e.getMessage());
  		}
       	
  		
  		JsonObjectBuilder jsonObjBuild = Json.createObjectBuilder();
  		jsonObjBuild.add("parentId", modelPhysicalId);
  		jsonObjBuild.add("insertAsRange", false);
  		JsonArrayBuilder jsonArrayBuild = Json.createArrayBuilder();
  		jsonArrayBuild.add(productPhysicalId);
  		JsonArray valuesArray = jsonArrayBuild.build();
  		jsonObjBuild.add("values", valuesArray);
  		JsonObject jsonObj = jsonObjBuild.build();
  		
  		String jsonString = jsonObj.toString();
  		EffectivityFramework effInstance = new EffectivityFramework();
  		Map formatedExpr = effInstance.formatExpression(context, "ProductRevision", jsonString);
  		String strProductRevisionEffExpr = formatedExpr.get(EffectivityFramework.ACTUAL_VALUE).toString();
  		return strProductRevisionEffExpr;
       }
  	
    /**
     * Method call to get all the Expression Rules in the data base in given context.
     *
     * @param context the eMatrix <code>Context</code> object
     * @param args holds the following input arguments:
     *        0 - HashMap containing one String entry for key "objectId"
     * @return Object - MapList containing the id of Configuration Rule objects
     * @throws Exception if the operation fails
     * @since R420.HF2
     */
    @com.matrixone.apps.framework.ui.ProgramCallable
    public MapList getExpressionRules(Context context, String[] args) throws Exception {
   	 MapList mlExpressionRules = new MapList();

   	 try {
   		 HashMap reqMap = (HashMap) JPO.unpackArgs(args);
   		 String strProductId = (String)reqMap.get("objectId");
   		 strProductId =  strProductId.trim();//Context Product ID

   		 String strFilterBinary = ConfigurationUtil.getCompiledFilterBinary(context, strProductId);

   		 String strModelId="";
   		 Product productBean = new Product(strProductId);
   		 strModelId = productBean.getModelId(context);

   		 StringList objSelects =new StringList(DomainConstants.SELECT_ID);
   		 objSelects.add(DomainConstants.SELECT_TYPE);
   		objSelects.add(DomainConstants.SELECT_MODIFIED+".generic");
   		 StringList relSelects = new StringList(DomainConstants.SELECT_RELATIONSHIP_ID);
   		 relSelects.addElement(ConfigurationConstants.SELECT_ATTRIBUTE_MANDATORYRULE);
   		 Model mdoelBean = new Model(strModelId);
   		 mlExpressionRules = mdoelBean.getCfgRules(context, objSelects, relSelects, strFilterBinary,"",ConfigurationConstants.RANGE_VALUE_EXPRESSION_TYPE_BOOLEAN);
		 mlExpressionRules.addSortKey(DomainConstants.SELECT_MODIFIED+".generic", "descending", "string");
		 mlExpressionRules.sortStructure();
   	 } catch (Exception e) {
   		 throw new FrameworkException(e.getMessage());
   	 }     	

   	 return mlExpressionRules;
    }

    /**
     * Column JPO- function to render edit Icon in Configuration Rule summary page-
     * we will read emxProduct.ProductRuleCreation.NotAllowedStates setting if context product in one of this state
     * which will make edit icon read only
     * Also case if Rule is in  not is frozen state- will refer key Configuration.FrozenState.type_ConfigurationRule
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public Vector getEditColumnDisplayInTable(Context context, String[] args)throws Exception {
   	 HashMap programMap = (HashMap) JPO.unpackArgs(args);
   	 MapList objList = (MapList) programMap.get("objectList");
   	 Vector columnVals = new Vector(objList.size());
   	 try {
   		 //get context product id  and Printer Friendly view if it is still valid for SB 
   		 HashMap paramList = (HashMap) programMap.get("paramList");
       	 String strCommandName = (String)paramList.get("portalCmdName");
       	 String strDefaultCategory="";
       	 if("FTRMatrixRulesCommand".equals(strCommandName)){
       		 strDefaultCategory="RuleTable";
       	 }else{
       		 strDefaultCategory="RuleExpression";
       	 }
   		 String parentId="";
   		 String contexId=(String)programMap.get("contextId");
   		 if(contexId==null||((contexId!=null) && contexId.equalsIgnoreCase(""))){
   			 parentId = (String) paramList.get("objectId");
   		 }else{
   			 parentId=contexId;
   		 }
   		 String strLocale = context.getSession().getLanguage();
   		 String title = EnoviaResourceBundle.getProperty(context,"Configuration","emxConfiguration.Title.NotEditableConfRule",strLocale);
            String nonEditableIcon="<img border=\"0\" src=\"images/iconActionLockforEdit.gif\" TITLE=\""
					 +XSSUtil.encodeForXML(context,title)+"\"/>";
   		 //First check if Product is not in Frozen state, if context product is frozen state will not show i
         // need to use Modeler's API to check frozen state.
   		 boolean isContextProductFrozen = ConfigurationUtil.isFrozenState(context,parentId);
   		 if(isContextProductFrozen){
   			 for(int j=0; j<objList.size(); j++){
   				 columnVals.addElement(nonEditableIcon);
   			 }
   		 }else{
   			 //iterate on each Rule Object
   			 Iterator itrRules = objList.iterator();
   			 while (itrRules.hasNext()){
   				 Map mapRule = (Map) itrRules.next();
   				 String strRuleId = (String) mapRule.get(SELECT_ID);
   			// need to use Modeler's API to check frozen state.
   				 boolean isRuleFrozen = ConfigurationUtil.isFrozenState(context,strRuleId);

   				 StringBuffer sbEditLink=new StringBuffer();
   				 sbEditLink.append("<a href=\"javascript:emxTableColumnLinkClick('../common/emxTree.jsp?mode=insert&amp;AppendParameters=true&amp;DefaultCategory=");
   				 sbEditLink.append(strDefaultCategory);
   				 sbEditLink.append("&amp;objectId=");
   				 sbEditLink.append(XSSUtil.encodeForXML(context,strRuleId));
   				 sbEditLink.append("&amp;parentOID=");
   				 sbEditLink.append(XSSUtil.encodeForXML(context,parentId));
   				 sbEditLink.append("', '800', '700', 'true', 'content', '')\"><img border=\"0\" src=\"images/iconActionEdit.gif\" alt=\"\"/></a>");

   				 if (!isRuleFrozen){
   					 columnVals.addElement(sbEditLink.toString());
   				 }
   				 else{
   					 columnVals.addElement(nonEditableIcon);
   				 }
   			 }
   		 }
   	 } catch (Exception e) {
   		 throw new FrameworkException(e.getMessage());
   	 }
   	 return columnVals;
    }     
	/**
	 * This method is used to control the access command EditConfigurationRuleActionLink
	 * @param context
	 *            The ematrix context object
	 * @param String
	 *            The args
	 * @return Boolean
	 */
    public static Boolean isNonFrozenContextProduct(Context context, String[] args)
   		 throws Exception {
   	 boolean bFieldAccess = false;
   	 HashMap requestMap = (HashMap) JPO.unpackArgs(args);
   	 String parentOID = (String)requestMap.get("productID");
   	 if(parentOID==null || parentOID!=null && parentOID.trim().isEmpty()){
   		 parentOID = (String)requestMap.get("parentOID");
   	 }
   	 if(parentOID!=null && !parentOID.trim().equals("")){
   		 // need to use Modeler's API to check frozen state.
   		 boolean isContextProductFrozen = ConfigurationUtil.isFrozenState(context,parentOID);
   		 if(!isContextProductFrozen){
   			 bFieldAccess = true;
   		 }else{
   			 bFieldAccess = false;
   		 }
   	 }
   	 return bFieldAccess;
    }

    /*
     * Update Function
     * 
     */
    public void updateConfigurationRuleDescription(Context context, String arg[]){
    	
    }
    
    /*
     * Update Function
     * 
     */
    public void  updateConfigurationRuleTitle(Context context, String arg[]){
    	
    }
}

